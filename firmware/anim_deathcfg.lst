   1               		.file	"anim_deathcfg.c"
   2               	__SREG__ = 0x3f
   3               	__SP_H__ = 0x3e
   4               	__SP_L__ = 0x3d
   5               	__CCP__  = 0x34
   6               	__tmp_reg__ = 0
   7               	__zero_reg__ = 1
   8               		.global __do_copy_data
   9               		.global __do_clear_bss
  12               		.text
  13               	.Ltext0:
 131               	.global	deathclock_changed
 133               	deathclock_changed:
 134               		.stabd	46,0,0
   0:anim_deathcfg.c **** /* ***************************************************************************
   1:anim_deathcfg.c **** // config.c - the configuration menu handling
   2:anim_deathcfg.c **** // This code is distributed under the GNU Public License
   3:anim_deathcfg.c **** //		which can be found at http://www.gnu.org/licenses/gpl.txt
   4:anim_deathcfg.c **** //
   5:anim_deathcfg.c **** **************************************************************************** */
   6:anim_deathcfg.c **** 
   7:anim_deathcfg.c **** #include <avr/io.h>      // this contains all the IO port definitions
   8:anim_deathcfg.c **** #include <avr/interrupt.h>
   9:anim_deathcfg.c **** #include <util/delay.h>
  10:anim_deathcfg.c **** #include <avr/pgmspace.h>
  11:anim_deathcfg.c **** #include <avr/eeprom.h>
  12:anim_deathcfg.c **** #include <string.h>
  13:anim_deathcfg.c **** #include "util.h"
  14:anim_deathcfg.c **** #include "ratt.h"
  15:anim_deathcfg.c **** #include "ks0108.h"
  16:anim_deathcfg.c **** #include "glcd.h"
  17:anim_deathcfg.c **** #include "deathclock.h"
  18:anim_deathcfg.c **** 
  19:anim_deathcfg.c **** #ifdef DEATHCHRON
  20:anim_deathcfg.c **** 
  21:anim_deathcfg.c **** extern volatile uint8_t displaystyle;
  22:anim_deathcfg.c **** extern volatile uint8_t time_s, time_m, time_h;
  23:anim_deathcfg.c **** extern volatile uint8_t date_m, date_d, date_y;
  24:anim_deathcfg.c **** extern volatile uint8_t alarm_h, alarm_m;
  25:anim_deathcfg.c **** extern volatile uint8_t last_buttonstate, just_pressed, pressed;
  26:anim_deathcfg.c **** extern volatile uint8_t buttonholdcounter;
  27:anim_deathcfg.c **** extern volatile uint8_t region;
  28:anim_deathcfg.c **** extern volatile uint8_t time_format;
  29:anim_deathcfg.c **** extern volatile uint8_t border_tick;
  30:anim_deathcfg.c **** 
  31:anim_deathcfg.c **** volatile uint8_t cfg_dob_d, cfg_dob_m, cfg_dob_y, cfg_gender, cfg_dc_mode, cfg_bmi_unit, cfg_smoker
  32:anim_deathcfg.c **** volatile uint16_t cfg_bmi_height, cfg_bmi_weight;
  33:anim_deathcfg.c **** 
  34:anim_deathcfg.c **** extern volatile uint8_t displaymode;
  35:anim_deathcfg.c **** // This variable keeps track of whether we have not pressed any
  36:anim_deathcfg.c **** // buttons in a few seconds, and turns off the menu display
  37:anim_deathcfg.c **** extern volatile uint8_t timeoutcounter;
  38:anim_deathcfg.c **** 
  39:anim_deathcfg.c **** extern volatile uint8_t screenmutex;
  40:anim_deathcfg.c **** 
  41:anim_deathcfg.c **** void printnumber_3d(uint16_t n, uint8_t inverted) {
  42:anim_deathcfg.c ****   glcdWriteChar(n/100+'0', inverted);
  43:anim_deathcfg.c ****   printnumber(n%100, inverted);
  44:anim_deathcfg.c **** }
  45:anim_deathcfg.c **** 
  46:anim_deathcfg.c **** void deathclock_changed(void) //Any changes to the death clock neccesitates a recalculation of the 
  47:anim_deathcfg.c **** {
 136               	.LM0:
 137               	.LFBB1:
 138 0000 1F93      		push r17
 139 0002 DF93      		push r29
 140 0004 CF93      		push r28
 141 0006 CDB7      		in r28,__SP_L__
 142 0008 DEB7      		in r29,__SP_H__
 143 000a 2897      		sbiw r28,8
 144 000c 0FB6      		in __tmp_reg__,__SREG__
 145 000e F894      		cli
 146 0010 DEBF      		out __SP_H__,r29
 147 0012 0FBE      		out __SREG__,__tmp_reg__
 148 0014 CDBF      		out __SP_L__,r28
 149               	/* prologue: function */
 150               	/* frame size = 8 */
  48:anim_deathcfg.c **** 	uint8_t ee_set_year = date_y + 100;
 152               	.LM1:
 153 0016 6091 0000 		lds r22,date_y
  49:anim_deathcfg.c **** 	uint8_t max_year_diff[4][2] = {{72,78},{57,63},{82,88},{35,38}};
 155               	.LM2:
 156 001a DE01      		movw r26,r28
 157 001c 1196      		adiw r26,1
 158 001e E0E0      		ldi r30,lo8(C.1.1976)
 159 0020 F0E0      		ldi r31,hi8(C.1.1976)
 160 0022 88E0      		ldi r24,lo8(8)
 161               	.L2:
 162 0024 0190      		ld r0,Z+
 163 0026 0D92      		st X+,r0
 164 0028 8150      		subi r24,lo8(-(-1))
 165 002a 01F4      		brne .L2
  50:anim_deathcfg.c **** 	
  51:anim_deathcfg.c **** 	if(((date_y + 100)-cfg_dob_y)>max_year_diff[cfg_dc_mode][cfg_gender]) ee_set_year = cfg_dob_y + ma
 167               	.LM3:
 168 002c 2091 0000 		lds r18,date_y
 169 0030 8091 0000 		lds r24,cfg_dob_y
 170 0034 E091 0000 		lds r30,cfg_dc_mode
 171 0038 9091 0000 		lds r25,cfg_gender
 172 003c 30E0      		ldi r19,lo8(0)
 173 003e 2C59      		subi r18,lo8(-(100))
 174 0040 3F4F      		sbci r19,hi8(-(100))
 175 0042 281B      		sub r18,r24
 176 0044 3109      		sbc r19,__zero_reg__
 177 0046 F0E0      		ldi r31,lo8(0)
 178 0048 EE0F      		lsl r30
 179 004a FF1F      		rol r31
 180 004c E90F      		add r30,r25
 181 004e F11D      		adc r31,__zero_reg__
 182 0050 DE01      		movw r26,r28
 183 0052 1196      		adiw r26,1
 184 0054 EA0F      		add r30,r26
 185 0056 FB1F      		adc r31,r27
 186 0058 8081      		ld r24,Z
 187 005a 90E0      		ldi r25,lo8(0)
 188 005c 8217      		cp r24,r18
 189 005e 9307      		cpc r25,r19
 190 0060 04F0      		brlt .L3
  49:anim_deathcfg.c **** 	uint8_t max_year_diff[4][2] = {{72,78},{57,63},{82,88},{35,38}};
 192               	.LM4:
 193 0062 162F      		mov r17,r22
 194 0064 1C59      		subi r17,lo8(-(100))
 195 0066 00C0      		rjmp .L4
 196               	.L3:
 198               	.LM5:
 199 0068 1091 0000 		lds r17,cfg_dob_y
 200 006c 8091 0000 		lds r24,cfg_dc_mode
 201 0070 2091 0000 		lds r18,cfg_gender
 202 0074 90E0      		ldi r25,lo8(0)
 203 0076 880F      		lsl r24
 204 0078 991F      		rol r25
 205 007a 820F      		add r24,r18
 206 007c 911D      		adc r25,__zero_reg__
 207 007e A80F      		add r26,r24
 208 0080 B91F      		adc r27,r25
 209 0082 8C91      		ld r24,X
 210 0084 180F      		add r17,r24
 211               	.L4:
  52:anim_deathcfg.c **** 	
  53:anim_deathcfg.c **** 	eeprom_write_byte(&EE_SET_MONTH,date_m);
 213               	.LM6:
 214 0086 6091 0000 		lds r22,date_m
 215 008a 80E0      		ldi r24,lo8(EE_SET_MONTH)
 216 008c 90E0      		ldi r25,hi8(EE_SET_MONTH)
 217 008e 0E94 0000 		call __eewr_byte_m328p
  54:anim_deathcfg.c **** 	eeprom_write_byte(&EE_SET_DAY,date_d);
 219               	.LM7:
 220 0092 6091 0000 		lds r22,date_d
 221 0096 80E0      		ldi r24,lo8(EE_SET_DAY)
 222 0098 90E0      		ldi r25,hi8(EE_SET_DAY)
 223 009a 0E94 0000 		call __eewr_byte_m328p
  55:anim_deathcfg.c **** 	eeprom_write_byte(&EE_SET_YEAR,ee_set_year);
 225               	.LM8:
 226 009e 80E0      		ldi r24,lo8(EE_SET_YEAR)
 227 00a0 90E0      		ldi r25,hi8(EE_SET_YEAR)
 228 00a2 612F      		mov r22,r17
 229 00a4 0E94 0000 		call __eewr_byte_m328p
  56:anim_deathcfg.c **** 	eeprom_write_byte(&EE_SET_HOUR,time_h);
 231               	.LM9:
 232 00a8 6091 0000 		lds r22,time_h
 233 00ac 80E0      		ldi r24,lo8(EE_SET_HOUR)
 234 00ae 90E0      		ldi r25,hi8(EE_SET_HOUR)
 235 00b0 0E94 0000 		call __eewr_byte_m328p
  57:anim_deathcfg.c **** 	eeprom_write_byte(&EE_SET_MIN,time_m);
 237               	.LM10:
 238 00b4 6091 0000 		lds r22,time_m
 239 00b8 80E0      		ldi r24,lo8(EE_SET_MIN)
 240 00ba 90E0      		ldi r25,hi8(EE_SET_MIN)
 241 00bc 0E94 0000 		call __eewr_byte_m328p
  58:anim_deathcfg.c **** 	eeprom_write_byte(&EE_SET_SEC,time_s);
 243               	.LM11:
 244 00c0 6091 0000 		lds r22,time_s
 245 00c4 80E0      		ldi r24,lo8(EE_SET_SEC)
 246 00c6 90E0      		ldi r25,hi8(EE_SET_SEC)
 247 00c8 0E94 0000 		call __eewr_byte_m328p
  59:anim_deathcfg.c **** 	load_etd();
 249               	.LM12:
 250 00cc 0E94 0000 		call load_etd
 251               	/* epilogue start */
  60:anim_deathcfg.c **** }
 253               	.LM13:
 254 00d0 2896      		adiw r28,8
 255 00d2 0FB6      		in __tmp_reg__,__SREG__
 256 00d4 F894      		cli
 257 00d6 DEBF      		out __SP_H__,r29
 258 00d8 0FBE      		out __SREG__,__tmp_reg__
 259 00da CDBF      		out __SP_L__,r28
 260 00dc CF91      		pop r28
 261 00de DF91      		pop r29
 262 00e0 1F91      		pop r17
 263 00e2 0895      		ret
 269               	.Lscope1:
 271               		.stabd	78,0,0
 274               	.global	display_smoker
 276               	display_smoker:
 277               		.stabd	46,0,0
  61:anim_deathcfg.c **** 
  62:anim_deathcfg.c **** void display_dob(uint8_t mode)
  63:anim_deathcfg.c **** {
  64:anim_deathcfg.c ****   glcdSetAddress(MENU_INDENT, 1);
  65:anim_deathcfg.c ****   glcdPutStr("Set DOB:  ",NORMAL);
  66:anim_deathcfg.c ****    if (region == REGION_US) {
  67:anim_deathcfg.c ****     printnumber(cfg_dob_m, (mode==SET_MONTH)?INVERTED:NORMAL);
  68:anim_deathcfg.c ****     glcdWriteChar('/', NORMAL);
  69:anim_deathcfg.c ****     printnumber(cfg_dob_d, (mode==SET_DAY)?INVERTED:NORMAL);
  70:anim_deathcfg.c ****   } else {
  71:anim_deathcfg.c ****     printnumber(cfg_dob_d, (mode==SET_DAY)?INVERTED:NORMAL);
  72:anim_deathcfg.c ****     glcdWriteChar('/', NORMAL);
  73:anim_deathcfg.c ****     printnumber(cfg_dob_m, (mode==SET_MONTH)?INVERTED:NORMAL);
  74:anim_deathcfg.c ****   }
  75:anim_deathcfg.c ****   glcdWriteChar('/', NORMAL);
  76:anim_deathcfg.c ****   printnumber((cfg_dob_y+1900)/100, (mode==SET_YEAR)?INVERTED:NORMAL);
  77:anim_deathcfg.c ****   printnumber((cfg_dob_y+1900)%100, (mode==SET_YEAR)?INVERTED:NORMAL);
  78:anim_deathcfg.c **** }
  79:anim_deathcfg.c **** 
  80:anim_deathcfg.c **** void display_gender(uint8_t inverted)
  81:anim_deathcfg.c **** {
  82:anim_deathcfg.c **** 	glcdSetAddress(MENU_INDENT, 2);
  83:anim_deathcfg.c ****   glcdPutStr("Set Gender:   ",NORMAL);
  84:anim_deathcfg.c ****   if(cfg_gender==DC_gender_male)
  85:anim_deathcfg.c ****   	  glcdPutStr("  Male", inverted);
  86:anim_deathcfg.c ****   else
  87:anim_deathcfg.c ****   	  glcdPutStr("Female", inverted);
  88:anim_deathcfg.c **** }
  89:anim_deathcfg.c **** 
  90:anim_deathcfg.c **** void display_dc_mode(uint8_t inverted)
  91:anim_deathcfg.c **** {
  92:anim_deathcfg.c **** 	glcdSetAddress(MENU_INDENT, 3);
  93:anim_deathcfg.c ****   glcdPutStr("Set Mode:", NORMAL);
  94:anim_deathcfg.c ****   if(cfg_dc_mode == DC_mode_normal)
  95:anim_deathcfg.c ****     glcdPutStr("     Normal", inverted);
  96:anim_deathcfg.c ****   else if (cfg_dc_mode == DC_mode_pessimistic)
  97:anim_deathcfg.c ****     glcdPutStr("Pessimistic", inverted);
  98:anim_deathcfg.c ****   else if (cfg_dc_mode == DC_mode_optimistic)
  99:anim_deathcfg.c ****     glcdPutStr(" Optimistic", inverted);
 100:anim_deathcfg.c ****   else
 101:anim_deathcfg.c ****     glcdPutStr("   Sadistic", inverted);
 102:anim_deathcfg.c **** }
 103:anim_deathcfg.c **** 
 104:anim_deathcfg.c **** void display_bmi_set(uint8_t inverted)
 105:anim_deathcfg.c **** {
 106:anim_deathcfg.c ****   glcdSetAddress(MENU_INDENT, 4);
 107:anim_deathcfg.c ****   glcdPutStr("Set ", NORMAL);
 108:anim_deathcfg.c ****   if(cfg_bmi_unit == BMI_Imperial)
 109:anim_deathcfg.c ****   {
 110:anim_deathcfg.c ****   	  glcdPutStr("Imp:", inverted&1);
 111:anim_deathcfg.c ****   	  printnumber_3d(cfg_bmi_weight, inverted&2);
 112:anim_deathcfg.c ****   	  glcdPutStr("lb ", inverted&2);
 113:anim_deathcfg.c ****   	  printnumber(cfg_bmi_height / 12, inverted&4);
 114:anim_deathcfg.c ****   	  glcdPutStr("ft", inverted&4);
 115:anim_deathcfg.c ****   	  printnumber(cfg_bmi_height % 12, inverted&4);
 116:anim_deathcfg.c ****   	  
 117:anim_deathcfg.c ****   }
 118:anim_deathcfg.c ****   else if (cfg_bmi_unit == BMI_Metric)
 119:anim_deathcfg.c ****   {
 120:anim_deathcfg.c ****   	  glcdPutStr("Met:", inverted&1);
 121:anim_deathcfg.c ****   	  glcdWriteChar(' ', NORMAL);
 122:anim_deathcfg.c ****   	  printnumber_3d(cfg_bmi_weight, inverted&2);
 123:anim_deathcfg.c ****   	  glcdPutStr("kg ", inverted&2);
 124:anim_deathcfg.c ****   	  printnumber_3d(cfg_bmi_height, inverted&4);
 125:anim_deathcfg.c ****   	  glcdPutStr("cm", inverted&4);
 126:anim_deathcfg.c ****   }
 127:anim_deathcfg.c ****   else
 128:anim_deathcfg.c ****   {
 129:anim_deathcfg.c ****   	  glcdPutStr("BMI:", inverted&1);
 130:anim_deathcfg.c ****   	  glcdPutStr("         ",NORMAL);
 131:anim_deathcfg.c ****   	  printnumber_3d(cfg_bmi_weight, inverted&2);
 132:anim_deathcfg.c ****   }
 133:anim_deathcfg.c **** }
 134:anim_deathcfg.c **** 
 135:anim_deathcfg.c **** void display_smoker(uint8_t inverted)
 136:anim_deathcfg.c **** {
 279               	.LM14:
 280               	.LFBB2:
 281 00e4 1F93      		push r17
 282               	/* prologue: function */
 283               	/* frame size = 0 */
 284 00e6 182F      		mov r17,r24
 137:anim_deathcfg.c **** 	glcdSetAddress(MENU_INDENT, 5);
 286               	.LM15:
 287 00e8 88E0      		ldi r24,lo8(8)
 288 00ea 65E0      		ldi r22,lo8(5)
 289 00ec 0E94 0000 		call glcdSetAddress
 138:anim_deathcfg.c ****   glcdPutStr("Smoker?:         ", NORMAL);
 291               	.LM16:
 292 00f0 80E0      		ldi r24,lo8(__c.2088)
 293 00f2 90E0      		ldi r25,hi8(__c.2088)
 294 00f4 60E0      		ldi r22,lo8(0)
 295 00f6 0E94 0000 		call glcdPutStr_rom
 139:anim_deathcfg.c ****   if(cfg_smoker)
 297               	.LM17:
 298 00fa 8091 0000 		lds r24,cfg_smoker
 299 00fe 8823      		tst r24
 300 0100 01F0      		breq .L8
 140:anim_deathcfg.c ****   	  glcdPutStr("Yes", inverted);
 302               	.LM18:
 303 0102 80E0      		ldi r24,lo8(__c.2090)
 304 0104 90E0      		ldi r25,hi8(__c.2090)
 305 0106 00C0      		rjmp .L11
 306               	.L8:
 141:anim_deathcfg.c ****   else
 142:anim_deathcfg.c ****   	  glcdPutStr(" No", inverted);
 308               	.LM19:
 309 0108 80E0      		ldi r24,lo8(__c.2092)
 310 010a 90E0      		ldi r25,hi8(__c.2092)
 311               	.L11:
 312 010c 612F      		mov r22,r17
 313 010e 0E94 0000 		call glcdPutStr_rom
 314               	/* epilogue start */
 143:anim_deathcfg.c **** }
 316               	.LM20:
 317 0112 1F91      		pop r17
 318 0114 0895      		ret
 320               	.Lscope2:
 322               		.stabd	78,0,0
 325               	.global	display_dc_mode
 327               	display_dc_mode:
 328               		.stabd	46,0,0
  92:anim_deathcfg.c **** {
 330               	.LM21:
 331               	.LFBB3:
 332 0116 1F93      		push r17
 333               	/* prologue: function */
 334               	/* frame size = 0 */
 335 0118 182F      		mov r17,r24
  93:anim_deathcfg.c **** 	glcdSetAddress(MENU_INDENT, 3);
 337               	.LM22:
 338 011a 88E0      		ldi r24,lo8(8)
 339 011c 63E0      		ldi r22,lo8(3)
 340 011e 0E94 0000 		call glcdSetAddress
  94:anim_deathcfg.c ****   glcdPutStr("Set Mode:", NORMAL);
 342               	.LM23:
 343 0122 80E0      		ldi r24,lo8(__c.2036)
 344 0124 90E0      		ldi r25,hi8(__c.2036)
 345 0126 60E0      		ldi r22,lo8(0)
 346 0128 0E94 0000 		call glcdPutStr_rom
  95:anim_deathcfg.c ****   if(cfg_dc_mode == DC_mode_normal)
 348               	.LM24:
 349 012c 8091 0000 		lds r24,cfg_dc_mode
 350 0130 8823      		tst r24
 351 0132 01F4      		brne .L13
  96:anim_deathcfg.c ****     glcdPutStr("     Normal", inverted);
 353               	.LM25:
 354 0134 80E0      		ldi r24,lo8(__c.2038)
 355 0136 90E0      		ldi r25,hi8(__c.2038)
 356 0138 00C0      		rjmp .L18
 357               	.L13:
  97:anim_deathcfg.c ****   else if (cfg_dc_mode == DC_mode_pessimistic)
 359               	.LM26:
 360 013a 8091 0000 		lds r24,cfg_dc_mode
 361 013e 8130      		cpi r24,lo8(1)
 362 0140 01F4      		brne .L15
  98:anim_deathcfg.c ****     glcdPutStr("Pessimistic", inverted);
 364               	.LM27:
 365 0142 80E0      		ldi r24,lo8(__c.2040)
 366 0144 90E0      		ldi r25,hi8(__c.2040)
 367 0146 00C0      		rjmp .L18
 368               	.L15:
  99:anim_deathcfg.c ****   else if (cfg_dc_mode == DC_mode_optimistic)
 370               	.LM28:
 371 0148 8091 0000 		lds r24,cfg_dc_mode
 372 014c 8230      		cpi r24,lo8(2)
 373 014e 01F4      		brne .L16
 100:anim_deathcfg.c ****     glcdPutStr(" Optimistic", inverted);
 375               	.LM29:
 376 0150 80E0      		ldi r24,lo8(__c.2042)
 377 0152 90E0      		ldi r25,hi8(__c.2042)
 378 0154 00C0      		rjmp .L18
 379               	.L16:
 102:anim_deathcfg.c ****     glcdPutStr("   Sadistic", inverted);
 381               	.LM30:
 382 0156 80E0      		ldi r24,lo8(__c.2044)
 383 0158 90E0      		ldi r25,hi8(__c.2044)
 384               	.L18:
 385 015a 612F      		mov r22,r17
 386 015c 0E94 0000 		call glcdPutStr_rom
 387               	/* epilogue start */
 103:anim_deathcfg.c **** }
 389               	.LM31:
 390 0160 1F91      		pop r17
 391 0162 0895      		ret
 393               	.Lscope3:
 395               		.stabd	78,0,0
 398               	.global	display_gender
 400               	display_gender:
 401               		.stabd	46,0,0
  82:anim_deathcfg.c **** {
 403               	.LM32:
 404               	.LFBB4:
 405 0164 1F93      		push r17
 406               	/* prologue: function */
 407               	/* frame size = 0 */
 408 0166 182F      		mov r17,r24
  83:anim_deathcfg.c **** 	glcdSetAddress(MENU_INDENT, 2);
 410               	.LM33:
 411 0168 88E0      		ldi r24,lo8(8)
 412 016a 62E0      		ldi r22,lo8(2)
 413 016c 0E94 0000 		call glcdSetAddress
  84:anim_deathcfg.c ****   glcdPutStr("Set Gender:   ",NORMAL);
 415               	.LM34:
 416 0170 80E0      		ldi r24,lo8(__c.2026)
 417 0172 90E0      		ldi r25,hi8(__c.2026)
 418 0174 60E0      		ldi r22,lo8(0)
 419 0176 0E94 0000 		call glcdPutStr_rom
  85:anim_deathcfg.c ****   if(cfg_gender==DC_gender_male)
 421               	.LM35:
 422 017a 8091 0000 		lds r24,cfg_gender
 423 017e 8823      		tst r24
 424 0180 01F4      		brne .L20
  86:anim_deathcfg.c ****   	  glcdPutStr("  Male", inverted);
 426               	.LM36:
 427 0182 80E0      		ldi r24,lo8(__c.2028)
 428 0184 90E0      		ldi r25,hi8(__c.2028)
 429 0186 00C0      		rjmp .L23
 430               	.L20:
  88:anim_deathcfg.c ****   	  glcdPutStr("Female", inverted);
 432               	.LM37:
 433 0188 80E0      		ldi r24,lo8(__c.2030)
 434 018a 90E0      		ldi r25,hi8(__c.2030)
 435               	.L23:
 436 018c 612F      		mov r22,r17
 437 018e 0E94 0000 		call glcdPutStr_rom
 438               	/* epilogue start */
  89:anim_deathcfg.c **** }
 440               	.LM38:
 441 0192 1F91      		pop r17
 442 0194 0895      		ret
 444               	.Lscope4:
 446               		.stabd	78,0,0
 449               	.global	display_dob
 451               	display_dob:
 452               		.stabd	46,0,0
  64:anim_deathcfg.c **** {
 454               	.LM39:
 455               	.LFBB5:
 456 0196 0F93      		push r16
 457 0198 1F93      		push r17
 458               	/* prologue: function */
 459               	/* frame size = 0 */
 460 019a 082F      		mov r16,r24
  65:anim_deathcfg.c ****   glcdSetAddress(MENU_INDENT, 1);
 462               	.LM40:
 463 019c 88E0      		ldi r24,lo8(8)
 464 019e 61E0      		ldi r22,lo8(1)
 465 01a0 0E94 0000 		call glcdSetAddress
  66:anim_deathcfg.c ****   glcdPutStr("Set DOB:  ",NORMAL);
 467               	.LM41:
 468 01a4 80E0      		ldi r24,lo8(__c.2003)
 469 01a6 90E0      		ldi r25,hi8(__c.2003)
 470 01a8 60E0      		ldi r22,lo8(0)
 471 01aa 0E94 0000 		call glcdPutStr_rom
  67:anim_deathcfg.c ****    if (region == REGION_US) {
 473               	.LM42:
 474 01ae 8091 0000 		lds r24,region
 475 01b2 8823      		tst r24
 476 01b4 01F4      		brne .L25
  68:anim_deathcfg.c ****     printnumber(cfg_dob_m, (mode==SET_MONTH)?INVERTED:NORMAL);
 478               	.LM43:
 479 01b6 8091 0000 		lds r24,cfg_dob_m
 480 01ba 60E0      		ldi r22,lo8(0)
 481 01bc 0031      		cpi r16,lo8(16)
 482 01be 01F4      		brne .L26
 483 01c0 61E0      		ldi r22,lo8(1)
 484               	.L26:
 485 01c2 0E94 0000 		call printnumber
  69:anim_deathcfg.c ****     glcdWriteChar('/', NORMAL);
 487               	.LM44:
 488 01c6 8FE2      		ldi r24,lo8(47)
 489 01c8 60E0      		ldi r22,lo8(0)
 490 01ca 0E94 0000 		call glcdWriteChar
  70:anim_deathcfg.c ****     printnumber(cfg_dob_d, (mode==SET_DAY)?INVERTED:NORMAL);
 492               	.LM45:
 493 01ce 8091 0000 		lds r24,cfg_dob_d
 494 01d2 60E0      		ldi r22,lo8(0)
 495 01d4 0131      		cpi r16,lo8(17)
 496 01d6 01F4      		brne .L30
 497 01d8 00C0      		rjmp .L33
 498               	.L25:
  72:anim_deathcfg.c ****     printnumber(cfg_dob_d, (mode==SET_DAY)?INVERTED:NORMAL);
 500               	.LM46:
 501 01da 8091 0000 		lds r24,cfg_dob_d
 502 01de 60E0      		ldi r22,lo8(0)
 503 01e0 0131      		cpi r16,lo8(17)
 504 01e2 01F4      		brne .L29
 505 01e4 61E0      		ldi r22,lo8(1)
 506               	.L29:
 507 01e6 0E94 0000 		call printnumber
  73:anim_deathcfg.c ****     glcdWriteChar('/', NORMAL);
 509               	.LM47:
 510 01ea 8FE2      		ldi r24,lo8(47)
 511 01ec 60E0      		ldi r22,lo8(0)
 512 01ee 0E94 0000 		call glcdWriteChar
  74:anim_deathcfg.c ****     printnumber(cfg_dob_m, (mode==SET_MONTH)?INVERTED:NORMAL);
 514               	.LM48:
 515 01f2 8091 0000 		lds r24,cfg_dob_m
 516 01f6 60E0      		ldi r22,lo8(0)
 517 01f8 0031      		cpi r16,lo8(16)
 518 01fa 01F4      		brne .L30
 519               	.L33:
 520 01fc 61E0      		ldi r22,lo8(1)
 521               	.L30:
 522 01fe 0E94 0000 		call printnumber
  76:anim_deathcfg.c ****   glcdWriteChar('/', NORMAL);
 524               	.LM49:
 525 0202 8FE2      		ldi r24,lo8(47)
 526 0204 60E0      		ldi r22,lo8(0)
 527 0206 0E94 0000 		call glcdWriteChar
  77:anim_deathcfg.c ****   printnumber((cfg_dob_y+1900)/100, (mode==SET_YEAR)?INVERTED:NORMAL);
 529               	.LM50:
 530 020a 8091 0000 		lds r24,cfg_dob_y
 531 020e 10E0      		ldi r17,lo8(0)
 532 0210 0231      		cpi r16,lo8(18)
 533 0212 01F4      		brne .L31
 534 0214 11E0      		ldi r17,lo8(1)
 535               	.L31:
 536 0216 90E0      		ldi r25,lo8(0)
 537 0218 8459      		subi r24,lo8(-(1900))
 538 021a 984F      		sbci r25,hi8(-(1900))
 539 021c 64E6      		ldi r22,lo8(100)
 540 021e 70E0      		ldi r23,hi8(100)
 541 0220 0E94 0000 		call __divmodhi4
 542 0224 862F      		mov r24,r22
 543 0226 612F      		mov r22,r17
 544 0228 0E94 0000 		call printnumber
  78:anim_deathcfg.c ****   printnumber((cfg_dob_y+1900)%100, (mode==SET_YEAR)?INVERTED:NORMAL);
 546               	.LM51:
 547 022c 8091 0000 		lds r24,cfg_dob_y
 548 0230 90E0      		ldi r25,lo8(0)
 549 0232 8459      		subi r24,lo8(-(1900))
 550 0234 984F      		sbci r25,hi8(-(1900))
 551 0236 64E6      		ldi r22,lo8(100)
 552 0238 70E0      		ldi r23,hi8(100)
 553 023a 0E94 0000 		call __divmodhi4
 554 023e 612F      		mov r22,r17
 555 0240 0E94 0000 		call printnumber
 556               	/* epilogue start */
  79:anim_deathcfg.c **** }
 558               	.LM52:
 559 0244 1F91      		pop r17
 560 0246 0F91      		pop r16
 561 0248 0895      		ret
 563               	.Lscope5:
 565               		.stabd	78,0,0
 569               	.global	printnumber_3d
 571               	printnumber_3d:
 572               		.stabd	46,0,0
  42:anim_deathcfg.c **** void printnumber_3d(uint16_t n, uint8_t inverted) {
 574               	.LM53:
 575               	.LFBB6:
 576 024a FF92      		push r15
 577 024c 0F93      		push r16
 578 024e 1F93      		push r17
 579               	/* prologue: function */
 580               	/* frame size = 0 */
 581 0250 8C01      		movw r16,r24
 582 0252 F62E      		mov r15,r22
  43:anim_deathcfg.c ****   glcdWriteChar(n/100+'0', inverted);
 584               	.LM54:
 585 0254 64E6      		ldi r22,lo8(100)
 586 0256 70E0      		ldi r23,hi8(100)
 587 0258 0E94 0000 		call __udivmodhi4
 588 025c 862F      		mov r24,r22
 589 025e 805D      		subi r24,lo8(-(48))
 590 0260 6F2D      		mov r22,r15
 591 0262 0E94 0000 		call glcdWriteChar
  44:anim_deathcfg.c ****   printnumber(n%100, inverted);
 593               	.LM55:
 594 0266 C801      		movw r24,r16
 595 0268 64E6      		ldi r22,lo8(100)
 596 026a 70E0      		ldi r23,hi8(100)
 597 026c 0E94 0000 		call __udivmodhi4
 598 0270 6F2D      		mov r22,r15
 599 0272 0E94 0000 		call printnumber
 600               	/* epilogue start */
  45:anim_deathcfg.c **** }
 602               	.LM56:
 603 0276 1F91      		pop r17
 604 0278 0F91      		pop r16
 605 027a FF90      		pop r15
 606 027c 0895      		ret
 608               	.Lscope6:
 610               		.stabd	78,0,0
 613               	.global	display_bmi_set
 615               	display_bmi_set:
 616               		.stabd	46,0,0
 106:anim_deathcfg.c **** {
 618               	.LM57:
 619               	.LFBB7:
 620 027e 0F93      		push r16
 621 0280 1F93      		push r17
 622               	/* prologue: function */
 623               	/* frame size = 0 */
 624 0282 082F      		mov r16,r24
 107:anim_deathcfg.c ****   glcdSetAddress(MENU_INDENT, 4);
 626               	.LM58:
 627 0284 88E0      		ldi r24,lo8(8)
 628 0286 64E0      		ldi r22,lo8(4)
 629 0288 0E94 0000 		call glcdSetAddress
 108:anim_deathcfg.c ****   glcdPutStr("Set ", NORMAL);
 631               	.LM59:
 632 028c 80E0      		ldi r24,lo8(__c.2052)
 633 028e 90E0      		ldi r25,hi8(__c.2052)
 634 0290 60E0      		ldi r22,lo8(0)
 635 0292 0E94 0000 		call glcdPutStr_rom
 109:anim_deathcfg.c ****   if(cfg_bmi_unit == BMI_Imperial)
 637               	.LM60:
 638 0296 8091 0000 		lds r24,cfg_bmi_unit
 639 029a 8823      		tst r24
 640 029c 01F4      		brne .L37
 111:anim_deathcfg.c ****   	  glcdPutStr("Imp:", inverted&1);
 642               	.LM61:
 643 029e 602F      		mov r22,r16
 644 02a0 6170      		andi r22,lo8(1)
 645 02a2 80E0      		ldi r24,lo8(__c.2054)
 646 02a4 90E0      		ldi r25,hi8(__c.2054)
 647 02a6 0E94 0000 		call glcdPutStr_rom
 112:anim_deathcfg.c ****   	  printnumber_3d(cfg_bmi_weight, inverted&2);
 649               	.LM62:
 650 02aa 8091 0000 		lds r24,cfg_bmi_weight
 651 02ae 9091 0000 		lds r25,(cfg_bmi_weight)+1
 652 02b2 102F      		mov r17,r16
 653 02b4 1270      		andi r17,lo8(2)
 654 02b6 612F      		mov r22,r17
 655 02b8 0E94 0000 		call printnumber_3d
 113:anim_deathcfg.c ****   	  glcdPutStr("lb ", inverted&2);
 657               	.LM63:
 658 02bc 80E0      		ldi r24,lo8(__c.2056)
 659 02be 90E0      		ldi r25,hi8(__c.2056)
 660 02c0 612F      		mov r22,r17
 661 02c2 0E94 0000 		call glcdPutStr_rom
 114:anim_deathcfg.c ****   	  printnumber(cfg_bmi_height / 12, inverted&4);
 663               	.LM64:
 664 02c6 8091 0000 		lds r24,cfg_bmi_height
 665 02ca 9091 0000 		lds r25,(cfg_bmi_height)+1
 666 02ce 102F      		mov r17,r16
 667 02d0 1470      		andi r17,lo8(4)
 668 02d2 6CE0      		ldi r22,lo8(12)
 669 02d4 70E0      		ldi r23,hi8(12)
 670 02d6 0E94 0000 		call __udivmodhi4
 671 02da 862F      		mov r24,r22
 672 02dc 612F      		mov r22,r17
 673 02de 0E94 0000 		call printnumber
 115:anim_deathcfg.c ****   	  glcdPutStr("ft", inverted&4);
 675               	.LM65:
 676 02e2 80E0      		ldi r24,lo8(__c.2058)
 677 02e4 90E0      		ldi r25,hi8(__c.2058)
 678 02e6 612F      		mov r22,r17
 679 02e8 0E94 0000 		call glcdPutStr_rom
 116:anim_deathcfg.c ****   	  printnumber(cfg_bmi_height % 12, inverted&4);
 681               	.LM66:
 682 02ec 8091 0000 		lds r24,cfg_bmi_height
 683 02f0 9091 0000 		lds r25,(cfg_bmi_height)+1
 684 02f4 6CE0      		ldi r22,lo8(12)
 685 02f6 70E0      		ldi r23,hi8(12)
 686 02f8 0E94 0000 		call __udivmodhi4
 687 02fc 612F      		mov r22,r17
 688 02fe 0E94 0000 		call printnumber
 689 0302 00C0      		rjmp .L40
 690               	.L37:
 119:anim_deathcfg.c ****   else if (cfg_bmi_unit == BMI_Metric)
 692               	.LM67:
 693 0304 8091 0000 		lds r24,cfg_bmi_unit
 694 0308 602F      		mov r22,r16
 695 030a 6170      		andi r22,lo8(1)
 696 030c 102F      		mov r17,r16
 697 030e 1270      		andi r17,lo8(2)
 698 0310 8130      		cpi r24,lo8(1)
 699 0312 01F4      		brne .L39
 121:anim_deathcfg.c ****   	  glcdPutStr("Met:", inverted&1);
 701               	.LM68:
 702 0314 80E0      		ldi r24,lo8(__c.2060)
 703 0316 90E0      		ldi r25,hi8(__c.2060)
 704 0318 0E94 0000 		call glcdPutStr_rom
 122:anim_deathcfg.c ****   	  glcdWriteChar(' ', NORMAL);
 706               	.LM69:
 707 031c 80E2      		ldi r24,lo8(32)
 708 031e 60E0      		ldi r22,lo8(0)
 709 0320 0E94 0000 		call glcdWriteChar
 123:anim_deathcfg.c ****   	  printnumber_3d(cfg_bmi_weight, inverted&2);
 711               	.LM70:
 712 0324 8091 0000 		lds r24,cfg_bmi_weight
 713 0328 9091 0000 		lds r25,(cfg_bmi_weight)+1
 714 032c 612F      		mov r22,r17
 715 032e 0E94 0000 		call printnumber_3d
 124:anim_deathcfg.c ****   	  glcdPutStr("kg ", inverted&2);
 717               	.LM71:
 718 0332 80E0      		ldi r24,lo8(__c.2062)
 719 0334 90E0      		ldi r25,hi8(__c.2062)
 720 0336 612F      		mov r22,r17
 721 0338 0E94 0000 		call glcdPutStr_rom
 125:anim_deathcfg.c ****   	  printnumber_3d(cfg_bmi_height, inverted&4);
 723               	.LM72:
 724 033c 8091 0000 		lds r24,cfg_bmi_height
 725 0340 9091 0000 		lds r25,(cfg_bmi_height)+1
 726 0344 102F      		mov r17,r16
 727 0346 1470      		andi r17,lo8(4)
 728 0348 612F      		mov r22,r17
 729 034a 0E94 0000 		call printnumber_3d
 126:anim_deathcfg.c ****   	  glcdPutStr("cm", inverted&4);
 731               	.LM73:
 732 034e 80E0      		ldi r24,lo8(__c.2064)
 733 0350 90E0      		ldi r25,hi8(__c.2064)
 734 0352 612F      		mov r22,r17
 735 0354 0E94 0000 		call glcdPutStr_rom
 736 0358 00C0      		rjmp .L40
 737               	.L39:
 130:anim_deathcfg.c ****   	  glcdPutStr("BMI:", inverted&1);
 739               	.LM74:
 740 035a 80E0      		ldi r24,lo8(__c.2066)
 741 035c 90E0      		ldi r25,hi8(__c.2066)
 742 035e 0E94 0000 		call glcdPutStr_rom
 131:anim_deathcfg.c ****   	  glcdPutStr("         ",NORMAL);
 744               	.LM75:
 745 0362 80E0      		ldi r24,lo8(__c.2068)
 746 0364 90E0      		ldi r25,hi8(__c.2068)
 747 0366 60E0      		ldi r22,lo8(0)
 748 0368 0E94 0000 		call glcdPutStr_rom
 132:anim_deathcfg.c ****   	  printnumber_3d(cfg_bmi_weight, inverted&2);
 750               	.LM76:
 751 036c 8091 0000 		lds r24,cfg_bmi_weight
 752 0370 9091 0000 		lds r25,(cfg_bmi_weight)+1
 753 0374 612F      		mov r22,r17
 754 0376 0E94 0000 		call printnumber_3d
 755               	.L40:
 756               	/* epilogue start */
 134:anim_deathcfg.c **** }
 758               	.LM77:
 759 037a 1F91      		pop r17
 760 037c 0F91      		pop r16
 761 037e 0895      		ret
 763               	.Lscope7:
 765               		.stabd	78,0,0
 767               	.global	display_death_menu
 769               	display_death_menu:
 770               		.stabd	46,0,0
 144:anim_deathcfg.c **** 
 145:anim_deathcfg.c **** //Setting the Death Clock needs its own screen.
 146:anim_deathcfg.c **** void display_death_menu(void) {
 772               	.LM78:
 773               	.LFBB8:
 774               	/* prologue: function */
 775               	/* frame size = 0 */
 147:anim_deathcfg.c ****   cfg_dob_m = eeprom_read_byte(&EE_DOB_MONTH);
 777               	.LM79:
 778 0380 80E0      		ldi r24,lo8(EE_DOB_MONTH)
 779 0382 90E0      		ldi r25,hi8(EE_DOB_MONTH)
 780 0384 0E94 0000 		call __eerd_byte_m328p
 781 0388 8093 0000 		sts cfg_dob_m,r24
 148:anim_deathcfg.c ****   cfg_dob_d = eeprom_read_byte(&EE_DOB_DAY);
 783               	.LM80:
 784 038c 80E0      		ldi r24,lo8(EE_DOB_DAY)
 785 038e 90E0      		ldi r25,hi8(EE_DOB_DAY)
 786 0390 0E94 0000 		call __eerd_byte_m328p
 787 0394 8093 0000 		sts cfg_dob_d,r24
 149:anim_deathcfg.c ****   cfg_dob_y = eeprom_read_byte(&EE_DOB_YEAR);
 789               	.LM81:
 790 0398 80E0      		ldi r24,lo8(EE_DOB_YEAR)
 791 039a 90E0      		ldi r25,hi8(EE_DOB_YEAR)
 792 039c 0E94 0000 		call __eerd_byte_m328p
 793 03a0 8093 0000 		sts cfg_dob_y,r24
 150:anim_deathcfg.c ****   cfg_gender = eeprom_read_byte(&EE_GENDER);
 795               	.LM82:
 796 03a4 80E0      		ldi r24,lo8(EE_GENDER)
 797 03a6 90E0      		ldi r25,hi8(EE_GENDER)
 798 03a8 0E94 0000 		call __eerd_byte_m328p
 799 03ac 8093 0000 		sts cfg_gender,r24
 151:anim_deathcfg.c ****   cfg_dc_mode = eeprom_read_byte(&EE_DC_MODE);
 801               	.LM83:
 802 03b0 80E0      		ldi r24,lo8(EE_DC_MODE)
 803 03b2 90E0      		ldi r25,hi8(EE_DC_MODE)
 804 03b4 0E94 0000 		call __eerd_byte_m328p
 805 03b8 8093 0000 		sts cfg_dc_mode,r24
 152:anim_deathcfg.c ****   cfg_bmi_unit = eeprom_read_byte(&EE_BMI_UNIT);
 807               	.LM84:
 808 03bc 80E0      		ldi r24,lo8(EE_BMI_UNIT)
 809 03be 90E0      		ldi r25,hi8(EE_BMI_UNIT)
 810 03c0 0E94 0000 		call __eerd_byte_m328p
 811 03c4 8093 0000 		sts cfg_bmi_unit,r24
 153:anim_deathcfg.c ****   cfg_bmi_height = eeprom_read_word(&EE_BMI_HEIGHT);
 813               	.LM85:
 814 03c8 80E0      		ldi r24,lo8(EE_BMI_HEIGHT)
 815 03ca 90E0      		ldi r25,hi8(EE_BMI_HEIGHT)
 816 03cc 0E94 0000 		call __eerd_word_m328p
 817 03d0 9093 0000 		sts (cfg_bmi_height)+1,r25
 818 03d4 8093 0000 		sts cfg_bmi_height,r24
 154:anim_deathcfg.c ****   cfg_bmi_weight = eeprom_read_word(&EE_BMI_WEIGHT);
 820               	.LM86:
 821 03d8 80E0      		ldi r24,lo8(EE_BMI_WEIGHT)
 822 03da 90E0      		ldi r25,hi8(EE_BMI_WEIGHT)
 823 03dc 0E94 0000 		call __eerd_word_m328p
 824 03e0 9093 0000 		sts (cfg_bmi_weight)+1,r25
 825 03e4 8093 0000 		sts cfg_bmi_weight,r24
 155:anim_deathcfg.c ****   cfg_smoker = eeprom_read_byte(&EE_SMOKER);
 827               	.LM87:
 828 03e8 80E0      		ldi r24,lo8(EE_SMOKER)
 829 03ea 90E0      		ldi r25,hi8(EE_SMOKER)
 830 03ec 0E94 0000 		call __eerd_byte_m328p
 831 03f0 8093 0000 		sts cfg_smoker,r24
 156:anim_deathcfg.c **** 
 157:anim_deathcfg.c **** 
 158:anim_deathcfg.c ****   screenmutex++;
 833               	.LM88:
 834 03f4 8091 0000 		lds r24,screenmutex
 835 03f8 8F5F      		subi r24,lo8(-(1))
 836 03fa 8093 0000 		sts screenmutex,r24
 159:anim_deathcfg.c ****   glcdClearScreen();
 838               	.LM89:
 839 03fe 0E94 0000 		call glcdClearScreen
 160:anim_deathcfg.c ****   
 161:anim_deathcfg.c ****   glcdSetAddress(0, 0);
 841               	.LM90:
 842 0402 80E0      		ldi r24,lo8(0)
 843 0404 60E0      		ldi r22,lo8(0)
 844 0406 0E94 0000 		call glcdSetAddress
 162:anim_deathcfg.c ****   glcdPutStr("DeathChron", NORMAL);
 846               	.LM91:
 847 040a 80E0      		ldi r24,lo8(__c.2098)
 848 040c 90E0      		ldi r25,hi8(__c.2098)
 849 040e 60E0      		ldi r22,lo8(0)
 850 0410 0E94 0000 		call glcdPutStr_rom
 163:anim_deathcfg.c ****   glcdSetAddress(64, 0);	//Not enough space in the 128 bits to put "DeathChron Config Menu"
 852               	.LM92:
 853 0414 80E4      		ldi r24,lo8(64)
 854 0416 60E0      		ldi r22,lo8(0)
 855 0418 0E94 0000 		call glcdSetAddress
 164:anim_deathcfg.c ****   glcdPutStr("Config", NORMAL);
 857               	.LM93:
 858 041c 80E0      		ldi r24,lo8(__c.2100)
 859 041e 90E0      		ldi r25,hi8(__c.2100)
 860 0420 60E0      		ldi r22,lo8(0)
 861 0422 0E94 0000 		call glcdPutStr_rom
 165:anim_deathcfg.c ****   glcdSetAddress(104, 0);  //So these two lines are making up for that. :)
 863               	.LM94:
 864 0426 88E6      		ldi r24,lo8(104)
 865 0428 60E0      		ldi r22,lo8(0)
 866 042a 0E94 0000 		call glcdSetAddress
 166:anim_deathcfg.c ****   glcdPutStr("Menu", NORMAL);
 868               	.LM95:
 869 042e 80E0      		ldi r24,lo8(__c.2102)
 870 0430 90E0      		ldi r25,hi8(__c.2102)
 871 0432 60E0      		ldi r22,lo8(0)
 872 0434 0E94 0000 		call glcdPutStr_rom
 167:anim_deathcfg.c ****   
 168:anim_deathcfg.c ****   //DOB , render based on region setting, in mm/dd/yyyy or dd/mm/yyyy, range is 1900 - 2099.
 169:anim_deathcfg.c ****   display_dob(displaymode);
 874               	.LM96:
 875 0438 8091 0000 		lds r24,displaymode
 876 043c 0E94 0000 		call display_dob
 170:anim_deathcfg.c ****   
 171:anim_deathcfg.c ****   //Gender, Male, Female
 172:anim_deathcfg.c ****   display_gender(NORMAL);
 878               	.LM97:
 879 0440 80E0      		ldi r24,lo8(0)
 880 0442 0E94 0000 		call display_gender
 173:anim_deathcfg.c ****   
 174:anim_deathcfg.c ****   //Mode, Normal, Optimistic, Pessimistic, Sadistic
 175:anim_deathcfg.c ****   display_dc_mode(NORMAL);
 882               	.LM98:
 883 0446 80E0      		ldi r24,lo8(0)
 884 0448 0E94 0000 		call display_dc_mode
 176:anim_deathcfg.c ****   
 177:anim_deathcfg.c ****   //BMI Entry Method, Imperial (Weight in pounds, height in X foot Y inches), 
 178:anim_deathcfg.c ****   //Metric (Weight in Kilograms, Height in Centimeters), 
 179:anim_deathcfg.c ****   //Direct (Direct BMI value from 0-255, (actual range for calculation is less then 25, 25-44, and 
 180:anim_deathcfg.c ****   display_bmi_set(NORMAL);
 886               	.LM99:
 887 044c 80E0      		ldi r24,lo8(0)
 888 044e 0E94 0000 		call display_bmi_set
 181:anim_deathcfg.c ****   
 182:anim_deathcfg.c ****   //Smoking Status.
 183:anim_deathcfg.c ****   display_smoker(NORMAL);
 890               	.LM100:
 891 0452 80E0      		ldi r24,lo8(0)
 892 0454 0E94 0000 		call display_smoker
 184:anim_deathcfg.c ****   print_menu_advance();
 894               	.LM101:
 895 0458 0E94 0000 		call print_menu_advance
 185:anim_deathcfg.c ****   
 186:anim_deathcfg.c ****   screenmutex--;
 897               	.LM102:
 898 045c 8091 0000 		lds r24,screenmutex
 899 0460 8150      		subi r24,lo8(-(-1))
 900 0462 8093 0000 		sts screenmutex,r24
 901               	/* epilogue start */
 187:anim_deathcfg.c **** }
 903               	.LM103:
 904 0466 0895      		ret
 906               	.Lscope8:
 908               		.stabd	78,0,0
 911               	.global	init_set_death_menu
 913               	init_set_death_menu:
 914               		.stabd	46,0,0
 188:anim_deathcfg.c **** 
 189:anim_deathcfg.c **** uint8_t init_set_death_menu(uint8_t line)
 190:anim_deathcfg.c **** {
 916               	.LM104:
 917               	.LFBB9:
 918 0468 1F93      		push r17
 919               	/* prologue: function */
 920               	/* frame size = 0 */
 921 046a 182F      		mov r17,r24
 191:anim_deathcfg.c ****   display_death_menu();
 923               	.LM105:
 924 046c 0E94 0000 		call display_death_menu
 192:anim_deathcfg.c ****   
 193:anim_deathcfg.c ****   screenmutex++;
 926               	.LM106:
 927 0470 8091 0000 		lds r24,screenmutex
 928 0474 8F5F      		subi r24,lo8(-(1))
 929 0476 8093 0000 		sts screenmutex,r24
 194:anim_deathcfg.c ****   if(displaymode == SET_DCSMOKER)
 931               	.LM107:
 932 047a 8091 0000 		lds r24,displaymode
 933 047e 8F36      		cpi r24,lo8(111)
 934 0480 01F4      		brne .L44
 195:anim_deathcfg.c ****   	  print_menu_exit();
 936               	.LM108:
 937 0482 0E94 0000 		call print_menu_exit
 938               	.L44:
 196:anim_deathcfg.c ****   // put a small arrow next to 'set 12h/24h'
 197:anim_deathcfg.c ****   drawArrow(0, (line*8)+3, MENU_INDENT -1);
 940               	.LM109:
 941 0486 110F      		lsl r17
 942 0488 110F      		lsl r17
 943 048a 110F      		lsl r17
 944 048c 1D5F      		subi r17,lo8(-(3))
 945 048e 80E0      		ldi r24,lo8(0)
 946 0490 612F      		mov r22,r17
 947 0492 47E0      		ldi r20,lo8(7)
 948 0494 0E94 0000 		call drawArrow
 198:anim_deathcfg.c ****   screenmutex--;
 950               	.LM110:
 951 0498 8091 0000 		lds r24,screenmutex
 952 049c 8150      		subi r24,lo8(-(-1))
 953 049e 8093 0000 		sts screenmutex,r24
 199:anim_deathcfg.c ****    
 200:anim_deathcfg.c ****   timeoutcounter = INACTIVITYTIMEOUT;
 955               	.LM111:
 956 04a2 8AE0      		ldi r24,lo8(10)
 957 04a4 8093 0000 		sts timeoutcounter,r24
 201:anim_deathcfg.c ****   return displaymode;
 959               	.LM112:
 960 04a8 8091 0000 		lds r24,displaymode
 961               	/* epilogue start */
 202:anim_deathcfg.c **** }
 963               	.LM113:
 964 04ac 1F91      		pop r17
 965 04ae 0895      		ret
 967               	.Lscope9:
 969               		.stabd	78,0,0
 971               	.global	set_deathclock_smoker
 973               	set_deathclock_smoker:
 974               		.stabd	46,0,0
 203:anim_deathcfg.c **** 
 204:anim_deathcfg.c **** extern uint8_t next_mode_setdate[];
 205:anim_deathcfg.c **** extern uint8_t next_mode_setmonth[];
 206:anim_deathcfg.c **** extern uint8_t next_mode_setday[];
 207:anim_deathcfg.c **** void print_monthday_help(uint8_t mode);
 208:anim_deathcfg.c **** 
 209:anim_deathcfg.c **** 
 210:anim_deathcfg.c **** void set_deathclock_dob(void) {
 211:anim_deathcfg.c ****    uint8_t mode = init_set_death_menu(1);
 212:anim_deathcfg.c **** 
 213:anim_deathcfg.c ****   while (!check_timeout()) {
 214:anim_deathcfg.c **** 
 215:anim_deathcfg.c ****     if (just_pressed & 0x2) {
 216:anim_deathcfg.c ****       just_pressed = 0;
 217:anim_deathcfg.c ****       screenmutex++;
 218:anim_deathcfg.c **** 
 219:anim_deathcfg.c ****       if (mode == SET_DEATHCLOCK_DOB) {
 220:anim_deathcfg.c **** 	// ok now its selected
 221:anim_deathcfg.c **** 	mode = next_mode_setdate[region];
 222:anim_deathcfg.c ****       } else if (mode == SET_MONTH) {
 223:anim_deathcfg.c **** 	mode = next_mode_setmonth[region];
 224:anim_deathcfg.c ****       } else if (mode == SET_DAY) {
 225:anim_deathcfg.c **** 	mode = next_mode_setday[region];
 226:anim_deathcfg.c ****       } else {
 227:anim_deathcfg.c **** 	// done!
 228:anim_deathcfg.c **** 	DEBUG(putstring("done setting date"));
 229:anim_deathcfg.c **** 	mode = SET_DEATHCLOCK_DOB;
 230:anim_deathcfg.c **** 	
 231:anim_deathcfg.c **** 	//date_y = year;
 232:anim_deathcfg.c **** 	//date_m = month;
 233:anim_deathcfg.c **** 	//date_d = day;
 234:anim_deathcfg.c **** 	eeprom_write_byte(&EE_DOB_MONTH,cfg_dob_m);
 235:anim_deathcfg.c ****     eeprom_write_byte(&EE_DOB_DAY,cfg_dob_d);
 236:anim_deathcfg.c ****     eeprom_write_byte(&EE_DOB_YEAR,cfg_dob_y);
 237:anim_deathcfg.c ****     deathclock_changed();
 238:anim_deathcfg.c ****       }
 239:anim_deathcfg.c ****       display_dob(mode);
 240:anim_deathcfg.c **** 	  print_monthday_help(mode);
 241:anim_deathcfg.c ****       screenmutex--;
 242:anim_deathcfg.c ****     }
 243:anim_deathcfg.c ****     if ((just_pressed & 0x4) || (pressed & 0x4)) {
 244:anim_deathcfg.c ****       just_pressed = 0;
 245:anim_deathcfg.c **** 
 246:anim_deathcfg.c ****       screenmutex++;
 247:anim_deathcfg.c **** 
 248:anim_deathcfg.c ****       if (mode == SET_MONTH) {
 249:anim_deathcfg.c ****     cfg_dob_m++;
 250:anim_deathcfg.c ****       }
 251:anim_deathcfg.c ****       if (mode == SET_DAY) {
 252:anim_deathcfg.c **** 	cfg_dob_d++;
 253:anim_deathcfg.c ****       }
 254:anim_deathcfg.c ****       if (mode == SET_YEAR) {
 255:anim_deathcfg.c **** 	cfg_dob_y = (cfg_dob_y+1) % 200;
 256:anim_deathcfg.c ****       }
 257:anim_deathcfg.c ****       add_month(&cfg_dob_m,&cfg_dob_d,cfg_dob_d+1900);
 258:anim_deathcfg.c ****       display_dob(mode);
 259:anim_deathcfg.c ****       screenmutex--;
 260:anim_deathcfg.c **** 
 261:anim_deathcfg.c ****       if (pressed & 0x4)
 262:anim_deathcfg.c **** 	delay_ms(200);  
 263:anim_deathcfg.c ****     }
 264:anim_deathcfg.c ****   }
 265:anim_deathcfg.c **** }
 266:anim_deathcfg.c **** 
 267:anim_deathcfg.c **** void set_deathclock_gender(void) {
 268:anim_deathcfg.c ****   uint8_t mode = init_set_death_menu(2);
 269:anim_deathcfg.c **** 
 270:anim_deathcfg.c ****   while (!check_timeout()) {
 271:anim_deathcfg.c ****   
 272:anim_deathcfg.c ****     if (just_pressed & 0x2) {
 273:anim_deathcfg.c ****       just_pressed = 0;
 274:anim_deathcfg.c ****       screenmutex++;
 275:anim_deathcfg.c **** 
 276:anim_deathcfg.c ****       if (mode == SET_DEATHCLOCK_GENDER) {
 277:anim_deathcfg.c **** 	DEBUG(putstring("Setting deathclock gender"));
 278:anim_deathcfg.c **** 	// ok now its selected
 279:anim_deathcfg.c **** 	mode = SET_DCGENDER;
 280:anim_deathcfg.c **** 	// print the region 
 281:anim_deathcfg.c **** 	display_gender(INVERTED);
 282:anim_deathcfg.c **** 	// display instructions below
 283:anim_deathcfg.c **** 	print_menu_change();
 284:anim_deathcfg.c ****       } else {
 285:anim_deathcfg.c **** 	mode = SET_DEATHCLOCK_GENDER;
 286:anim_deathcfg.c **** 	// print the region normal
 287:anim_deathcfg.c **** 	display_gender(NORMAL);
 288:anim_deathcfg.c **** 
 289:anim_deathcfg.c **** 	print_menu_advance();
 290:anim_deathcfg.c ****       }
 291:anim_deathcfg.c ****       screenmutex--;
 292:anim_deathcfg.c ****     }
 293:anim_deathcfg.c ****     if ((just_pressed & 0x4) || (pressed & 0x4)) {
 294:anim_deathcfg.c ****       just_pressed = 0;
 295:anim_deathcfg.c ****       
 296:anim_deathcfg.c ****       if (mode == SET_DCGENDER) {
 297:anim_deathcfg.c **** 	    cfg_gender = !cfg_gender;
 298:anim_deathcfg.c **** 	screenmutex++;
 299:anim_deathcfg.c **** 	//display_death_menu();
 300:anim_deathcfg.c **** 	//print_menu_change();
 301:anim_deathcfg.c **** 
 302:anim_deathcfg.c **** 	// put a small arrow next to 'set 12h/24h'
 303:anim_deathcfg.c **** 	//drawArrow(0, 19, MENU_INDENT -1);
 304:anim_deathcfg.c **** 
 305:anim_deathcfg.c **** 	display_gender(INVERTED);
 306:anim_deathcfg.c **** 	screenmutex--;
 307:anim_deathcfg.c **** 
 308:anim_deathcfg.c **** 	eeprom_write_byte(&EE_GENDER, cfg_gender);
 309:anim_deathcfg.c **** 	deathclock_changed();   
 310:anim_deathcfg.c ****       }
 311:anim_deathcfg.c ****     }
 312:anim_deathcfg.c ****   }
 313:anim_deathcfg.c **** }
 314:anim_deathcfg.c **** 
 315:anim_deathcfg.c **** void set_deathclock_mode(void) {
 316:anim_deathcfg.c ****   uint8_t mode = init_set_death_menu(3);
 317:anim_deathcfg.c **** 
 318:anim_deathcfg.c ****   while (!check_timeout()) {
 319:anim_deathcfg.c ****   
 320:anim_deathcfg.c ****     if (just_pressed & 0x2) {
 321:anim_deathcfg.c ****       just_pressed = 0;
 322:anim_deathcfg.c ****       screenmutex++;
 323:anim_deathcfg.c **** 
 324:anim_deathcfg.c ****       if (mode == SET_DEATHCLOCK_MODE) {
 325:anim_deathcfg.c **** 	DEBUG(putstring("Setting deathclock mode"));
 326:anim_deathcfg.c **** 	// ok now its selected
 327:anim_deathcfg.c **** 	mode = SET_DCMODE;
 328:anim_deathcfg.c **** 	// print the region 
 329:anim_deathcfg.c **** 	display_dc_mode(INVERTED);
 330:anim_deathcfg.c **** 	// display instructions below
 331:anim_deathcfg.c **** 	print_menu_change();
 332:anim_deathcfg.c ****       } else {
 333:anim_deathcfg.c **** 	mode = SET_DEATHCLOCK_MODE;
 334:anim_deathcfg.c **** 	// print the region normal
 335:anim_deathcfg.c **** 	display_dc_mode(NORMAL);
 336:anim_deathcfg.c **** 
 337:anim_deathcfg.c **** 	print_menu_advance();
 338:anim_deathcfg.c ****       }
 339:anim_deathcfg.c ****       screenmutex--;
 340:anim_deathcfg.c ****     }
 341:anim_deathcfg.c ****     if ((just_pressed & 0x4) || (pressed & 0x4)) {
 342:anim_deathcfg.c ****       just_pressed = 0;
 343:anim_deathcfg.c ****       
 344:anim_deathcfg.c ****       if (mode == SET_DCMODE) {
 345:anim_deathcfg.c **** 	    cfg_dc_mode = (cfg_dc_mode + 1) % 4;
 346:anim_deathcfg.c **** 	screenmutex++;
 347:anim_deathcfg.c **** 
 348:anim_deathcfg.c **** 	display_dc_mode(INVERTED);
 349:anim_deathcfg.c **** 	screenmutex--;
 350:anim_deathcfg.c **** 
 351:anim_deathcfg.c **** 	eeprom_write_byte(&EE_DC_MODE, cfg_dc_mode);
 352:anim_deathcfg.c **** 	deathclock_changed();   
 353:anim_deathcfg.c ****       }
 354:anim_deathcfg.c ****     }
 355:anim_deathcfg.c ****   }
 356:anim_deathcfg.c **** }
 357:anim_deathcfg.c **** 
 358:anim_deathcfg.c **** void set_deathclock_bmi(void) {
 359:anim_deathcfg.c ****   uint8_t mode = init_set_death_menu(4);
 360:anim_deathcfg.c **** 
 361:anim_deathcfg.c ****   while (!check_timeout()) {
 362:anim_deathcfg.c ****     if (just_pressed & 0x2) {
 363:anim_deathcfg.c ****       just_pressed = 0;
 364:anim_deathcfg.c ****       screenmutex++;
 365:anim_deathcfg.c **** 
 366:anim_deathcfg.c ****       if (mode == SET_DEATHCLOCK_BMI) {
 367:anim_deathcfg.c **** 	DEBUG(putstring("Set BMI Unit"));
 368:anim_deathcfg.c **** 	// ok now its selected
 369:anim_deathcfg.c **** 	mode = SET_BMI_UNIT;
 370:anim_deathcfg.c **** 
 371:anim_deathcfg.c **** 	//Set BMI Unit
 372:anim_deathcfg.c **** 	display_bmi_set(1);
 373:anim_deathcfg.c **** 	// display instructions below
 374:anim_deathcfg.c **** 	//PLUS_TO_CHANGE(" ut."," set unit");
 375:anim_deathcfg.c **** 	print_menu_opts("change ut.","set unit");
 376:anim_deathcfg.c ****       } else if (mode == SET_BMI_UNIT) {
 377:anim_deathcfg.c **** 	DEBUG(putstring("Set bmi weight / bmi direct"));
 378:anim_deathcfg.c **** 	mode = SET_BMI_WT;
 379:anim_deathcfg.c **** 	display_bmi_set(2);
 380:anim_deathcfg.c **** 	// display instructions below
 381:anim_deathcfg.c **** 	if(cfg_bmi_unit != BMI_Direct)
 382:anim_deathcfg.c **** 	  //PLUS_TO_CHANGE(" wt."," set wt. ");
 383:anim_deathcfg.c **** 	  print_menu_opts("change wt."," set wt.");
 384:anim_deathcfg.c **** 	else
 385:anim_deathcfg.c **** 	  //PLUS_TO_CHANGE(" bmi"," set bmi ");
 386:anim_deathcfg.c **** 	  print_menu_opts("change bmi","set bmi");
 387:anim_deathcfg.c **** 	  } else if ((mode == SET_BMI_WT) && (cfg_bmi_unit != BMI_Direct)) {
 388:anim_deathcfg.c **** 	mode = SET_BMI_HT;
 389:anim_deathcfg.c ****     display_bmi_set(4);
 390:anim_deathcfg.c ****     //PLUS_TO_CHANGE(" ht."," set ht. ");
 391:anim_deathcfg.c ****     print_menu_opts("change ht.","set ht.");
 392:anim_deathcfg.c ****       } else {
 393:anim_deathcfg.c **** 	mode = SET_DEATHCLOCK_BMI;
 394:anim_deathcfg.c **** 	display_bmi_set(NORMAL);
 395:anim_deathcfg.c **** 	// display instructions below
 396:anim_deathcfg.c **** 	print_menu_advance();
 397:anim_deathcfg.c ****       }
 398:anim_deathcfg.c ****       screenmutex--;
 399:anim_deathcfg.c ****     }
 400:anim_deathcfg.c ****     if ((just_pressed & 0x4) || (pressed & 0x4)) {
 401:anim_deathcfg.c ****       just_pressed = 0;
 402:anim_deathcfg.c ****       screenmutex++;
 403:anim_deathcfg.c **** 
 404:anim_deathcfg.c ****       if (mode == SET_BMI_UNIT) { 
 405:anim_deathcfg.c ****       	  cfg_bmi_unit = (cfg_bmi_unit + 1) % 3;
 406:anim_deathcfg.c ****       	  if(cfg_bmi_unit == BMI_Imperial) {
 407:anim_deathcfg.c ****       	  	  cfg_bmi_weight = 35;
 408:anim_deathcfg.c ****       	  	  cfg_bmi_height = 36;
 409:anim_deathcfg.c ****       	  } else if (cfg_bmi_unit == BMI_Metric) {
 410:anim_deathcfg.c ****       	  	  cfg_bmi_weight = 15;
 411:anim_deathcfg.c ****       	  	  cfg_bmi_height = 92;
 412:anim_deathcfg.c ****       	  } else {
 413:anim_deathcfg.c ****       	  	  cfg_bmi_weight = 0;
 414:anim_deathcfg.c ****       	  }
 415:anim_deathcfg.c ****       	  display_bmi_set(1);
 416:anim_deathcfg.c ****       } 
 417:anim_deathcfg.c ****       if (mode == SET_BMI_WT) {
 418:anim_deathcfg.c ****       	  if(cfg_bmi_unit == BMI_Imperial) {
 419:anim_deathcfg.c ****       	  	  //cfg_bmi_weight = (cfg_bmi_weight + 5) % 660;
 420:anim_deathcfg.c ****       	  	  cfg_bmi_weight += 5;
 421:anim_deathcfg.c ****       	  	  if ( cfg_bmi_weight > 660 )
 422:anim_deathcfg.c ****       	  	  	  cfg_bmi_weight = 35;
 423:anim_deathcfg.c ****       	  } else if (cfg_bmi_unit == BMI_Metric) {
 424:anim_deathcfg.c ****       	  	  cfg_bmi_weight += 5;
 425:anim_deathcfg.c ****       	  	  if ( cfg_bmi_weight > 300 )
 426:anim_deathcfg.c ****       	  	  	  cfg_bmi_weight = 15;
 427:anim_deathcfg.c ****       	  } else {
 428:anim_deathcfg.c ****       	  	  cfg_bmi_weight = (cfg_bmi_weight + 1) % 256;
 429:anim_deathcfg.c ****       	  }
 430:anim_deathcfg.c ****       	  display_bmi_set(2);
 431:anim_deathcfg.c ****       }
 432:anim_deathcfg.c ****       if (mode == SET_BMI_HT) {
 433:anim_deathcfg.c ****       	  if(cfg_bmi_unit == BMI_Imperial) {
 434:anim_deathcfg.c ****       	  	  cfg_bmi_height++;
 435:anim_deathcfg.c ****       	  	  if ( cfg_bmi_height > 120 )
 436:anim_deathcfg.c ****       	  	  	  cfg_bmi_height = 36;
 437:anim_deathcfg.c ****       	  } else if (cfg_bmi_unit == BMI_Metric) {
 438:anim_deathcfg.c ****       	  	  cfg_bmi_height++;
 439:anim_deathcfg.c ****       	  	  if ( cfg_bmi_height > 305 )
 440:anim_deathcfg.c ****       	  	  	  cfg_bmi_height = 92;
 441:anim_deathcfg.c ****       	  }
 442:anim_deathcfg.c ****       	  display_bmi_set(4);
 443:anim_deathcfg.c ****       }
 444:anim_deathcfg.c ****       eeprom_write_byte(&EE_BMI_UNIT,cfg_bmi_unit);
 445:anim_deathcfg.c ****       eeprom_write_word(&EE_BMI_WEIGHT,cfg_bmi_weight);
 446:anim_deathcfg.c ****       eeprom_write_word(&EE_BMI_HEIGHT,cfg_bmi_height);
 447:anim_deathcfg.c ****       deathclock_changed();
 448:anim_deathcfg.c ****       screenmutex--;
 449:anim_deathcfg.c ****       if (pressed & 0x4)
 450:anim_deathcfg.c **** 	delay_ms(200);
 451:anim_deathcfg.c ****     }
 452:anim_deathcfg.c ****   }
 453:anim_deathcfg.c **** }
 454:anim_deathcfg.c **** 
 455:anim_deathcfg.c **** void set_deathclock_smoker(void) {
 976               	.LM114:
 977               	.LFBB10:
 978 04b0 1F93      		push r17
 979               	/* prologue: function */
 980               	/* frame size = 0 */
 456:anim_deathcfg.c ****   uint8_t mode = init_set_death_menu(5);
 982               	.LM115:
 983 04b2 85E0      		ldi r24,lo8(5)
 984 04b4 0E94 0000 		call init_set_death_menu
 985 04b8 182F      		mov r17,r24
 986 04ba 00C0      		rjmp .L57
 987               	.L53:
 457:anim_deathcfg.c **** 
 458:anim_deathcfg.c ****   while (!check_timeout()) {
 459:anim_deathcfg.c ****   
 460:anim_deathcfg.c ****     if (just_pressed & 0x2) {
 989               	.LM116:
 990 04bc 8091 0000 		lds r24,just_pressed
 991 04c0 81FF      		sbrs r24,1
 992 04c2 00C0      		rjmp .L48
 461:anim_deathcfg.c ****       just_pressed = 0;
 994               	.LM117:
 995 04c4 1092 0000 		sts just_pressed,__zero_reg__
 462:anim_deathcfg.c ****       screenmutex++;
 997               	.LM118:
 998 04c8 8091 0000 		lds r24,screenmutex
 999 04cc 8F5F      		subi r24,lo8(-(1))
 1000 04ce 8093 0000 		sts screenmutex,r24
 463:anim_deathcfg.c **** 
 464:anim_deathcfg.c ****       if (mode == SET_DEATHCLOCK_SMOKER) {
 1002               	.LM119:
 1003 04d2 1F30      		cpi r17,lo8(15)
 1004 04d4 01F4      		brne .L49
 465:anim_deathcfg.c **** 	DEBUG(putstring("Setting deathclock smoker status"));
 466:anim_deathcfg.c **** 	// ok now its selected
 467:anim_deathcfg.c **** 	mode = SET_DCSMOKER;
 468:anim_deathcfg.c **** 	// print the region 
 469:anim_deathcfg.c **** 	display_smoker(INVERTED);
 1006               	.LM120:
 1007 04d6 81E0      		ldi r24,lo8(1)
 1008 04d8 0E94 0000 		call display_smoker
 470:anim_deathcfg.c **** 	// display instructions below
 471:anim_deathcfg.c **** 	print_menu_change();
 1010               	.LM121:
 1011 04dc 0E94 0000 		call print_menu_change
 1012 04e0 1FE6      		ldi r17,lo8(111)
 1013 04e2 00C0      		rjmp .L50
 1014               	.L49:
 472:anim_deathcfg.c ****       } else {
 473:anim_deathcfg.c **** 	mode = SET_DEATHCLOCK_SMOKER;
 474:anim_deathcfg.c **** 	// print the region normal
 475:anim_deathcfg.c **** 	display_smoker(NORMAL);
 1016               	.LM122:
 1017 04e4 80E0      		ldi r24,lo8(0)
 1018 04e6 0E94 0000 		call display_smoker
 476:anim_deathcfg.c **** 
 477:anim_deathcfg.c **** 	print_menu_exit();
 1020               	.LM123:
 1021 04ea 0E94 0000 		call print_menu_exit
 1022 04ee 1FE0      		ldi r17,lo8(15)
 1023               	.L50:
 478:anim_deathcfg.c ****       }
 479:anim_deathcfg.c ****       screenmutex--;
 1025               	.LM124:
 1026 04f0 8091 0000 		lds r24,screenmutex
 1027 04f4 8150      		subi r24,lo8(-(-1))
 1028 04f6 8093 0000 		sts screenmutex,r24
 1029               	.L48:
 480:anim_deathcfg.c ****     }
 481:anim_deathcfg.c ****     if ((just_pressed & 0x4) || (pressed & 0x4)) {
 1031               	.LM125:
 1032 04fa 8091 0000 		lds r24,just_pressed
 1033 04fe 82FD      		sbrc r24,2
 1034 0500 00C0      		rjmp .L51
 1035 0502 8091 0000 		lds r24,pressed
 1036 0506 82FF      		sbrs r24,2
 1037 0508 00C0      		rjmp .L57
 1038               	.L51:
 482:anim_deathcfg.c ****       just_pressed = 0;
 1040               	.LM126:
 1041 050a 1092 0000 		sts just_pressed,__zero_reg__
 483:anim_deathcfg.c ****       
 484:anim_deathcfg.c ****       if (mode == SET_DCSMOKER) {
 1043               	.LM127:
 1044 050e 1F36      		cpi r17,lo8(111)
 1045 0510 01F4      		brne .L57
 485:anim_deathcfg.c **** 	    cfg_smoker = !cfg_smoker;
 1047               	.LM128:
 1048 0512 8091 0000 		lds r24,cfg_smoker
 1049 0516 90E0      		ldi r25,lo8(0)
 1050 0518 8823      		tst r24
 1051 051a 01F4      		brne .L52
 1052 051c 91E0      		ldi r25,lo8(1)
 1053               	.L52:
 1054 051e 9093 0000 		sts cfg_smoker,r25
 486:anim_deathcfg.c **** 	screenmutex++;
 1056               	.LM129:
 1057 0522 8091 0000 		lds r24,screenmutex
 1058 0526 8F5F      		subi r24,lo8(-(1))
 1059 0528 8093 0000 		sts screenmutex,r24
 487:anim_deathcfg.c **** 
 488:anim_deathcfg.c **** 	display_smoker(INVERTED);
 1061               	.LM130:
 1062 052c 81E0      		ldi r24,lo8(1)
 1063 052e 0E94 0000 		call display_smoker
 489:anim_deathcfg.c **** 	screenmutex--;
 1065               	.LM131:
 1066 0532 8091 0000 		lds r24,screenmutex
 1067 0536 8150      		subi r24,lo8(-(-1))
 1068 0538 8093 0000 		sts screenmutex,r24
 490:anim_deathcfg.c **** 
 491:anim_deathcfg.c **** 	eeprom_write_byte(&EE_SMOKER, cfg_smoker);
 1070               	.LM132:
 1071 053c 6091 0000 		lds r22,cfg_smoker
 1072 0540 80E0      		ldi r24,lo8(EE_SMOKER)
 1073 0542 90E0      		ldi r25,hi8(EE_SMOKER)
 1074 0544 0E94 0000 		call __eewr_byte_m328p
 492:anim_deathcfg.c **** 	deathclock_changed();   
 1076               	.LM133:
 1077 0548 0E94 0000 		call deathclock_changed
 1078               	.L57:
 459:anim_deathcfg.c ****   while (!check_timeout()) {
 1080               	.LM134:
 1081 054c 0E94 0000 		call check_timeout
 1082 0550 8823      		tst r24
 1083 0552 01F4      		brne .+2
 1084 0554 00C0      		rjmp .L53
 1085               	/* epilogue start */
 493:anim_deathcfg.c ****       }
 494:anim_deathcfg.c ****     }
 495:anim_deathcfg.c ****   }
 496:anim_deathcfg.c **** }
 1087               	.LM135:
 1088 0556 1F91      		pop r17
 1089 0558 0895      		ret
 1094               	.Lscope10:
 1096               		.stabd	78,0,0
 1098               	.global	set_deathclock_mode
 1100               	set_deathclock_mode:
 1101               		.stabd	46,0,0
 316:anim_deathcfg.c **** void set_deathclock_mode(void) {
 1103               	.LM136:
 1104               	.LFBB11:
 1105 055a 1F93      		push r17
 1106               	/* prologue: function */
 1107               	/* frame size = 0 */
 317:anim_deathcfg.c ****   uint8_t mode = init_set_death_menu(3);
 1109               	.LM137:
 1110 055c 83E0      		ldi r24,lo8(3)
 1111 055e 0E94 0000 		call init_set_death_menu
 1112 0562 182F      		mov r17,r24
 1113 0564 00C0      		rjmp .L68
 1114               	.L64:
 321:anim_deathcfg.c ****     if (just_pressed & 0x2) {
 1116               	.LM138:
 1117 0566 8091 0000 		lds r24,just_pressed
 1118 056a 81FF      		sbrs r24,1
 1119 056c 00C0      		rjmp .L60
 322:anim_deathcfg.c ****       just_pressed = 0;
 1121               	.LM139:
 1122 056e 1092 0000 		sts just_pressed,__zero_reg__
 323:anim_deathcfg.c ****       screenmutex++;
 1124               	.LM140:
 1125 0572 8091 0000 		lds r24,screenmutex
 1126 0576 8F5F      		subi r24,lo8(-(1))
 1127 0578 8093 0000 		sts screenmutex,r24
 325:anim_deathcfg.c ****       if (mode == SET_DEATHCLOCK_MODE) {
 1129               	.LM141:
 1130 057c 1D30      		cpi r17,lo8(13)
 1131 057e 01F4      		brne .L61
 330:anim_deathcfg.c **** 	display_dc_mode(INVERTED);
 1133               	.LM142:
 1134 0580 81E0      		ldi r24,lo8(1)
 1135 0582 0E94 0000 		call display_dc_mode
 332:anim_deathcfg.c **** 	print_menu_change();
 1137               	.LM143:
 1138 0586 0E94 0000 		call print_menu_change
 1139 058a 1BE6      		ldi r17,lo8(107)
 1140 058c 00C0      		rjmp .L62
 1141               	.L61:
 336:anim_deathcfg.c **** 	display_dc_mode(NORMAL);
 1143               	.LM144:
 1144 058e 80E0      		ldi r24,lo8(0)
 1145 0590 0E94 0000 		call display_dc_mode
 338:anim_deathcfg.c **** 	print_menu_advance();
 1147               	.LM145:
 1148 0594 0E94 0000 		call print_menu_advance
 1149 0598 1DE0      		ldi r17,lo8(13)
 1150               	.L62:
 340:anim_deathcfg.c ****       screenmutex--;
 1152               	.LM146:
 1153 059a 8091 0000 		lds r24,screenmutex
 1154 059e 8150      		subi r24,lo8(-(-1))
 1155 05a0 8093 0000 		sts screenmutex,r24
 1156               	.L60:
 342:anim_deathcfg.c ****     if ((just_pressed & 0x4) || (pressed & 0x4)) {
 1158               	.LM147:
 1159 05a4 8091 0000 		lds r24,just_pressed
 1160 05a8 82FD      		sbrc r24,2
 1161 05aa 00C0      		rjmp .L63
 1162 05ac 8091 0000 		lds r24,pressed
 1163 05b0 82FF      		sbrs r24,2
 1164 05b2 00C0      		rjmp .L68
 1165               	.L63:
 343:anim_deathcfg.c ****       just_pressed = 0;
 1167               	.LM148:
 1168 05b4 1092 0000 		sts just_pressed,__zero_reg__
 345:anim_deathcfg.c ****       if (mode == SET_DCMODE) {
 1170               	.LM149:
 1171 05b8 1B36      		cpi r17,lo8(107)
 1172 05ba 01F4      		brne .L68
 346:anim_deathcfg.c **** 	    cfg_dc_mode = (cfg_dc_mode + 1) % 4;
 1174               	.LM150:
 1175 05bc 8091 0000 		lds r24,cfg_dc_mode
 1176 05c0 90E0      		ldi r25,lo8(0)
 1177 05c2 0196      		adiw r24,1
 1178 05c4 8370      		andi r24,lo8(3)
 1179 05c6 9070      		andi r25,hi8(3)
 1180 05c8 8093 0000 		sts cfg_dc_mode,r24
 347:anim_deathcfg.c **** 	screenmutex++;
 1182               	.LM151:
 1183 05cc 8091 0000 		lds r24,screenmutex
 1184 05d0 8F5F      		subi r24,lo8(-(1))
 1185 05d2 8093 0000 		sts screenmutex,r24
 349:anim_deathcfg.c **** 	display_dc_mode(INVERTED);
 1187               	.LM152:
 1188 05d6 81E0      		ldi r24,lo8(1)
 1189 05d8 0E94 0000 		call display_dc_mode
 350:anim_deathcfg.c **** 	screenmutex--;
 1191               	.LM153:
 1192 05dc 8091 0000 		lds r24,screenmutex
 1193 05e0 8150      		subi r24,lo8(-(-1))
 1194 05e2 8093 0000 		sts screenmutex,r24
 352:anim_deathcfg.c **** 	eeprom_write_byte(&EE_DC_MODE, cfg_dc_mode);
 1196               	.LM154:
 1197 05e6 6091 0000 		lds r22,cfg_dc_mode
 1198 05ea 80E0      		ldi r24,lo8(EE_DC_MODE)
 1199 05ec 90E0      		ldi r25,hi8(EE_DC_MODE)
 1200 05ee 0E94 0000 		call __eewr_byte_m328p
 353:anim_deathcfg.c **** 	deathclock_changed();   
 1202               	.LM155:
 1203 05f2 0E94 0000 		call deathclock_changed
 1204               	.L68:
 319:anim_deathcfg.c ****   while (!check_timeout()) {
 1206               	.LM156:
 1207 05f6 0E94 0000 		call check_timeout
 1208 05fa 8823      		tst r24
 1209 05fc 01F4      		brne .+2
 1210 05fe 00C0      		rjmp .L64
 1211               	/* epilogue start */
 357:anim_deathcfg.c **** }
 1213               	.LM157:
 1214 0600 1F91      		pop r17
 1215 0602 0895      		ret
 1220               	.Lscope11:
 1222               		.stabd	78,0,0
 1224               	.global	set_deathclock_gender
 1226               	set_deathclock_gender:
 1227               		.stabd	46,0,0
 268:anim_deathcfg.c **** void set_deathclock_gender(void) {
 1229               	.LM158:
 1230               	.LFBB12:
 1231 0604 1F93      		push r17
 1232               	/* prologue: function */
 1233               	/* frame size = 0 */
 269:anim_deathcfg.c ****   uint8_t mode = init_set_death_menu(2);
 1235               	.LM159:
 1236 0606 82E0      		ldi r24,lo8(2)
 1237 0608 0E94 0000 		call init_set_death_menu
 1238 060c 182F      		mov r17,r24
 1239 060e 00C0      		rjmp .L80
 1240               	.L76:
 273:anim_deathcfg.c ****     if (just_pressed & 0x2) {
 1242               	.LM160:
 1243 0610 8091 0000 		lds r24,just_pressed
 1244 0614 81FF      		sbrs r24,1
 1245 0616 00C0      		rjmp .L71
 274:anim_deathcfg.c ****       just_pressed = 0;
 1247               	.LM161:
 1248 0618 1092 0000 		sts just_pressed,__zero_reg__
 275:anim_deathcfg.c ****       screenmutex++;
 1250               	.LM162:
 1251 061c 8091 0000 		lds r24,screenmutex
 1252 0620 8F5F      		subi r24,lo8(-(1))
 1253 0622 8093 0000 		sts screenmutex,r24
 277:anim_deathcfg.c ****       if (mode == SET_DEATHCLOCK_GENDER) {
 1255               	.LM163:
 1256 0626 1C30      		cpi r17,lo8(12)
 1257 0628 01F4      		brne .L72
 282:anim_deathcfg.c **** 	display_gender(INVERTED);
 1259               	.LM164:
 1260 062a 81E0      		ldi r24,lo8(1)
 1261 062c 0E94 0000 		call display_gender
 284:anim_deathcfg.c **** 	print_menu_change();
 1263               	.LM165:
 1264 0630 0E94 0000 		call print_menu_change
 1265 0634 1AE6      		ldi r17,lo8(106)
 1266 0636 00C0      		rjmp .L73
 1267               	.L72:
 288:anim_deathcfg.c **** 	display_gender(NORMAL);
 1269               	.LM166:
 1270 0638 80E0      		ldi r24,lo8(0)
 1271 063a 0E94 0000 		call display_gender
 290:anim_deathcfg.c **** 	print_menu_advance();
 1273               	.LM167:
 1274 063e 0E94 0000 		call print_menu_advance
 1275 0642 1CE0      		ldi r17,lo8(12)
 1276               	.L73:
 292:anim_deathcfg.c ****       screenmutex--;
 1278               	.LM168:
 1279 0644 8091 0000 		lds r24,screenmutex
 1280 0648 8150      		subi r24,lo8(-(-1))
 1281 064a 8093 0000 		sts screenmutex,r24
 1282               	.L71:
 294:anim_deathcfg.c ****     if ((just_pressed & 0x4) || (pressed & 0x4)) {
 1284               	.LM169:
 1285 064e 8091 0000 		lds r24,just_pressed
 1286 0652 82FD      		sbrc r24,2
 1287 0654 00C0      		rjmp .L74
 1288 0656 8091 0000 		lds r24,pressed
 1289 065a 82FF      		sbrs r24,2
 1290 065c 00C0      		rjmp .L80
 1291               	.L74:
 295:anim_deathcfg.c ****       just_pressed = 0;
 1293               	.LM170:
 1294 065e 1092 0000 		sts just_pressed,__zero_reg__
 297:anim_deathcfg.c ****       if (mode == SET_DCGENDER) {
 1296               	.LM171:
 1297 0662 1A36      		cpi r17,lo8(106)
 1298 0664 01F4      		brne .L80
 298:anim_deathcfg.c **** 	    cfg_gender = !cfg_gender;
 1300               	.LM172:
 1301 0666 8091 0000 		lds r24,cfg_gender
 1302 066a 90E0      		ldi r25,lo8(0)
 1303 066c 8823      		tst r24
 1304 066e 01F4      		brne .L75
 1305 0670 91E0      		ldi r25,lo8(1)
 1306               	.L75:
 1307 0672 9093 0000 		sts cfg_gender,r25
 299:anim_deathcfg.c **** 	screenmutex++;
 1309               	.LM173:
 1310 0676 8091 0000 		lds r24,screenmutex
 1311 067a 8F5F      		subi r24,lo8(-(1))
 1312 067c 8093 0000 		sts screenmutex,r24
 306:anim_deathcfg.c **** 	display_gender(INVERTED);
 1314               	.LM174:
 1315 0680 81E0      		ldi r24,lo8(1)
 1316 0682 0E94 0000 		call display_gender
 307:anim_deathcfg.c **** 	screenmutex--;
 1318               	.LM175:
 1319 0686 8091 0000 		lds r24,screenmutex
 1320 068a 8150      		subi r24,lo8(-(-1))
 1321 068c 8093 0000 		sts screenmutex,r24
 309:anim_deathcfg.c **** 	eeprom_write_byte(&EE_GENDER, cfg_gender);
 1323               	.LM176:
 1324 0690 6091 0000 		lds r22,cfg_gender
 1325 0694 80E0      		ldi r24,lo8(EE_GENDER)
 1326 0696 90E0      		ldi r25,hi8(EE_GENDER)
 1327 0698 0E94 0000 		call __eewr_byte_m328p
 310:anim_deathcfg.c **** 	deathclock_changed();   
 1329               	.LM177:
 1330 069c 0E94 0000 		call deathclock_changed
 1331               	.L80:
 271:anim_deathcfg.c ****   while (!check_timeout()) {
 1333               	.LM178:
 1334 06a0 0E94 0000 		call check_timeout
 1335 06a4 8823      		tst r24
 1336 06a6 01F4      		brne .+2
 1337 06a8 00C0      		rjmp .L76
 1338               	/* epilogue start */
 314:anim_deathcfg.c **** }
 1340               	.LM179:
 1341 06aa 1F91      		pop r17
 1342 06ac 0895      		ret
 1347               	.Lscope12:
 1349               		.stabd	78,0,0
 1351               	.global	set_deathclock_dob
 1353               	set_deathclock_dob:
 1354               		.stabd	46,0,0
 211:anim_deathcfg.c **** void set_deathclock_dob(void) {
 1356               	.LM180:
 1357               	.LFBB13:
 1358 06ae 1F93      		push r17
 1359               	/* prologue: function */
 1360               	/* frame size = 0 */
 212:anim_deathcfg.c ****    uint8_t mode = init_set_death_menu(1);
 1362               	.LM181:
 1363 06b0 81E0      		ldi r24,lo8(1)
 1364 06b2 0E94 0000 		call init_set_death_menu
 1365 06b6 182F      		mov r17,r24
 1366 06b8 00C0      		rjmp .L96
 1367               	.L92:
 216:anim_deathcfg.c ****     if (just_pressed & 0x2) {
 1369               	.LM182:
 1370 06ba 8091 0000 		lds r24,just_pressed
 1371 06be 81FF      		sbrs r24,1
 1372 06c0 00C0      		rjmp .L83
 217:anim_deathcfg.c ****       just_pressed = 0;
 1374               	.LM183:
 1375 06c2 1092 0000 		sts just_pressed,__zero_reg__
 218:anim_deathcfg.c ****       screenmutex++;
 1377               	.LM184:
 1378 06c6 8091 0000 		lds r24,screenmutex
 1379 06ca 8F5F      		subi r24,lo8(-(1))
 1380 06cc 8093 0000 		sts screenmutex,r24
 220:anim_deathcfg.c ****       if (mode == SET_DEATHCLOCK_DOB) {
 1382               	.LM185:
 1383 06d0 1B30      		cpi r17,lo8(11)
 1384 06d2 01F4      		brne .L84
 222:anim_deathcfg.c **** 	mode = next_mode_setdate[region];
 1386               	.LM186:
 1387 06d4 E091 0000 		lds r30,region
 1388 06d8 F0E0      		ldi r31,lo8(0)
 1389 06da E050      		subi r30,lo8(-(next_mode_setdate))
 1390 06dc F040      		sbci r31,hi8(-(next_mode_setdate))
 1391 06de 00C0      		rjmp .L97
 1392               	.L84:
 223:anim_deathcfg.c ****       } else if (mode == SET_MONTH) {
 1394               	.LM187:
 1395 06e0 1031      		cpi r17,lo8(16)
 1396 06e2 01F4      		brne .L86
 224:anim_deathcfg.c **** 	mode = next_mode_setmonth[region];
 1398               	.LM188:
 1399 06e4 E091 0000 		lds r30,region
 1400 06e8 F0E0      		ldi r31,lo8(0)
 1401 06ea E050      		subi r30,lo8(-(next_mode_setmonth))
 1402 06ec F040      		sbci r31,hi8(-(next_mode_setmonth))
 1403               	.L97:
 1404 06ee 1081      		ld r17,Z
 1405 06f0 00C0      		rjmp .L85
 1406               	.L86:
 225:anim_deathcfg.c ****       } else if (mode == SET_DAY) {
 1408               	.LM189:
 1409 06f2 1131      		cpi r17,lo8(17)
 1410 06f4 01F4      		brne .L87
 226:anim_deathcfg.c **** 	mode = next_mode_setday[region];
 1412               	.LM190:
 1413 06f6 E091 0000 		lds r30,region
 1414 06fa F0E0      		ldi r31,lo8(0)
 1415 06fc E050      		subi r30,lo8(-(next_mode_setday))
 1416 06fe F040      		sbci r31,hi8(-(next_mode_setday))
 1417 0700 00C0      		rjmp .L97
 1418               	.L87:
 235:anim_deathcfg.c **** 	eeprom_write_byte(&EE_DOB_MONTH,cfg_dob_m);
 1420               	.LM191:
 1421 0702 6091 0000 		lds r22,cfg_dob_m
 1422 0706 80E0      		ldi r24,lo8(EE_DOB_MONTH)
 1423 0708 90E0      		ldi r25,hi8(EE_DOB_MONTH)
 1424 070a 0E94 0000 		call __eewr_byte_m328p
 236:anim_deathcfg.c ****     eeprom_write_byte(&EE_DOB_DAY,cfg_dob_d);
 1426               	.LM192:
 1427 070e 6091 0000 		lds r22,cfg_dob_d
 1428 0712 80E0      		ldi r24,lo8(EE_DOB_DAY)
 1429 0714 90E0      		ldi r25,hi8(EE_DOB_DAY)
 1430 0716 0E94 0000 		call __eewr_byte_m328p
 237:anim_deathcfg.c ****     eeprom_write_byte(&EE_DOB_YEAR,cfg_dob_y);
 1432               	.LM193:
 1433 071a 6091 0000 		lds r22,cfg_dob_y
 1434 071e 80E0      		ldi r24,lo8(EE_DOB_YEAR)
 1435 0720 90E0      		ldi r25,hi8(EE_DOB_YEAR)
 1436 0722 0E94 0000 		call __eewr_byte_m328p
 238:anim_deathcfg.c ****     deathclock_changed();
 1438               	.LM194:
 1439 0726 0E94 0000 		call deathclock_changed
 1440 072a 1BE0      		ldi r17,lo8(11)
 1441               	.L85:
 240:anim_deathcfg.c ****       display_dob(mode);
 1443               	.LM195:
 1444 072c 812F      		mov r24,r17
 1445 072e 0E94 0000 		call display_dob
 241:anim_deathcfg.c **** 	  print_monthday_help(mode);
 1447               	.LM196:
 1448 0732 812F      		mov r24,r17
 1449 0734 0E94 0000 		call print_monthday_help
 242:anim_deathcfg.c ****       screenmutex--;
 1451               	.LM197:
 1452 0738 8091 0000 		lds r24,screenmutex
 1453 073c 8150      		subi r24,lo8(-(-1))
 1454 073e 8093 0000 		sts screenmutex,r24
 1455               	.L83:
 244:anim_deathcfg.c ****     if ((just_pressed & 0x4) || (pressed & 0x4)) {
 1457               	.LM198:
 1458 0742 8091 0000 		lds r24,just_pressed
 1459 0746 82FD      		sbrc r24,2
 1460 0748 00C0      		rjmp .L88
 1461 074a 8091 0000 		lds r24,pressed
 1462 074e 82FF      		sbrs r24,2
 1463 0750 00C0      		rjmp .L96
 1464               	.L88:
 245:anim_deathcfg.c ****       just_pressed = 0;
 1466               	.LM199:
 1467 0752 1092 0000 		sts just_pressed,__zero_reg__
 247:anim_deathcfg.c ****       screenmutex++;
 1469               	.LM200:
 1470 0756 8091 0000 		lds r24,screenmutex
 1471 075a 8F5F      		subi r24,lo8(-(1))
 1472 075c 8093 0000 		sts screenmutex,r24
 249:anim_deathcfg.c ****       if (mode == SET_MONTH) {
 1474               	.LM201:
 1475 0760 1031      		cpi r17,lo8(16)
 1476 0762 01F4      		brne .L89
 250:anim_deathcfg.c ****     cfg_dob_m++;
 1478               	.LM202:
 1479 0764 8091 0000 		lds r24,cfg_dob_m
 1480 0768 8F5F      		subi r24,lo8(-(1))
 1481 076a 8093 0000 		sts cfg_dob_m,r24
 1482 076e 00C0      		rjmp .L90
 1483               	.L89:
 252:anim_deathcfg.c ****       if (mode == SET_DAY) {
 1485               	.LM203:
 1486 0770 1131      		cpi r17,lo8(17)
 1487 0772 01F4      		brne .L91
 253:anim_deathcfg.c **** 	cfg_dob_d++;
 1489               	.LM204:
 1490 0774 8091 0000 		lds r24,cfg_dob_d
 1491 0778 8F5F      		subi r24,lo8(-(1))
 1492 077a 8093 0000 		sts cfg_dob_d,r24
 1493 077e 00C0      		rjmp .L90
 1494               	.L91:
 255:anim_deathcfg.c ****       if (mode == SET_YEAR) {
 1496               	.LM205:
 1497 0780 1231      		cpi r17,lo8(18)
 1498 0782 01F4      		brne .L90
 256:anim_deathcfg.c **** 	cfg_dob_y = (cfg_dob_y+1) % 200;
 1500               	.LM206:
 1501 0784 8091 0000 		lds r24,cfg_dob_y
 1502 0788 90E0      		ldi r25,lo8(0)
 1503 078a 0196      		adiw r24,1
 1504 078c 68EC      		ldi r22,lo8(200)
 1505 078e 70E0      		ldi r23,hi8(200)
 1506 0790 0E94 0000 		call __divmodhi4
 1507 0794 8093 0000 		sts cfg_dob_y,r24
 1508               	.L90:
 258:anim_deathcfg.c ****       add_month(&cfg_dob_m,&cfg_dob_d,cfg_dob_d+1900);
 1510               	.LM207:
 1511 0798 4091 0000 		lds r20,cfg_dob_d
 1512 079c 50E0      		ldi r21,lo8(0)
 1513 079e 4459      		subi r20,lo8(-(1900))
 1514 07a0 584F      		sbci r21,hi8(-(1900))
 1515 07a2 80E0      		ldi r24,lo8(cfg_dob_m)
 1516 07a4 90E0      		ldi r25,hi8(cfg_dob_m)
 1517 07a6 60E0      		ldi r22,lo8(cfg_dob_d)
 1518 07a8 70E0      		ldi r23,hi8(cfg_dob_d)
 1519 07aa 0E94 0000 		call add_month
 259:anim_deathcfg.c ****       display_dob(mode);
 1521               	.LM208:
 1522 07ae 812F      		mov r24,r17
 1523 07b0 0E94 0000 		call display_dob
 260:anim_deathcfg.c ****       screenmutex--;
 1525               	.LM209:
 1526 07b4 8091 0000 		lds r24,screenmutex
 1527 07b8 8150      		subi r24,lo8(-(-1))
 1528 07ba 8093 0000 		sts screenmutex,r24
 262:anim_deathcfg.c ****       if (pressed & 0x4)
 1530               	.LM210:
 1531 07be 8091 0000 		lds r24,pressed
 1532 07c2 82FF      		sbrs r24,2
 1533 07c4 00C0      		rjmp .L96
 263:anim_deathcfg.c **** 	delay_ms(200);  
 1535               	.LM211:
 1536 07c6 88EC      		ldi r24,lo8(200)
 1537 07c8 90E0      		ldi r25,hi8(200)
 1538 07ca 0E94 0000 		call delay_ms
 1539               	.L96:
 214:anim_deathcfg.c ****   while (!check_timeout()) {
 1541               	.LM212:
 1542 07ce 0E94 0000 		call check_timeout
 1543 07d2 8823      		tst r24
 1544 07d4 01F4      		brne .+2
 1545 07d6 00C0      		rjmp .L92
 1546               	/* epilogue start */
 266:anim_deathcfg.c **** }
 1548               	.LM213:
 1549 07d8 1F91      		pop r17
 1550 07da 0895      		ret
 1555               	.Lscope13:
 1557               		.stabd	78,0,0
 1559               	.global	set_deathclock_bmi
 1561               	set_deathclock_bmi:
 1562               		.stabd	46,0,0
 359:anim_deathcfg.c **** void set_deathclock_bmi(void) {
 1564               	.LM214:
 1565               	.LFBB14:
 1566 07dc AF92      		push r10
 1567 07de BF92      		push r11
 1568 07e0 CF92      		push r12
 1569 07e2 DF92      		push r13
 1570 07e4 EF92      		push r14
 1571 07e6 FF92      		push r15
 1572 07e8 1F93      		push r17
 1573 07ea CF93      		push r28
 1574 07ec DF93      		push r29
 1575               	/* prologue: function */
 1576               	/* frame size = 0 */
 360:anim_deathcfg.c ****   uint8_t mode = init_set_death_menu(4);
 1578               	.LM215:
 1579 07ee 84E0      		ldi r24,lo8(4)
 1580 07f0 0E94 0000 		call init_set_death_menu
 1581 07f4 182F      		mov r17,r24
 441:anim_deathcfg.c ****       	  	  	  cfg_bmi_height = 92;
 1583               	.LM216:
 1584 07f6 7CE5      		ldi r23,lo8(92)
 1585 07f8 A72E      		mov r10,r23
 1586 07fa B12C      		mov r11,__zero_reg__
 437:anim_deathcfg.c ****       	  	  	  cfg_bmi_height = 36;
 1588               	.LM217:
 1589 07fc 64E2      		ldi r22,lo8(36)
 1590 07fe C62E      		mov r12,r22
 1591 0800 D12C      		mov r13,__zero_reg__
 427:anim_deathcfg.c ****       	  	  	  cfg_bmi_weight = 15;
 1593               	.LM218:
 1594 0802 5FE0      		ldi r21,lo8(15)
 1595 0804 E52E      		mov r14,r21
 1596 0806 F12C      		mov r15,__zero_reg__
 423:anim_deathcfg.c ****       	  	  	  cfg_bmi_weight = 35;
 1598               	.LM219:
 1599 0808 C3E2      		ldi r28,lo8(35)
 1600 080a D0E0      		ldi r29,hi8(35)
 1601 080c 00C0      		rjmp .L122
 1602               	.L118:
 363:anim_deathcfg.c ****     if (just_pressed & 0x2) {
 1604               	.LM220:
 1605 080e 8091 0000 		lds r24,just_pressed
 1606 0812 81FF      		sbrs r24,1
 1607 0814 00C0      		rjmp .L100
 364:anim_deathcfg.c ****       just_pressed = 0;
 1609               	.LM221:
 1610 0816 1092 0000 		sts just_pressed,__zero_reg__
 365:anim_deathcfg.c ****       screenmutex++;
 1612               	.LM222:
 1613 081a 8091 0000 		lds r24,screenmutex
 1614 081e 8F5F      		subi r24,lo8(-(1))
 1615 0820 8093 0000 		sts screenmutex,r24
 367:anim_deathcfg.c ****       if (mode == SET_DEATHCLOCK_BMI) {
 1617               	.LM223:
 1618 0824 1E30      		cpi r17,lo8(14)
 1619 0826 01F4      		brne .L101
 373:anim_deathcfg.c **** 	display_bmi_set(1);
 1621               	.LM224:
 1622 0828 81E0      		ldi r24,lo8(1)
 1623 082a 0E94 0000 		call display_bmi_set
 376:anim_deathcfg.c **** 	print_menu_opts("change ut.","set unit");
 1625               	.LM225:
 1626 082e 80E0      		ldi r24,lo8(__c.2266)
 1627 0830 90E0      		ldi r25,hi8(__c.2266)
 1628 0832 60E0      		ldi r22,lo8(__c.2268)
 1629 0834 70E0      		ldi r23,hi8(__c.2268)
 1630 0836 0E94 0000 		call PRINT_MENU_OPTS
 1631 083a 1CE6      		ldi r17,lo8(108)
 1632 083c 00C0      		rjmp .L102
 1633               	.L101:
 377:anim_deathcfg.c ****       } else if (mode == SET_BMI_UNIT) {
 1635               	.LM226:
 1636 083e 1C36      		cpi r17,lo8(108)
 1637 0840 01F4      		brne .L103
 380:anim_deathcfg.c **** 	display_bmi_set(2);
 1639               	.LM227:
 1640 0842 82E0      		ldi r24,lo8(2)
 1641 0844 0E94 0000 		call display_bmi_set
 382:anim_deathcfg.c **** 	if(cfg_bmi_unit != BMI_Direct)
 1643               	.LM228:
 1644 0848 8091 0000 		lds r24,cfg_bmi_unit
 1645 084c 8230      		cpi r24,lo8(2)
 1646 084e 01F0      		breq .L104
 384:anim_deathcfg.c **** 	  print_menu_opts("change wt."," set wt.");
 1648               	.LM229:
 1649 0850 80E0      		ldi r24,lo8(__c.2272)
 1650 0852 90E0      		ldi r25,hi8(__c.2272)
 1651 0854 60E0      		ldi r22,lo8(__c.2274)
 1652 0856 70E0      		ldi r23,hi8(__c.2274)
 1653 0858 00C0      		rjmp .L123
 1654               	.L104:
 387:anim_deathcfg.c **** 	  print_menu_opts("change bmi","set bmi");
 1656               	.LM230:
 1657 085a 80E0      		ldi r24,lo8(__c.2276)
 1658 085c 90E0      		ldi r25,hi8(__c.2276)
 1659 085e 60E0      		ldi r22,lo8(__c.2278)
 1660 0860 70E0      		ldi r23,hi8(__c.2278)
 1661               	.L123:
 1662 0862 0E94 0000 		call PRINT_MENU_OPTS
 1663 0866 1DE6      		ldi r17,lo8(109)
 1664 0868 00C0      		rjmp .L102
 1665               	.L103:
 388:anim_deathcfg.c **** 	  } else if ((mode == SET_BMI_WT) && (cfg_bmi_unit != BMI_Direct)) {
 1667               	.LM231:
 1668 086a 1D36      		cpi r17,lo8(109)
 1669 086c 01F4      		brne .L105
 1670 086e 8091 0000 		lds r24,cfg_bmi_unit
 1671 0872 8230      		cpi r24,lo8(2)
 1672 0874 01F0      		breq .L105
 390:anim_deathcfg.c ****     display_bmi_set(4);
 1674               	.LM232:
 1675 0876 84E0      		ldi r24,lo8(4)
 1676 0878 0E94 0000 		call display_bmi_set
 392:anim_deathcfg.c ****     print_menu_opts("change ht.","set ht.");
 1678               	.LM233:
 1679 087c 80E0      		ldi r24,lo8(__c.2280)
 1680 087e 90E0      		ldi r25,hi8(__c.2280)
 1681 0880 60E0      		ldi r22,lo8(__c.2282)
 1682 0882 70E0      		ldi r23,hi8(__c.2282)
 1683 0884 0E94 0000 		call PRINT_MENU_OPTS
 1684 0888 1EE6      		ldi r17,lo8(110)
 1685 088a 00C0      		rjmp .L102
 1686               	.L105:
 395:anim_deathcfg.c **** 	display_bmi_set(NORMAL);
 1688               	.LM234:
 1689 088c 80E0      		ldi r24,lo8(0)
 1690 088e 0E94 0000 		call display_bmi_set
 397:anim_deathcfg.c **** 	print_menu_advance();
 1692               	.LM235:
 1693 0892 0E94 0000 		call print_menu_advance
 1694 0896 1EE0      		ldi r17,lo8(14)
 1695               	.L102:
 399:anim_deathcfg.c ****       screenmutex--;
 1697               	.LM236:
 1698 0898 8091 0000 		lds r24,screenmutex
 1699 089c 8150      		subi r24,lo8(-(-1))
 1700 089e 8093 0000 		sts screenmutex,r24
 1701               	.L100:
 401:anim_deathcfg.c ****     if ((just_pressed & 0x4) || (pressed & 0x4)) {
 1703               	.LM237:
 1704 08a2 8091 0000 		lds r24,just_pressed
 1705 08a6 82FD      		sbrc r24,2
 1706 08a8 00C0      		rjmp .L106
 1707 08aa 8091 0000 		lds r24,pressed
 1708 08ae 82FF      		sbrs r24,2
 1709 08b0 00C0      		rjmp .L122
 1710               	.L106:
 402:anim_deathcfg.c ****       just_pressed = 0;
 1712               	.LM238:
 1713 08b2 1092 0000 		sts just_pressed,__zero_reg__
 403:anim_deathcfg.c ****       screenmutex++;
 1715               	.LM239:
 1716 08b6 8091 0000 		lds r24,screenmutex
 1717 08ba 8F5F      		subi r24,lo8(-(1))
 1718 08bc 8093 0000 		sts screenmutex,r24
 405:anim_deathcfg.c ****       if (mode == SET_BMI_UNIT) { 
 1720               	.LM240:
 1721 08c0 1C36      		cpi r17,lo8(108)
 1722 08c2 01F4      		brne .L107
 406:anim_deathcfg.c ****       	  cfg_bmi_unit = (cfg_bmi_unit + 1) % 3;
 1724               	.LM241:
 1725 08c4 8091 0000 		lds r24,cfg_bmi_unit
 1726 08c8 90E0      		ldi r25,lo8(0)
 1727 08ca 0196      		adiw r24,1
 1728 08cc 63E0      		ldi r22,lo8(3)
 1729 08ce 70E0      		ldi r23,hi8(3)
 1730 08d0 0E94 0000 		call __divmodhi4
 1731 08d4 8093 0000 		sts cfg_bmi_unit,r24
 407:anim_deathcfg.c ****       	  if(cfg_bmi_unit == BMI_Imperial) {
 1733               	.LM242:
 1734 08d8 8091 0000 		lds r24,cfg_bmi_unit
 1735 08dc 8823      		tst r24
 1736 08de 01F4      		brne .L108
 408:anim_deathcfg.c ****       	  	  cfg_bmi_weight = 35;
 1738               	.LM243:
 1739 08e0 D093 0000 		sts (cfg_bmi_weight)+1,r29
 1740 08e4 C093 0000 		sts cfg_bmi_weight,r28
 409:anim_deathcfg.c ****       	  	  cfg_bmi_height = 36;
 1742               	.LM244:
 1743 08e8 D092 0000 		sts (cfg_bmi_height)+1,r13
 1744 08ec C092 0000 		sts cfg_bmi_height,r12
 1745 08f0 00C0      		rjmp .L109
 1746               	.L108:
 410:anim_deathcfg.c ****       	  } else if (cfg_bmi_unit == BMI_Metric) {
 1748               	.LM245:
 1749 08f2 8091 0000 		lds r24,cfg_bmi_unit
 1750 08f6 8130      		cpi r24,lo8(1)
 1751 08f8 01F4      		brne .L110
 411:anim_deathcfg.c ****       	  	  cfg_bmi_weight = 15;
 1753               	.LM246:
 1754 08fa F092 0000 		sts (cfg_bmi_weight)+1,r15
 1755 08fe E092 0000 		sts cfg_bmi_weight,r14
 412:anim_deathcfg.c ****       	  	  cfg_bmi_height = 92;
 1757               	.LM247:
 1758 0902 B092 0000 		sts (cfg_bmi_height)+1,r11
 1759 0906 A092 0000 		sts cfg_bmi_height,r10
 1760 090a 00C0      		rjmp .L109
 1761               	.L110:
 414:anim_deathcfg.c ****       	  	  cfg_bmi_weight = 0;
 1763               	.LM248:
 1764 090c 1092 0000 		sts (cfg_bmi_weight)+1,__zero_reg__
 1765 0910 1092 0000 		sts cfg_bmi_weight,__zero_reg__
 1766               	.L109:
 416:anim_deathcfg.c ****       	  display_bmi_set(1);
 1768               	.LM249:
 1769 0914 81E0      		ldi r24,lo8(1)
 1770 0916 00C0      		rjmp .L124
 1771               	.L107:
 418:anim_deathcfg.c ****       if (mode == SET_BMI_WT) {
 1773               	.LM250:
 1774 0918 1D36      		cpi r17,lo8(109)
 1775 091a 01F0      		breq .+2
 1776 091c 00C0      		rjmp .L112
 419:anim_deathcfg.c ****       	  if(cfg_bmi_unit == BMI_Imperial) {
 1778               	.LM251:
 1779 091e 8091 0000 		lds r24,cfg_bmi_unit
 1780 0922 8823      		tst r24
 1781 0924 01F4      		brne .L113
 421:anim_deathcfg.c ****       	  	  cfg_bmi_weight += 5;
 1783               	.LM252:
 1784 0926 8091 0000 		lds r24,cfg_bmi_weight
 1785 092a 9091 0000 		lds r25,(cfg_bmi_weight)+1
 1786 092e 0596      		adiw r24,5
 1787 0930 9093 0000 		sts (cfg_bmi_weight)+1,r25
 1788 0934 8093 0000 		sts cfg_bmi_weight,r24
 422:anim_deathcfg.c ****       	  	  if ( cfg_bmi_weight > 660 )
 1790               	.LM253:
 1791 0938 8091 0000 		lds r24,cfg_bmi_weight
 1792 093c 9091 0000 		lds r25,(cfg_bmi_weight)+1
 1793 0940 8559      		subi r24,lo8(661)
 1794 0942 9240      		sbci r25,hi8(661)
 1795 0944 00F0      		brlo .L114
 423:anim_deathcfg.c ****       	  	  	  cfg_bmi_weight = 35;
 1797               	.LM254:
 1798 0946 D093 0000 		sts (cfg_bmi_weight)+1,r29
 1799 094a C093 0000 		sts cfg_bmi_weight,r28
 1800 094e 00C0      		rjmp .L114
 1801               	.L113:
 424:anim_deathcfg.c ****       	  } else if (cfg_bmi_unit == BMI_Metric) {
 1803               	.LM255:
 1804 0950 8091 0000 		lds r24,cfg_bmi_unit
 1805 0954 8130      		cpi r24,lo8(1)
 1806 0956 01F4      		brne .L115
 425:anim_deathcfg.c ****       	  	  cfg_bmi_weight += 5;
 1808               	.LM256:
 1809 0958 8091 0000 		lds r24,cfg_bmi_weight
 1810 095c 9091 0000 		lds r25,(cfg_bmi_weight)+1
 1811 0960 0596      		adiw r24,5
 1812 0962 9093 0000 		sts (cfg_bmi_weight)+1,r25
 1813 0966 8093 0000 		sts cfg_bmi_weight,r24
 426:anim_deathcfg.c ****       	  	  if ( cfg_bmi_weight > 300 )
 1815               	.LM257:
 1816 096a 8091 0000 		lds r24,cfg_bmi_weight
 1817 096e 9091 0000 		lds r25,(cfg_bmi_weight)+1
 1818 0972 8D52      		subi r24,lo8(301)
 1819 0974 9140      		sbci r25,hi8(301)
 1820 0976 00F0      		brlo .L114
 427:anim_deathcfg.c ****       	  	  	  cfg_bmi_weight = 15;
 1822               	.LM258:
 1823 0978 F092 0000 		sts (cfg_bmi_weight)+1,r15
 1824 097c E092 0000 		sts cfg_bmi_weight,r14
 1825 0980 00C0      		rjmp .L114
 1826               	.L115:
 429:anim_deathcfg.c ****       	  	  cfg_bmi_weight = (cfg_bmi_weight + 1) % 256;
 1828               	.LM259:
 1829 0982 8091 0000 		lds r24,cfg_bmi_weight
 1830 0986 9091 0000 		lds r25,(cfg_bmi_weight)+1
 1831 098a 0196      		adiw r24,1
 1832 098c 9070      		andi r25,hi8(255)
 1833 098e 9093 0000 		sts (cfg_bmi_weight)+1,r25
 1834 0992 8093 0000 		sts cfg_bmi_weight,r24
 1835               	.L114:
 431:anim_deathcfg.c ****       	  display_bmi_set(2);
 1837               	.LM260:
 1838 0996 82E0      		ldi r24,lo8(2)
 1839 0998 00C0      		rjmp .L124
 1840               	.L112:
 433:anim_deathcfg.c ****       if (mode == SET_BMI_HT) {
 1842               	.LM261:
 1843 099a 1E36      		cpi r17,lo8(110)
 1844 099c 01F4      		brne .L111
 434:anim_deathcfg.c ****       	  if(cfg_bmi_unit == BMI_Imperial) {
 1846               	.LM262:
 1847 099e 8091 0000 		lds r24,cfg_bmi_unit
 1848 09a2 8823      		tst r24
 1849 09a4 01F4      		brne .L116
 435:anim_deathcfg.c ****       	  	  cfg_bmi_height++;
 1851               	.LM263:
 1852 09a6 8091 0000 		lds r24,cfg_bmi_height
 1853 09aa 9091 0000 		lds r25,(cfg_bmi_height)+1
 1854 09ae 0196      		adiw r24,1
 1855 09b0 9093 0000 		sts (cfg_bmi_height)+1,r25
 1856 09b4 8093 0000 		sts cfg_bmi_height,r24
 436:anim_deathcfg.c ****       	  	  if ( cfg_bmi_height > 120 )
 1858               	.LM264:
 1859 09b8 8091 0000 		lds r24,cfg_bmi_height
 1860 09bc 9091 0000 		lds r25,(cfg_bmi_height)+1
 1861 09c0 8937      		cpi r24,121
 1862 09c2 9105      		cpc r25,__zero_reg__
 1863 09c4 00F0      		brlo .L117
 437:anim_deathcfg.c ****       	  	  	  cfg_bmi_height = 36;
 1865               	.LM265:
 1866 09c6 D092 0000 		sts (cfg_bmi_height)+1,r13
 1867 09ca C092 0000 		sts cfg_bmi_height,r12
 1868 09ce 00C0      		rjmp .L117
 1869               	.L116:
 438:anim_deathcfg.c ****       	  } else if (cfg_bmi_unit == BMI_Metric) {
 1871               	.LM266:
 1872 09d0 8091 0000 		lds r24,cfg_bmi_unit
 1873 09d4 8130      		cpi r24,lo8(1)
 1874 09d6 01F4      		brne .L117
 439:anim_deathcfg.c ****       	  	  cfg_bmi_height++;
 1876               	.LM267:
 1877 09d8 8091 0000 		lds r24,cfg_bmi_height
 1878 09dc 9091 0000 		lds r25,(cfg_bmi_height)+1
 1879 09e0 0196      		adiw r24,1
 1880 09e2 9093 0000 		sts (cfg_bmi_height)+1,r25
 1881 09e6 8093 0000 		sts cfg_bmi_height,r24
 440:anim_deathcfg.c ****       	  	  if ( cfg_bmi_height > 305 )
 1883               	.LM268:
 1884 09ea 8091 0000 		lds r24,cfg_bmi_height
 1885 09ee 9091 0000 		lds r25,(cfg_bmi_height)+1
 1886 09f2 8253      		subi r24,lo8(306)
 1887 09f4 9140      		sbci r25,hi8(306)
 1888 09f6 00F0      		brlo .L117
 441:anim_deathcfg.c ****       	  	  	  cfg_bmi_height = 92;
 1890               	.LM269:
 1891 09f8 B092 0000 		sts (cfg_bmi_height)+1,r11
 1892 09fc A092 0000 		sts cfg_bmi_height,r10
 1893               	.L117:
 443:anim_deathcfg.c ****       	  display_bmi_set(4);
 1895               	.LM270:
 1896 0a00 84E0      		ldi r24,lo8(4)
 1897               	.L124:
 1898 0a02 0E94 0000 		call display_bmi_set
 1899               	.L111:
 445:anim_deathcfg.c ****       eeprom_write_byte(&EE_BMI_UNIT,cfg_bmi_unit);
 1901               	.LM271:
 1902 0a06 6091 0000 		lds r22,cfg_bmi_unit
 1903 0a0a 80E0      		ldi r24,lo8(EE_BMI_UNIT)
 1904 0a0c 90E0      		ldi r25,hi8(EE_BMI_UNIT)
 1905 0a0e 0E94 0000 		call __eewr_byte_m328p
 446:anim_deathcfg.c ****       eeprom_write_word(&EE_BMI_WEIGHT,cfg_bmi_weight);
 1907               	.LM272:
 1908 0a12 6091 0000 		lds r22,cfg_bmi_weight
 1909 0a16 7091 0000 		lds r23,(cfg_bmi_weight)+1
 1910 0a1a 80E0      		ldi r24,lo8(EE_BMI_WEIGHT)
 1911 0a1c 90E0      		ldi r25,hi8(EE_BMI_WEIGHT)
 1912 0a1e 0E94 0000 		call __eewr_word_m328p
 447:anim_deathcfg.c ****       eeprom_write_word(&EE_BMI_HEIGHT,cfg_bmi_height);
 1914               	.LM273:
 1915 0a22 6091 0000 		lds r22,cfg_bmi_height
 1916 0a26 7091 0000 		lds r23,(cfg_bmi_height)+1
 1917 0a2a 80E0      		ldi r24,lo8(EE_BMI_HEIGHT)
 1918 0a2c 90E0      		ldi r25,hi8(EE_BMI_HEIGHT)
 1919 0a2e 0E94 0000 		call __eewr_word_m328p
 448:anim_deathcfg.c ****       deathclock_changed();
 1921               	.LM274:
 1922 0a32 0E94 0000 		call deathclock_changed
 449:anim_deathcfg.c ****       screenmutex--;
 1924               	.LM275:
 1925 0a36 8091 0000 		lds r24,screenmutex
 1926 0a3a 8150      		subi r24,lo8(-(-1))
 1927 0a3c 8093 0000 		sts screenmutex,r24
 450:anim_deathcfg.c ****       if (pressed & 0x4)
 1929               	.LM276:
 1930 0a40 8091 0000 		lds r24,pressed
 1931 0a44 82FF      		sbrs r24,2
 1932 0a46 00C0      		rjmp .L122
 451:anim_deathcfg.c **** 	delay_ms(200);
 1934               	.LM277:
 1935 0a48 88EC      		ldi r24,lo8(200)
 1936 0a4a 90E0      		ldi r25,hi8(200)
 1937 0a4c 0E94 0000 		call delay_ms
 1938               	.L122:
 362:anim_deathcfg.c ****   while (!check_timeout()) {
 1940               	.LM278:
 1941 0a50 0E94 0000 		call check_timeout
 1942 0a54 8823      		tst r24
 1943 0a56 01F4      		brne .+2
 1944 0a58 00C0      		rjmp .L118
 1945               	/* epilogue start */
 454:anim_deathcfg.c **** }
 1947               	.LM279:
 1948 0a5a DF91      		pop r29
 1949 0a5c CF91      		pop r28
 1950 0a5e 1F91      		pop r17
 1951 0a60 FF90      		pop r15
 1952 0a62 EF90      		pop r14
 1953 0a64 DF90      		pop r13
 1954 0a66 CF90      		pop r12
 1955 0a68 BF90      		pop r11
 1956 0a6a AF90      		pop r10
 1957 0a6c 0895      		ret
 1962               	.Lscope14:
 1964               		.stabd	78,0,0
 1966               	.global	initanim_deathcfg
 1968               	initanim_deathcfg:
 1969               		.stabd	46,0,0
 497:anim_deathcfg.c **** 
 498:anim_deathcfg.c **** void initanim_deathcfg(void) {
 1971               	.LM280:
 1972               	.LFBB15:
 1973 0a6e DF92      		push r13
 1974 0a70 EF92      		push r14
 1975 0a72 FF92      		push r15
 1976 0a74 0F93      		push r16
 1977 0a76 1F93      		push r17
 1978               	/* prologue: function */
 1979               	/* frame size = 0 */
 499:anim_deathcfg.c **** 
 500:anim_deathcfg.c ****   load_etd();	//Only need to do this once at power on, and once if Death Clock settings are changed
 1981               	.LM281:
 1982 0a78 0E94 0000 		call load_etd
 501:anim_deathcfg.c ****   do {
 502:anim_deathcfg.c ****   	if(just_pressed & 1)
 503:anim_deathcfg.c ****   		just_pressed = 0;
 504:anim_deathcfg.c ****   	if(displaymode == SHOW_TIME) {
 505:anim_deathcfg.c ****   		displaymode = SET_DEATHCLOCK_DOB;
 506:anim_deathcfg.c **** 		set_deathclock_dob();
 507:anim_deathcfg.c ****   	} else if (displaymode == SET_DEATHCLOCK_DOB) {
 508:anim_deathcfg.c ****   		displaymode = SET_DEATHCLOCK_GENDER;
 509:anim_deathcfg.c **** 		set_deathclock_gender();
 510:anim_deathcfg.c ****   	} else if (displaymode == SET_DEATHCLOCK_MODE) {
 511:anim_deathcfg.c ****   		displaymode = SET_DEATHCLOCK_BMI;
 512:anim_deathcfg.c **** 		set_deathclock_bmi();
 513:anim_deathcfg.c ****   	} else if (displaymode == SET_DEATHCLOCK_GENDER) {
 514:anim_deathcfg.c ****   		displaymode = SET_DEATHCLOCK_MODE;
 515:anim_deathcfg.c **** 		set_deathclock_mode();
 516:anim_deathcfg.c ****   	} else if (displaymode == SET_DEATHCLOCK_BMI) {
 517:anim_deathcfg.c ****   		displaymode = SET_DEATHCLOCK_SMOKER;
 1984               	.LM282:
 1985 0a7c AFE0      		ldi r26,lo8(15)
 1986 0a7e DA2E      		mov r13,r26
 515:anim_deathcfg.c ****   		displaymode = SET_DEATHCLOCK_MODE;
 1988               	.LM283:
 1989 0a80 FDE0      		ldi r31,lo8(13)
 1990 0a82 EF2E      		mov r14,r31
 512:anim_deathcfg.c ****   		displaymode = SET_DEATHCLOCK_BMI;
 1992               	.LM284:
 1993 0a84 EEE0      		ldi r30,lo8(14)
 1994 0a86 FE2E      		mov r15,r30
 509:anim_deathcfg.c ****   		displaymode = SET_DEATHCLOCK_GENDER;
 1996               	.LM285:
 1997 0a88 0CE0      		ldi r16,lo8(12)
 506:anim_deathcfg.c ****   		displaymode = SET_DEATHCLOCK_DOB;
 1999               	.LM286:
 2000 0a8a 1BE0      		ldi r17,lo8(11)
 2001               	.L133:
 503:anim_deathcfg.c ****   	if(just_pressed & 1)
 2003               	.LM287:
 2004 0a8c 8091 0000 		lds r24,just_pressed
 2005 0a90 80FF      		sbrs r24,0
 2006 0a92 00C0      		rjmp .L126
 504:anim_deathcfg.c ****   		just_pressed = 0;
 2008               	.LM288:
 2009 0a94 1092 0000 		sts just_pressed,__zero_reg__
 2010               	.L126:
 505:anim_deathcfg.c ****   	if(displaymode == SHOW_TIME) {
 2012               	.LM289:
 2013 0a98 8091 0000 		lds r24,displaymode
 2014 0a9c 8823      		tst r24
 2015 0a9e 01F4      		brne .L127
 506:anim_deathcfg.c ****   		displaymode = SET_DEATHCLOCK_DOB;
 2017               	.LM290:
 2018 0aa0 1093 0000 		sts displaymode,r17
 507:anim_deathcfg.c **** 		set_deathclock_dob();
 2020               	.LM291:
 2021 0aa4 0E94 0000 		call set_deathclock_dob
 2022 0aa8 00C0      		rjmp .L128
 2023               	.L127:
 508:anim_deathcfg.c ****   	} else if (displaymode == SET_DEATHCLOCK_DOB) {
 2025               	.LM292:
 2026 0aaa 8091 0000 		lds r24,displaymode
 2027 0aae 8B30      		cpi r24,lo8(11)
 2028 0ab0 01F4      		brne .L129
 509:anim_deathcfg.c ****   		displaymode = SET_DEATHCLOCK_GENDER;
 2030               	.LM293:
 2031 0ab2 0093 0000 		sts displaymode,r16
 510:anim_deathcfg.c **** 		set_deathclock_gender();
 2033               	.LM294:
 2034 0ab6 0E94 0000 		call set_deathclock_gender
 2035 0aba 00C0      		rjmp .L128
 2036               	.L129:
 511:anim_deathcfg.c ****   	} else if (displaymode == SET_DEATHCLOCK_MODE) {
 2038               	.LM295:
 2039 0abc 8091 0000 		lds r24,displaymode
 2040 0ac0 8D30      		cpi r24,lo8(13)
 2041 0ac2 01F4      		brne .L130
 512:anim_deathcfg.c ****   		displaymode = SET_DEATHCLOCK_BMI;
 2043               	.LM296:
 2044 0ac4 F092 0000 		sts displaymode,r15
 513:anim_deathcfg.c **** 		set_deathclock_bmi();
 2046               	.LM297:
 2047 0ac8 0E94 0000 		call set_deathclock_bmi
 2048 0acc 00C0      		rjmp .L128
 2049               	.L130:
 514:anim_deathcfg.c ****   	} else if (displaymode == SET_DEATHCLOCK_GENDER) {
 2051               	.LM298:
 2052 0ace 8091 0000 		lds r24,displaymode
 2053 0ad2 8C30      		cpi r24,lo8(12)
 2054 0ad4 01F4      		brne .L131
 515:anim_deathcfg.c ****   		displaymode = SET_DEATHCLOCK_MODE;
 2056               	.LM299:
 2057 0ad6 E092 0000 		sts displaymode,r14
 516:anim_deathcfg.c **** 		set_deathclock_mode();
 2059               	.LM300:
 2060 0ada 0E94 0000 		call set_deathclock_mode
 2061 0ade 00C0      		rjmp .L128
 2062               	.L131:
 517:anim_deathcfg.c ****   	} else if (displaymode == SET_DEATHCLOCK_BMI) {
 2064               	.LM301:
 2065 0ae0 8091 0000 		lds r24,displaymode
 2066 0ae4 8E30      		cpi r24,lo8(14)
 2067 0ae6 01F4      		brne .L128
 2069               	.LM302:
 2070 0ae8 D092 0000 		sts displaymode,r13
 518:anim_deathcfg.c **** 		set_deathclock_smoker();
 2072               	.LM303:
 2073 0aec 0E94 0000 		call set_deathclock_smoker
 2074               	.L128:
 519:anim_deathcfg.c ****   	}
 520:anim_deathcfg.c ****   } while ((displaymode != SHOW_TIME) && (displaymode != SET_DEATHCLOCK_SMOKER));
 2076               	.LM304:
 2077 0af0 8091 0000 		lds r24,displaymode
 2078 0af4 8823      		tst r24
 2079 0af6 01F0      		breq .L132
 2080 0af8 8091 0000 		lds r24,displaymode
 2081 0afc 8F30      		cpi r24,lo8(15)
 2082 0afe 01F4      		brne .L133
 2083               	.L132:
 521:anim_deathcfg.c ****   just_pressed = 1;	//Exit, returning to the main cfg menu.
 2085               	.LM305:
 2086 0b00 81E0      		ldi r24,lo8(1)
 2087 0b02 8093 0000 		sts just_pressed,r24
 522:anim_deathcfg.c ****   displaymode = CFG_MENU;
 2089               	.LM306:
 2090 0b06 82E6      		ldi r24,lo8(98)
 2091 0b08 8093 0000 		sts displaymode,r24
 523:anim_deathcfg.c ****   displaystyle=eeprom_read_byte(&EE_STYLE);
 2093               	.LM307:
 2094 0b0c 80E0      		ldi r24,lo8(EE_STYLE)
 2095 0b0e 90E0      		ldi r25,hi8(EE_STYLE)
 2096 0b10 0E94 0000 		call __eerd_byte_m328p
 2097 0b14 8093 0000 		sts displaystyle,r24
 524:anim_deathcfg.c ****   glcdClearScreen();
 2099               	.LM308:
 2100 0b18 0E94 0000 		call glcdClearScreen
 2101               	/* epilogue start */
 525:anim_deathcfg.c **** }
 2103               	.LM309:
 2104 0b1c 1F91      		pop r17
 2105 0b1e 0F91      		pop r16
 2106 0b20 FF90      		pop r15
 2107 0b22 EF90      		pop r14
 2108 0b24 DF90      		pop r13
 2109 0b26 0895      		ret
 2111               	.Lscope15:
 2113               		.stabd	78,0,0
 2114               		.section	.progmem.data,"a",@progbits
 2117               	__c.2282:
 2118 0000 7365 7420 		.string	"set ht."
 2118      6874 2E00 
 2121               	__c.2280:
 2122 0008 6368 616E 		.string	"change ht."
 2122      6765 2068 
 2122      742E 00
 2125               	__c.2278:
 2126 0013 7365 7420 		.string	"set bmi"
 2126      626D 6900 
 2129               	__c.2276:
 2130 001b 6368 616E 		.string	"change bmi"
 2130      6765 2062 
 2130      6D69 00
 2133               	__c.2274:
 2134 0026 2073 6574 		.string	" set wt."
 2134      2077 742E 
 2134      00
 2137               	__c.2272:
 2138 002f 6368 616E 		.string	"change wt."
 2138      6765 2077 
 2138      742E 00
 2141               	__c.2268:
 2142 003a 7365 7420 		.string	"set unit"
 2142      756E 6974 
 2142      00
 2145               	__c.2266:
 2146 0043 6368 616E 		.string	"change ut."
 2146      6765 2075 
 2146      742E 00
 2149               	__c.2102:
 2150 004e 4D65 6E75 		.string	"Menu"
 2150      00
 2153               	__c.2100:
 2154 0053 436F 6E66 		.string	"Config"
 2154      6967 00
 2157               	__c.2098:
 2158 005a 4465 6174 		.string	"DeathChron"
 2158      6843 6872 
 2158      6F6E 00
 2161               	__c.2092:
 2162 0065 204E 6F00 		.string	" No"
 2165               	__c.2090:
 2166 0069 5965 7300 		.string	"Yes"
 2169               	__c.2088:
 2170 006d 536D 6F6B 		.string	"Smoker?:         "
 2170      6572 3F3A 
 2170      2020 2020 
 2170      2020 2020 
 2170      2000 
 2173               	__c.2068:
 2174 007f 2020 2020 		.string	"         "
 2174      2020 2020 
 2174      2000 
 2177               	__c.2066:
 2178 0089 424D 493A 		.string	"BMI:"
 2178      00
 2181               	__c.2064:
 2182 008e 636D 00   		.string	"cm"
 2185               	__c.2062:
 2186 0091 6B67 2000 		.string	"kg "
 2189               	__c.2060:
 2190 0095 4D65 743A 		.string	"Met:"
 2190      00
 2193               	__c.2058:
 2194 009a 6674 00   		.string	"ft"
 2197               	__c.2056:
 2198 009d 6C62 2000 		.string	"lb "
 2201               	__c.2054:
 2202 00a1 496D 703A 		.string	"Imp:"
 2202      00
 2205               	__c.2052:
 2206 00a6 5365 7420 		.string	"Set "
 2206      00
 2209               	__c.2044:
 2210 00ab 2020 2053 		.string	"   Sadistic"
 2210      6164 6973 
 2210      7469 6300 
 2213               	__c.2042:
 2214 00b7 204F 7074 		.string	" Optimistic"
 2214      696D 6973 
 2214      7469 6300 
 2217               	__c.2040:
 2218 00c3 5065 7373 		.string	"Pessimistic"
 2218      696D 6973 
 2218      7469 6300 
 2221               	__c.2038:
 2222 00cf 2020 2020 		.string	"     Normal"
 2222      204E 6F72 
 2222      6D61 6C00 
 2225               	__c.2036:
 2226 00db 5365 7420 		.string	"Set Mode:"
 2226      4D6F 6465 
 2226      3A00 
 2229               	__c.2030:
 2230 00e5 4665 6D61 		.string	"Female"
 2230      6C65 00
 2233               	__c.2028:
 2234 00ec 2020 4D61 		.string	"  Male"
 2234      6C65 00
 2237               	__c.2026:
 2238 00f3 5365 7420 		.string	"Set Gender:   "
 2238      4765 6E64 
 2238      6572 3A20 
 2238      2020 00
 2241               	__c.2003:
 2242 0102 5365 7420 		.string	"Set DOB:  "
 2242      444F 423A 
 2242      2020 00
 2243               		.data
 2246               	C.1.1976:
 2247 0000 48        		.byte	72
 2248 0001 4E        		.byte	78
 2249 0002 39        		.byte	57
 2250 0003 3F        		.byte	63
 2251 0004 52        		.byte	82
 2252 0005 58        		.byte	88
 2253 0006 23        		.byte	35
 2254 0007 26        		.byte	38
 2255               		.comm cfg_dob_d,1,1
 2256               		.comm cfg_dob_m,1,1
 2257               		.comm cfg_dob_y,1,1
 2258               		.comm cfg_gender,1,1
 2259               		.comm cfg_dc_mode,1,1
 2260               		.comm cfg_bmi_unit,1,1
 2261               		.comm cfg_smoker,1,1
 2262               		.comm cfg_bmi_height,2,1
 2263               		.comm cfg_bmi_weight,2,1
 2305               		.text
 2307               	.Letext0:
DEFINED SYMBOLS
                            *ABS*:00000000 anim_deathcfg.c
     /tmp/ccseaxAu.s:2      *ABS*:0000003f __SREG__
     /tmp/ccseaxAu.s:3      *ABS*:0000003e __SP_H__
     /tmp/ccseaxAu.s:4      *ABS*:0000003d __SP_L__
     /tmp/ccseaxAu.s:5      *ABS*:00000034 __CCP__
     /tmp/ccseaxAu.s:6      *ABS*:00000000 __tmp_reg__
     /tmp/ccseaxAu.s:7      *ABS*:00000001 __zero_reg__
     /tmp/ccseaxAu.s:133    .text:00000000 deathclock_changed
     /tmp/ccseaxAu.s:2246   .data:00000000 C.1.1976
                            *COM*:00000001 cfg_dob_y
                            *COM*:00000001 cfg_dc_mode
                            *COM*:00000001 cfg_gender
     /tmp/ccseaxAu.s:276    .text:000000e4 display_smoker
     /tmp/ccseaxAu.s:2169   .progmem.data:0000006d __c.2088
                            *COM*:00000001 cfg_smoker
     /tmp/ccseaxAu.s:2165   .progmem.data:00000069 __c.2090
     /tmp/ccseaxAu.s:2161   .progmem.data:00000065 __c.2092
     /tmp/ccseaxAu.s:327    .text:00000116 display_dc_mode
     /tmp/ccseaxAu.s:2225   .progmem.data:000000db __c.2036
     /tmp/ccseaxAu.s:2221   .progmem.data:000000cf __c.2038
     /tmp/ccseaxAu.s:2217   .progmem.data:000000c3 __c.2040
     /tmp/ccseaxAu.s:2213   .progmem.data:000000b7 __c.2042
     /tmp/ccseaxAu.s:2209   .progmem.data:000000ab __c.2044
     /tmp/ccseaxAu.s:400    .text:00000164 display_gender
     /tmp/ccseaxAu.s:2237   .progmem.data:000000f3 __c.2026
     /tmp/ccseaxAu.s:2233   .progmem.data:000000ec __c.2028
     /tmp/ccseaxAu.s:2229   .progmem.data:000000e5 __c.2030
     /tmp/ccseaxAu.s:451    .text:00000196 display_dob
     /tmp/ccseaxAu.s:2241   .progmem.data:00000102 __c.2003
                            *COM*:00000001 cfg_dob_m
                            *COM*:00000001 cfg_dob_d
     /tmp/ccseaxAu.s:571    .text:0000024a printnumber_3d
     /tmp/ccseaxAu.s:615    .text:0000027e display_bmi_set
     /tmp/ccseaxAu.s:2205   .progmem.data:000000a6 __c.2052
                            *COM*:00000001 cfg_bmi_unit
     /tmp/ccseaxAu.s:2201   .progmem.data:000000a1 __c.2054
                            *COM*:00000002 cfg_bmi_weight
     /tmp/ccseaxAu.s:2197   .progmem.data:0000009d __c.2056
                            *COM*:00000002 cfg_bmi_height
     /tmp/ccseaxAu.s:2193   .progmem.data:0000009a __c.2058
     /tmp/ccseaxAu.s:2189   .progmem.data:00000095 __c.2060
     /tmp/ccseaxAu.s:2185   .progmem.data:00000091 __c.2062
     /tmp/ccseaxAu.s:2181   .progmem.data:0000008e __c.2064
     /tmp/ccseaxAu.s:2177   .progmem.data:00000089 __c.2066
     /tmp/ccseaxAu.s:2173   .progmem.data:0000007f __c.2068
     /tmp/ccseaxAu.s:769    .text:00000380 display_death_menu
     /tmp/ccseaxAu.s:2157   .progmem.data:0000005a __c.2098
     /tmp/ccseaxAu.s:2153   .progmem.data:00000053 __c.2100
     /tmp/ccseaxAu.s:2149   .progmem.data:0000004e __c.2102
     /tmp/ccseaxAu.s:913    .text:00000468 init_set_death_menu
     /tmp/ccseaxAu.s:973    .text:000004b0 set_deathclock_smoker
     /tmp/ccseaxAu.s:1100   .text:0000055a set_deathclock_mode
     /tmp/ccseaxAu.s:1226   .text:00000604 set_deathclock_gender
     /tmp/ccseaxAu.s:1353   .text:000006ae set_deathclock_dob
     /tmp/ccseaxAu.s:1561   .text:000007dc set_deathclock_bmi
     /tmp/ccseaxAu.s:2145   .progmem.data:00000043 __c.2266
     /tmp/ccseaxAu.s:2141   .progmem.data:0000003a __c.2268
     /tmp/ccseaxAu.s:2137   .progmem.data:0000002f __c.2272
     /tmp/ccseaxAu.s:2133   .progmem.data:00000026 __c.2274
     /tmp/ccseaxAu.s:2129   .progmem.data:0000001b __c.2276
     /tmp/ccseaxAu.s:2125   .progmem.data:00000013 __c.2278
     /tmp/ccseaxAu.s:2121   .progmem.data:00000008 __c.2280
     /tmp/ccseaxAu.s:2117   .progmem.data:00000000 __c.2282
     /tmp/ccseaxAu.s:1968   .text:00000a6e initanim_deathcfg

UNDEFINED SYMBOLS
__do_copy_data
__do_clear_bss
date_y
date_m
EE_SET_MONTH
__eewr_byte_m328p
date_d
EE_SET_DAY
EE_SET_YEAR
time_h
EE_SET_HOUR
time_m
EE_SET_MIN
time_s
EE_SET_SEC
load_etd
glcdSetAddress
glcdPutStr_rom
region
printnumber
glcdWriteChar
__divmodhi4
__udivmodhi4
EE_DOB_MONTH
__eerd_byte_m328p
EE_DOB_DAY
EE_DOB_YEAR
EE_GENDER
EE_DC_MODE
EE_BMI_UNIT
EE_BMI_HEIGHT
__eerd_word_m328p
EE_BMI_WEIGHT
EE_SMOKER
screenmutex
glcdClearScreen
displaymode
print_menu_advance
print_menu_exit
drawArrow
timeoutcounter
just_pressed
print_menu_change
pressed
check_timeout
next_mode_setdate
next_mode_setmonth
next_mode_setday
print_monthday_help
add_month
delay_ms
PRINT_MENU_OPTS
__eewr_word_m328p
EE_STYLE
displaystyle
