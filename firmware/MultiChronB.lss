
MultiChronB.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         000000f2  00800100  00007746  000077fa  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00007746  00000000  00000000  000000b4  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000160  008001f2  008001f2  000078ec  2**0
                  ALLOC
  3 .eeprom       000003a0  00810000  00810000  000078ec  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  4 .debug_aranges 000001c0  00000000  00000000  00007c8c  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_pubnames 0000158e  00000000  00000000  00007e4c  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00006077  00000000  00000000  000093da  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00001901  00000000  00000000  0000f451  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00005446  00000000  00000000  00010d52  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000b30  00000000  00000000  00016198  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000017e2  00000000  00000000  00016cc8  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000032b0  00000000  00000000  000184aa  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000198  00000000  00000000  0001b75a  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 c3 04 	jmp	0x986	; 0x986 <__ctors_end>
       4:	0c 94 e0 04 	jmp	0x9c0	; 0x9c0 <__bad_interrupt>
       8:	0c 94 e0 04 	jmp	0x9c0	; 0x9c0 <__bad_interrupt>
       c:	0c 94 ed 1d 	jmp	0x3bda	; 0x3bda <__vector_3>
      10:	0c 94 e0 04 	jmp	0x9c0	; 0x9c0 <__bad_interrupt>
      14:	0c 94 e0 04 	jmp	0x9c0	; 0x9c0 <__bad_interrupt>
      18:	0c 94 e0 04 	jmp	0x9c0	; 0x9c0 <__bad_interrupt>
      1c:	0c 94 e0 04 	jmp	0x9c0	; 0x9c0 <__bad_interrupt>
      20:	0c 94 e0 04 	jmp	0x9c0	; 0x9c0 <__bad_interrupt>
      24:	0c 94 3b 33 	jmp	0x6676	; 0x6676 <__vector_9>
      28:	0c 94 e0 04 	jmp	0x9c0	; 0x9c0 <__bad_interrupt>
      2c:	0c 94 77 2e 	jmp	0x5cee	; 0x5cee <__vector_11>
      30:	0c 94 e0 04 	jmp	0x9c0	; 0x9c0 <__bad_interrupt>
      34:	0c 94 04 2e 	jmp	0x5c08	; 0x5c08 <__vector_13>
      38:	0c 94 16 2e 	jmp	0x5c2c	; 0x5c2c <__vector_14>
      3c:	0c 94 e0 04 	jmp	0x9c0	; 0x9c0 <__bad_interrupt>
      40:	0c 94 e0 04 	jmp	0x9c0	; 0x9c0 <__bad_interrupt>
      44:	0c 94 e0 04 	jmp	0x9c0	; 0x9c0 <__bad_interrupt>
      48:	0c 94 97 2d 	jmp	0x5b2e	; 0x5b2e <__vector_18>
      4c:	0c 94 e0 04 	jmp	0x9c0	; 0x9c0 <__bad_interrupt>
      50:	0c 94 e0 04 	jmp	0x9c0	; 0x9c0 <__bad_interrupt>
      54:	0c 94 12 1e 	jmp	0x3c24	; 0x3c24 <__vector_21>
      58:	0c 94 e0 04 	jmp	0x9c0	; 0x9c0 <__bad_interrupt>
      5c:	0c 94 e0 04 	jmp	0x9c0	; 0x9c0 <__bad_interrupt>
      60:	0c 94 e0 04 	jmp	0x9c0	; 0x9c0 <__bad_interrupt>
      64:	0c 94 e0 04 	jmp	0x9c0	; 0x9c0 <__bad_interrupt>

00000068 <logo_p>:
      68:	1e 08                                               ..

0000006a <skull0_p>:
      6a:	50 04                                               P.

0000006c <reaper0_p>:
      6c:	b2 05                                               ..

0000006e <rip0_p>:
      6e:	90 06                                               ..

00000070 <__c.2303>:
      70:	73 65 74 20 68 74 2e 00                             set ht..

00000078 <__c.2301>:
      78:	63 68 61 6e 67 65 20 68 74 2e 00                    change ht..

00000083 <__c.2299>:
      83:	73 65 74 20 62 6d 69 00                             set bmi.

0000008b <__c.2297>:
      8b:	63 68 61 6e 67 65 20 62 6d 69 00                    change bmi.

00000096 <__c.2295>:
      96:	20 73 65 74 20 77 74 2e 00                           set wt..

0000009f <__c.2293>:
      9f:	63 68 61 6e 67 65 20 77 74 2e 00                    change wt..

000000aa <__c.2289>:
      aa:	73 65 74 20 75 6e 69 74 00                          set unit.

000000b3 <__c.2287>:
      b3:	63 68 61 6e 67 65 20 75 74 2e 00                    change ut..

000000be <__c.2123>:
      be:	4d 65 6e 75 00                                      Menu.

000000c3 <__c.2121>:
      c3:	43 6f 6e 66 69 67 00                                Config.

000000ca <__c.2119>:
      ca:	44 65 61 74 68 43 68 72 6f 6e 00                    DeathChron.

000000d5 <__c.2113>:
      d5:	20 4e 6f 00                                          No.

000000d9 <__c.2111>:
      d9:	59 65 73 00                                         Yes.

000000dd <__c.2109>:
      dd:	53 6d 6f 6b 65 72 3f 3a 20 20 20 20 20 20 20 20     Smoker?:        
      ed:	20 00                                                .

000000ef <__c.2089>:
      ef:	20 20 20 20 20 20 20 20 20 00                                .

000000f9 <__c.2087>:
      f9:	42 4d 49 3a 00                                      BMI:.

000000fe <__c.2085>:
      fe:	63 6d 00                                            cm.

00000101 <__c.2083>:
     101:	6b 67 20 00                                         kg .

00000105 <__c.2081>:
     105:	4d 65 74 3a 00                                      Met:.

0000010a <__c.2079>:
     10a:	66 74 00                                            ft.

0000010d <__c.2077>:
     10d:	6c 62 20 00                                         lb .

00000111 <__c.2075>:
     111:	49 6d 70 3a 00                                      Imp:.

00000116 <__c.2073>:
     116:	53 65 74 20 00                                      Set .

0000011b <__c.2065>:
     11b:	20 20 20 53 61 64 69 73 74 69 63 00                    Sadistic.

00000127 <__c.2063>:
     127:	20 4f 70 74 69 6d 69 73 74 69 63 00                  Optimistic.

00000133 <__c.2061>:
     133:	50 65 73 73 69 6d 69 73 74 69 63 00                 Pessimistic.

0000013f <__c.2059>:
     13f:	20 20 20 20 20 4e 6f 72 6d 61 6c 00                      Normal.

0000014b <__c.2057>:
     14b:	53 65 74 20 4d 6f 64 65 3a 00                       Set Mode:.

00000155 <__c.2051>:
     155:	46 65 6d 61 6c 65 00                                Female.

0000015c <__c.2049>:
     15c:	20 20 4d 61 6c 65 00                                  Male.

00000163 <__c.2047>:
     163:	53 65 74 20 47 65 6e 64 65 72 3a 20 20 20 00        Set Gender:   .

00000172 <__c.2024>:
     172:	53 65 74 20 44 4f 42 3a 20 20 00                    Set DOB:  .

0000017d <GPS_Text>:
     17d:	0a 47 50 53 20 53 65 74 75 70 00 01 00 0b 4f 66     .GPS Setup....Of
     18d:	66 73 65 74 20 20 3a 20 00 11 53 74 61 74 75 73     fset  : ..Status
     19d:	20 20 3a 20 4e 4f 4c 4f 43 4b 00 0b 47 50 53 20       : NOLOCK..GPS 
     1ad:	44 61 74 65 3a 20 00 15 47 50 53 20 54 69 6d 65     Date: ..GPS Time
     1bd:	3a 20 20 20 20 20 20 20 20 55 54 43 00 01 00 14     :        UTC....
     1cd:	4d 65 6e 75 3d 45 78 69 74 2c 20 53 65 74 3d 2d     Menu=Exit, Set=-
     1dd:	2c 20 2b 00                                         , +.

000001e1 <__c.2152>:
     1e1:	3a 00                                               :.

000001e3 <__c.2150>:
     1e3:	2b 00                                               +.

000001e5 <__c.2148>:
     1e5:	2d 00                                               -.

000001e7 <region_setting_table>:
     1e7:	20 20 20 20 20 55 53 20 31 32 68 72 00 20 20 20          US 12hr.   
     1f7:	20 20 55 53 20 32 34 68 72 00 20 20 20 20 20 45       US 24hr.     E
     207:	55 20 31 32 68 72 00 20 20 20 20 20 45 55 20 32     U 12hr.     EU 2
     217:	34 68 72 00                                         4hr.

0000021b <style_setting_str>:
     21b:	d2 52 41 54 54 43 68 72 6f 6e 00 d3 44 65 61 74     .RATTChron..Deat
     22b:	68 43 68 72 6f 6e 00 d4 52 61 6e 64 6f 6d 00 d5     hChron..Random..
     23b:	52 6f 74 61 74 65 00 d6 44 65 61 74 68 43 68 72     Rotate..DeathChr
     24b:	6f 6e 20 43 66 67 00 d7 47 50 53 20 53 65 74 75     on Cfg..GPS Setu
     25b:	70 00 d8 41 62 6f 75 74 00 ff                       p..About..

00000265 <__c.2310>:
     265:	73 65 74 20 73 65 63 73 00                          set secs.

0000026e <__c.2308>:
     26e:	63 68 61 6e 67 65 20 73 65 63 00                    change sec.

00000279 <__c.2304>:
     279:	73 65 74 20 6d 69 6e 73 00                          set mins.

00000282 <__c.2302>:
     282:	63 68 61 6e 67 65 20 6d 69 6e 00                    change min.

0000028d <__c.2298>:
     28d:	73 65 74 20 68 6f 75 72 00                          set hour.

00000296 <__c.2296>:
     296:	63 68 61 6e 67 65 20 68 72 00                       change hr.

000002a0 <__c.2246>:
     2a0:	73 65 74 20 6d 69 6e 73 00                          set mins.

000002a9 <__c.2244>:
     2a9:	63 68 61 6e 67 65 20 6d 69 6e 00                    change min.

000002b4 <__c.2240>:
     2b4:	73 65 74 20 68 6f 75 72 00                          set hour.

000002bd <__c.2238>:
     2bd:	63 68 61 6e 67 65 20 68 72 2e 00                    change hr..

000002c8 <__c.2182>:
     2c8:	52 65 67 69 6f 6e 3a 20 00                          Region: .

000002d1 <__c.2075>:
     2d1:	73 65 74 20 79 65 61 72 00                          set year.

000002da <__c.2073>:
     2da:	63 68 61 6e 67 65 20 79 72 2e 00                    change yr..

000002e5 <__c.2071>:
     2e5:	73 65 74 20 64 61 74 65 00                          set date.

000002ee <__c.2069>:
     2ee:	63 68 61 6e 67 65 20 64 61 79 00                    change day.

000002f9 <__c.2067>:
     2f9:	73 65 74 20 6d 6f 6e 2e 00                          set mon..

00000302 <__c.2065>:
     302:	63 68 61 6e 67 65 20 6d 6f 6e 00                    change mon.

0000030d <__c.2055>:
     30d:	20 20 20 20 20 00                                        .

00000313 <__c.2053>:
     313:	20 20 20 20 20 00                                        .

00000319 <__c.2051>:
     319:	44 61 74 65 3a 00                                   Date:.

0000031f <__c.1981>:
     31f:	4d 6f 64 65 3a 00                                   Mode:.

00000325 <__c.1971>:
     325:	53 65 74 20 42 61 63 6b 6c 69 67 68 74 3a 20 00     Set Backlight: .

00000335 <__c.1962>:
     335:	53 65 74 20 54 69 6d 65 3a 20 00                    Set Time: .

00000340 <__c.1950>:
     340:	53 65 74 20 41 6c 61 72 6d 3a 20 20 00              Set Alarm:  .

0000034d <normal_bmi_male>:
     34d:	28 00 11 11 22 23 33 44 45 56 68 32 00 01 11 12     (..."#3DEVh2....
     35d:	22 23 34 44 55 57 3c 00 00 11 11 22 23 33 44 45     "#4DUW<...."#3DE
     36d:	56 46 00 11 11 12 22 23 33 44 44 00 c8 00 00 00     VF...."#3DD.....
     37d:	00 00 00 00 00 00 05                                .......

00000384 <normal_bmi_female>:
     384:	1e 01 11 12 23 33 44 55 66 77 8d 28 01 11 12 22     ....#3DUfw.(..."
     394:	33 34 45 56 66 7b 32 00 01 11 22 23 33 44 45 56     34EVf{2..."#3DEV
     3a4:	6a 3c 00 00 01 11 12 22 33 34 44 57 46 00 00 00     j<....."34DWF...
     3b4:	11 11 22 22 23 33 35 c8 00 00 00 00 00 11 11 11     ..""#35.........
     3c4:	11 22                                               ."

000003c6 <sadistic_bmi_male>:
     3c6:	c8 00 00 00 11 11 11 22 22 23 34                    .......""#4

000003d1 <sadistic_bmi_female>:
     3d1:	1e 00 00 01 11 11 22 22 33 33 46 c8 00 00 01 11     ......""33F.....
     3e1:	11 12 22 23 33 35                                   .."#35

000003e7 <normal_smoking_male>:
     3e7:	1e 00 b3 0a 23 00 8f 0a 28 00 fd 09 2d 00 d8 09     ....#...(...-...
     3f7:	32 00 6a 09 37 00 d9 08 3c 00 fe 07 41 00 fe 06     2.j.7...<...A...
     407:	46 00 47 06 c8 00 b5 04                             F.G.....

0000040f <normal_smoking_female>:
     40f:	1e 00 3f 09 2d 00 1b 09 32 00 f6 08 37 00 d1 08     ..?.-...2...7...
     41f:	3c 00 90 08 41 00 f6 06 46 00 22 07 4b 00 65 05     <...A...F.".K.e.
     42f:	c8 00 48 04                                         ..H.

00000433 <sadistic_smoking_male>:
     433:	1e 00 fe 04 c8 00 da 04                             ........

0000043b <sadistic_smoking_female>:
     43b:	1e 00 90 05 c8 00 6c 05                             ......l.

00000443 <day_in_month>:
     443:	1f 1c 1f 1e 1f 1e 1f 1f 1e 1f 1e 1f                 ............

0000044f <EE_DATA>:
     44f:	9d                                                  .

00000450 <FontGr>:
     450:	00 00 01 22 26 01 1c 2b 01 1a 2d 01 18 2e 01 17     ..."&..+..-.....
     460:	30 01 16 31 01 15 32 01 14 33 01 13 34 01 12 35     0..1..2..3..4..5
     470:	01 12 35 01 11 36 01 11 36 01 11 37 01 10 37 01     ..5..6..6..7..7.
     480:	10 37 01 10 38 01 10 38 01 10 38 01 10 38 03 06     .7..8..8..8..8..
     490:	08 10 38 41 43 03 04 09 10 38 3f 44 04 03 0a 10     ..8AC....8?D....
     4a0:	18 1e 37 3e 45 05 03 0a 11 18 20 29 2e 37 3e 46     ..7>E..... ).7>F
     4b0:	05 03 0c 11 17 21 28 30 37 3d 46 05 02 0e 11 17     .....!(07=F.....
     4c0:	22 28 30 37 3b 46 05 02 0f 12 18 21 29 31 36 39     "(07;F.....!)169
     4d0:	47 05 01 10 13 1a 1f 29 30 36 38 47 04 01 10 13     G......)068G....
     4e0:	29 2f 35 38 47 04 02 10 13 29 2d 35 38 47 04 03     )/58G....)-58G..
     4f0:	11 13 24 27 35 37 46 06 05 06 0c 11 13 22 27 35     ..$'57F......"'5
     500:	37 3c 42 45 04 0f 11 13 21 26 35 37 3a 02 14 20     7<BE....!&57:.. 
     510:	27 35 02 14 20 28 35 02 15 20 28 35 02 16 25 27     '5.. (5.. (5..%'
     520:	34 01 1b 31 01 1c 2e 01 1d 2d 01 1d 2c 03 18 19     4..1.....-..,...
     530:	24 2b 30 32 05 18 1a 25 26 2b 2b 30 32 35 35 04     $+02...%&++0255.
     540:	14 16 18 1a 30 31 34 37 07 11 16 19 1a 1d 1f 21     ....0147.......!
     550:	24 26 2d 30 31 34 3a 03 0e 16 19 31 34 3c 05 04     $&-014:....14<..
     560:	06 0b 16 19 31 34 3f 44 48 03 02 17 19 30 33 49     ....14?DH....03I
     570:	03 01 17 1a 2f 33 49 03 01 15 1b 2f 36 4a 03 01     ..../3I..../6J..
     580:	13 1c 2e 38 49 03 01 10 1d 2d 3a 49 03 01 0d 1e     ...8I....-:I....
     590:	2b 3d 49 03 02 0b 21 29 40 48 02 02 0a 40 48 02     +=I...!)@H...@H.
     5a0:	02 0a 41 48 02 03 09 41 47 02 04 08 42 46 00 00     ..AH...AG...BF..
	...

000005b2 <reaper_on_white>:
     5b2:	00 00 00 00 00 01 17 1b 01 12 1f 01 10 22 01 0f     ............."..
     5c2:	24 01 0e 25 01 0d 27 02 0c 10 1d 27 02 0b 0e 20     $..%..'....'... 
     5d2:	28 02 0a 0c 22 27 03 0a 0b 14 1c 22 26 03 09 0a     (..."'....."&...
     5e2:	10 1d 21 23 03 08 09 0f 1c 21 23 02 0f 1c 21 22     ..!#.....!#...!"
     5f2:	02 10 1c 20 22 02 11 1c 20 22 02 12 1b 1f 21 02     ... "... "....!.
     602:	12 1b 1f 21 02 11 1b 1f 20 02 10 1b 1e 20 02 0f     ...!.... .... ..
     612:	1a 1e 20 02 0e 1a 1d 1f 02 0e 1a 1d 1f 02 0d 1a     .. .............
     622:	1d 1e 02 0d 19 1c 1e 02 0c 19 1c 1e 01 0c 1d 01     ................
     632:	0b 1d 01 0b 1e 01 0b 1d 01 0b 1d 01 0a 1c 01 0a     ................
     642:	1b 01 0a 1a 01 0a 1a 01 0a 1a 01 0a 1a 01 0a 19     ................
     652:	01 09 19 01 09 19 01 09 19 01 09 1a 01 09 1a 01     ................
     662:	09 1a 01 08 1a 01 08 1b 01 07 1b 01 06 1b 01 04     ................
     672:	1b 01 02 1b 01 01 1c 01 02 1d 01 03 1e 01 04 20     ............... 
     682:	01 05 1f 01 08 1d 01 0d 1a 01 11 15 00 00           ..............

00000690 <rip_on_white>:
     690:	00 00 00 01 12 19 01 0e 1e 01 0c 21 01 0a 23 03     ...........!..#.
     6a0:	09 0c 12 14 19 25 03 08 0a 14 14 1c 26 02 07 09     .....%......&...
     6b0:	1e 28 02 06 08 20 29 02 06 07 22 2a 02 05 07 23     .(... )..."*...#
     6c0:	2b 02 05 06 24 2c 02 05 06 26 2d 02 05 06 27 2e     +...$,...&-...'.
     6d0:	02 05 06 27 2e 03 04 05 09 0a 28 2f 03 04 06 08     ...'......(/....
     6e0:	0e 29 2f 03 04 06 08 11 29 30 04 04 06 08 13 17     .)/.....)0......
     6f0:	19 2a 30 06 04 06 08 0b 0f 13 17 1a 1e 20 2a 31     .*0.......... *1
     700:	06 04 06 08 0b 11 14 17 19 1e 25 2b 31 05 04 06     ..........%+1...
     710:	08 14 16 19 1e 27 2b 31 05 04 05 08 13 16 19 1e     .....'+1........
     720:	28 2b 31 07 04 06 08 0b 0d 12 16 19 1e 21 25 29     (+1..........!%)
     730:	2b 32 07 04 05 08 0a 0e 11 16 19 1e 21 26 29 2c     +2..........!&),
     740:	32 06 04 05 07 0a 0f 12 16 19 1d 29 2c 32 06 04     2..........),2..
     750:	05 07 0a 0f 12 16 19 1d 28 2c 32 06 04 06 09 0a     ........(,2.....
     760:	10 13 16 19 1d 27 2c 32 05 04 06 11 14 16 18 1d     .....',2........
     770:	20 2b 32 05 04 06 13 13 16 18 1d 20 2a 32 03 04      +2........ *2..
     780:	06 1d 20 2c 32 02 04 06 2c 32 02 04 06 2c 32 02     .. ,2...,2...,2.
     790:	04 06 2c 32 02 04 06 2c 32 02 04 06 2c 32 02 04     ..,2...,2...,2..
     7a0:	06 2c 32 02 05 06 2c 32 02 04 05 2c 32 02 04 05     .,2...,2...,2...
     7b0:	2c 32 02 04 05 2b 32 02 04 05 2b 32 02 04 05 2c     ,2...+2...+2...,
     7c0:	32 02 04 07 2c 32 02 05 07 2c 32 02 05 07 2c 32     2...,2...,2...,2
     7d0:	02 05 06 2c 32 02 04 06 2c 32 02 03 08 2c 32 02     ...,2...,2...,2.
     7e0:	03 09 2c 32 02 01 09 2c 34 04 03 08 0d 10 14 15     ..,2...,4.......
     7f0:	2c 34 02 0f 15 2c 33 03 12 1a 2c 32 34 36 02 14     ,4...,3...,246..
     800:	1d 2c 35 02 15 20 2c 34 03 15 18 1d 24 2c 33 02     .,5.. ,4....$,3.
     810:	20 27 2c 32 01 23 32 01 27 31 01 2b 2d 00            ',2.#2.'1.+-.

0000081e <adafruit>:
     81e:	00 00 00 00 01 21 21 01 20 21 01 1e 22 01 1d 22     .....!!. !..".."
     82e:	01 1c 22 01 1b 23 01 1a 23 01 1a 23 01 19 24 01     .."..#..#..#..$.
     83e:	18 24 01 18 24 01 18 24 02 03 09 17 24 02 01 0e     .$..$..$....$...
     84e:	17 24 02 01 10 17 24 02 01 11 16 24 03 01 13 16     .$....$....$....
     85e:	1c 20 24 03 01 14 16 1b 20 24 02 01 1b 20 24 02     . $..... $... $.
     86e:	02 1a 20 24 04 02 0f 11 1a 20 25 2a 2d 03 02 0e     .. $..... %*-...
     87e:	14 1a 20 30 03 03 0e 16 1a 1f 31 03 03 0e 17 1a     .. 0......1.....
     88e:	1f 33 03 04 0f 18 1a 1e 34 03 05 11 18 1a 1d 35     .3......4......5
     89e:	02 07 12 18 36 02 09 1e 27 37 02 0a 1d 28 36 02     ....6...'7...(6.
     8ae:	0b 1d 28 36 02 0b 1d 28 35 03 0b 13 18 20 26 34     ..(6...(5.... &4
     8be:	03 0a 12 18 1b 1d 34 03 09 11 18 1a 1e 33 03 07     ......4......3..
     8ce:	10 17 1a 1f 33 04 07 10 16 1a 1f 23 26 32 04 06     ....3......#&2..
     8de:	0f 16 1a 1f 23 28 31 04 05 0f 14 1a 20 24 2a 2f     ....#(1..... $*/
     8ee:	03 05 0f 13 1a 20 24 02 04 1b 20 25 02 04 1b 20     ..... $... %... 
     8fe:	25 03 04 15 18 1b 20 26 03 03 14 18 1c 20 26 02     %..... &..... &.
     90e:	03 13 18 27 02 03 12 18 27 02 03 11 19 27 02 03     ...'....'....'..
     91e:	0f 19 27 02 03 0c 19 27 01 1a 27 01 1a 27 01 1b     ..'....'..'..'..
     92e:	27 01 1c 26 01 1d 26 01 1e 25 01 20 24 00 00 00     '..&..&..%. $...
	...

00000940 <__c.2283>:
     940:	20 74 6f 20 00                                       to .

00000945 <__c.2281>:
     945:	50 72 65 73 73 20 00                                Press .

0000094c <__c.2268>:
     94c:	53 45 54 00                                         SET.

00000950 <__c.2266>:
     950:	2b 00                                               +.

00000952 <__c.2260>:
     952:	73 61 76 65 00                                      save.

00000957 <__c.2258>:
     957:	63 68 61 6e 67 65 00                                change.

0000095e <__c.2254>:
     95e:	73 61 76 65 00                                      save.

00000963 <__c.2252>:
     963:	53 45 54 00                                         SET.

00000967 <__c.2250>:
     967:	65 78 69 74 00                                      exit.

0000096c <__c.2248>:
     96c:	4d 45 4e 55 00                                      MENU.

00000971 <__c.2244>:
     971:	73 65 74 00                                         set.

00000975 <__c.2242>:
     975:	53 45 54 00                                         SET.

00000979 <__c.2240>:
     979:	61 64 76 61 6e 63 65 00                             advance.

00000981 <__c.2238>:
     981:	4d 45 4e 55 00                                      MENU.

00000986 <__ctors_end>:
     986:	11 24       	eor	r1, r1
     988:	1f be       	out	0x3f, r1	; 63
     98a:	cf ef       	ldi	r28, 0xFF	; 255
     98c:	d8 e0       	ldi	r29, 0x08	; 8
     98e:	de bf       	out	0x3e, r29	; 62
     990:	cd bf       	out	0x3d, r28	; 61

00000992 <__do_copy_data>:
     992:	11 e0       	ldi	r17, 0x01	; 1
     994:	a0 e0       	ldi	r26, 0x00	; 0
     996:	b1 e0       	ldi	r27, 0x01	; 1
     998:	e6 e4       	ldi	r30, 0x46	; 70
     99a:	f7 e7       	ldi	r31, 0x77	; 119
     99c:	02 c0       	rjmp	.+4      	; 0x9a2 <.do_copy_data_start>

0000099e <.do_copy_data_loop>:
     99e:	05 90       	lpm	r0, Z+
     9a0:	0d 92       	st	X+, r0

000009a2 <.do_copy_data_start>:
     9a2:	a2 3f       	cpi	r26, 0xF2	; 242
     9a4:	b1 07       	cpc	r27, r17
     9a6:	d9 f7       	brne	.-10     	; 0x99e <.do_copy_data_loop>

000009a8 <__do_clear_bss>:
     9a8:	13 e0       	ldi	r17, 0x03	; 3
     9aa:	a2 ef       	ldi	r26, 0xF2	; 242
     9ac:	b1 e0       	ldi	r27, 0x01	; 1
     9ae:	01 c0       	rjmp	.+2      	; 0x9b2 <.do_clear_bss_start>

000009b0 <.do_clear_bss_loop>:
     9b0:	1d 92       	st	X+, r1

000009b2 <.do_clear_bss_start>:
     9b2:	a2 35       	cpi	r26, 0x52	; 82
     9b4:	b1 07       	cpc	r27, r17
     9b6:	e1 f7       	brne	.-8      	; 0x9b0 <.do_clear_bss_loop>
     9b8:	0e 94 67 34 	call	0x68ce	; 0x68ce <main>
     9bc:	0c 94 a1 3b 	jmp	0x7742	; 0x7742 <_exit>

000009c0 <__bad_interrupt>:
     9c0:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000009c4 <initanim_abo>:
#endif
                                  
extern uint8_t about[];
//Definition of about[] is in eeprom.c.  Change it there.

void initanim_abo(void){
     9c4:	af 92       	push	r10
     9c6:	bf 92       	push	r11
     9c8:	cf 92       	push	r12
     9ca:	df 92       	push	r13
     9cc:	ef 92       	push	r14
     9ce:	ff 92       	push	r15
     9d0:	0f 93       	push	r16
     9d2:	1f 93       	push	r17
     9d4:	cf 93       	push	r28
     9d6:	df 93       	push	r29
 uint8_t k, b, line, eof;
 uint16_t ix, lineix;
 ix=0;
#ifdef DEATHCHRON
 glcdFillRectangle(0, 0, GLCD_XPIXELS, GLCD_YPIXELS, 1);
     9d8:	80 e0       	ldi	r24, 0x00	; 0
     9da:	60 e0       	ldi	r22, 0x00	; 0
     9dc:	40 e8       	ldi	r20, 0x80	; 128
     9de:	20 e4       	ldi	r18, 0x40	; 64
     9e0:	01 e0       	ldi	r16, 0x01	; 1
     9e2:	0e 94 7e 29 	call	0x52fc	; 0x52fc <glcdFillRectangle>
 death_blitsegs_rom(36,0,logo_p, 57, 64, 1);
     9e6:	84 e2       	ldi	r24, 0x24	; 36
     9e8:	90 e0       	ldi	r25, 0x00	; 0
     9ea:	60 e0       	ldi	r22, 0x00	; 0
     9ec:	4e e1       	ldi	r20, 0x1E	; 30
     9ee:	58 e0       	ldi	r21, 0x08	; 8
     9f0:	29 e3       	ldi	r18, 0x39	; 57
     9f2:	00 e4       	ldi	r16, 0x40	; 64
     9f4:	ee 24       	eor	r14, r14
     9f6:	e3 94       	inc	r14
     9f8:	0e 94 88 09 	call	0x1310	; 0x1310 <death_blitsegs_rom>
 uint8_t i = (time_s + 5) % 60;
     9fc:	80 91 3f 03 	lds	r24, 0x033F
     a00:	90 e0       	ldi	r25, 0x00	; 0
     a02:	05 96       	adiw	r24, 0x05	; 5
     a04:	6c e3       	ldi	r22, 0x3C	; 60
     a06:	70 e0       	ldi	r23, 0x00	; 0
     a08:	0e 94 17 3b 	call	0x762e	; 0x762e <__divmodhi4>
     a0c:	98 2f       	mov	r25, r24
 while(i != time_s);
     a0e:	80 91 3f 03 	lds	r24, 0x033F
     a12:	98 17       	cp	r25, r24
     a14:	e1 f7       	brne	.-8      	; 0xa0e <initanim_abo+0x4a>
     a16:	00 e0       	ldi	r16, 0x00	; 0
     a18:	10 e0       	ldi	r17, 0x00	; 0
#endif
 while (1) {
  glcdClearScreen();
     a1a:	0e 94 5a 2d 	call	0x5ab4	; 0x5ab4 <glcdClearScreen>
     a1e:	dd 24       	eor	r13, r13
     a20:	cc 24       	eor	r12, r12
     a22:	aa 24       	eor	r10, r10
     a24:	bb 24       	eor	r11, r11
  for (eof=0, lineix=0, line=0; line<8; line++) {
   if (!eof) {
     a26:	cc 20       	and	r12, r12
     a28:	09 f0       	breq	.+2      	; 0xa2c <initanim_abo+0x68>
     a2a:	45 c0       	rjmp	.+138    	; 0xab6 <initanim_abo+0xf2>
    b = eeprom_read_byte(&about[ix++]);
     a2c:	e8 01       	movw	r28, r16
     a2e:	ce 5b       	subi	r28, 0xBE	; 190
     a30:	dd 4f       	sbci	r29, 0xFD	; 253
     a32:	0f 5f       	subi	r16, 0xFF	; 255
     a34:	1f 4f       	sbci	r17, 0xFF	; 255
     a36:	ce 01       	movw	r24, r28
     a38:	0e 94 70 3b 	call	0x76e0	; 0x76e0 <__eerd_byte_m328p>
     a3c:	f8 2e       	mov	r15, r24
    if (b==255) {
     a3e:	8f ef       	ldi	r24, 0xFF	; 255
     a40:	f8 16       	cp	r15, r24
     a42:	c1 f4       	brne	.+48     	; 0xa74 <initanim_abo+0xb0>
     eof = 1;
     if (!line) {displaystyle = eeprom_read_byte(&EE_STYLE); initanim(); return;}
     a44:	dd 20       	and	r13, r13
     a46:	19 f0       	breq	.+6      	; 0xa4e <initanim_abo+0x8a>
     a48:	cc 24       	eor	r12, r12
     a4a:	c3 94       	inc	r12
     a4c:	34 c0       	rjmp	.+104    	; 0xab6 <initanim_abo+0xf2>
     a4e:	87 e0       	ldi	r24, 0x07	; 7
     a50:	90 e0       	ldi	r25, 0x00	; 0
     a52:	0e 94 70 3b 	call	0x76e0	; 0x76e0 <__eerd_byte_m328p>
     a56:	80 93 31 03 	sts	0x0331, r24
     a5a:	0e 94 7e 28 	call	0x50fc	; 0x50fc <initanim>
   }
  }
  ix = lineix;
  delay_ms(500);
 }
}
     a5e:	df 91       	pop	r29
     a60:	cf 91       	pop	r28
     a62:	1f 91       	pop	r17
     a64:	0f 91       	pop	r16
     a66:	ff 90       	pop	r15
     a68:	ef 90       	pop	r14
     a6a:	df 90       	pop	r13
     a6c:	cf 90       	pop	r12
     a6e:	bf 90       	pop	r11
     a70:	af 90       	pop	r10
     a72:	08 95       	ret
    if (b==255) {
     eof = 1;
     if (!line) {displaystyle = eeprom_read_byte(&EE_STYLE); initanim(); return;}
     continue;
    } 
    if (!line) {lineix = ix + b;}
     a74:	dd 20       	and	r13, r13
     a76:	19 f4       	brne	.+6      	; 0xa7e <initanim_abo+0xba>
     a78:	58 01       	movw	r10, r16
     a7a:	af 0c       	add	r10, r15
     a7c:	b1 1c       	adc	r11, r1
    k = ((128 - (b * 6))/2)-1;
    if (k<0) {k=0;}
    glcdSetAddress(k,line);
     a7e:	2f 2d       	mov	r18, r15
     a80:	30 e0       	ldi	r19, 0x00	; 0
     a82:	c9 01       	movw	r24, r18
     a84:	88 0f       	add	r24, r24
     a86:	99 1f       	adc	r25, r25
     a88:	82 0f       	add	r24, r18
     a8a:	93 1f       	adc	r25, r19
     a8c:	90 95       	com	r25
     a8e:	81 95       	neg	r24
     a90:	9f 4f       	sbci	r25, 0xFF	; 255
     a92:	81 5c       	subi	r24, 0xC1	; 193
     a94:	6d 2d       	mov	r22, r13
     a96:	0e 94 50 2d 	call	0x5aa0	; 0x5aa0 <glcdSetAddress>
     a9a:	ef 2c       	mov	r14, r15
     a9c:	07 c0       	rjmp	.+14     	; 0xaac <initanim_abo+0xe8>
    for(;b>0;b--) {
     glcdWriteChar(eeprom_read_byte(&about[ix++]),0);
     a9e:	ce 01       	movw	r24, r28
     aa0:	0e 94 70 3b 	call	0x76e0	; 0x76e0 <__eerd_byte_m328p>
     aa4:	60 e0       	ldi	r22, 0x00	; 0
     aa6:	0e 94 2b 29 	call	0x5256	; 0x5256 <glcdWriteChar>
    } 
    if (!line) {lineix = ix + b;}
    k = ((128 - (b * 6))/2)-1;
    if (k<0) {k=0;}
    glcdSetAddress(k,line);
    for(;b>0;b--) {
     aaa:	ea 94       	dec	r14
     aac:	21 96       	adiw	r28, 0x01	; 1
     aae:	ee 20       	and	r14, r14
     ab0:	b1 f7       	brne	.-20     	; 0xa9e <initanim_abo+0xda>
     ab2:	0f 0d       	add	r16, r15
     ab4:	11 1d       	adc	r17, r1
 uint8_t i = (time_s + 5) % 60;
 while(i != time_s);
#endif
 while (1) {
  glcdClearScreen();
  for (eof=0, lineix=0, line=0; line<8; line++) {
     ab6:	d3 94       	inc	r13
     ab8:	88 e0       	ldi	r24, 0x08	; 8
     aba:	d8 16       	cp	r13, r24
     abc:	09 f0       	breq	.+2      	; 0xac0 <initanim_abo+0xfc>
     abe:	b3 cf       	rjmp	.-154    	; 0xa26 <initanim_abo+0x62>
     glcdWriteChar(eeprom_read_byte(&about[ix++]),0);
    }
   }
  }
  ix = lineix;
  delay_ms(500);
     ac0:	84 ef       	ldi	r24, 0xF4	; 244
     ac2:	91 e0       	ldi	r25, 0x01	; 1
     ac4:	0e 94 fd 35 	call	0x6bfa	; 0x6bfa <delay_ms>
     ac8:	85 01       	movw	r16, r10
     aca:	a7 cf       	rjmp	.-178    	; 0xa1a <initanim_abo+0x56>

00000acc <death_setscore>:
  }
}


void death_setscore(void)
{
     acc:	ef 92       	push	r14
     ace:	ff 92       	push	r15
     ad0:	0f 93       	push	r16
     ad2:	1f 93       	push	r17
  if(score_mode != last_score_mode) {
     ad4:	90 91 22 02 	lds	r25, 0x0222
     ad8:	80 91 f4 01 	lds	r24, 0x01F4
     adc:	98 17       	cp	r25, r24
     ade:	39 f0       	breq	.+14     	; 0xaee <death_setscore+0x22>
    //if(((score_mode == SCORE_MODE_DEATH_TIME) || (score_mode == SCORE_MODE_DEATH_ALARM)) && ((last_score_mode != SCORE_MODE_DEATH_TIME) && (last_score_mode != SCORE_MODE_DEATH_ALARM)))
    //  redraw_time = 2;
    //else if(((last_score_mode == SCORE_MODE_DEATH_TIME) || (last_score_mode == SCORE_MODE_DEATH_ALARM)) && ((score_mode != SCORE_MODE_DEATH_TIME) && (score_mode != SCORE_MODE_DEATH_ALARM)))
    //  redraw_time = 2;
    //else
      redraw_time = 1;
     ae0:	81 e0       	ldi	r24, 0x01	; 1
     ae2:	80 93 f3 01 	sts	0x01F3, r24
    last_score_mode = score_mode;
     ae6:	80 91 22 02 	lds	r24, 0x0222
     aea:	80 93 f4 01 	sts	0x01F4, r24
  }
  switch(score_mode) {
     aee:	80 91 22 02 	lds	r24, 0x0222
     af2:	83 30       	cpi	r24, 0x03	; 3
     af4:	09 f4       	brne	.+2      	; 0xaf8 <death_setscore+0x2c>
     af6:	58 c1       	rjmp	.+688    	; 0xda8 <death_setscore+0x2dc>
     af8:	84 30       	cpi	r24, 0x04	; 4
     afa:	38 f4       	brcc	.+14     	; 0xb0a <death_setscore+0x3e>
     afc:	81 30       	cpi	r24, 0x01	; 1
     afe:	09 f4       	brne	.+2      	; 0xb02 <death_setscore+0x36>
     b00:	43 c0       	rjmp	.+134    	; 0xb88 <death_setscore+0xbc>
     b02:	82 30       	cpi	r24, 0x02	; 2
     b04:	08 f0       	brcs	.+2      	; 0xb08 <death_setscore+0x3c>
     b06:	64 c0       	rjmp	.+200    	; 0xbd0 <death_setscore+0x104>
     b08:	0d c0       	rjmp	.+26     	; 0xb24 <death_setscore+0x58>
     b0a:	85 30       	cpi	r24, 0x05	; 5
     b0c:	09 f4       	brne	.+2      	; 0xb10 <death_setscore+0x44>
     b0e:	0f c1       	rjmp	.+542    	; 0xd2e <death_setscore+0x262>
     b10:	85 30       	cpi	r24, 0x05	; 5
     b12:	08 f4       	brcc	.+2      	; 0xb16 <death_setscore+0x4a>
     b14:	6c c0       	rjmp	.+216    	; 0xbee <death_setscore+0x122>
     b16:	86 30       	cpi	r24, 0x06	; 6
     b18:	09 f4       	brne	.+2      	; 0xb1c <death_setscore+0x50>
     b1a:	2d c1       	rjmp	.+602    	; 0xd76 <death_setscore+0x2aa>
     b1c:	87 30       	cpi	r24, 0x07	; 7
     b1e:	09 f0       	breq	.+2      	; 0xb22 <death_setscore+0x56>
     b20:	32 c2       	rjmp	.+1124   	; 0xf86 <death_setscore+0x4ba>
     b22:	5d c1       	rjmp	.+698    	; 0xdde <death_setscore+0x312>
    case SCORE_MODE_TIME:
      if((minute_changed || hour_changed)) {
     b24:	80 91 1e 02 	lds	r24, 0x021E
     b28:	88 23       	and	r24, r24
     b2a:	21 f4       	brne	.+8      	; 0xb34 <death_setscore+0x68>
     b2c:	80 91 1f 02 	lds	r24, 0x021F
     b30:	88 23       	and	r24, r24
     b32:	d1 f0       	breq	.+52     	; 0xb68 <death_setscore+0x9c>
        if(hour_changed) {
     b34:	80 91 1f 02 	lds	r24, 0x021F
     b38:	88 23       	and	r24, r24
     b3a:	71 f0       	breq	.+28     	; 0xb58 <death_setscore+0x8c>
          left_score = old_h;
     b3c:	80 91 35 03 	lds	r24, 0x0335
     b40:	90 e0       	ldi	r25, 0x00	; 0
     b42:	a0 e0       	ldi	r26, 0x00	; 0
     b44:	b0 e0       	ldi	r27, 0x00	; 0
     b46:	80 93 d6 02 	sts	0x02D6, r24
     b4a:	90 93 d7 02 	sts	0x02D7, r25
     b4e:	a0 93 d8 02 	sts	0x02D8, r26
     b52:	b0 93 d9 02 	sts	0x02D9, r27
     b56:	05 c0       	rjmp	.+10     	; 0xb62 <death_setscore+0x96>
          right_score = old_m;
        } else if (minute_changed) {
     b58:	80 91 1e 02 	lds	r24, 0x021E
     b5c:	88 23       	and	r24, r24
     b5e:	09 f4       	brne	.+2      	; 0xb62 <death_setscore+0x96>
     b60:	12 c2       	rjmp	.+1060   	; 0xf86 <death_setscore+0x4ba>
          right_score = old_m;
     b62:	80 91 2b 03 	lds	r24, 0x032B
     b66:	2f c1       	rjmp	.+606    	; 0xdc6 <death_setscore+0x2fa>
        }
      } else {
        left_score = time_h;
     b68:	80 91 2a 03 	lds	r24, 0x032A
     b6c:	90 e0       	ldi	r25, 0x00	; 0
     b6e:	a0 e0       	ldi	r26, 0x00	; 0
     b70:	b0 e0       	ldi	r27, 0x00	; 0
     b72:	80 93 d6 02 	sts	0x02D6, r24
     b76:	90 93 d7 02 	sts	0x02D7, r25
     b7a:	a0 93 d8 02 	sts	0x02D8, r26
     b7e:	b0 93 d9 02 	sts	0x02D9, r27
        right_score = time_m;
     b82:	80 91 34 03 	lds	r24, 0x0334
     b86:	1f c1       	rjmp	.+574    	; 0xdc6 <death_setscore+0x2fa>
      }
      break;
    case SCORE_MODE_DATE:
      if(region == REGION_US) {
     b88:	80 91 37 03 	lds	r24, 0x0337
     b8c:	88 23       	and	r24, r24
     b8e:	81 f4       	brne	.+32     	; 0xbb0 <death_setscore+0xe4>
        left_score = date_m;
     b90:	80 91 3e 03 	lds	r24, 0x033E
     b94:	90 e0       	ldi	r25, 0x00	; 0
     b96:	a0 e0       	ldi	r26, 0x00	; 0
     b98:	b0 e0       	ldi	r27, 0x00	; 0
     b9a:	80 93 d6 02 	sts	0x02D6, r24
     b9e:	90 93 d7 02 	sts	0x02D7, r25
     ba2:	a0 93 d8 02 	sts	0x02D8, r26
     ba6:	b0 93 d9 02 	sts	0x02D9, r27
        right_score = date_d;
     baa:	80 91 33 03 	lds	r24, 0x0333
     bae:	0b c1       	rjmp	.+534    	; 0xdc6 <death_setscore+0x2fa>
      } else {
        left_score = date_d;
     bb0:	80 91 33 03 	lds	r24, 0x0333
     bb4:	90 e0       	ldi	r25, 0x00	; 0
     bb6:	a0 e0       	ldi	r26, 0x00	; 0
     bb8:	b0 e0       	ldi	r27, 0x00	; 0
     bba:	80 93 d6 02 	sts	0x02D6, r24
     bbe:	90 93 d7 02 	sts	0x02D7, r25
     bc2:	a0 93 d8 02 	sts	0x02D8, r26
     bc6:	b0 93 d9 02 	sts	0x02D9, r27
        right_score = date_m;
     bca:	80 91 3e 03 	lds	r24, 0x033E
     bce:	fb c0       	rjmp	.+502    	; 0xdc6 <death_setscore+0x2fa>
      }
      break;
    case SCORE_MODE_YEAR:
      left_score = 20;
     bd0:	84 e1       	ldi	r24, 0x14	; 20
     bd2:	90 e0       	ldi	r25, 0x00	; 0
     bd4:	a0 e0       	ldi	r26, 0x00	; 0
     bd6:	b0 e0       	ldi	r27, 0x00	; 0
     bd8:	80 93 d6 02 	sts	0x02D6, r24
     bdc:	90 93 d7 02 	sts	0x02D7, r25
     be0:	a0 93 d8 02 	sts	0x02D8, r26
     be4:	b0 93 d9 02 	sts	0x02D9, r27
      right_score = date_y;
     be8:	80 91 2d 03 	lds	r24, 0x032D
     bec:	ec c0       	rjmp	.+472    	; 0xdc6 <death_setscore+0x2fa>
      break;
    case SCORE_MODE_DEATH_TIME:
      if((minute_changed || hour_changed)) {
     bee:	80 91 1e 02 	lds	r24, 0x021E
     bf2:	88 23       	and	r24, r24
     bf4:	21 f4       	brne	.+8      	; 0xbfe <death_setscore+0x132>
     bf6:	80 91 1f 02 	lds	r24, 0x021F
     bfa:	88 23       	and	r24, r24
     bfc:	f9 f0       	breq	.+62     	; 0xc3c <death_setscore+0x170>
          left_score = old_minutes_left/10000;
     bfe:	60 91 1f 03 	lds	r22, 0x031F
     c02:	70 91 20 03 	lds	r23, 0x0320
     c06:	80 91 21 03 	lds	r24, 0x0321
     c0a:	90 91 22 03 	lds	r25, 0x0322
     c0e:	20 e1       	ldi	r18, 0x10	; 16
     c10:	37 e2       	ldi	r19, 0x27	; 39
     c12:	40 e0       	ldi	r20, 0x00	; 0
     c14:	50 e0       	ldi	r21, 0x00	; 0
     c16:	0e 94 4c 3b 	call	0x7698	; 0x7698 <__divmodsi4>
     c1a:	20 93 d6 02 	sts	0x02D6, r18
     c1e:	30 93 d7 02 	sts	0x02D7, r19
     c22:	40 93 d8 02 	sts	0x02D8, r20
     c26:	50 93 d9 02 	sts	0x02D9, r21
          right_score = old_minutes_left%10000;
     c2a:	60 91 1f 03 	lds	r22, 0x031F
     c2e:	70 91 20 03 	lds	r23, 0x0320
     c32:	80 91 21 03 	lds	r24, 0x0321
     c36:	90 91 22 03 	lds	r25, 0x0322
     c3a:	4c c0       	rjmp	.+152    	; 0xcd4 <death_setscore+0x208>
      } else {
          //if((minutes_left - ((dc_mode == DC_mode_sadistic)?(time_s/15):0)) > 0)
        left_score = (minutes_left - ((dc_mode == DC_mode_sadistic)?(time_s/15):0))/10000;
     c3c:	20 91 14 02 	lds	r18, 0x0214
     c40:	30 91 15 02 	lds	r19, 0x0215
     c44:	40 91 16 02 	lds	r20, 0x0216
     c48:	50 91 17 02 	lds	r21, 0x0217
     c4c:	80 91 23 03 	lds	r24, 0x0323
     c50:	83 30       	cpi	r24, 0x03	; 3
     c52:	29 f0       	breq	.+10     	; 0xc5e <death_setscore+0x192>
     c54:	80 e0       	ldi	r24, 0x00	; 0
     c56:	90 e0       	ldi	r25, 0x00	; 0
     c58:	a0 e0       	ldi	r26, 0x00	; 0
     c5a:	b0 e0       	ldi	r27, 0x00	; 0
     c5c:	08 c0       	rjmp	.+16     	; 0xc6e <death_setscore+0x1a2>
     c5e:	80 91 3f 03 	lds	r24, 0x033F
     c62:	6f e0       	ldi	r22, 0x0F	; 15
     c64:	0e 94 f7 3a 	call	0x75ee	; 0x75ee <__udivmodqi4>
     c68:	90 e0       	ldi	r25, 0x00	; 0
     c6a:	a0 e0       	ldi	r26, 0x00	; 0
     c6c:	b0 e0       	ldi	r27, 0x00	; 0
     c6e:	28 1b       	sub	r18, r24
     c70:	39 0b       	sbc	r19, r25
     c72:	4a 0b       	sbc	r20, r26
     c74:	5b 0b       	sbc	r21, r27
     c76:	ca 01       	movw	r24, r20
     c78:	b9 01       	movw	r22, r18
     c7a:	20 e1       	ldi	r18, 0x10	; 16
     c7c:	37 e2       	ldi	r19, 0x27	; 39
     c7e:	40 e0       	ldi	r20, 0x00	; 0
     c80:	50 e0       	ldi	r21, 0x00	; 0
     c82:	0e 94 4c 3b 	call	0x7698	; 0x7698 <__divmodsi4>
     c86:	20 93 d6 02 	sts	0x02D6, r18
     c8a:	30 93 d7 02 	sts	0x02D7, r19
     c8e:	40 93 d8 02 	sts	0x02D8, r20
     c92:	50 93 d9 02 	sts	0x02D9, r21
        right_score = (minutes_left - ((dc_mode == DC_mode_sadistic)?(time_s/15):0))%10000;
     c96:	20 91 14 02 	lds	r18, 0x0214
     c9a:	30 91 15 02 	lds	r19, 0x0215
     c9e:	40 91 16 02 	lds	r20, 0x0216
     ca2:	50 91 17 02 	lds	r21, 0x0217
     ca6:	80 91 23 03 	lds	r24, 0x0323
     caa:	83 30       	cpi	r24, 0x03	; 3
     cac:	29 f0       	breq	.+10     	; 0xcb8 <death_setscore+0x1ec>
     cae:	80 e0       	ldi	r24, 0x00	; 0
     cb0:	90 e0       	ldi	r25, 0x00	; 0
     cb2:	a0 e0       	ldi	r26, 0x00	; 0
     cb4:	b0 e0       	ldi	r27, 0x00	; 0
     cb6:	08 c0       	rjmp	.+16     	; 0xcc8 <death_setscore+0x1fc>
     cb8:	80 91 3f 03 	lds	r24, 0x033F
     cbc:	6f e0       	ldi	r22, 0x0F	; 15
     cbe:	0e 94 f7 3a 	call	0x75ee	; 0x75ee <__udivmodqi4>
     cc2:	90 e0       	ldi	r25, 0x00	; 0
     cc4:	a0 e0       	ldi	r26, 0x00	; 0
     cc6:	b0 e0       	ldi	r27, 0x00	; 0
     cc8:	28 1b       	sub	r18, r24
     cca:	39 0b       	sbc	r19, r25
     ccc:	4a 0b       	sbc	r20, r26
     cce:	5b 0b       	sbc	r21, r27
     cd0:	ca 01       	movw	r24, r20
     cd2:	b9 01       	movw	r22, r18
     cd4:	20 e1       	ldi	r18, 0x10	; 16
     cd6:	37 e2       	ldi	r19, 0x27	; 39
     cd8:	40 e0       	ldi	r20, 0x00	; 0
     cda:	50 e0       	ldi	r21, 0x00	; 0
     cdc:	0e 94 4c 3b 	call	0x7698	; 0x7698 <__divmodsi4>
     ce0:	60 93 da 02 	sts	0x02DA, r22
     ce4:	70 93 db 02 	sts	0x02DB, r23
     ce8:	80 93 dc 02 	sts	0x02DC, r24
     cec:	90 93 dd 02 	sts	0x02DD, r25
      }
      if(minutes_left <= 0)
     cf0:	80 91 14 02 	lds	r24, 0x0214
     cf4:	90 91 15 02 	lds	r25, 0x0215
     cf8:	a0 91 16 02 	lds	r26, 0x0216
     cfc:	b0 91 17 02 	lds	r27, 0x0217
     d00:	18 16       	cp	r1, r24
     d02:	19 06       	cpc	r1, r25
     d04:	1a 06       	cpc	r1, r26
     d06:	1b 06       	cpc	r1, r27
     d08:	0c f4       	brge	.+2      	; 0xd0c <death_setscore+0x240>
     d0a:	3d c1       	rjmp	.+634    	; 0xf86 <death_setscore+0x4ba>
          left_score = right_score = 0;
     d0c:	10 92 da 02 	sts	0x02DA, r1
     d10:	10 92 db 02 	sts	0x02DB, r1
     d14:	10 92 dc 02 	sts	0x02DC, r1
     d18:	10 92 dd 02 	sts	0x02DD, r1
     d1c:	10 92 d6 02 	sts	0x02D6, r1
     d20:	10 92 d7 02 	sts	0x02D7, r1
     d24:	10 92 d8 02 	sts	0x02D8, r1
     d28:	10 92 d9 02 	sts	0x02D9, r1
     d2c:	2c c1       	rjmp	.+600    	; 0xf86 <death_setscore+0x4ba>
      break;
    case SCORE_MODE_DEATH_DATE:
      if(region == REGION_US) {
     d2e:	80 91 37 03 	lds	r24, 0x0337
     d32:	88 23       	and	r24, r24
     d34:	81 f4       	brne	.+32     	; 0xd56 <death_setscore+0x28a>
        left_score = death_m;
     d36:	80 91 1e 03 	lds	r24, 0x031E
     d3a:	90 e0       	ldi	r25, 0x00	; 0
     d3c:	a0 e0       	ldi	r26, 0x00	; 0
     d3e:	b0 e0       	ldi	r27, 0x00	; 0
     d40:	80 93 d6 02 	sts	0x02D6, r24
     d44:	90 93 d7 02 	sts	0x02D7, r25
     d48:	a0 93 d8 02 	sts	0x02D8, r26
     d4c:	b0 93 d9 02 	sts	0x02D9, r27
        right_score = death_d;
     d50:	80 91 1b 03 	lds	r24, 0x031B
     d54:	38 c0       	rjmp	.+112    	; 0xdc6 <death_setscore+0x2fa>
      } else {
        left_score = death_d;
     d56:	80 91 1b 03 	lds	r24, 0x031B
     d5a:	90 e0       	ldi	r25, 0x00	; 0
     d5c:	a0 e0       	ldi	r26, 0x00	; 0
     d5e:	b0 e0       	ldi	r27, 0x00	; 0
     d60:	80 93 d6 02 	sts	0x02D6, r24
     d64:	90 93 d7 02 	sts	0x02D7, r25
     d68:	a0 93 d8 02 	sts	0x02D8, r26
     d6c:	b0 93 d9 02 	sts	0x02D9, r27
        right_score = death_m;
     d70:	80 91 1e 03 	lds	r24, 0x031E
     d74:	28 c0       	rjmp	.+80     	; 0xdc6 <death_setscore+0x2fa>
      }
      break;
    case SCORE_MODE_DEATH_YEAR:
      left_score = 19 + (death_y / 100);
     d76:	80 91 1d 03 	lds	r24, 0x031D
     d7a:	64 e6       	ldi	r22, 0x64	; 100
     d7c:	0e 94 f7 3a 	call	0x75ee	; 0x75ee <__udivmodqi4>
     d80:	90 e0       	ldi	r25, 0x00	; 0
     d82:	43 96       	adiw	r24, 0x13	; 19
     d84:	aa 27       	eor	r26, r26
     d86:	97 fd       	sbrc	r25, 7
     d88:	a0 95       	com	r26
     d8a:	ba 2f       	mov	r27, r26
     d8c:	80 93 d6 02 	sts	0x02D6, r24
     d90:	90 93 d7 02 	sts	0x02D7, r25
     d94:	a0 93 d8 02 	sts	0x02D8, r26
     d98:	b0 93 d9 02 	sts	0x02D9, r27
      right_score = death_y % 100;
     d9c:	80 91 1d 03 	lds	r24, 0x031D
     da0:	0e 94 f7 3a 	call	0x75ee	; 0x75ee <__udivmodqi4>
     da4:	89 2f       	mov	r24, r25
     da6:	0f c0       	rjmp	.+30     	; 0xdc6 <death_setscore+0x2fa>
      break;
    case SCORE_MODE_ALARM:
      left_score = alarm_h;
     da8:	80 91 38 03 	lds	r24, 0x0338
     dac:	90 e0       	ldi	r25, 0x00	; 0
     dae:	a0 e0       	ldi	r26, 0x00	; 0
     db0:	b0 e0       	ldi	r27, 0x00	; 0
     db2:	80 93 d6 02 	sts	0x02D6, r24
     db6:	90 93 d7 02 	sts	0x02D7, r25
     dba:	a0 93 d8 02 	sts	0x02D8, r26
     dbe:	b0 93 d9 02 	sts	0x02D9, r27
      right_score = alarm_m;
     dc2:	80 91 2e 03 	lds	r24, 0x032E
     dc6:	90 e0       	ldi	r25, 0x00	; 0
     dc8:	a0 e0       	ldi	r26, 0x00	; 0
     dca:	b0 e0       	ldi	r27, 0x00	; 0
     dcc:	80 93 da 02 	sts	0x02DA, r24
     dd0:	90 93 db 02 	sts	0x02DB, r25
     dd4:	a0 93 dc 02 	sts	0x02DC, r26
     dd8:	b0 93 dd 02 	sts	0x02DD, r27
     ddc:	d4 c0       	rjmp	.+424    	; 0xf86 <death_setscore+0x4ba>
      break;
    case SCORE_MODE_DEATH_ALARM:
      results = minutes_left;
     dde:	e0 90 14 02 	lds	r14, 0x0214
     de2:	f0 90 15 02 	lds	r15, 0x0215
     de6:	00 91 16 02 	lds	r16, 0x0216
     dea:	10 91 17 02 	lds	r17, 0x0217
     dee:	e0 92 ca 02 	sts	0x02CA, r14
     df2:	f0 92 cb 02 	sts	0x02CB, r15
     df6:	00 93 cc 02 	sts	0x02CC, r16
     dfa:	10 93 cd 02 	sts	0x02CD, r17
      if((time_h > alarm_h) || ((time_h == alarm_h) && (time_m > alarm_m)) || ((time_h == alarm_h) && (time_m == alarm_m) && (time_s > 0)))
     dfe:	90 91 2a 03 	lds	r25, 0x032A
     e02:	80 91 38 03 	lds	r24, 0x0338
     e06:	89 17       	cp	r24, r25
     e08:	e0 f0       	brcs	.+56     	; 0xe42 <death_setscore+0x376>
     e0a:	90 91 2a 03 	lds	r25, 0x032A
     e0e:	80 91 38 03 	lds	r24, 0x0338
     e12:	98 17       	cp	r25, r24
     e14:	31 f4       	brne	.+12     	; 0xe22 <death_setscore+0x356>
     e16:	90 91 34 03 	lds	r25, 0x0334
     e1a:	80 91 2e 03 	lds	r24, 0x032E
     e1e:	89 17       	cp	r24, r25
     e20:	80 f0       	brcs	.+32     	; 0xe42 <death_setscore+0x376>
     e22:	90 91 2a 03 	lds	r25, 0x032A
     e26:	80 91 38 03 	lds	r24, 0x0338
     e2a:	98 17       	cp	r25, r24
     e2c:	a1 f5       	brne	.+104    	; 0xe96 <death_setscore+0x3ca>
     e2e:	90 91 34 03 	lds	r25, 0x0334
     e32:	80 91 2e 03 	lds	r24, 0x032E
     e36:	98 17       	cp	r25, r24
     e38:	71 f5       	brne	.+92     	; 0xe96 <death_setscore+0x3ca>
     e3a:	80 91 3f 03 	lds	r24, 0x033F
     e3e:	88 23       	and	r24, r24
     e40:	51 f1       	breq	.+84     	; 0xe96 <death_setscore+0x3ca>
        results -= (((((alarm_h * 60) + alarm_m) + 1440) - ((time_h * 60) + time_m)) * ((dc_mode == DC_mode_sadistic)?4:1));
     e42:	90 91 38 03 	lds	r25, 0x0338
     e46:	20 91 2e 03 	lds	r18, 0x032E
     e4a:	40 91 2a 03 	lds	r20, 0x032A
     e4e:	e0 91 34 03 	lds	r30, 0x0334
     e52:	80 91 23 03 	lds	r24, 0x0323
     e56:	83 30       	cpi	r24, 0x03	; 3
     e58:	19 f0       	breq	.+6      	; 0xe60 <death_setscore+0x394>
     e5a:	61 e0       	ldi	r22, 0x01	; 1
     e5c:	70 e0       	ldi	r23, 0x00	; 0
     e5e:	02 c0       	rjmp	.+4      	; 0xe64 <death_setscore+0x398>
     e60:	64 e0       	ldi	r22, 0x04	; 4
     e62:	70 e0       	ldi	r23, 0x00	; 0
     e64:	30 e0       	ldi	r19, 0x00	; 0
     e66:	20 56       	subi	r18, 0x60	; 96
     e68:	3a 4f       	sbci	r19, 0xFA	; 250
     e6a:	8c e3       	ldi	r24, 0x3C	; 60
     e6c:	98 9f       	mul	r25, r24
     e6e:	c0 01       	movw	r24, r0
     e70:	11 24       	eor	r1, r1
     e72:	28 0f       	add	r18, r24
     e74:	39 1f       	adc	r19, r25
     e76:	50 e0       	ldi	r21, 0x00	; 0
     e78:	84 ec       	ldi	r24, 0xC4	; 196
     e7a:	9f ef       	ldi	r25, 0xFF	; 255
     e7c:	dc 01       	movw	r26, r24
     e7e:	4a 9f       	mul	r20, r26
     e80:	c0 01       	movw	r24, r0
     e82:	4b 9f       	mul	r20, r27
     e84:	90 0d       	add	r25, r0
     e86:	5a 9f       	mul	r21, r26
     e88:	90 0d       	add	r25, r0
     e8a:	11 24       	eor	r1, r1
     e8c:	28 0f       	add	r18, r24
     e8e:	39 1f       	adc	r19, r25
     e90:	2e 1b       	sub	r18, r30
     e92:	31 09       	sbc	r19, r1
     e94:	27 c0       	rjmp	.+78     	; 0xee4 <death_setscore+0x418>
      else
        results -= ((((alarm_h * 60) + alarm_m) - ((time_h * 60) + time_m)) * ((dc_mode == DC_mode_sadistic)?4:1));
     e96:	90 91 38 03 	lds	r25, 0x0338
     e9a:	f0 91 2e 03 	lds	r31, 0x032E
     e9e:	40 91 2a 03 	lds	r20, 0x032A
     ea2:	e0 91 34 03 	lds	r30, 0x0334
     ea6:	80 91 23 03 	lds	r24, 0x0323
     eaa:	83 30       	cpi	r24, 0x03	; 3
     eac:	19 f0       	breq	.+6      	; 0xeb4 <death_setscore+0x3e8>
     eae:	61 e0       	ldi	r22, 0x01	; 1
     eb0:	70 e0       	ldi	r23, 0x00	; 0
     eb2:	02 c0       	rjmp	.+4      	; 0xeb8 <death_setscore+0x3ec>
     eb4:	64 e0       	ldi	r22, 0x04	; 4
     eb6:	70 e0       	ldi	r23, 0x00	; 0
     eb8:	8c e3       	ldi	r24, 0x3C	; 60
     eba:	98 9f       	mul	r25, r24
     ebc:	c0 01       	movw	r24, r0
     ebe:	11 24       	eor	r1, r1
     ec0:	50 e0       	ldi	r21, 0x00	; 0
     ec2:	24 ec       	ldi	r18, 0xC4	; 196
     ec4:	3f ef       	ldi	r19, 0xFF	; 255
     ec6:	d9 01       	movw	r26, r18
     ec8:	4a 9f       	mul	r20, r26
     eca:	90 01       	movw	r18, r0
     ecc:	4b 9f       	mul	r20, r27
     ece:	30 0d       	add	r19, r0
     ed0:	5a 9f       	mul	r21, r26
     ed2:	30 0d       	add	r19, r0
     ed4:	11 24       	eor	r1, r1
     ed6:	82 0f       	add	r24, r18
     ed8:	93 1f       	adc	r25, r19
     eda:	8f 0f       	add	r24, r31
     edc:	91 1d       	adc	r25, r1
     ede:	8e 1b       	sub	r24, r30
     ee0:	91 09       	sbc	r25, r1
     ee2:	9c 01       	movw	r18, r24
     ee4:	62 9f       	mul	r22, r18
     ee6:	c0 01       	movw	r24, r0
     ee8:	63 9f       	mul	r22, r19
     eea:	90 0d       	add	r25, r0
     eec:	72 9f       	mul	r23, r18
     eee:	90 0d       	add	r25, r0
     ef0:	11 24       	eor	r1, r1
     ef2:	aa 27       	eor	r26, r26
     ef4:	97 fd       	sbrc	r25, 7
     ef6:	a0 95       	com	r26
     ef8:	ba 2f       	mov	r27, r26
     efa:	e8 1a       	sub	r14, r24
     efc:	f9 0a       	sbc	r15, r25
     efe:	0a 0b       	sbc	r16, r26
     f00:	1b 0b       	sbc	r17, r27
     f02:	e0 92 ca 02 	sts	0x02CA, r14
     f06:	f0 92 cb 02 	sts	0x02CB, r15
     f0a:	00 93 cc 02 	sts	0x02CC, r16
     f0e:	10 93 cd 02 	sts	0x02CD, r17
      left_score = results / 10000;
     f12:	e0 90 ca 02 	lds	r14, 0x02CA
     f16:	f0 90 cb 02 	lds	r15, 0x02CB
     f1a:	00 91 cc 02 	lds	r16, 0x02CC
     f1e:	10 91 cd 02 	lds	r17, 0x02CD
     f22:	c8 01       	movw	r24, r16
     f24:	b7 01       	movw	r22, r14
     f26:	20 e1       	ldi	r18, 0x10	; 16
     f28:	37 e2       	ldi	r19, 0x27	; 39
     f2a:	40 e0       	ldi	r20, 0x00	; 0
     f2c:	50 e0       	ldi	r21, 0x00	; 0
     f2e:	0e 94 4c 3b 	call	0x7698	; 0x7698 <__divmodsi4>
     f32:	20 93 d6 02 	sts	0x02D6, r18
     f36:	30 93 d7 02 	sts	0x02D7, r19
     f3a:	40 93 d8 02 	sts	0x02D8, r20
     f3e:	50 93 d9 02 	sts	0x02D9, r21
      right_score = results % 10000;
     f42:	c8 01       	movw	r24, r16
     f44:	b7 01       	movw	r22, r14
     f46:	20 e1       	ldi	r18, 0x10	; 16
     f48:	37 e2       	ldi	r19, 0x27	; 39
     f4a:	40 e0       	ldi	r20, 0x00	; 0
     f4c:	50 e0       	ldi	r21, 0x00	; 0
     f4e:	0e 94 4c 3b 	call	0x7698	; 0x7698 <__divmodsi4>
     f52:	60 93 da 02 	sts	0x02DA, r22
     f56:	70 93 db 02 	sts	0x02DB, r23
     f5a:	80 93 dc 02 	sts	0x02DC, r24
     f5e:	90 93 dd 02 	sts	0x02DD, r25
      if(results < 0) {
     f62:	17 ff       	sbrs	r17, 7
     f64:	10 c0       	rjmp	.+32     	; 0xf86 <death_setscore+0x4ba>
        left_score = 0;
     f66:	10 92 d6 02 	sts	0x02D6, r1
     f6a:	10 92 d7 02 	sts	0x02D7, r1
     f6e:	10 92 d8 02 	sts	0x02D8, r1
     f72:	10 92 d9 02 	sts	0x02D9, r1
        right_score = 0;
     f76:	10 92 da 02 	sts	0x02DA, r1
     f7a:	10 92 db 02 	sts	0x02DB, r1
     f7e:	10 92 dc 02 	sts	0x02DC, r1
     f82:	10 92 dd 02 	sts	0x02DD, r1
      }
      break;
  }
}
     f86:	1f 91       	pop	r17
     f88:	0f 91       	pop	r16
     f8a:	ff 90       	pop	r15
     f8c:	ef 90       	pop	r14
     f8e:	08 95       	ret

00000f90 <prep_digits>:
}

uint8_t display_digits[8];

void prep_digits(void)
{
     f90:	9f 92       	push	r9
     f92:	af 92       	push	r10
     f94:	bf 92       	push	r11
     f96:	cf 92       	push	r12
     f98:	df 92       	push	r13
     f9a:	ef 92       	push	r14
     f9c:	ff 92       	push	r15
     f9e:	0f 93       	push	r16
     fa0:	1f 93       	push	r17
	uint8_t i;
	uint16_t temp1=left_score, temp2=right_score;
     fa2:	e0 90 d6 02 	lds	r14, 0x02D6
     fa6:	f0 90 d7 02 	lds	r15, 0x02D7
     faa:	00 91 d8 02 	lds	r16, 0x02D8
     fae:	10 91 d9 02 	lds	r17, 0x02D9
     fb2:	9e 2c       	mov	r9, r14
     fb4:	4f 2d       	mov	r20, r15
     fb6:	a0 90 da 02 	lds	r10, 0x02DA
     fba:	b0 90 db 02 	lds	r11, 0x02DB
     fbe:	c0 90 dc 02 	lds	r12, 0x02DC
     fc2:	d0 90 dd 02 	lds	r13, 0x02DD
     fc6:	3a 2d       	mov	r19, r10
     fc8:	2b 2d       	mov	r18, r11
	if((score_mode != SCORE_MODE_DEATH_TIME) && (score_mode != SCORE_MODE_DEATH_ALARM))
     fca:	80 91 22 02 	lds	r24, 0x0222
     fce:	84 30       	cpi	r24, 0x04	; 4
     fd0:	09 f4       	brne	.+2      	; 0xfd4 <prep_digits+0x44>
     fd2:	fb c0       	rjmp	.+502    	; 0x11ca <prep_digits+0x23a>
     fd4:	80 91 22 02 	lds	r24, 0x0222
     fd8:	87 30       	cpi	r24, 0x07	; 7
     fda:	09 f4       	brne	.+2      	; 0xfde <prep_digits+0x4e>
     fdc:	f6 c0       	rjmp	.+492    	; 0x11ca <prep_digits+0x23a>
    {
		if ((time_format == TIME_12H) && ((score_mode == SCORE_MODE_TIME) || (score_mode == SCORE_MODE_ALARM)))
     fde:	80 91 2c 03 	lds	r24, 0x032C
     fe2:	88 23       	and	r24, r24
     fe4:	c9 f4       	brne	.+50     	; 0x1018 <prep_digits+0x88>
     fe6:	80 91 22 02 	lds	r24, 0x0222
     fea:	88 23       	and	r24, r24
     fec:	21 f0       	breq	.+8      	; 0xff6 <prep_digits+0x66>
     fee:	80 91 22 02 	lds	r24, 0x0222
     ff2:	83 30       	cpi	r24, 0x03	; 3
     ff4:	89 f4       	brne	.+34     	; 0x1018 <prep_digits+0x88>
	      display_digits[0] = ((left_score + 23)%12 + 1)/10;
     ff6:	c8 01       	movw	r24, r16
     ff8:	b7 01       	movw	r22, r14
     ffa:	69 5e       	subi	r22, 0xE9	; 233
     ffc:	7f 4f       	sbci	r23, 0xFF	; 255
     ffe:	8f 4f       	sbci	r24, 0xFF	; 255
    1000:	9f 4f       	sbci	r25, 0xFF	; 255
    1002:	2c e0       	ldi	r18, 0x0C	; 12
    1004:	30 e0       	ldi	r19, 0x00	; 0
    1006:	40 e0       	ldi	r20, 0x00	; 0
    1008:	50 e0       	ldi	r21, 0x00	; 0
    100a:	0e 94 2a 3b 	call	0x7654	; 0x7654 <__udivmodsi4>
    100e:	6f 5f       	subi	r22, 0xFF	; 255
    1010:	7f 4f       	sbci	r23, 0xFF	; 255
    1012:	8f 4f       	sbci	r24, 0xFF	; 255
    1014:	9f 4f       	sbci	r25, 0xFF	; 255
    1016:	02 c0       	rjmp	.+4      	; 0x101c <prep_digits+0x8c>
	    else 
	      display_digits[0] = left_score/10;
    1018:	c8 01       	movw	r24, r16
    101a:	b7 01       	movw	r22, r14
    101c:	2a e0       	ldi	r18, 0x0A	; 10
    101e:	30 e0       	ldi	r19, 0x00	; 0
    1020:	40 e0       	ldi	r20, 0x00	; 0
    1022:	50 e0       	ldi	r21, 0x00	; 0
    1024:	0e 94 2a 3b 	call	0x7654	; 0x7654 <__udivmodsi4>
    1028:	20 93 ce 02 	sts	0x02CE, r18
	    
	    if ((time_format == TIME_12H) && ((score_mode == SCORE_MODE_TIME) || (score_mode == SCORE_MODE_ALARM)))
    102c:	80 91 2c 03 	lds	r24, 0x032C
    1030:	88 23       	and	r24, r24
    1032:	e9 f4       	brne	.+58     	; 0x106e <prep_digits+0xde>
    1034:	80 91 22 02 	lds	r24, 0x0222
    1038:	88 23       	and	r24, r24
    103a:	21 f0       	breq	.+8      	; 0x1044 <prep_digits+0xb4>
    103c:	80 91 22 02 	lds	r24, 0x0222
    1040:	83 30       	cpi	r24, 0x03	; 3
    1042:	a9 f4       	brne	.+42     	; 0x106e <prep_digits+0xde>
	      display_digits[1] = ((left_score + 23)%12 + 1)%10;
    1044:	87 e1       	ldi	r24, 0x17	; 23
    1046:	90 e0       	ldi	r25, 0x00	; 0
    1048:	a0 e0       	ldi	r26, 0x00	; 0
    104a:	b0 e0       	ldi	r27, 0x00	; 0
    104c:	e8 0e       	add	r14, r24
    104e:	f9 1e       	adc	r15, r25
    1050:	0a 1f       	adc	r16, r26
    1052:	1b 1f       	adc	r17, r27
    1054:	c8 01       	movw	r24, r16
    1056:	b7 01       	movw	r22, r14
    1058:	2c e0       	ldi	r18, 0x0C	; 12
    105a:	30 e0       	ldi	r19, 0x00	; 0
    105c:	40 e0       	ldi	r20, 0x00	; 0
    105e:	50 e0       	ldi	r21, 0x00	; 0
    1060:	0e 94 2a 3b 	call	0x7654	; 0x7654 <__udivmodsi4>
    1064:	6f 5f       	subi	r22, 0xFF	; 255
    1066:	7f 4f       	sbci	r23, 0xFF	; 255
    1068:	8f 4f       	sbci	r24, 0xFF	; 255
    106a:	9f 4f       	sbci	r25, 0xFF	; 255
    106c:	02 c0       	rjmp	.+4      	; 0x1072 <prep_digits+0xe2>
	    else
	      display_digits[1] = left_score%10;
    106e:	c8 01       	movw	r24, r16
    1070:	b7 01       	movw	r22, r14
    1072:	2a e0       	ldi	r18, 0x0A	; 10
    1074:	30 e0       	ldi	r19, 0x00	; 0
    1076:	40 e0       	ldi	r20, 0x00	; 0
    1078:	50 e0       	ldi	r21, 0x00	; 0
    107a:	0e 94 2a 3b 	call	0x7654	; 0x7654 <__udivmodsi4>
    107e:	60 93 cf 02 	sts	0x02CF, r22
	    
	    display_digits[3] = right_score/10;
    1082:	c6 01       	movw	r24, r12
    1084:	b5 01       	movw	r22, r10
    1086:	2a e0       	ldi	r18, 0x0A	; 10
    1088:	30 e0       	ldi	r19, 0x00	; 0
    108a:	40 e0       	ldi	r20, 0x00	; 0
    108c:	50 e0       	ldi	r21, 0x00	; 0
    108e:	0e 94 2a 3b 	call	0x7654	; 0x7654 <__udivmodsi4>
    1092:	20 93 d1 02 	sts	0x02D1, r18
	    display_digits[4] = right_score%10;
    1096:	c6 01       	movw	r24, r12
    1098:	b5 01       	movw	r22, r10
    109a:	2a e0       	ldi	r18, 0x0A	; 10
    109c:	30 e0       	ldi	r19, 0x00	; 0
    109e:	40 e0       	ldi	r20, 0x00	; 0
    10a0:	50 e0       	ldi	r21, 0x00	; 0
    10a2:	0e 94 2a 3b 	call	0x7654	; 0x7654 <__udivmodsi4>
    10a6:	60 93 d2 02 	sts	0x02D2, r22
	    
	    if(score_mode == SCORE_MODE_TIME)
    10aa:	80 91 22 02 	lds	r24, 0x0222
    10ae:	88 23       	and	r24, r24
    10b0:	71 f5       	brne	.+92     	; 0x110e <prep_digits+0x17e>
	    {
	      if(time_format == TIME_12H)
    10b2:	80 91 2c 03 	lds	r24, 0x032C
    10b6:	88 23       	and	r24, r24
    10b8:	a9 f4       	brne	.+42     	; 0x10e4 <prep_digits+0x154>
	      {
	      	  display_digits[2] = ((time_s & 1)?((time_s < 30)?17:16):10) | 0x80;
    10ba:	80 91 3f 03 	lds	r24, 0x033F
    10be:	80 fd       	sbrc	r24, 0
    10c0:	02 c0       	rjmp	.+4      	; 0x10c6 <prep_digits+0x136>
    10c2:	8a e8       	ldi	r24, 0x8A	; 138
    10c4:	07 c0       	rjmp	.+14     	; 0x10d4 <prep_digits+0x144>
    10c6:	80 91 3f 03 	lds	r24, 0x033F
    10ca:	8e 31       	cpi	r24, 0x1E	; 30
    10cc:	10 f0       	brcs	.+4      	; 0x10d2 <prep_digits+0x142>
    10ce:	80 e9       	ldi	r24, 0x90	; 144
    10d0:	01 c0       	rjmp	.+2      	; 0x10d4 <prep_digits+0x144>
    10d2:	81 e9       	ldi	r24, 0x91	; 145
    10d4:	80 93 d0 02 	sts	0x02D0, r24
	      	  display_digits[5] = 12;
    10d8:	8c e0       	ldi	r24, 0x0C	; 12
    10da:	80 93 d3 02 	sts	0x02D3, r24
	      	  if(time_h < 12)
    10de:	80 91 2a 03 	lds	r24, 0x032A
    10e2:	25 c0       	rjmp	.+74     	; 0x112e <prep_digits+0x19e>
		      	display_digits[6] = 14;
		      display_digits[7] = 15;
	      }
	      else
	      {
		      display_digits[2] = display_digits[5] = 10;
    10e4:	8a e0       	ldi	r24, 0x0A	; 10
    10e6:	80 93 d3 02 	sts	0x02D3, r24
    10ea:	80 93 d0 02 	sts	0x02D0, r24
		      display_digits[6] = (time_s/10) | 0x80;
    10ee:	80 91 3f 03 	lds	r24, 0x033F
    10f2:	6a e0       	ldi	r22, 0x0A	; 10
    10f4:	0e 94 f7 3a 	call	0x75ee	; 0x75ee <__udivmodqi4>
    10f8:	80 68       	ori	r24, 0x80	; 128
    10fa:	80 93 d4 02 	sts	0x02D4, r24
		      display_digits[7] = (time_s%10) | 0x80;
    10fe:	80 91 3f 03 	lds	r24, 0x033F
    1102:	0e 94 f7 3a 	call	0x75ee	; 0x75ee <__udivmodqi4>
    1106:	90 68       	ori	r25, 0x80	; 128
    1108:	90 93 d5 02 	sts	0x02D5, r25
    110c:	8f c0       	rjmp	.+286    	; 0x122c <prep_digits+0x29c>
		  }
	    }
	    else if (score_mode == SCORE_MODE_ALARM)
    110e:	80 91 22 02 	lds	r24, 0x0222
    1112:	83 30       	cpi	r24, 0x03	; 3
    1114:	e1 f4       	brne	.+56     	; 0x114e <prep_digits+0x1be>
	    {
	      display_digits[2] = 10;
    1116:	8a e0       	ldi	r24, 0x0A	; 10
    1118:	80 93 d0 02 	sts	0x02D0, r24
	      display_digits[5] = 12;
    111c:	9c e0       	ldi	r25, 0x0C	; 12
    111e:	90 93 d3 02 	sts	0x02D3, r25
	      if(time_format == TIME_12H)
    1122:	80 91 2c 03 	lds	r24, 0x032C
    1126:	88 23       	and	r24, r24
    1128:	69 f4       	brne	.+26     	; 0x1144 <prep_digits+0x1b4>
	      {
	      	  if(alarm_h < 12)
    112a:	80 91 38 03 	lds	r24, 0x0338
    112e:	8c 30       	cpi	r24, 0x0C	; 12
    1130:	10 f4       	brcc	.+4      	; 0x1136 <prep_digits+0x1a6>
		      	display_digits[6] = 13;
    1132:	8d e0       	ldi	r24, 0x0D	; 13
    1134:	01 c0       	rjmp	.+2      	; 0x1138 <prep_digits+0x1a8>
		      else
		      	display_digits[6] = 14;
    1136:	8e e0       	ldi	r24, 0x0E	; 14
    1138:	80 93 d4 02 	sts	0x02D4, r24
		      display_digits[7] = 15;
    113c:	8f e0       	ldi	r24, 0x0F	; 15
    113e:	80 93 d5 02 	sts	0x02D5, r24
    1142:	74 c0       	rjmp	.+232    	; 0x122c <prep_digits+0x29c>
		  }
		  else
		  {
		  	  display_digits[6] = display_digits[7] = 12;
    1144:	90 93 d5 02 	sts	0x02D5, r25
    1148:	90 93 d4 02 	sts	0x02D4, r25
    114c:	6f c0       	rjmp	.+222    	; 0x122c <prep_digits+0x29c>
		  }
	    }
	    else if ((score_mode == SCORE_MODE_DATE) || (score_mode == SCORE_MODE_DEATH_DATE))
    114e:	80 91 22 02 	lds	r24, 0x0222
    1152:	81 30       	cpi	r24, 0x01	; 1
    1154:	21 f0       	breq	.+8      	; 0x115e <prep_digits+0x1ce>
    1156:	80 91 22 02 	lds	r24, 0x0222
    115a:	85 30       	cpi	r24, 0x05	; 5
    115c:	a9 f4       	brne	.+42     	; 0x1188 <prep_digits+0x1f8>
	    {
	    	display_digits[6] = display_digits[4];
    115e:	60 93 d4 02 	sts	0x02D4, r22
	    	display_digits[5] = display_digits[3];
    1162:	80 91 d1 02 	lds	r24, 0x02D1
    1166:	80 93 d3 02 	sts	0x02D3, r24
	    	display_digits[4] = 11;
    116a:	8b e0       	ldi	r24, 0x0B	; 11
    116c:	80 93 d2 02 	sts	0x02D2, r24
	    	display_digits[3] = display_digits[1];
    1170:	80 91 cf 02 	lds	r24, 0x02CF
    1174:	80 93 d1 02 	sts	0x02D1, r24
	    	display_digits[2] = display_digits[0];
    1178:	80 91 ce 02 	lds	r24, 0x02CE
    117c:	80 93 d0 02 	sts	0x02D0, r24
	    	display_digits[0] = display_digits[1] = display_digits[7] = 12;
    1180:	8c e0       	ldi	r24, 0x0C	; 12
    1182:	80 93 d5 02 	sts	0x02D5, r24
    1186:	1c c0       	rjmp	.+56     	; 0x11c0 <prep_digits+0x230>
	    }
	    else if ((score_mode == SCORE_MODE_YEAR) || (score_mode == SCORE_MODE_DEATH_YEAR))
    1188:	80 91 22 02 	lds	r24, 0x0222
    118c:	82 30       	cpi	r24, 0x02	; 2
    118e:	29 f0       	breq	.+10     	; 0x119a <prep_digits+0x20a>
    1190:	80 91 22 02 	lds	r24, 0x0222
    1194:	86 30       	cpi	r24, 0x06	; 6
    1196:	09 f0       	breq	.+2      	; 0x119a <prep_digits+0x20a>
    1198:	49 c0       	rjmp	.+146    	; 0x122c <prep_digits+0x29c>
	    {
	    	display_digits[6] = display_digits[4];
    119a:	60 93 d4 02 	sts	0x02D4, r22
	    	display_digits[5] = display_digits[3];
    119e:	80 91 d1 02 	lds	r24, 0x02D1
    11a2:	80 93 d3 02 	sts	0x02D3, r24
	    	display_digits[4] = display_digits[1];
    11a6:	80 91 cf 02 	lds	r24, 0x02CF
    11aa:	80 93 d2 02 	sts	0x02D2, r24
	    	display_digits[3] = display_digits[0];
    11ae:	80 91 ce 02 	lds	r24, 0x02CE
    11b2:	80 93 d1 02 	sts	0x02D1, r24
	    	display_digits[0] = display_digits[1] = display_digits[2] = display_digits[7] = 12;
    11b6:	8c e0       	ldi	r24, 0x0C	; 12
    11b8:	80 93 d5 02 	sts	0x02D5, r24
    11bc:	80 93 d0 02 	sts	0x02D0, r24
    11c0:	80 93 cf 02 	sts	0x02CF, r24
    11c4:	80 93 ce 02 	sts	0x02CE, r24
    11c8:	31 c0       	rjmp	.+98     	; 0x122c <prep_digits+0x29c>
	    }
	}
	else
    {
	    if((left_score != 0) || (right_score != 0))
    11ca:	e1 14       	cp	r14, r1
    11cc:	f1 04       	cpc	r15, r1
    11ce:	01 05       	cpc	r16, r1
    11d0:	11 05       	cpc	r17, r1
    11d2:	19 f0       	breq	.+6      	; 0x11da <prep_digits+0x24a>
    11d4:	e1 ed       	ldi	r30, 0xD1	; 209
    11d6:	f2 e0       	ldi	r31, 0x02	; 2
    11d8:	06 c0       	rjmp	.+12     	; 0x11e6 <prep_digits+0x256>
    11da:	a1 14       	cp	r10, r1
    11dc:	b1 04       	cpc	r11, r1
    11de:	c1 04       	cpc	r12, r1
    11e0:	d1 04       	cpc	r13, r1
    11e2:	c1 f7       	brne	.-16     	; 0x11d4 <prep_digits+0x244>
    11e4:	23 c0       	rjmp	.+70     	; 0x122c <prep_digits+0x29c>
	    {
	    	for(i=0;i<4;i++,temp1/=10,temp2/=10)
	    	{
	    		//drawbigdigit(DISPLAY_DL4_X_DEATH - i, DISPLAY_TIME_Y_DEATH, temp1 % 10, inverted);
	    		//drawbigdigit(DISPLAY_DR4_X_DEATH - i, DISPLAY_TIME_Y_DEATH, temp2 % 10, inverted);
	    		display_digits[3-i] = temp1 % 10;
    11e6:	89 2d       	mov	r24, r9
    11e8:	94 2f       	mov	r25, r20
    11ea:	6a e0       	ldi	r22, 0x0A	; 10
    11ec:	70 e0       	ldi	r23, 0x00	; 0
    11ee:	0e 94 03 3b 	call	0x7606	; 0x7606 <__udivmodhi4>
    11f2:	80 83       	st	Z, r24
	    		display_digits[7-i] = temp2 % 10;
    11f4:	83 2f       	mov	r24, r19
    11f6:	92 2f       	mov	r25, r18
    11f8:	6a e0       	ldi	r22, 0x0A	; 10
    11fa:	70 e0       	ldi	r23, 0x00	; 0
    11fc:	0e 94 03 3b 	call	0x7606	; 0x7606 <__udivmodhi4>
    1200:	84 83       	std	Z+4, r24	; 0x04
	}
	else
    {
	    if((left_score != 0) || (right_score != 0))
	    {
	    	for(i=0;i<4;i++,temp1/=10,temp2/=10)
    1202:	89 2d       	mov	r24, r9
    1204:	94 2f       	mov	r25, r20
    1206:	6a e0       	ldi	r22, 0x0A	; 10
    1208:	70 e0       	ldi	r23, 0x00	; 0
    120a:	0e 94 03 3b 	call	0x7606	; 0x7606 <__udivmodhi4>
    120e:	96 2e       	mov	r9, r22
    1210:	47 2f       	mov	r20, r23
    1212:	83 2f       	mov	r24, r19
    1214:	92 2f       	mov	r25, r18
    1216:	6a e0       	ldi	r22, 0x0A	; 10
    1218:	70 e0       	ldi	r23, 0x00	; 0
    121a:	0e 94 03 3b 	call	0x7606	; 0x7606 <__udivmodhi4>
    121e:	36 2f       	mov	r19, r22
    1220:	27 2f       	mov	r18, r23
    1222:	31 97       	sbiw	r30, 0x01	; 1
    1224:	92 e0       	ldi	r25, 0x02	; 2
    1226:	ed 3c       	cpi	r30, 0xCD	; 205
    1228:	f9 07       	cpc	r31, r25
    122a:	e9 f6       	brne	.-70     	; 0x11e6 <prep_digits+0x256>
	    		display_digits[3-i] = temp1 % 10;
	    		display_digits[7-i] = temp2 % 10;
	    	}
	    }
    }
}
    122c:	1f 91       	pop	r17
    122e:	0f 91       	pop	r16
    1230:	ff 90       	pop	r15
    1232:	ef 90       	pop	r14
    1234:	df 90       	pop	r13
    1236:	cf 90       	pop	r12
    1238:	bf 90       	pop	r11
    123a:	af 90       	pop	r10
    123c:	9f 90       	pop	r9
    123e:	08 95       	ret

00001240 <death_bitblit_ram>:
}

#define DIGIT_WIDTH_DEATH 76
#define DIGIT_HEIGHT_DEATH 64

void death_bitblit_ram(int16_t x_origin, uint8_t y_origin, uint8_t width, uint8_t *bitmap_p, uint16_t size, uint8_t inverted) {
    1240:	6f 92       	push	r6
    1242:	7f 92       	push	r7
    1244:	8f 92       	push	r8
    1246:	9f 92       	push	r9
    1248:	af 92       	push	r10
    124a:	bf 92       	push	r11
    124c:	cf 92       	push	r12
    124e:	df 92       	push	r13
    1250:	ef 92       	push	r14
    1252:	ff 92       	push	r15
    1254:	0f 93       	push	r16
    1256:	1f 93       	push	r17
    1258:	cf 93       	push	r28
    125a:	df 93       	push	r29
    125c:	6c 01       	movw	r12, r24
    125e:	b4 2e       	mov	r11, r20
    1260:	39 01       	movw	r6, r18
    1262:	48 01       	movw	r8, r16
    1264:	ae 2c       	mov	r10, r14
  uint8_t xx,y, p;
  int16_t x;

  if((x_origin+width+1)<0)
    1266:	84 0f       	add	r24, r20
    1268:	91 1d       	adc	r25, r1
    126a:	8f 5f       	subi	r24, 0xFF	; 255
    126c:	9f 4f       	sbci	r25, 0xFF	; 255
    126e:	0c f4       	brge	.+2      	; 0x1272 <death_bitblit_ram+0x32>
    1270:	40 c0       	rjmp	.+128    	; 0x12f2 <death_bitblit_ram+0xb2>
        x = i % width;
      }
      xx = x+x_origin;
      y = i / width;
      //if(((x+x_origin)>=0) && ((x+x_origin)<128))
      glcdSetAddress(xx, (y_origin/8)+y);
    1272:	e6 2e       	mov	r14, r22
    1274:	e6 94       	lsr	r14
    1276:	e6 94       	lsr	r14
    1278:	e6 94       	lsr	r14
    127a:	00 e0       	ldi	r16, 0x00	; 0
    127c:	10 e0       	ldi	r17, 0x00	; 0
    127e:	36 c0       	rjmp	.+108    	; 0x12ec <death_bitblit_ram+0xac>
  int16_t x;

  if((x_origin+width+1)<0)
    return;
  for (uint16_t i = 0; i<size; i++) {
    p = bitmap_p[i];
    1280:	f3 01       	movw	r30, r6
    1282:	e0 0f       	add	r30, r16
    1284:	f1 1f       	adc	r31, r17
    1286:	f0 80       	ld	r15, Z
    
    x = i % width;
    1288:	c8 01       	movw	r24, r16
    128a:	6b 2d       	mov	r22, r11
    128c:	70 e0       	ldi	r23, 0x00	; 0
    128e:	0e 94 03 3b 	call	0x7606	; 0x7606 <__udivmodhi4>
    1292:	ec 01       	movw	r28, r24
    if (x == 0) {
    1294:	00 97       	sbiw	r24, 0x00	; 0
    1296:	d9 f4       	brne	.+54     	; 0x12ce <death_bitblit_ram+0x8e>
    1298:	09 c0       	rjmp	.+18     	; 0x12ac <death_bitblit_ram+0x6c>
      while((x+x_origin)<0)
      {
        i++;
    129a:	0f 5f       	subi	r16, 0xFF	; 255
    129c:	1f 4f       	sbci	r17, 0xFF	; 255
        p = bitmap_p[i];
    129e:	f0 80       	ld	r15, Z
        x = i % width;
    12a0:	c8 01       	movw	r24, r16
    12a2:	6b 2d       	mov	r22, r11
    12a4:	70 e0       	ldi	r23, 0x00	; 0
    12a6:	0e 94 03 3b 	call	0x7606	; 0x7606 <__udivmodhi4>
    12aa:	ec 01       	movw	r28, r24
    12ac:	31 96       	adiw	r30, 0x01	; 1
  for (uint16_t i = 0; i<size; i++) {
    p = bitmap_p[i];
    
    x = i % width;
    if (x == 0) {
      while((x+x_origin)<0)
    12ae:	ce 01       	movw	r24, r28
    12b0:	8c 0d       	add	r24, r12
    12b2:	9d 1d       	adc	r25, r13
    12b4:	97 fd       	sbrc	r25, 7
    12b6:	f1 cf       	rjmp	.-30     	; 0x129a <death_bitblit_ram+0x5a>
        x = i % width;
      }
      xx = x+x_origin;
      y = i / width;
      //if(((x+x_origin)>=0) && ((x+x_origin)<128))
      glcdSetAddress(xx, (y_origin/8)+y);
    12b8:	c8 01       	movw	r24, r16
    12ba:	6b 2d       	mov	r22, r11
    12bc:	70 e0       	ldi	r23, 0x00	; 0
    12be:	0e 94 03 3b 	call	0x7606	; 0x7606 <__udivmodhi4>
    12c2:	6e 0d       	add	r22, r14
    12c4:	9e 01       	movw	r18, r28
    12c6:	2c 0d       	add	r18, r12
    12c8:	82 2f       	mov	r24, r18
    12ca:	0e 94 50 2d 	call	0x5aa0	; 0x5aa0 <glcdSetAddress>
      //else
      //   continue;
    }
    if((x+x_origin)<128)
    12ce:	cc 0d       	add	r28, r12
    12d0:	dd 1d       	adc	r29, r13
    12d2:	c0 38       	cpi	r28, 0x80	; 128
    12d4:	d1 05       	cpc	r29, r1
    12d6:	44 f4       	brge	.+16     	; 0x12e8 <death_bitblit_ram+0xa8>
    {
      if (inverted) 
    12d8:	aa 20       	and	r10, r10
    12da:	19 f0       	breq	.+6      	; 0x12e2 <death_bitblit_ram+0xa2>
        glcdDataWrite(~p);  
    12dc:	8f 2d       	mov	r24, r15
    12de:	80 95       	com	r24
    12e0:	01 c0       	rjmp	.+2      	; 0x12e4 <death_bitblit_ram+0xa4>
      else 
        glcdDataWrite(p);  
    12e2:	8f 2d       	mov	r24, r15
    12e4:	0e 94 f7 2c 	call	0x59ee	; 0x59ee <glcdDataWrite>
  uint8_t xx,y, p;
  int16_t x;

  if((x_origin+width+1)<0)
    return;
  for (uint16_t i = 0; i<size; i++) {
    12e8:	0f 5f       	subi	r16, 0xFF	; 255
    12ea:	1f 4f       	sbci	r17, 0xFF	; 255
    12ec:	08 15       	cp	r16, r8
    12ee:	19 05       	cpc	r17, r9
    12f0:	38 f2       	brcs	.-114    	; 0x1280 <death_bitblit_ram+0x40>
        glcdDataWrite(~p);  
      else 
        glcdDataWrite(p);  
    }
  }
}
    12f2:	df 91       	pop	r29
    12f4:	cf 91       	pop	r28
    12f6:	1f 91       	pop	r17
    12f8:	0f 91       	pop	r16
    12fa:	ff 90       	pop	r15
    12fc:	ef 90       	pop	r14
    12fe:	df 90       	pop	r13
    1300:	cf 90       	pop	r12
    1302:	bf 90       	pop	r11
    1304:	af 90       	pop	r10
    1306:	9f 90       	pop	r9
    1308:	8f 90       	pop	r8
    130a:	7f 90       	pop	r7
    130c:	6f 90       	pop	r6
    130e:	08 95       	ret

00001310 <death_blitsegs_rom>:

// number of segments to expect
#define SEGMENTS 2

void death_blitsegs_rom(int16_t x_origin, uint8_t y_origin, PGM_P bitmap_p, uint8_t width, uint8_t height, uint8_t inverted) {
    1310:	2f 92       	push	r2
    1312:	3f 92       	push	r3
    1314:	4f 92       	push	r4
    1316:	5f 92       	push	r5
    1318:	6f 92       	push	r6
    131a:	7f 92       	push	r7
    131c:	8f 92       	push	r8
    131e:	9f 92       	push	r9
    1320:	af 92       	push	r10
    1322:	bf 92       	push	r11
    1324:	cf 92       	push	r12
    1326:	df 92       	push	r13
    1328:	ef 92       	push	r14
    132a:	ff 92       	push	r15
    132c:	0f 93       	push	r16
    132e:	1f 93       	push	r17
    1330:	df 93       	push	r29
    1332:	cf 93       	push	r28
    1334:	cd b7       	in	r28, 0x3d	; 61
    1336:	de b7       	in	r29, 0x3e	; 62
    1338:	c1 56       	subi	r28, 0x61	; 97
    133a:	d2 40       	sbci	r29, 0x02	; 2
    133c:	0f b6       	in	r0, 0x3f	; 63
    133e:	f8 94       	cli
    1340:	de bf       	out	0x3e, r29	; 62
    1342:	0f be       	out	0x3f, r0	; 63
    1344:	cd bf       	out	0x3d, r28	; 61
    1346:	6c 01       	movw	r12, r24
    1348:	36 2e       	mov	r3, r22
    134a:	4a 01       	movw	r8, r20
    134c:	b2 2e       	mov	r11, r18
    134e:	20 2e       	mov	r2, r16
    1350:	cf 59       	subi	r28, 0x9F	; 159
    1352:	dd 4f       	sbci	r29, 0xFD	; 253
    1354:	e8 82       	st	Y, r14
    1356:	c1 56       	subi	r28, 0x61	; 97
    1358:	d2 40       	sbci	r29, 0x02	; 2
  uint8_t bitmap[DIGIT_WIDTH_DEATH * DIGIT_HEIGHT_DEATH / 8] = {0};
  
  if(width > DIGIT_WIDTH_DEATH)
    135a:	2c e4       	ldi	r18, 0x4C	; 76
    135c:	2b 15       	cp	r18, r11
    135e:	08 f4       	brcc	.+2      	; 0x1362 <death_blitsegs_rom+0x52>
    1360:	76 c0       	rjmp	.+236    	; 0x144e <death_blitsegs_rom+0x13e>
  	  return;
  if((x_origin + width) < 0)
    1362:	0b 2d       	mov	r16, r11
    1364:	10 e0       	ldi	r17, 0x00	; 0
    1366:	c8 01       	movw	r24, r16
    1368:	8c 0d       	add	r24, r12
    136a:	9d 1d       	adc	r25, r13
    136c:	97 fd       	sbrc	r25, 7
    136e:	6f c0       	rjmp	.+222    	; 0x144e <death_blitsegs_rom+0x13e>
    return;
  if(x_origin >= 128)
    1370:	30 e8       	ldi	r19, 0x80	; 128
    1372:	c3 16       	cp	r12, r19
    1374:	d1 04       	cpc	r13, r1
    1376:	0c f0       	brlt	.+2      	; 0x137a <death_blitsegs_rom+0x6a>
    1378:	6a c0       	rjmp	.+212    	; 0x144e <death_blitsegs_rom+0x13e>
    return;
  if((y_origin + DIGIT_HEIGHT_DEATH) < 0)
    return;
  if(y_origin >= 64)
    137a:	8f e3       	ldi	r24, 0x3F	; 63
    137c:	86 17       	cp	r24, r22
    137e:	08 f4       	brcc	.+2      	; 0x1382 <death_blitsegs_rom+0x72>
    1380:	66 c0       	rjmp	.+204    	; 0x144e <death_blitsegs_rom+0x13e>

// number of segments to expect
#define SEGMENTS 2

void death_blitsegs_rom(int16_t x_origin, uint8_t y_origin, PGM_P bitmap_p, uint8_t width, uint8_t height, uint8_t inverted) {
  uint8_t bitmap[DIGIT_WIDTH_DEATH * DIGIT_HEIGHT_DEATH / 8] = {0};
    1382:	fe 01       	movw	r30, r28
    1384:	31 96       	adiw	r30, 0x01	; 1
    1386:	80 e6       	ldi	r24, 0x60	; 96
    1388:	92 e0       	ldi	r25, 0x02	; 2
    138a:	df 01       	movw	r26, r30
    138c:	9c 01       	movw	r18, r24
    138e:	1d 92       	st	X+, r1
    1390:	21 50       	subi	r18, 0x01	; 1
    1392:	30 40       	sbci	r19, 0x00	; 0
    1394:	e1 f7       	brne	.-8      	; 0x138e <death_blitsegs_rom+0x7e>
    1396:	20 e0       	ldi	r18, 0x00	; 0
    1398:	30 e0       	ldi	r19, 0x00	; 0
    139a:	40 e0       	ldi	r20, 0x00	; 0
    while(count--) {
      uint8_t start = pgm_read_byte(bitmap_p+pointer);pointer++;
      uint8_t stop = pgm_read_byte(bitmap_p+pointer);pointer++;
    
      while (start <= stop) {
        bitmap[start + (line/8)*width ] |= _BV(line%8);
    139c:	61 e0       	ldi	r22, 0x01	; 1
    139e:	46 2e       	mov	r4, r22
    13a0:	51 2c       	mov	r5, r1
    13a2:	3f 01       	movw	r6, r30
    13a4:	3f c0       	rjmp	.+126    	; 0x1424 <death_blitsegs_rom+0x114>
  if(y_origin >= 64)
    return;
  
  uint16_t pointer=0;
  for (uint8_t line = 0; line<height; line++) {
    uint8_t count = pgm_read_byte(bitmap_p+pointer);
    13a6:	f4 01       	movw	r30, r8
    13a8:	e2 0f       	add	r30, r18
    13aa:	f3 1f       	adc	r31, r19
    13ac:	64 91       	lpm	r22, Z+
    while(count--) {
      uint8_t start = pgm_read_byte(bitmap_p+pointer);pointer++;
      uint8_t stop = pgm_read_byte(bitmap_p+pointer);pointer++;
    
      while (start <= stop) {
        bitmap[start + (line/8)*width ] |= _BV(line%8);
    13ae:	84 2f       	mov	r24, r20
    13b0:	86 95       	lsr	r24
    13b2:	86 95       	lsr	r24
    13b4:	86 95       	lsr	r24
    13b6:	90 e0       	ldi	r25, 0x00	; 0
    13b8:	80 9f       	mul	r24, r16
    13ba:	70 01       	movw	r14, r0
    13bc:	81 9f       	mul	r24, r17
    13be:	f0 0c       	add	r15, r0
    13c0:	90 9f       	mul	r25, r16
    13c2:	f0 0c       	add	r15, r0
    13c4:	11 24       	eor	r1, r1
    13c6:	84 2f       	mov	r24, r20
    13c8:	87 70       	andi	r24, 0x07	; 7
    13ca:	a4 2c       	mov	r10, r4
    13cc:	01 c0       	rjmp	.+2      	; 0x13d0 <death_blitsegs_rom+0xc0>
    13ce:	aa 0c       	add	r10, r10
    13d0:	8a 95       	dec	r24
    13d2:	ea f7       	brpl	.-6      	; 0x13ce <death_blitsegs_rom+0xbe>
    13d4:	2f 5f       	subi	r18, 0xFF	; 255
    13d6:	3f 4f       	sbci	r19, 0xFF	; 255
    13d8:	d4 01       	movw	r26, r8
    13da:	a2 0f       	add	r26, r18
    13dc:	b3 1f       	adc	r27, r19
    13de:	21 50       	subi	r18, 0x01	; 1
    13e0:	30 40       	sbci	r19, 0x00	; 0
    13e2:	76 2f       	mov	r23, r22
    13e4:	15 c0       	rjmp	.+42     	; 0x1410 <death_blitsegs_rom+0x100>
  uint16_t pointer=0;
  for (uint8_t line = 0; line<height; line++) {
    uint8_t count = pgm_read_byte(bitmap_p+pointer);
    pointer++;
    while(count--) {
      uint8_t start = pgm_read_byte(bitmap_p+pointer);pointer++;
    13e6:	fd 01       	movw	r30, r26
    13e8:	84 91       	lpm	r24, Z+
      uint8_t stop = pgm_read_byte(bitmap_p+pointer);pointer++;
    13ea:	11 96       	adiw	r26, 0x01	; 1
    13ec:	fd 01       	movw	r30, r26
    13ee:	54 91       	lpm	r21, Z+
    13f0:	11 97       	sbiw	r26, 0x01	; 1
    13f2:	98 2f       	mov	r25, r24
    13f4:	09 c0       	rjmp	.+18     	; 0x1408 <death_blitsegs_rom+0xf8>
    
      while (start <= stop) {
        bitmap[start + (line/8)*width ] |= _BV(line%8);
    13f6:	f7 01       	movw	r30, r14
    13f8:	e9 0f       	add	r30, r25
    13fa:	f1 1d       	adc	r31, r1
    13fc:	e6 0d       	add	r30, r6
    13fe:	f7 1d       	adc	r31, r7
    1400:	80 81       	ld	r24, Z
    1402:	8a 29       	or	r24, r10
    1404:	80 83       	st	Z, r24
        start++;
    1406:	9f 5f       	subi	r25, 0xFF	; 255
    pointer++;
    while(count--) {
      uint8_t start = pgm_read_byte(bitmap_p+pointer);pointer++;
      uint8_t stop = pgm_read_byte(bitmap_p+pointer);pointer++;
    
      while (start <= stop) {
    1408:	59 17       	cp	r21, r25
    140a:	a8 f7       	brcc	.-22     	; 0x13f6 <death_blitsegs_rom+0xe6>
    140c:	71 50       	subi	r23, 0x01	; 1
    140e:	12 96       	adiw	r26, 0x02	; 2
  
  uint16_t pointer=0;
  for (uint8_t line = 0; line<height; line++) {
    uint8_t count = pgm_read_byte(bitmap_p+pointer);
    pointer++;
    while(count--) {
    1410:	77 23       	and	r23, r23
    1412:	49 f7       	brne	.-46     	; 0x13e6 <death_blitsegs_rom+0xd6>
    return;
  
  uint16_t pointer=0;
  for (uint8_t line = 0; line<height; line++) {
    uint8_t count = pgm_read_byte(bitmap_p+pointer);
    pointer++;
    1414:	86 2f       	mov	r24, r22
    1416:	90 e0       	ldi	r25, 0x00	; 0
    1418:	88 0f       	add	r24, r24
    141a:	99 1f       	adc	r25, r25
    141c:	01 96       	adiw	r24, 0x01	; 1
    141e:	28 0f       	add	r18, r24
    1420:	39 1f       	adc	r19, r25
    return;
  if(y_origin >= 64)
    return;
  
  uint16_t pointer=0;
  for (uint8_t line = 0; line<height; line++) {
    1422:	4f 5f       	subi	r20, 0xFF	; 255
    1424:	42 15       	cp	r20, r2
    1426:	08 f4       	brcc	.+2      	; 0x142a <death_blitsegs_rom+0x11a>
    1428:	be cf       	rjmp	.-132    	; 0x13a6 <death_blitsegs_rom+0x96>
        bitmap[start + (line/8)*width ] |= _BV(line%8);
        start++;
      }
    }
  }
  death_bitblit_ram(x_origin, y_origin, width, bitmap, DIGIT_HEIGHT_DEATH*width/8, inverted);
    142a:	83 e0       	ldi	r24, 0x03	; 3
    142c:	00 0f       	add	r16, r16
    142e:	11 1f       	adc	r17, r17
    1430:	8a 95       	dec	r24
    1432:	e1 f7       	brne	.-8      	; 0x142c <death_blitsegs_rom+0x11c>
    1434:	c6 01       	movw	r24, r12
    1436:	63 2d       	mov	r22, r3
    1438:	4b 2d       	mov	r20, r11
    143a:	9e 01       	movw	r18, r28
    143c:	2f 5f       	subi	r18, 0xFF	; 255
    143e:	3f 4f       	sbci	r19, 0xFF	; 255
    1440:	cf 59       	subi	r28, 0x9F	; 159
    1442:	dd 4f       	sbci	r29, 0xFD	; 253
    1444:	e8 80       	ld	r14, Y
    1446:	c1 56       	subi	r28, 0x61	; 97
    1448:	d2 40       	sbci	r29, 0x02	; 2
    144a:	0e 94 20 09 	call	0x1240	; 0x1240 <death_bitblit_ram>
}
    144e:	cf 59       	subi	r28, 0x9F	; 159
    1450:	dd 4f       	sbci	r29, 0xFD	; 253
    1452:	0f b6       	in	r0, 0x3f	; 63
    1454:	f8 94       	cli
    1456:	de bf       	out	0x3e, r29	; 62
    1458:	0f be       	out	0x3f, r0	; 63
    145a:	cd bf       	out	0x3d, r28	; 61
    145c:	cf 91       	pop	r28
    145e:	df 91       	pop	r29
    1460:	1f 91       	pop	r17
    1462:	0f 91       	pop	r16
    1464:	ff 90       	pop	r15
    1466:	ef 90       	pop	r14
    1468:	df 90       	pop	r13
    146a:	cf 90       	pop	r12
    146c:	bf 90       	pop	r11
    146e:	af 90       	pop	r10
    1470:	9f 90       	pop	r9
    1472:	8f 90       	pop	r8
    1474:	7f 90       	pop	r7
    1476:	6f 90       	pop	r6
    1478:	5f 90       	pop	r5
    147a:	4f 90       	pop	r4
    147c:	3f 90       	pop	r3
    147e:	2f 90       	pop	r2
    1480:	08 95       	ret

00001482 <next_border>:
  }
}

static uint8_t border_x=0, border_y=0, border_state=0,border_on=0;
void next_border(void)
{
    1482:	0f 93       	push	r16
  if(!border_on)
    1484:	80 91 f5 01 	lds	r24, 0x01F5
    1488:	88 23       	and	r24, r24
    148a:	09 f4       	brne	.+2      	; 0x148e <next_border+0xc>
    148c:	55 c0       	rjmp	.+170    	; 0x1538 <next_border+0xb6>
  	  return;
  glcdFillRectangle(border_x, border_y, 2, 2, (border_state<2));
    148e:	00 e0       	ldi	r16, 0x00	; 0
    1490:	80 91 f8 01 	lds	r24, 0x01F8
    1494:	82 30       	cpi	r24, 0x02	; 2
    1496:	08 f4       	brcc	.+2      	; 0x149a <next_border+0x18>
    1498:	01 e0       	ldi	r16, 0x01	; 1
    149a:	80 91 f6 01 	lds	r24, 0x01F6
    149e:	60 91 f7 01 	lds	r22, 0x01F7
    14a2:	42 e0       	ldi	r20, 0x02	; 2
    14a4:	22 e0       	ldi	r18, 0x02	; 2
    14a6:	0e 94 7e 29 	call	0x52fc	; 0x52fc <glcdFillRectangle>
  if(++border_state >= 4) border_state = 0;
    14aa:	80 91 f8 01 	lds	r24, 0x01F8
    14ae:	8f 5f       	subi	r24, 0xFF	; 255
    14b0:	80 93 f8 01 	sts	0x01F8, r24
    14b4:	84 30       	cpi	r24, 0x04	; 4
    14b6:	10 f0       	brcs	.+4      	; 0x14bc <next_border+0x3a>
    14b8:	10 92 f8 01 	sts	0x01F8, r1
  if((border_x == 0) && (border_y == 0))
    14bc:	90 91 f6 01 	lds	r25, 0x01F6
    14c0:	99 23       	and	r25, r25
    14c2:	c9 f4       	brne	.+50     	; 0x14f6 <next_border+0x74>
    14c4:	80 91 f7 01 	lds	r24, 0x01F7
    14c8:	88 23       	and	r24, r24
    14ca:	59 f4       	brne	.+22     	; 0x14e2 <next_border+0x60>
  {
    border_state += 2;
    14cc:	80 91 f8 01 	lds	r24, 0x01F8
    14d0:	8e 5f       	subi	r24, 0xFE	; 254
    14d2:	80 93 f8 01 	sts	0x01F8, r24
    if(border_state >= 4) border_state = 0;
    14d6:	84 30       	cpi	r24, 0x04	; 4
    14d8:	10 f0       	brcs	.+4      	; 0x14de <next_border+0x5c>
    14da:	10 92 f8 01 	sts	0x01F8, r1
    border_y+=2;
    14de:	82 e0       	ldi	r24, 0x02	; 2
    14e0:	03 c0       	rjmp	.+6      	; 0x14e8 <next_border+0x66>
  }
  else if ((border_x == 0) && (border_y < 62))
    14e2:	8e 33       	cpi	r24, 0x3E	; 62
    14e4:	20 f4       	brcc	.+8      	; 0x14ee <next_border+0x6c>
    border_y+=2;
    14e6:	8e 5f       	subi	r24, 0xFE	; 254
    14e8:	80 93 f7 01 	sts	0x01F7, r24
    14ec:	25 c0       	rjmp	.+74     	; 0x1538 <next_border+0xb6>
  else if ((border_x == 0) && (border_y == 62))
    14ee:	8e 33       	cpi	r24, 0x3E	; 62
    14f0:	21 f4       	brne	.+8      	; 0x14fa <next_border+0x78>
    border_x+=2;
    14f2:	82 e0       	ldi	r24, 0x02	; 2
    14f4:	15 c0       	rjmp	.+42     	; 0x1520 <next_border+0x9e>
  else if ((border_x < 126) && (border_y == 62))
    14f6:	9e 37       	cpi	r25, 0x7E	; 126
    14f8:	30 f4       	brcc	.+12     	; 0x1506 <next_border+0x84>
    14fa:	80 91 f7 01 	lds	r24, 0x01F7
    14fe:	8e 33       	cpi	r24, 0x3E	; 62
    1500:	11 f4       	brne	.+4      	; 0x1506 <next_border+0x84>
    border_x+=2;
    1502:	9e 5f       	subi	r25, 0xFE	; 254
    1504:	17 c0       	rjmp	.+46     	; 0x1534 <next_border+0xb2>
  else if ((border_x == 126) && (border_y == 62))
    1506:	9e 37       	cpi	r25, 0x7E	; 126
    1508:	71 f4       	brne	.+28     	; 0x1526 <next_border+0xa4>
    150a:	80 91 f7 01 	lds	r24, 0x01F7
    150e:	8e 33       	cpi	r24, 0x3E	; 62
    1510:	11 f4       	brne	.+4      	; 0x1516 <next_border+0x94>
    border_y-=2;
    1512:	8c e3       	ldi	r24, 0x3C	; 60
    1514:	e9 cf       	rjmp	.-46     	; 0x14e8 <next_border+0x66>
  else if ((border_x == 126) && (border_y > 0))
    1516:	88 23       	and	r24, r24
    1518:	11 f0       	breq	.+4      	; 0x151e <next_border+0x9c>
    border_y-=2;
    151a:	82 50       	subi	r24, 0x02	; 2
    151c:	e5 cf       	rjmp	.-54     	; 0x14e8 <next_border+0x66>
  else if ((border_x == 126) && (border_y == 0))
    border_x-=2;
    151e:	8c e7       	ldi	r24, 0x7C	; 124
    1520:	80 93 f6 01 	sts	0x01F6, r24
    1524:	09 c0       	rjmp	.+18     	; 0x1538 <next_border+0xb6>
  else if ((border_x > 0) && (border_y == 0))
    1526:	99 23       	and	r25, r25
    1528:	39 f0       	breq	.+14     	; 0x1538 <next_border+0xb6>
    152a:	80 91 f7 01 	lds	r24, 0x01F7
    152e:	88 23       	and	r24, r24
    1530:	19 f4       	brne	.+6      	; 0x1538 <next_border+0xb6>
    border_x-=2;
    1532:	92 50       	subi	r25, 0x02	; 2
    1534:	90 93 f6 01 	sts	0x01F6, r25
}
    1538:	0f 91       	pop	r16
    153a:	08 95       	ret

0000153c <render_image>:
void death_blitsegs_rom(int16_t x_origin, uint8_t y_origin, PGM_P bitmap_p, uint8_t width, uint8_t height, uint8_t inverted);
void drawdisplay_death(uint8_t inverted);


void render_image (uint8_t image, int16_t x, uint8_t inverted)
{
    153c:	ef 92       	push	r14
    153e:	0f 93       	push	r16
    1540:	1f 93       	push	r17
    1542:	cf 93       	push	r28
    1544:	df 93       	push	r29
    1546:	eb 01       	movw	r28, r22
    1548:	14 2f       	mov	r17, r20
  switch(image)
    154a:	82 30       	cpi	r24, 0x02	; 2
    154c:	09 f1       	breq	.+66     	; 0x1590 <render_image+0x54>
    154e:	83 30       	cpi	r24, 0x03	; 3
    1550:	59 f1       	breq	.+86     	; 0x15a8 <render_image+0x6c>
    1552:	81 30       	cpi	r24, 0x01	; 1
    1554:	69 f0       	breq	.+26     	; 0x1570 <render_image+0x34>
  {
    default:
    case SKULL:
      if((x > -76) && (x < 128))
    1556:	cb 01       	movw	r24, r22
    1558:	85 5b       	subi	r24, 0xB5	; 181
    155a:	9f 4f       	sbci	r25, 0xFF	; 255
    155c:	8b 3c       	cpi	r24, 0xCB	; 203
    155e:	91 05       	cpc	r25, r1
    1560:	08 f0       	brcs	.+2      	; 0x1564 <render_image+0x28>
    1562:	a5 c0       	rjmp	.+330    	; 0x16ae <render_image+0x172>
        death_blitsegs_rom(x+0,0,skull0_p, 76, 64, inverted);
    1564:	cb 01       	movw	r24, r22
    1566:	60 e0       	ldi	r22, 0x00	; 0
    1568:	40 e5       	ldi	r20, 0x50	; 80
    156a:	54 e0       	ldi	r21, 0x04	; 4
    156c:	2c e4       	ldi	r18, 0x4C	; 76
    156e:	0b c0       	rjmp	.+22     	; 0x1586 <render_image+0x4a>
      break;
    case REAPER:
      if((x > -42) && (x < 128))
    1570:	cb 01       	movw	r24, r22
    1572:	89 96       	adiw	r24, 0x29	; 41
    1574:	89 3a       	cpi	r24, 0xA9	; 169
    1576:	91 05       	cpc	r25, r1
    1578:	08 f0       	brcs	.+2      	; 0x157c <render_image+0x40>
    157a:	99 c0       	rjmp	.+306    	; 0x16ae <render_image+0x172>
        death_blitsegs_rom(x+0,0,reaper0_p, 42, 64, inverted);
    157c:	cb 01       	movw	r24, r22
    157e:	60 e0       	ldi	r22, 0x00	; 0
    1580:	42 eb       	ldi	r20, 0xB2	; 178
    1582:	55 e0       	ldi	r21, 0x05	; 5
    1584:	2a e2       	ldi	r18, 0x2A	; 42
    1586:	00 e4       	ldi	r16, 0x40	; 64
    1588:	e1 2e       	mov	r14, r17
    158a:	0e 94 88 09 	call	0x1310	; 0x1310 <death_blitsegs_rom>
    158e:	8f c0       	rjmp	.+286    	; 0x16ae <render_image+0x172>
      break;
    case RIP:
      if((x > -56) && (x < 128))
    1590:	cb 01       	movw	r24, r22
    1592:	c7 96       	adiw	r24, 0x37	; 55
    1594:	87 3b       	cpi	r24, 0xB7	; 183
    1596:	91 05       	cpc	r25, r1
    1598:	08 f0       	brcs	.+2      	; 0x159c <render_image+0x60>
    159a:	89 c0       	rjmp	.+274    	; 0x16ae <render_image+0x172>
        death_blitsegs_rom(x+0,0,rip0_p, 56, 64, inverted);
    159c:	cb 01       	movw	r24, r22
    159e:	60 e0       	ldi	r22, 0x00	; 0
    15a0:	40 e9       	ldi	r20, 0x90	; 144
    15a2:	56 e0       	ldi	r21, 0x06	; 6
    15a4:	28 e3       	ldi	r18, 0x38	; 56
    15a6:	ef cf       	rjmp	.-34     	; 0x1586 <render_image+0x4a>
      break;
    case REAPER_TOW_RIP:
      if((x > -56) && (x <= 36))
    15a8:	cb 01       	movw	r24, r22
    15aa:	c7 96       	adiw	r24, 0x37	; 55
    15ac:	8c 35       	cpi	r24, 0x5C	; 92
    15ae:	91 05       	cpc	r25, r1
    15b0:	48 f4       	brcc	.+18     	; 0x15c4 <render_image+0x88>
        death_blitsegs_rom(x+0,0,rip0_p, 56, 64, inverted);
    15b2:	cb 01       	movw	r24, r22
    15b4:	60 e0       	ldi	r22, 0x00	; 0
    15b6:	40 e9       	ldi	r20, 0x90	; 144
    15b8:	56 e0       	ldi	r21, 0x06	; 6
    15ba:	28 e3       	ldi	r18, 0x38	; 56
    15bc:	00 e4       	ldi	r16, 0x40	; 64
    15be:	e1 2e       	mov	r14, r17
    15c0:	0e 94 88 09 	call	0x1310	; 0x1310 <death_blitsegs_rom>
      if((x > -98) && (x < 212))
    15c4:	ce 01       	movw	r24, r28
    15c6:	8f 59       	subi	r24, 0x9F	; 159
    15c8:	9f 4f       	sbci	r25, 0xFF	; 255
    15ca:	85 53       	subi	r24, 0x35	; 53
    15cc:	91 40       	sbci	r25, 0x01	; 1
    15ce:	50 f4       	brcc	.+20     	; 0x15e4 <render_image+0xa8>
        death_blitsegs_rom(x+56,0,reaper0_p, 42, 64, inverted);
    15d0:	ce 01       	movw	r24, r28
    15d2:	c8 96       	adiw	r24, 0x38	; 56
    15d4:	60 e0       	ldi	r22, 0x00	; 0
    15d6:	42 eb       	ldi	r20, 0xB2	; 178
    15d8:	55 e0       	ldi	r21, 0x05	; 5
    15da:	2a e2       	ldi	r18, 0x2A	; 42
    15dc:	00 e4       	ldi	r16, 0x40	; 64
    15de:	e1 2e       	mov	r14, r17
    15e0:	0e 94 88 09 	call	0x1310	; 0x1310 <death_blitsegs_rom>
      if((x >= -30 ) && (x < -24)) {
    15e4:	ce 01       	movw	r24, r28
    15e6:	4e 96       	adiw	r24, 0x1e	; 30
    15e8:	06 97       	sbiw	r24, 0x06	; 6
    15ea:	38 f4       	brcc	.+14     	; 0x15fa <render_image+0xbe>
        glcdSetAddress(30+x,5);
    15ec:	9e 01       	movw	r18, r28
    15ee:	22 5e       	subi	r18, 0xE2	; 226
    15f0:	82 2f       	mov	r24, r18
    15f2:	65 e0       	ldi	r22, 0x05	; 5
    15f4:	0e 94 50 2d 	call	0x5aa0	; 0x5aa0 <glcdSetAddress>
    15f8:	50 c0       	rjmp	.+160    	; 0x169a <render_image+0x15e>
        glcdWriteChar((death_y%10)+'0', inverted);
      } else if ((x >= -24 ) && (x < -18)) {
    15fa:	ce 01       	movw	r24, r28
    15fc:	48 96       	adiw	r24, 0x18	; 24
    15fe:	06 97       	sbiw	r24, 0x06	; 6
    1600:	38 f4       	brcc	.+14     	; 0x1610 <render_image+0xd4>
        glcdSetAddress(24+x,5);
    1602:	9e 01       	movw	r18, r28
    1604:	28 5e       	subi	r18, 0xE8	; 232
    1606:	82 2f       	mov	r24, r18
    1608:	65 e0       	ldi	r22, 0x05	; 5
    160a:	0e 94 50 2d 	call	0x5aa0	; 0x5aa0 <glcdSetAddress>
    160e:	38 c0       	rjmp	.+112    	; 0x1680 <render_image+0x144>
        glcdWriteChar(((death_y%100)/10)+'0', inverted);
        glcdWriteChar((death_y%10)+'0', inverted);
      } else if ((x >= -18 ) && (x < -12)) {
    1610:	ce 01       	movw	r24, r28
    1612:	42 96       	adiw	r24, 0x12	; 18
    1614:	06 97       	sbiw	r24, 0x06	; 6
    1616:	38 f4       	brcc	.+14     	; 0x1626 <render_image+0xea>
        glcdSetAddress(18+x,5);
    1618:	9e 01       	movw	r18, r28
    161a:	2e 5e       	subi	r18, 0xEE	; 238
    161c:	82 2f       	mov	r24, r18
    161e:	65 e0       	ldi	r22, 0x05	; 5
    1620:	0e 94 50 2d 	call	0x5aa0	; 0x5aa0 <glcdSetAddress>
    1624:	1e c0       	rjmp	.+60     	; 0x1662 <render_image+0x126>
        glcdWriteChar(((19+(death_y/100))%10)+'0', inverted);
        glcdWriteChar(((death_y%100)/10)+'0', inverted);
        glcdWriteChar((death_y%10)+'0', inverted);
      } else if ((x >= -12 ) && (x < 36)) {
    1626:	ce 01       	movw	r24, r28
    1628:	0c 96       	adiw	r24, 0x0c	; 12
    162a:	c0 97       	sbiw	r24, 0x30	; 48
    162c:	20 f4       	brcc	.+8      	; 0x1636 <render_image+0xfa>
        glcdSetAddress(12+x,5);
    162e:	9e 01       	movw	r18, r28
    1630:	24 5f       	subi	r18, 0xF4	; 244
    1632:	82 2f       	mov	r24, r18
    1634:	03 c0       	rjmp	.+6      	; 0x163c <render_image+0x100>
        glcdWriteChar(((19+(death_y/100))/10)+'0', inverted);
        glcdWriteChar(((19+(death_y/100))%10)+'0', inverted);
        glcdWriteChar(((death_y%100)/10)+'0', inverted);
        glcdWriteChar((death_y%10)+'0', inverted);
      } else if (x >= 36) {
    1636:	a4 97       	sbiw	r28, 0x24	; 36
    1638:	d4 f1       	brlt	.+116    	; 0x16ae <render_image+0x172>
        glcdSetAddress(48,5);
    163a:	80 e3       	ldi	r24, 0x30	; 48
    163c:	65 e0       	ldi	r22, 0x05	; 5
    163e:	0e 94 50 2d 	call	0x5aa0	; 0x5aa0 <glcdSetAddress>
        glcdWriteChar(((19+(death_y/100))/10)+'0', inverted);
    1642:	80 91 1d 03 	lds	r24, 0x031D
    1646:	64 e6       	ldi	r22, 0x64	; 100
    1648:	0e 94 f7 3a 	call	0x75ee	; 0x75ee <__udivmodqi4>
    164c:	90 e0       	ldi	r25, 0x00	; 0
    164e:	43 96       	adiw	r24, 0x13	; 19
    1650:	6a e0       	ldi	r22, 0x0A	; 10
    1652:	70 e0       	ldi	r23, 0x00	; 0
    1654:	0e 94 17 3b 	call	0x762e	; 0x762e <__divmodhi4>
    1658:	86 2f       	mov	r24, r22
    165a:	80 5d       	subi	r24, 0xD0	; 208
    165c:	61 2f       	mov	r22, r17
    165e:	0e 94 2b 29 	call	0x5256	; 0x5256 <glcdWriteChar>
        glcdWriteChar(((19+(death_y/100))%10)+'0', inverted);
    1662:	80 91 1d 03 	lds	r24, 0x031D
    1666:	64 e6       	ldi	r22, 0x64	; 100
    1668:	0e 94 f7 3a 	call	0x75ee	; 0x75ee <__udivmodqi4>
    166c:	90 e0       	ldi	r25, 0x00	; 0
    166e:	43 96       	adiw	r24, 0x13	; 19
    1670:	6a e0       	ldi	r22, 0x0A	; 10
    1672:	70 e0       	ldi	r23, 0x00	; 0
    1674:	0e 94 17 3b 	call	0x762e	; 0x762e <__divmodhi4>
    1678:	80 5d       	subi	r24, 0xD0	; 208
    167a:	61 2f       	mov	r22, r17
    167c:	0e 94 2b 29 	call	0x5256	; 0x5256 <glcdWriteChar>
        glcdWriteChar(((death_y%100)/10)+'0', inverted);
    1680:	80 91 1d 03 	lds	r24, 0x031D
    1684:	64 e6       	ldi	r22, 0x64	; 100
    1686:	0e 94 f7 3a 	call	0x75ee	; 0x75ee <__udivmodqi4>
    168a:	89 2f       	mov	r24, r25
    168c:	6a e0       	ldi	r22, 0x0A	; 10
    168e:	0e 94 f7 3a 	call	0x75ee	; 0x75ee <__udivmodqi4>
    1692:	80 5d       	subi	r24, 0xD0	; 208
    1694:	61 2f       	mov	r22, r17
    1696:	0e 94 2b 29 	call	0x5256	; 0x5256 <glcdWriteChar>
        glcdWriteChar((death_y%10)+'0', inverted);
    169a:	80 91 1d 03 	lds	r24, 0x031D
    169e:	6a e0       	ldi	r22, 0x0A	; 10
    16a0:	0e 94 f7 3a 	call	0x75ee	; 0x75ee <__udivmodqi4>
    16a4:	89 2f       	mov	r24, r25
    16a6:	80 5d       	subi	r24, 0xD0	; 208
    16a8:	61 2f       	mov	r22, r17
    16aa:	0e 94 2b 29 	call	0x5256	; 0x5256 <glcdWriteChar>
      }
  }
}
    16ae:	df 91       	pop	r29
    16b0:	cf 91       	pop	r28
    16b2:	1f 91       	pop	r17
    16b4:	0f 91       	pop	r16
    16b6:	ef 90       	pop	r14
    16b8:	08 95       	ret

000016ba <initdisplay_death>:
	    	}
	    }
    }
}

void initdisplay_death(uint8_t inverted) {
    16ba:	0f 93       	push	r16
    16bc:	1f 93       	push	r17
    16be:	cf 93       	push	r28
    16c0:	df 93       	push	r29
    16c2:	18 2f       	mov	r17, r24
  int16_t i;
  glcdFillRectangle(0, 0, GLCD_XPIXELS, GLCD_YPIXELS, inverted);
    16c4:	80 e0       	ldi	r24, 0x00	; 0
    16c6:	60 e0       	ldi	r22, 0x00	; 0
    16c8:	40 e8       	ldi	r20, 0x80	; 128
    16ca:	20 e4       	ldi	r18, 0x40	; 64
    16cc:	01 2f       	mov	r16, r17
    16ce:	0e 94 7e 29 	call	0x52fc	; 0x52fc <glcdFillRectangle>
  death_setscore();
    16d2:	0e 94 66 05 	call	0xacc	; 0xacc <death_setscore>
  prep_digits();
    16d6:	0e 94 c8 07 	call	0xf90	; 0xf90 <prep_digits>
  // time
  if(score_mode == SCORE_MODE_TIME)
    16da:	80 91 22 02 	lds	r24, 0x0222
    16de:	88 23       	and	r24, r24
    16e0:	a1 f4       	brne	.+40     	; 0x170a <initdisplay_death+0x50>
  {
  	  display_digits[2] = 10;
    16e2:	8a e0       	ldi	r24, 0x0A	; 10
    16e4:	80 93 d0 02 	sts	0x02D0, r24
  	  if(time_format == TIME_24H)
    16e8:	80 91 2c 03 	lds	r24, 0x032C
    16ec:	81 30       	cpi	r24, 0x01	; 1
    16ee:	69 f4       	brne	.+26     	; 0x170a <initdisplay_death+0x50>
  	  {
  	  	  display_digits[6] = time_s / 10;
    16f0:	80 91 3f 03 	lds	r24, 0x033F
    16f4:	6a e0       	ldi	r22, 0x0A	; 10
    16f6:	0e 94 f7 3a 	call	0x75ee	; 0x75ee <__udivmodqi4>
    16fa:	80 93 d4 02 	sts	0x02D4, r24
  	  	  display_digits[7] = time_s % 10;
    16fe:	80 91 3f 03 	lds	r24, 0x033F
    1702:	0e 94 f7 3a 	call	0x75ee	; 0x75ee <__udivmodqi4>
    1706:	90 93 d5 02 	sts	0x02D5, r25
  	  }
  }
  if(((score_mode != SCORE_MODE_DEATH_TIME) && (score_mode != SCORE_MODE_DEATH_ALARM)) ||
    170a:	80 91 22 02 	lds	r24, 0x0222
    170e:	84 30       	cpi	r24, 0x04	; 4
    1710:	21 f0       	breq	.+8      	; 0x171a <initdisplay_death+0x60>
    1712:	80 91 22 02 	lds	r24, 0x0222
    1716:	87 30       	cpi	r24, 0x07	; 7
    1718:	61 f4       	brne	.+24     	; 0x1732 <initdisplay_death+0x78>
    171a:	80 91 d6 02 	lds	r24, 0x02D6
    171e:	90 91 d7 02 	lds	r25, 0x02D7
    1722:	a0 91 d8 02 	lds	r26, 0x02D8
    1726:	b0 91 d9 02 	lds	r27, 0x02D9
    172a:	00 97       	sbiw	r24, 0x00	; 0
    172c:	a1 05       	cpc	r26, r1
    172e:	b1 05       	cpc	r27, r1
    1730:	21 f0       	breq	.+8      	; 0x173a <initdisplay_death+0x80>
    1732:	ce ec       	ldi	r28, 0xCE	; 206
    1734:	d2 e0       	ldi	r29, 0x02	; 2
    1736:	05 e0       	ldi	r16, 0x05	; 5
    1738:	0d c0       	rjmp	.+26     	; 0x1754 <initdisplay_death+0x9a>
    173a:	80 91 da 02 	lds	r24, 0x02DA
    173e:	90 91 db 02 	lds	r25, 0x02DB
    1742:	a0 91 dc 02 	lds	r26, 0x02DC
    1746:	b0 91 dd 02 	lds	r27, 0x02DD
    174a:	00 97       	sbiw	r24, 0x00	; 0
    174c:	a1 05       	cpc	r26, r1
    174e:	b1 05       	cpc	r27, r1
    1750:	81 f7       	brne	.-32     	; 0x1732 <initdisplay_death+0x78>
    1752:	0a c0       	rjmp	.+20     	; 0x1768 <initdisplay_death+0xae>
  ((left_score != 0) || (right_score != 0))) {
    for(i=0;i<8;i++)
    	drawbigdigit(DISPLAY_H10_X_DEATH + (i*15), DISPLAY_TIME_Y_DEATH, display_digits[i], inverted);
    1754:	80 2f       	mov	r24, r16
    1756:	6c e0       	ldi	r22, 0x0C	; 12
    1758:	49 91       	ld	r20, Y+
    175a:	21 2f       	mov	r18, r17
    175c:	0e 94 71 3a 	call	0x74e2	; 0x74e2 <drawbigdigit>
    1760:	01 5f       	subi	r16, 0xF1	; 241
  	  	  display_digits[7] = time_s % 10;
  	  }
  }
  if(((score_mode != SCORE_MODE_DEATH_TIME) && (score_mode != SCORE_MODE_DEATH_ALARM)) ||
  ((left_score != 0) || (right_score != 0))) {
    for(i=0;i<8;i++)
    1762:	0d 37       	cpi	r16, 0x7D	; 125
    1764:	b9 f7       	brne	.-18     	; 0x1754 <initdisplay_death+0x9a>
    1766:	58 c0       	rjmp	.+176    	; 0x1818 <initdisplay_death+0x15e>
    	drawbigdigit(DISPLAY_H10_X_DEATH + (i*15), DISPLAY_TIME_Y_DEATH, display_digits[i], inverted);
  }
  else
  {
    
      calc_death_date();
    1768:	0e 94 f2 26 	call	0x4de4	; 0x4de4 <calc_death_date>
      if(!reaper_tow_rip)
    176c:	80 91 1c 03 	lds	r24, 0x031C
    1770:	88 23       	and	r24, r24
    1772:	91 f4       	brne	.+36     	; 0x1798 <initdisplay_death+0xde>
      {
        reaper_tow_rip = 1;
    1774:	81 e0       	ldi	r24, 0x01	; 1
    1776:	80 93 1c 03 	sts	0x031C, r24
    177a:	c4 e9       	ldi	r28, 0x94	; 148
    177c:	df ef       	ldi	r29, 0xFF	; 255
        for(i=-108;i<82;i++)
        {
          render_image(REAPER_TOW_RIP,i,inverted);
    177e:	83 e0       	ldi	r24, 0x03	; 3
    1780:	be 01       	movw	r22, r28
    1782:	41 2f       	mov	r20, r17
    1784:	0e 94 9e 0a 	call	0x153c	; 0x153c <render_image>
          delay_ms(16);
    1788:	80 e1       	ldi	r24, 0x10	; 16
    178a:	90 e0       	ldi	r25, 0x00	; 0
    178c:	0e 94 fd 35 	call	0x6bfa	; 0x6bfa <delay_ms>
    
      calc_death_date();
      if(!reaper_tow_rip)
      {
        reaper_tow_rip = 1;
        for(i=-108;i<82;i++)
    1790:	21 96       	adiw	r28, 0x01	; 1
    1792:	c2 35       	cpi	r28, 0x52	; 82
    1794:	d1 05       	cpc	r29, r1
    1796:	99 f7       	brne	.-26     	; 0x177e <initdisplay_death+0xc4>
          render_image(REAPER_TOW_RIP,i,inverted);
          delay_ms(16);
        }
      }
      
      render_image(RIP,36,inverted);
    1798:	82 e0       	ldi	r24, 0x02	; 2
    179a:	64 e2       	ldi	r22, 0x24	; 36
    179c:	70 e0       	ldi	r23, 0x00	; 0
    179e:	41 2f       	mov	r20, r17
    17a0:	0e 94 9e 0a 	call	0x153c	; 0x153c <render_image>
      glcdSetAddress(48, 5);
    17a4:	80 e3       	ldi	r24, 0x30	; 48
    17a6:	65 e0       	ldi	r22, 0x05	; 5
    17a8:	0e 94 50 2d 	call	0x5aa0	; 0x5aa0 <glcdSetAddress>
      glcdWriteChar(((19+(death_y/100))/10)+'0', NORMAL);
    17ac:	80 91 1d 03 	lds	r24, 0x031D
    17b0:	64 e6       	ldi	r22, 0x64	; 100
    17b2:	0e 94 f7 3a 	call	0x75ee	; 0x75ee <__udivmodqi4>
    17b6:	90 e0       	ldi	r25, 0x00	; 0
    17b8:	43 96       	adiw	r24, 0x13	; 19
    17ba:	6a e0       	ldi	r22, 0x0A	; 10
    17bc:	70 e0       	ldi	r23, 0x00	; 0
    17be:	0e 94 17 3b 	call	0x762e	; 0x762e <__divmodhi4>
    17c2:	86 2f       	mov	r24, r22
    17c4:	80 5d       	subi	r24, 0xD0	; 208
    17c6:	60 e0       	ldi	r22, 0x00	; 0
    17c8:	0e 94 2b 29 	call	0x5256	; 0x5256 <glcdWriteChar>
      glcdWriteChar(((19+(death_y/100))%10)+'0', NORMAL);
    17cc:	80 91 1d 03 	lds	r24, 0x031D
    17d0:	64 e6       	ldi	r22, 0x64	; 100
    17d2:	0e 94 f7 3a 	call	0x75ee	; 0x75ee <__udivmodqi4>
    17d6:	90 e0       	ldi	r25, 0x00	; 0
    17d8:	43 96       	adiw	r24, 0x13	; 19
    17da:	6a e0       	ldi	r22, 0x0A	; 10
    17dc:	70 e0       	ldi	r23, 0x00	; 0
    17de:	0e 94 17 3b 	call	0x762e	; 0x762e <__divmodhi4>
    17e2:	80 5d       	subi	r24, 0xD0	; 208
    17e4:	60 e0       	ldi	r22, 0x00	; 0
    17e6:	0e 94 2b 29 	call	0x5256	; 0x5256 <glcdWriteChar>
      glcdWriteChar(((death_y%100)/10)+'0', NORMAL);
    17ea:	80 91 1d 03 	lds	r24, 0x031D
    17ee:	64 e6       	ldi	r22, 0x64	; 100
    17f0:	0e 94 f7 3a 	call	0x75ee	; 0x75ee <__udivmodqi4>
    17f4:	89 2f       	mov	r24, r25
    17f6:	6a e0       	ldi	r22, 0x0A	; 10
    17f8:	0e 94 f7 3a 	call	0x75ee	; 0x75ee <__udivmodqi4>
    17fc:	80 5d       	subi	r24, 0xD0	; 208
    17fe:	60 e0       	ldi	r22, 0x00	; 0
    1800:	0e 94 2b 29 	call	0x5256	; 0x5256 <glcdWriteChar>
      glcdWriteChar((death_y%10)+'0', NORMAL);
    1804:	80 91 1d 03 	lds	r24, 0x031D
    1808:	6a e0       	ldi	r22, 0x0A	; 10
    180a:	0e 94 f7 3a 	call	0x75ee	; 0x75ee <__udivmodqi4>
    180e:	89 2f       	mov	r24, r25
    1810:	80 5d       	subi	r24, 0xD0	; 208
    1812:	60 e0       	ldi	r22, 0x00	; 0
    1814:	0e 94 2b 29 	call	0x5256	; 0x5256 <glcdWriteChar>
  }

  //drawmidline(inverted);
}
    1818:	df 91       	pop	r29
    181a:	cf 91       	pop	r28
    181c:	1f 91       	pop	r17
    181e:	0f 91       	pop	r16
    1820:	08 95       	ret

00001822 <drawdisplay_death>:
    border_x-=2;
  else if ((border_x > 0) && (border_y == 0))
    border_x-=2;
}

void drawdisplay_death(uint8_t inverted) {
    1822:	8f 92       	push	r8
    1824:	9f 92       	push	r9
    1826:	af 92       	push	r10
    1828:	cf 92       	push	r12
    182a:	ef 92       	push	r14
    182c:	ff 92       	push	r15
    182e:	0f 93       	push	r16
    1830:	1f 93       	push	r17
    1832:	df 93       	push	r29
    1834:	cf 93       	push	r28
    1836:	0f 92       	push	r0
    1838:	cd b7       	in	r28, 0x3d	; 61
    183a:	de b7       	in	r29, 0x3e	; 62
    183c:	f8 2e       	mov	r15, r24
   // draw time
   volatile uint8_t redraw_digits = 0;
    183e:	19 82       	std	Y+1, r1	; 0x01
   static volatile uint8_t old_seconds, old_border_tick;
   uint8_t i;
   TIMSK2 = 0;  //Disable Timer 2 interrupt, to prevent a race condition.
    1840:	10 92 70 00 	sts	0x0070, r1
   if(redraw_time)
    1844:	80 91 f3 01 	lds	r24, 0x01F3
    1848:	88 23       	and	r24, r24
    184a:	21 f0       	breq	.+8      	; 0x1854 <drawdisplay_death+0x32>
   {
     //if(redraw_time == 2)
     //  initdisplay(inverted);
     //else
       redraw_digits = 1;
    184c:	81 e0       	ldi	r24, 0x01	; 1
    184e:	89 83       	std	Y+1, r24	; 0x01
     redraw_time = 0;
    1850:	10 92 f3 01 	sts	0x01F3, r1
   }
   TIMSK2 = _BV(TOIE2); //Race issue gone, renable.
    1854:	81 e0       	ldi	r24, 0x01	; 1
    1856:	80 93 70 00 	sts	0x0070, r24
    
    // redraw 10's of hours
  if(!hour_changed)
    185a:	80 91 1f 02 	lds	r24, 0x021F
    185e:	88 23       	and	r24, r24
    1860:	11 f4       	brne	.+4      	; 0x1866 <drawdisplay_death+0x44>
  	prep_digits();
    1862:	0e 94 c8 07 	call	0xf90	; 0xf90 <prep_digits>
  if(((score_mode != SCORE_MODE_DEATH_TIME) && (score_mode != SCORE_MODE_DEATH_ALARM)) ||
    1866:	80 91 22 02 	lds	r24, 0x0222
    186a:	84 30       	cpi	r24, 0x04	; 4
    186c:	21 f0       	breq	.+8      	; 0x1876 <drawdisplay_death+0x54>
    186e:	80 91 22 02 	lds	r24, 0x0222
    1872:	87 30       	cpi	r24, 0x07	; 7
    1874:	71 f4       	brne	.+28     	; 0x1892 <drawdisplay_death+0x70>
    1876:	80 91 14 02 	lds	r24, 0x0214
    187a:	90 91 15 02 	lds	r25, 0x0215
    187e:	a0 91 16 02 	lds	r26, 0x0216
    1882:	b0 91 17 02 	lds	r27, 0x0217
    1886:	18 16       	cp	r1, r24
    1888:	19 06       	cpc	r1, r25
    188a:	1a 06       	cpc	r1, r26
    188c:	1b 06       	cpc	r1, r27
    188e:	0c f0       	brlt	.+2      	; 0x1892 <drawdisplay_death+0x70>
    1890:	5f c0       	rjmp	.+190    	; 0x1950 <drawdisplay_death+0x12e>
  	  (minutes_left > 0)) {
    if(reaper_x == 256) {
    1892:	80 91 c8 02 	lds	r24, 0x02C8
    1896:	90 91 c9 02 	lds	r25, 0x02C9
    189a:	80 50       	subi	r24, 0x00	; 0
    189c:	91 40       	sbci	r25, 0x01	; 1
    189e:	49 f4       	brne	.+18     	; 0x18b2 <drawdisplay_death+0x90>
      reaper_x--;
    18a0:	8f ef       	ldi	r24, 0xFF	; 255
    18a2:	90 e0       	ldi	r25, 0x00	; 0
    18a4:	90 93 c9 02 	sts	0x02C9, r25
    18a8:	80 93 c8 02 	sts	0x02C8, r24
      initdisplay(inverted);
    18ac:	8f 2d       	mov	r24, r15
    18ae:	0e 94 71 28 	call	0x50e2	; 0x50e2 <initdisplay>
    18b2:	be ec       	ldi	r27, 0xCE	; 206
    18b4:	8b 2e       	mov	r8, r27
    18b6:	b2 e0       	ldi	r27, 0x02	; 2
    18b8:	9b 2e       	mov	r9, r27
    18ba:	15 e0       	ldi	r17, 0x05	; 5
    }
    
    for(i=0;i<8;i++)
    {
    	if (redraw_digits || intersectrect(reaper_x, reaper_y, reaper_w, reaper_h,
    18bc:	89 81       	ldd	r24, Y+1	; 0x01
    18be:	88 23       	and	r24, r24
    18c0:	a1 f4       	brne	.+40     	; 0x18ea <drawdisplay_death+0xc8>
    18c2:	80 91 c8 02 	lds	r24, 0x02C8
    18c6:	60 e0       	ldi	r22, 0x00	; 0
    18c8:	48 e3       	ldi	r20, 0x38	; 56
    18ca:	20 e4       	ldi	r18, 0x40	; 64
    18cc:	01 2f       	mov	r16, r17
    18ce:	ac e0       	ldi	r26, 0x0C	; 12
    18d0:	ea 2e       	mov	r14, r26
    18d2:	fa e0       	ldi	r31, 0x0A	; 10
    18d4:	cf 2e       	mov	r12, r31
    18d6:	e0 e1       	ldi	r30, 0x10	; 16
    18d8:	ae 2e       	mov	r10, r30
    18da:	0e 94 66 39 	call	0x72cc	; 0x72cc <intersectrect>
    18de:	88 23       	and	r24, r24
    18e0:	21 f4       	brne	.+8      	; 0x18ea <drawdisplay_death+0xc8>
    18e2:	f4 01       	movw	r30, r8
    18e4:	80 81       	ld	r24, Z
    18e6:	87 ff       	sbrs	r24, 7
    18e8:	08 c0       	rjmp	.+16     	; 0x18fa <drawdisplay_death+0xd8>
    	DISPLAY_H10_X_DEATH + (i*15), DISPLAY_TIME_Y_DEATH, DISPLAY_DIGITW, DISPLAY_DIGITH) ||
    	(display_digits[i] & 0x80)) {
    		drawbigdigit(DISPLAY_H10_X_DEATH + (i*15), DISPLAY_TIME_Y_DEATH, display_digits[i] & 0x7F, inverted);
    18ea:	f4 01       	movw	r30, r8
    18ec:	40 81       	ld	r20, Z
    18ee:	4f 77       	andi	r20, 0x7F	; 127
    18f0:	81 2f       	mov	r24, r17
    18f2:	6c e0       	ldi	r22, 0x0C	; 12
    18f4:	2f 2d       	mov	r18, r15
    18f6:	0e 94 71 3a 	call	0x74e2	; 0x74e2 <drawbigdigit>
    18fa:	08 94       	sec
    18fc:	81 1c       	adc	r8, r1
    18fe:	91 1c       	adc	r9, r1
    1900:	11 5f       	subi	r17, 0xF1	; 241
    if(reaper_x == 256) {
      reaper_x--;
      initdisplay(inverted);
    }
    
    for(i=0;i<8;i++)
    1902:	1d 37       	cpi	r17, 0x7D	; 125
    1904:	d9 f6       	brne	.-74     	; 0x18bc <drawdisplay_death+0x9a>
    	(display_digits[i] & 0x80)) {
    		drawbigdigit(DISPLAY_H10_X_DEATH + (i*15), DISPLAY_TIME_Y_DEATH, display_digits[i] & 0x7F, inverted);
    	}
    }
    
    if(score_mode >= SCORE_MODE_DEATH_TIME)
    1906:	80 91 22 02 	lds	r24, 0x0222
    190a:	84 30       	cpi	r24, 0x04	; 4
    190c:	60 f0       	brcs	.+24     	; 0x1926 <drawdisplay_death+0x104>
    {
      border_on = 1;
    190e:	81 e0       	ldi	r24, 0x01	; 1
    1910:	80 93 f5 01 	sts	0x01F5, r24
      if(border_tick != old_border_tick)
    1914:	90 91 f2 01 	lds	r25, 0x01F2
    1918:	80 91 f9 01 	lds	r24, 0x01F9
    191c:	98 17       	cp	r25, r24
    191e:	91 f1       	breq	.+100    	; 0x1984 <drawdisplay_death+0x162>
      {
        next_border();
    1920:	0e 94 41 0a 	call	0x1482	; 0x1482 <next_border>
    1924:	2f c0       	rjmp	.+94     	; 0x1984 <drawdisplay_death+0x162>
      }
    }
    else
    {
    	uint8_t current_x = border_x, current_y = border_y;
    1926:	00 91 f6 01 	lds	r16, 0x01F6
    192a:	10 91 f7 01 	lds	r17, 0x01F7
    	do {
	    	border_state = 3;
    192e:	73 e0       	ldi	r23, 0x03	; 3
    1930:	e7 2e       	mov	r14, r23
    1932:	e0 92 f8 01 	sts	0x01F8, r14
	    	next_border();
    1936:	0e 94 41 0a 	call	0x1482	; 0x1482 <next_border>
    	} while((border_x != current_x) || (border_y != current_y));
    193a:	80 91 f6 01 	lds	r24, 0x01F6
    193e:	80 17       	cp	r24, r16
    1940:	c1 f7       	brne	.-16     	; 0x1932 <drawdisplay_death+0x110>
    1942:	80 91 f7 01 	lds	r24, 0x01F7
    1946:	81 17       	cp	r24, r17
    1948:	a1 f7       	brne	.-24     	; 0x1932 <drawdisplay_death+0x110>
    	border_on = 0;
    194a:	10 92 f5 01 	sts	0x01F5, r1
    194e:	1a c0       	rjmp	.+52     	; 0x1984 <drawdisplay_death+0x162>
    }
  }
  else
  {
    if(hour_changed)
    1950:	80 91 1f 02 	lds	r24, 0x021F
    1954:	88 23       	and	r24, r24
    1956:	11 f0       	breq	.+4      	; 0x195c <drawdisplay_death+0x13a>
      hour_changed = 0;
    1958:	10 92 1f 02 	sts	0x021F, r1
    if (redraw_digits || (reaper_x < 256)) {
    195c:	89 81       	ldd	r24, Y+1	; 0x01
    195e:	88 23       	and	r24, r24
    1960:	41 f4       	brne	.+16     	; 0x1972 <drawdisplay_death+0x150>
    1962:	80 91 c8 02 	lds	r24, 0x02C8
    1966:	90 91 c9 02 	lds	r25, 0x02C9
    196a:	8f 3f       	cpi	r24, 0xFF	; 255
    196c:	91 05       	cpc	r25, r1
    196e:	09 f0       	breq	.+2      	; 0x1972 <drawdisplay_death+0x150>
    1970:	4c f4       	brge	.+18     	; 0x1984 <drawdisplay_death+0x162>
      reaper_x = 256; //Stop drawing the reaper, already dead. :)
    1972:	80 e0       	ldi	r24, 0x00	; 0
    1974:	91 e0       	ldi	r25, 0x01	; 1
    1976:	90 93 c9 02 	sts	0x02C9, r25
    197a:	80 93 c8 02 	sts	0x02C8, r24
      initdisplay_death(inverted);
    197e:	8f 2d       	mov	r24, r15
    1980:	0e 94 5d 0b 	call	0x16ba	; 0x16ba <initdisplay_death>
    }
  }
  old_border_tick = border_tick;
    1984:	80 91 f2 01 	lds	r24, 0x01F2
    1988:	80 93 f9 01 	sts	0x01F9, r24
  old_seconds = time_s;
    198c:	80 91 3f 03 	lds	r24, 0x033F
    1990:	80 93 fa 01 	sts	0x01FA, r24
  redraw_digits = 0;
    1994:	19 82       	std	Y+1, r1	; 0x01
}
    1996:	0f 90       	pop	r0
    1998:	cf 91       	pop	r28
    199a:	df 91       	pop	r29
    199c:	1f 91       	pop	r17
    199e:	0f 91       	pop	r16
    19a0:	ff 90       	pop	r15
    19a2:	ef 90       	pop	r14
    19a4:	cf 90       	pop	r12
    19a6:	af 90       	pop	r10
    19a8:	9f 90       	pop	r9
    19aa:	8f 90       	pop	r8
    19ac:	08 95       	ret

000019ae <step_death>:
#define reaper_y 0
#define reaper_w 56
#define reaper_h 64
void step_death(void) {
  uint8_t i;
  death_setscore();
    19ae:	0e 94 66 05 	call	0xacc	; 0xacc <death_setscore>
  if((score_mode == SCORE_MODE_TIME) || (score_mode == SCORE_MODE_DEATH_TIME))
    19b2:	80 91 22 02 	lds	r24, 0x0222
    19b6:	88 23       	and	r24, r24
    19b8:	29 f0       	breq	.+10     	; 0x19c4 <step_death+0x16>
    19ba:	80 91 22 02 	lds	r24, 0x0222
    19be:	84 30       	cpi	r24, 0x04	; 4
    19c0:	09 f0       	breq	.+2      	; 0x19c4 <step_death+0x16>
    19c2:	e1 c0       	rjmp	.+450    	; 0x1b86 <step_death+0x1d8>
  {
    if(minute_changed) 
    19c4:	80 91 1e 02 	lds	r24, 0x021E
    19c8:	88 23       	and	r24, r24
    19ca:	41 f1       	breq	.+80     	; 0x1a1c <step_death+0x6e>
    {
      redraw_time = 1;
    19cc:	81 e0       	ldi	r24, 0x01	; 1
    19ce:	80 93 f3 01 	sts	0x01F3, r24
      minutes_left -= ((dc_mode == DC_mode_sadistic)?4:1);
    19d2:	20 91 14 02 	lds	r18, 0x0214
    19d6:	30 91 15 02 	lds	r19, 0x0215
    19da:	40 91 16 02 	lds	r20, 0x0216
    19de:	50 91 17 02 	lds	r21, 0x0217
    19e2:	80 91 23 03 	lds	r24, 0x0323
    19e6:	83 30       	cpi	r24, 0x03	; 3
    19e8:	29 f0       	breq	.+10     	; 0x19f4 <step_death+0x46>
    19ea:	81 e0       	ldi	r24, 0x01	; 1
    19ec:	90 e0       	ldi	r25, 0x00	; 0
    19ee:	a0 e0       	ldi	r26, 0x00	; 0
    19f0:	b0 e0       	ldi	r27, 0x00	; 0
    19f2:	04 c0       	rjmp	.+8      	; 0x19fc <step_death+0x4e>
    19f4:	84 e0       	ldi	r24, 0x04	; 4
    19f6:	90 e0       	ldi	r25, 0x00	; 0
    19f8:	a0 e0       	ldi	r26, 0x00	; 0
    19fa:	b0 e0       	ldi	r27, 0x00	; 0
    19fc:	28 1b       	sub	r18, r24
    19fe:	39 0b       	sbc	r19, r25
    1a00:	4a 0b       	sbc	r20, r26
    1a02:	5b 0b       	sbc	r21, r27
    1a04:	20 93 14 02 	sts	0x0214, r18
    1a08:	30 93 15 02 	sts	0x0215, r19
    1a0c:	40 93 16 02 	sts	0x0216, r20
    1a10:	50 93 17 02 	sts	0x0217, r21
      minute_changed = 0;
    1a14:	10 92 1e 02 	sts	0x021E, r1
      death_setscore();
    1a18:	0e 94 66 05 	call	0xacc	; 0xacc <death_setscore>
    }
    if(hour_changed) 
    1a1c:	80 91 1f 02 	lds	r24, 0x021F
    1a20:	88 23       	and	r24, r24
    1a22:	09 f4       	brne	.+2      	; 0x1a26 <step_death+0x78>
    1a24:	b0 c0       	rjmp	.+352    	; 0x1b86 <step_death+0x1d8>
    {
      minutes_left -= ((dc_mode == DC_mode_sadistic)?4:1);
    1a26:	20 91 14 02 	lds	r18, 0x0214
    1a2a:	30 91 15 02 	lds	r19, 0x0215
    1a2e:	40 91 16 02 	lds	r20, 0x0216
    1a32:	50 91 17 02 	lds	r21, 0x0217
    1a36:	80 91 23 03 	lds	r24, 0x0323
    1a3a:	83 30       	cpi	r24, 0x03	; 3
    1a3c:	29 f0       	breq	.+10     	; 0x1a48 <step_death+0x9a>
    1a3e:	81 e0       	ldi	r24, 0x01	; 1
    1a40:	90 e0       	ldi	r25, 0x00	; 0
    1a42:	a0 e0       	ldi	r26, 0x00	; 0
    1a44:	b0 e0       	ldi	r27, 0x00	; 0
    1a46:	04 c0       	rjmp	.+8      	; 0x1a50 <step_death+0xa2>
    1a48:	84 e0       	ldi	r24, 0x04	; 4
    1a4a:	90 e0       	ldi	r25, 0x00	; 0
    1a4c:	a0 e0       	ldi	r26, 0x00	; 0
    1a4e:	b0 e0       	ldi	r27, 0x00	; 0
    1a50:	28 1b       	sub	r18, r24
    1a52:	39 0b       	sbc	r19, r25
    1a54:	4a 0b       	sbc	r20, r26
    1a56:	5b 0b       	sbc	r21, r27
    1a58:	20 93 14 02 	sts	0x0214, r18
    1a5c:	30 93 15 02 	sts	0x0215, r19
    1a60:	40 93 16 02 	sts	0x0216, r20
    1a64:	50 93 17 02 	sts	0x0217, r21
      initdisplay_death(1);
    1a68:	81 e0       	ldi	r24, 0x01	; 1
    1a6a:	0e 94 5d 0b 	call	0x16ba	; 0x16ba <initdisplay_death>
      for(reaper_x = -52;reaper_x<138;reaper_x++)
    1a6e:	8c ec       	ldi	r24, 0xCC	; 204
    1a70:	9f ef       	ldi	r25, 0xFF	; 255
    1a72:	78 c0       	rjmp	.+240    	; 0x1b64 <step_death+0x1b6>
      {
        //redraw_time = 1;
        //if((reaper_x%8)==0)
        //  draw(1);
        render_image (REAPER,reaper_x+1,1);
    1a74:	6f 5f       	subi	r22, 0xFF	; 255
    1a76:	7f 4f       	sbci	r23, 0xFF	; 255
    1a78:	81 e0       	ldi	r24, 0x01	; 1
    1a7a:	41 e0       	ldi	r20, 0x01	; 1
    1a7c:	0e 94 9e 0a 	call	0x153c	; 0x153c <render_image>
        delay_ms(16);
    1a80:	80 e1       	ldi	r24, 0x10	; 16
    1a82:	90 e0       	ldi	r25, 0x00	; 0
    1a84:	0e 94 fd 35 	call	0x6bfa	; 0x6bfa <delay_ms>
        if(((reaper_x%15)==6)&&(reaper_x>6))
    1a88:	20 91 c8 02 	lds	r18, 0x02C8
    1a8c:	30 91 c9 02 	lds	r19, 0x02C9
    1a90:	c9 01       	movw	r24, r18
    1a92:	6f e0       	ldi	r22, 0x0F	; 15
    1a94:	70 e0       	ldi	r23, 0x00	; 0
    1a96:	0e 94 17 3b 	call	0x762e	; 0x762e <__divmodhi4>
    1a9a:	06 97       	sbiw	r24, 0x06	; 6
    1a9c:	31 f5       	brne	.+76     	; 0x1aea <step_death+0x13c>
    1a9e:	27 30       	cpi	r18, 0x07	; 7
    1aa0:	31 05       	cpc	r19, r1
    1aa2:	1c f1       	brlt	.+70     	; 0x1aea <step_death+0x13c>
        {
        	prep_digits();
    1aa4:	0e 94 c8 07 	call	0xf90	; 0xf90 <prep_digits>
        	for(i=0;(i<4)&&(((reaper_x/15)+i)<8);i++)
    1aa8:	80 91 c8 02 	lds	r24, 0x02C8
    1aac:	90 91 c9 02 	lds	r25, 0x02C9
    1ab0:	6f e0       	ldi	r22, 0x0F	; 15
    1ab2:	70 e0       	ldi	r23, 0x00	; 0
    1ab4:	0e 94 17 3b 	call	0x762e	; 0x762e <__divmodhi4>
    1ab8:	9b 01       	movw	r18, r22
    1aba:	fb 01       	movw	r30, r22
    1abc:	e2 53       	subi	r30, 0x32	; 50
    1abe:	fd 4f       	sbci	r31, 0xFD	; 253
    1ac0:	40 e0       	ldi	r20, 0x00	; 0
    1ac2:	50 e0       	ldi	r21, 0x00	; 0
    1ac4:	08 c0       	rjmp	.+16     	; 0x1ad6 <step_death+0x128>
        	{
        		display_digits[(reaper_x/15)+i] |= 0x40;
    1ac6:	80 81       	ld	r24, Z
    1ac8:	80 64       	ori	r24, 0x40	; 64
    1aca:	81 93       	st	Z+, r24
    1acc:	4f 5f       	subi	r20, 0xFF	; 255
    1ace:	5f 4f       	sbci	r21, 0xFF	; 255
        render_image (REAPER,reaper_x+1,1);
        delay_ms(16);
        if(((reaper_x%15)==6)&&(reaper_x>6))
        {
        	prep_digits();
        	for(i=0;(i<4)&&(((reaper_x/15)+i)<8);i++)
    1ad0:	44 30       	cpi	r20, 0x04	; 4
    1ad2:	51 05       	cpc	r21, r1
    1ad4:	29 f0       	breq	.+10     	; 0x1ae0 <step_death+0x132>
    1ad6:	ca 01       	movw	r24, r20
    1ad8:	82 0f       	add	r24, r18
    1ada:	93 1f       	adc	r25, r19
    1adc:	08 97       	sbiw	r24, 0x08	; 8
    1ade:	9c f3       	brlt	.-26     	; 0x1ac6 <step_death+0x118>
        	{
        		display_digits[(reaper_x/15)+i] |= 0x40;
        	}
            redraw_time = 1;
    1ae0:	81 e0       	ldi	r24, 0x01	; 1
    1ae2:	80 93 f3 01 	sts	0x01F3, r24
            drawdisplay_death(1);
    1ae6:	0e 94 11 0c 	call	0x1822	; 0x1822 <drawdisplay_death>
        }
        if(reaper_x==43) 
    1aea:	80 91 c8 02 	lds	r24, 0x02C8
    1aee:	90 91 c9 02 	lds	r25, 0x02C9
    1af2:	8b 97       	sbiw	r24, 0x2b	; 43
    1af4:	91 f5       	brne	.+100    	; 0x1b5a <step_death+0x1ac>
        {
          //render_image (REAPER,reaper_x+1,1);
          delay_ms(500);
    1af6:	84 ef       	ldi	r24, 0xF4	; 244
    1af8:	91 e0       	ldi	r25, 0x01	; 1
    1afa:	0e 94 fd 35 	call	0x6bfa	; 0x6bfa <delay_ms>
          hour_changed = 0;
    1afe:	10 92 1f 02 	sts	0x021F, r1
          death_setscore();
    1b02:	0e 94 66 05 	call	0xacc	; 0xacc <death_setscore>
          hour_changed = 1;
    1b06:	81 e0       	ldi	r24, 0x01	; 1
    1b08:	80 93 1f 02 	sts	0x021F, r24
          prep_digits();
    1b0c:	0e 94 c8 07 	call	0xf90	; 0xf90 <prep_digits>
          for(i=0;(i<4)&&(((reaper_x/15)+i)<8);i++)
    1b10:	80 91 c8 02 	lds	r24, 0x02C8
    1b14:	90 91 c9 02 	lds	r25, 0x02C9
    1b18:	6f e0       	ldi	r22, 0x0F	; 15
    1b1a:	70 e0       	ldi	r23, 0x00	; 0
    1b1c:	0e 94 17 3b 	call	0x762e	; 0x762e <__divmodhi4>
    1b20:	9b 01       	movw	r18, r22
    1b22:	fb 01       	movw	r30, r22
    1b24:	e2 53       	subi	r30, 0x32	; 50
    1b26:	fd 4f       	sbci	r31, 0xFD	; 253
    1b28:	40 e0       	ldi	r20, 0x00	; 0
    1b2a:	50 e0       	ldi	r21, 0x00	; 0
    1b2c:	08 c0       	rjmp	.+16     	; 0x1b3e <step_death+0x190>
          	display_digits[(reaper_x/15)+i] |= 0x40;
    1b2e:	80 81       	ld	r24, Z
    1b30:	80 64       	ori	r24, 0x40	; 64
    1b32:	81 93       	st	Z+, r24
    1b34:	4f 5f       	subi	r20, 0xFF	; 255
    1b36:	5f 4f       	sbci	r21, 0xFF	; 255
          delay_ms(500);
          hour_changed = 0;
          death_setscore();
          hour_changed = 1;
          prep_digits();
          for(i=0;(i<4)&&(((reaper_x/15)+i)<8);i++)
    1b38:	44 30       	cpi	r20, 0x04	; 4
    1b3a:	51 05       	cpc	r21, r1
    1b3c:	29 f0       	breq	.+10     	; 0x1b48 <step_death+0x19a>
    1b3e:	ca 01       	movw	r24, r20
    1b40:	82 0f       	add	r24, r18
    1b42:	93 1f       	adc	r25, r19
    1b44:	08 97       	sbiw	r24, 0x08	; 8
    1b46:	9c f3       	brlt	.-26     	; 0x1b2e <step_death+0x180>
          	display_digits[(reaper_x/15)+i] |= 0x40;
          redraw_time = 1;
    1b48:	81 e0       	ldi	r24, 0x01	; 1
    1b4a:	80 93 f3 01 	sts	0x01F3, r24
          drawdisplay_death(1);
    1b4e:	0e 94 11 0c 	call	0x1822	; 0x1822 <drawdisplay_death>
          delay_ms(500);
    1b52:	84 ef       	ldi	r24, 0xF4	; 244
    1b54:	91 e0       	ldi	r25, 0x01	; 1
    1b56:	0e 94 fd 35 	call	0x6bfa	; 0x6bfa <delay_ms>
    }
    if(hour_changed) 
    {
      minutes_left -= ((dc_mode == DC_mode_sadistic)?4:1);
      initdisplay_death(1);
      for(reaper_x = -52;reaper_x<138;reaper_x++)
    1b5a:	80 91 c8 02 	lds	r24, 0x02C8
    1b5e:	90 91 c9 02 	lds	r25, 0x02C9
    1b62:	01 96       	adiw	r24, 0x01	; 1
    1b64:	90 93 c9 02 	sts	0x02C9, r25
    1b68:	80 93 c8 02 	sts	0x02C8, r24
    1b6c:	60 91 c8 02 	lds	r22, 0x02C8
    1b70:	70 91 c9 02 	lds	r23, 0x02C9
    1b74:	6a 38       	cpi	r22, 0x8A	; 138
    1b76:	71 05       	cpc	r23, r1
    1b78:	0c f4       	brge	.+2      	; 0x1b7c <step_death+0x1ce>
    1b7a:	7c cf       	rjmp	.-264    	; 0x1a74 <step_death+0xc6>
          redraw_time = 1;
          drawdisplay_death(1);
          delay_ms(500);
        }
      }
      hour_changed = 0;
    1b7c:	10 92 1f 02 	sts	0x021F, r1
      initdisplay_death(0);
    1b80:	80 e0       	ldi	r24, 0x00	; 0
    1b82:	0e 94 5d 0b 	call	0x16ba	; 0x16ba <initdisplay_death>
    1b86:	08 95       	ret

00001b88 <initanim_death>:
      }
      break;
  }
}

void initanim_death(void) {
    1b88:	0f 93       	push	r16
  static int16_t scroller = -84;
  glcdFillRectangle(0, 0, GLCD_XPIXELS, GLCD_YPIXELS, scroller==-84);
    1b8a:	00 e0       	ldi	r16, 0x00	; 0
    1b8c:	80 91 00 01 	lds	r24, 0x0100
    1b90:	90 91 01 01 	lds	r25, 0x0101
    1b94:	8c 5a       	subi	r24, 0xAC	; 172
    1b96:	9f 4f       	sbci	r25, 0xFF	; 255
    1b98:	09 f4       	brne	.+2      	; 0x1b9c <initanim_death+0x14>
    1b9a:	01 e0       	ldi	r16, 0x01	; 1
    1b9c:	80 e0       	ldi	r24, 0x00	; 0
    1b9e:	60 e0       	ldi	r22, 0x00	; 0
    1ba0:	40 e8       	ldi	r20, 0x80	; 128
    1ba2:	20 e4       	ldi	r18, 0x40	; 64
    1ba4:	0e 94 7e 29 	call	0x52fc	; 0x52fc <glcdFillRectangle>
    1ba8:	1b c0       	rjmp	.+54     	; 0x1be0 <initanim_death+0x58>
  for(;scroller<138;scroller++)
  {
    render_image (SKULL,scroller,1);
    1baa:	80 e0       	ldi	r24, 0x00	; 0
    1bac:	41 e0       	ldi	r20, 0x01	; 1
    1bae:	0e 94 9e 0a 	call	0x153c	; 0x153c <render_image>
    delay_ms(16);
    1bb2:	80 e1       	ldi	r24, 0x10	; 16
    1bb4:	90 e0       	ldi	r25, 0x00	; 0
    1bb6:	0e 94 fd 35 	call	0x6bfa	; 0x6bfa <delay_ms>
    if(scroller==26)
    1bba:	80 91 00 01 	lds	r24, 0x0100
    1bbe:	90 91 01 01 	lds	r25, 0x0101
    1bc2:	4a 97       	sbiw	r24, 0x1a	; 26
    1bc4:	21 f4       	brne	.+8      	; 0x1bce <initanim_death+0x46>
    	delay_ms(2000);
    1bc6:	80 ed       	ldi	r24, 0xD0	; 208
    1bc8:	97 e0       	ldi	r25, 0x07	; 7
    1bca:	0e 94 fd 35 	call	0x6bfa	; 0x6bfa <delay_ms>
}

void initanim_death(void) {
  static int16_t scroller = -84;
  glcdFillRectangle(0, 0, GLCD_XPIXELS, GLCD_YPIXELS, scroller==-84);
  for(;scroller<138;scroller++)
    1bce:	80 91 00 01 	lds	r24, 0x0100
    1bd2:	90 91 01 01 	lds	r25, 0x0101
    1bd6:	01 96       	adiw	r24, 0x01	; 1
    1bd8:	90 93 01 01 	sts	0x0101, r25
    1bdc:	80 93 00 01 	sts	0x0100, r24
    1be0:	60 91 00 01 	lds	r22, 0x0100
    1be4:	70 91 01 01 	lds	r23, 0x0101
    1be8:	6a 38       	cpi	r22, 0x8A	; 138
    1bea:	71 05       	cpc	r23, r1
    1bec:	f4 f2       	brlt	.-68     	; 0x1baa <initanim_death+0x22>
    render_image (SKULL,scroller,1);
    delay_ms(16);
    if(scroller==26)
    	delay_ms(2000);
  }
  score_mode = SCORE_MODE_DEATH_TIME;
    1bee:	84 e0       	ldi	r24, 0x04	; 4
    1bf0:	80 93 22 02 	sts	0x0222, r24
  minute_changed = hour_changed = 0;
    1bf4:	10 92 1f 02 	sts	0x021F, r1
    1bf8:	80 91 1f 02 	lds	r24, 0x021F
    1bfc:	80 93 1e 02 	sts	0x021E, r24
  load_etd();
    1c00:	0e 94 70 27 	call	0x4ee0	; 0x4ee0 <load_etd>
  initdisplay(0);
    1c04:	80 e0       	ldi	r24, 0x00	; 0
    1c06:	0e 94 71 28 	call	0x50e2	; 0x50e2 <initdisplay>
}
    1c0a:	0f 91       	pop	r16
    1c0c:	08 95       	ret

00001c0e <deathclock_changed>:
  glcdWriteChar(n/100+'0', inverted);
  printnumber(n%100, inverted);
}

void deathclock_changed(void) //Any changes to the death clock neccesitates a recalculation of the death clock.
{
    1c0e:	1f 93       	push	r17
    1c10:	df 93       	push	r29
    1c12:	cf 93       	push	r28
    1c14:	cd b7       	in	r28, 0x3d	; 61
    1c16:	de b7       	in	r29, 0x3e	; 62
    1c18:	28 97       	sbiw	r28, 0x08	; 8
    1c1a:	0f b6       	in	r0, 0x3f	; 63
    1c1c:	f8 94       	cli
    1c1e:	de bf       	out	0x3e, r29	; 62
    1c20:	0f be       	out	0x3f, r0	; 63
    1c22:	cd bf       	out	0x3d, r28	; 61
	uint8_t ee_set_year = date_y + 100;
    1c24:	60 91 2d 03 	lds	r22, 0x032D
	uint8_t max_year_diff[4][2] = {{72,78},{57,63},{82,88},{35,38}};
    1c28:	de 01       	movw	r26, r28
    1c2a:	11 96       	adiw	r26, 0x01	; 1
    1c2c:	e2 e0       	ldi	r30, 0x02	; 2
    1c2e:	f1 e0       	ldi	r31, 0x01	; 1
    1c30:	88 e0       	ldi	r24, 0x08	; 8
    1c32:	01 90       	ld	r0, Z+
    1c34:	0d 92       	st	X+, r0
    1c36:	81 50       	subi	r24, 0x01	; 1
    1c38:	e1 f7       	brne	.-8      	; 0x1c32 <deathclock_changed+0x24>
	
	if(((date_y + 100)-cfg_dob_y)>max_year_diff[cfg_dc_mode][cfg_gender]) ee_set_year = cfg_dob_y + max_year_diff[cfg_dc_mode][cfg_gender];
    1c3a:	20 91 2d 03 	lds	r18, 0x032D
    1c3e:	80 91 df 02 	lds	r24, 0x02DF
    1c42:	e0 91 e0 02 	lds	r30, 0x02E0
    1c46:	90 91 de 02 	lds	r25, 0x02DE
    1c4a:	30 e0       	ldi	r19, 0x00	; 0
    1c4c:	2c 59       	subi	r18, 0x9C	; 156
    1c4e:	3f 4f       	sbci	r19, 0xFF	; 255
    1c50:	28 1b       	sub	r18, r24
    1c52:	31 09       	sbc	r19, r1
    1c54:	f0 e0       	ldi	r31, 0x00	; 0
    1c56:	ee 0f       	add	r30, r30
    1c58:	ff 1f       	adc	r31, r31
    1c5a:	e9 0f       	add	r30, r25
    1c5c:	f1 1d       	adc	r31, r1
    1c5e:	de 01       	movw	r26, r28
    1c60:	11 96       	adiw	r26, 0x01	; 1
    1c62:	ea 0f       	add	r30, r26
    1c64:	fb 1f       	adc	r31, r27
    1c66:	80 81       	ld	r24, Z
    1c68:	90 e0       	ldi	r25, 0x00	; 0
    1c6a:	82 17       	cp	r24, r18
    1c6c:	93 07       	cpc	r25, r19
    1c6e:	1c f0       	brlt	.+6      	; 0x1c76 <deathclock_changed+0x68>
  printnumber(n%100, inverted);
}

void deathclock_changed(void) //Any changes to the death clock neccesitates a recalculation of the death clock.
{
	uint8_t ee_set_year = date_y + 100;
    1c70:	16 2f       	mov	r17, r22
    1c72:	1c 59       	subi	r17, 0x9C	; 156
    1c74:	0f c0       	rjmp	.+30     	; 0x1c94 <deathclock_changed+0x86>
	uint8_t max_year_diff[4][2] = {{72,78},{57,63},{82,88},{35,38}};
	
	if(((date_y + 100)-cfg_dob_y)>max_year_diff[cfg_dc_mode][cfg_gender]) ee_set_year = cfg_dob_y + max_year_diff[cfg_dc_mode][cfg_gender];
    1c76:	10 91 df 02 	lds	r17, 0x02DF
    1c7a:	80 91 e0 02 	lds	r24, 0x02E0
    1c7e:	20 91 de 02 	lds	r18, 0x02DE
    1c82:	90 e0       	ldi	r25, 0x00	; 0
    1c84:	88 0f       	add	r24, r24
    1c86:	99 1f       	adc	r25, r25
    1c88:	82 0f       	add	r24, r18
    1c8a:	91 1d       	adc	r25, r1
    1c8c:	a8 0f       	add	r26, r24
    1c8e:	b9 1f       	adc	r27, r25
    1c90:	8c 91       	ld	r24, X
    1c92:	18 0f       	add	r17, r24
	
	eeprom_write_byte(&EE_SET_MONTH,date_m);
    1c94:	60 91 3e 03 	lds	r22, 0x033E
    1c98:	8b e0       	ldi	r24, 0x0B	; 11
    1c9a:	90 e0       	ldi	r25, 0x00	; 0
    1c9c:	0e 94 7e 3b 	call	0x76fc	; 0x76fc <__eewr_byte_m328p>
	eeprom_write_byte(&EE_SET_DAY,date_d);
    1ca0:	60 91 33 03 	lds	r22, 0x0333
    1ca4:	8c e0       	ldi	r24, 0x0C	; 12
    1ca6:	90 e0       	ldi	r25, 0x00	; 0
    1ca8:	0e 94 7e 3b 	call	0x76fc	; 0x76fc <__eewr_byte_m328p>
	eeprom_write_byte(&EE_SET_YEAR,ee_set_year);
    1cac:	8d e0       	ldi	r24, 0x0D	; 13
    1cae:	90 e0       	ldi	r25, 0x00	; 0
    1cb0:	61 2f       	mov	r22, r17
    1cb2:	0e 94 7e 3b 	call	0x76fc	; 0x76fc <__eewr_byte_m328p>
	eeprom_write_byte(&EE_SET_HOUR,time_h);
    1cb6:	60 91 2a 03 	lds	r22, 0x032A
    1cba:	86 e1       	ldi	r24, 0x16	; 22
    1cbc:	90 e0       	ldi	r25, 0x00	; 0
    1cbe:	0e 94 7e 3b 	call	0x76fc	; 0x76fc <__eewr_byte_m328p>
	eeprom_write_byte(&EE_SET_MIN,time_m);
    1cc2:	60 91 34 03 	lds	r22, 0x0334
    1cc6:	87 e1       	ldi	r24, 0x17	; 23
    1cc8:	90 e0       	ldi	r25, 0x00	; 0
    1cca:	0e 94 7e 3b 	call	0x76fc	; 0x76fc <__eewr_byte_m328p>
	eeprom_write_byte(&EE_SET_SEC,time_s);
    1cce:	60 91 3f 03 	lds	r22, 0x033F
    1cd2:	88 e1       	ldi	r24, 0x18	; 24
    1cd4:	90 e0       	ldi	r25, 0x00	; 0
    1cd6:	0e 94 7e 3b 	call	0x76fc	; 0x76fc <__eewr_byte_m328p>
	load_etd();
    1cda:	0e 94 70 27 	call	0x4ee0	; 0x4ee0 <load_etd>
}
    1cde:	28 96       	adiw	r28, 0x08	; 8
    1ce0:	0f b6       	in	r0, 0x3f	; 63
    1ce2:	f8 94       	cli
    1ce4:	de bf       	out	0x3e, r29	; 62
    1ce6:	0f be       	out	0x3f, r0	; 63
    1ce8:	cd bf       	out	0x3d, r28	; 61
    1cea:	cf 91       	pop	r28
    1cec:	df 91       	pop	r29
    1cee:	1f 91       	pop	r17
    1cf0:	08 95       	ret

00001cf2 <display_smoker>:
  	  printnumber_3d(cfg_bmi_weight, inverted&2);
  }
}

void display_smoker(uint8_t inverted)
{
    1cf2:	1f 93       	push	r17
    1cf4:	18 2f       	mov	r17, r24
	glcdSetAddress(MENU_INDENT, 5);
    1cf6:	88 e0       	ldi	r24, 0x08	; 8
    1cf8:	65 e0       	ldi	r22, 0x05	; 5
    1cfa:	0e 94 50 2d 	call	0x5aa0	; 0x5aa0 <glcdSetAddress>
  glcdPutStr("Smoker?:         ", NORMAL);
    1cfe:	8d ed       	ldi	r24, 0xDD	; 221
    1d00:	90 e0       	ldi	r25, 0x00	; 0
    1d02:	60 e0       	ldi	r22, 0x00	; 0
    1d04:	0e 94 56 29 	call	0x52ac	; 0x52ac <glcdPutStr_rom>
  if(cfg_smoker)
    1d08:	80 91 e6 02 	lds	r24, 0x02E6
    1d0c:	88 23       	and	r24, r24
    1d0e:	19 f0       	breq	.+6      	; 0x1d16 <display_smoker+0x24>
  	  glcdPutStr("Yes", inverted);
    1d10:	89 ed       	ldi	r24, 0xD9	; 217
    1d12:	90 e0       	ldi	r25, 0x00	; 0
    1d14:	02 c0       	rjmp	.+4      	; 0x1d1a <display_smoker+0x28>
  else
  	  glcdPutStr(" No", inverted);
    1d16:	85 ed       	ldi	r24, 0xD5	; 213
    1d18:	90 e0       	ldi	r25, 0x00	; 0
    1d1a:	61 2f       	mov	r22, r17
    1d1c:	0e 94 56 29 	call	0x52ac	; 0x52ac <glcdPutStr_rom>
}
    1d20:	1f 91       	pop	r17
    1d22:	08 95       	ret

00001d24 <display_dc_mode>:
  else
  	  glcdPutStr("Female", inverted);
}

void display_dc_mode(uint8_t inverted)
{
    1d24:	1f 93       	push	r17
    1d26:	18 2f       	mov	r17, r24
	glcdSetAddress(MENU_INDENT, 3);
    1d28:	88 e0       	ldi	r24, 0x08	; 8
    1d2a:	63 e0       	ldi	r22, 0x03	; 3
    1d2c:	0e 94 50 2d 	call	0x5aa0	; 0x5aa0 <glcdSetAddress>
  glcdPutStr("Set Mode:", NORMAL);
    1d30:	8b e4       	ldi	r24, 0x4B	; 75
    1d32:	91 e0       	ldi	r25, 0x01	; 1
    1d34:	60 e0       	ldi	r22, 0x00	; 0
    1d36:	0e 94 56 29 	call	0x52ac	; 0x52ac <glcdPutStr_rom>
  if(cfg_dc_mode == DC_mode_normal)
    1d3a:	80 91 e0 02 	lds	r24, 0x02E0
    1d3e:	88 23       	and	r24, r24
    1d40:	19 f4       	brne	.+6      	; 0x1d48 <display_dc_mode+0x24>
    glcdPutStr("     Normal", inverted);
    1d42:	8f e3       	ldi	r24, 0x3F	; 63
    1d44:	91 e0       	ldi	r25, 0x01	; 1
    1d46:	10 c0       	rjmp	.+32     	; 0x1d68 <display_dc_mode+0x44>
  else if (cfg_dc_mode == DC_mode_pessimistic)
    1d48:	80 91 e0 02 	lds	r24, 0x02E0
    1d4c:	81 30       	cpi	r24, 0x01	; 1
    1d4e:	19 f4       	brne	.+6      	; 0x1d56 <display_dc_mode+0x32>
    glcdPutStr("Pessimistic", inverted);
    1d50:	83 e3       	ldi	r24, 0x33	; 51
    1d52:	91 e0       	ldi	r25, 0x01	; 1
    1d54:	09 c0       	rjmp	.+18     	; 0x1d68 <display_dc_mode+0x44>
  else if (cfg_dc_mode == DC_mode_optimistic)
    1d56:	80 91 e0 02 	lds	r24, 0x02E0
    1d5a:	82 30       	cpi	r24, 0x02	; 2
    1d5c:	19 f4       	brne	.+6      	; 0x1d64 <display_dc_mode+0x40>
    glcdPutStr(" Optimistic", inverted);
    1d5e:	87 e2       	ldi	r24, 0x27	; 39
    1d60:	91 e0       	ldi	r25, 0x01	; 1
    1d62:	02 c0       	rjmp	.+4      	; 0x1d68 <display_dc_mode+0x44>
  else
    glcdPutStr("   Sadistic", inverted);
    1d64:	8b e1       	ldi	r24, 0x1B	; 27
    1d66:	91 e0       	ldi	r25, 0x01	; 1
    1d68:	61 2f       	mov	r22, r17
    1d6a:	0e 94 56 29 	call	0x52ac	; 0x52ac <glcdPutStr_rom>
}
    1d6e:	1f 91       	pop	r17
    1d70:	08 95       	ret

00001d72 <display_gender>:
  printnumber((cfg_dob_y+1900)/100, (mode==SET_YEAR)?INVERTED:NORMAL);
  printnumber((cfg_dob_y+1900)%100, (mode==SET_YEAR)?INVERTED:NORMAL);
}

void display_gender(uint8_t inverted)
{
    1d72:	1f 93       	push	r17
    1d74:	18 2f       	mov	r17, r24
	glcdSetAddress(MENU_INDENT, 2);
    1d76:	88 e0       	ldi	r24, 0x08	; 8
    1d78:	62 e0       	ldi	r22, 0x02	; 2
    1d7a:	0e 94 50 2d 	call	0x5aa0	; 0x5aa0 <glcdSetAddress>
  glcdPutStr("Set Gender:   ",NORMAL);
    1d7e:	83 e6       	ldi	r24, 0x63	; 99
    1d80:	91 e0       	ldi	r25, 0x01	; 1
    1d82:	60 e0       	ldi	r22, 0x00	; 0
    1d84:	0e 94 56 29 	call	0x52ac	; 0x52ac <glcdPutStr_rom>
  if(cfg_gender==DC_gender_male)
    1d88:	80 91 de 02 	lds	r24, 0x02DE
    1d8c:	88 23       	and	r24, r24
    1d8e:	19 f4       	brne	.+6      	; 0x1d96 <display_gender+0x24>
  	  glcdPutStr("  Male", inverted);
    1d90:	8c e5       	ldi	r24, 0x5C	; 92
    1d92:	91 e0       	ldi	r25, 0x01	; 1
    1d94:	02 c0       	rjmp	.+4      	; 0x1d9a <display_gender+0x28>
  else
  	  glcdPutStr("Female", inverted);
    1d96:	85 e5       	ldi	r24, 0x55	; 85
    1d98:	91 e0       	ldi	r25, 0x01	; 1
    1d9a:	61 2f       	mov	r22, r17
    1d9c:	0e 94 56 29 	call	0x52ac	; 0x52ac <glcdPutStr_rom>
}
    1da0:	1f 91       	pop	r17
    1da2:	08 95       	ret

00001da4 <display_dob>:
	eeprom_write_byte(&EE_SET_SEC,time_s);
	load_etd();
}

void display_dob(uint8_t mode)
{
    1da4:	0f 93       	push	r16
    1da6:	1f 93       	push	r17
    1da8:	08 2f       	mov	r16, r24
  glcdSetAddress(MENU_INDENT, 1);
    1daa:	88 e0       	ldi	r24, 0x08	; 8
    1dac:	61 e0       	ldi	r22, 0x01	; 1
    1dae:	0e 94 50 2d 	call	0x5aa0	; 0x5aa0 <glcdSetAddress>
  glcdPutStr("Set DOB:  ",NORMAL);
    1db2:	82 e7       	ldi	r24, 0x72	; 114
    1db4:	91 e0       	ldi	r25, 0x01	; 1
    1db6:	60 e0       	ldi	r22, 0x00	; 0
    1db8:	0e 94 56 29 	call	0x52ac	; 0x52ac <glcdPutStr_rom>
   if (region == REGION_US) {
    1dbc:	80 91 37 03 	lds	r24, 0x0337
    1dc0:	88 23       	and	r24, r24
    1dc2:	91 f4       	brne	.+36     	; 0x1de8 <display_dob+0x44>
    printnumber(cfg_dob_m, (mode==SET_MONTH)?INVERTED:NORMAL);
    1dc4:	80 91 e4 02 	lds	r24, 0x02E4
    1dc8:	60 e0       	ldi	r22, 0x00	; 0
    1dca:	00 31       	cpi	r16, 0x10	; 16
    1dcc:	09 f4       	brne	.+2      	; 0x1dd0 <display_dob+0x2c>
    1dce:	61 e0       	ldi	r22, 0x01	; 1
    1dd0:	0e 94 04 2f 	call	0x5e08	; 0x5e08 <printnumber>
    glcdWriteChar('/', NORMAL);
    1dd4:	8f e2       	ldi	r24, 0x2F	; 47
    1dd6:	60 e0       	ldi	r22, 0x00	; 0
    1dd8:	0e 94 2b 29 	call	0x5256	; 0x5256 <glcdWriteChar>
    printnumber(cfg_dob_d, (mode==SET_DAY)?INVERTED:NORMAL);
    1ddc:	80 91 e1 02 	lds	r24, 0x02E1
    1de0:	60 e0       	ldi	r22, 0x00	; 0
    1de2:	01 31       	cpi	r16, 0x11	; 17
    1de4:	99 f4       	brne	.+38     	; 0x1e0c <display_dob+0x68>
    1de6:	11 c0       	rjmp	.+34     	; 0x1e0a <display_dob+0x66>
  } else {
    printnumber(cfg_dob_d, (mode==SET_DAY)?INVERTED:NORMAL);
    1de8:	80 91 e1 02 	lds	r24, 0x02E1
    1dec:	60 e0       	ldi	r22, 0x00	; 0
    1dee:	01 31       	cpi	r16, 0x11	; 17
    1df0:	09 f4       	brne	.+2      	; 0x1df4 <display_dob+0x50>
    1df2:	61 e0       	ldi	r22, 0x01	; 1
    1df4:	0e 94 04 2f 	call	0x5e08	; 0x5e08 <printnumber>
    glcdWriteChar('/', NORMAL);
    1df8:	8f e2       	ldi	r24, 0x2F	; 47
    1dfa:	60 e0       	ldi	r22, 0x00	; 0
    1dfc:	0e 94 2b 29 	call	0x5256	; 0x5256 <glcdWriteChar>
    printnumber(cfg_dob_m, (mode==SET_MONTH)?INVERTED:NORMAL);
    1e00:	80 91 e4 02 	lds	r24, 0x02E4
    1e04:	60 e0       	ldi	r22, 0x00	; 0
    1e06:	00 31       	cpi	r16, 0x10	; 16
    1e08:	09 f4       	brne	.+2      	; 0x1e0c <display_dob+0x68>
    1e0a:	61 e0       	ldi	r22, 0x01	; 1
    1e0c:	0e 94 04 2f 	call	0x5e08	; 0x5e08 <printnumber>
  }
  glcdWriteChar('/', NORMAL);
    1e10:	8f e2       	ldi	r24, 0x2F	; 47
    1e12:	60 e0       	ldi	r22, 0x00	; 0
    1e14:	0e 94 2b 29 	call	0x5256	; 0x5256 <glcdWriteChar>
  printnumber((cfg_dob_y+1900)/100, (mode==SET_YEAR)?INVERTED:NORMAL);
    1e18:	80 91 df 02 	lds	r24, 0x02DF
    1e1c:	10 e0       	ldi	r17, 0x00	; 0
    1e1e:	02 31       	cpi	r16, 0x12	; 18
    1e20:	09 f4       	brne	.+2      	; 0x1e24 <display_dob+0x80>
    1e22:	11 e0       	ldi	r17, 0x01	; 1
    1e24:	90 e0       	ldi	r25, 0x00	; 0
    1e26:	84 59       	subi	r24, 0x94	; 148
    1e28:	98 4f       	sbci	r25, 0xF8	; 248
    1e2a:	64 e6       	ldi	r22, 0x64	; 100
    1e2c:	70 e0       	ldi	r23, 0x00	; 0
    1e2e:	0e 94 17 3b 	call	0x762e	; 0x762e <__divmodhi4>
    1e32:	86 2f       	mov	r24, r22
    1e34:	61 2f       	mov	r22, r17
    1e36:	0e 94 04 2f 	call	0x5e08	; 0x5e08 <printnumber>
  printnumber((cfg_dob_y+1900)%100, (mode==SET_YEAR)?INVERTED:NORMAL);
    1e3a:	80 91 df 02 	lds	r24, 0x02DF
    1e3e:	90 e0       	ldi	r25, 0x00	; 0
    1e40:	84 59       	subi	r24, 0x94	; 148
    1e42:	98 4f       	sbci	r25, 0xF8	; 248
    1e44:	64 e6       	ldi	r22, 0x64	; 100
    1e46:	70 e0       	ldi	r23, 0x00	; 0
    1e48:	0e 94 17 3b 	call	0x762e	; 0x762e <__divmodhi4>
    1e4c:	61 2f       	mov	r22, r17
    1e4e:	0e 94 04 2f 	call	0x5e08	; 0x5e08 <printnumber>
}
    1e52:	1f 91       	pop	r17
    1e54:	0f 91       	pop	r16
    1e56:	08 95       	ret

00001e58 <printnumber_3d>:
// buttons in a few seconds, and turns off the menu display
extern volatile uint8_t timeoutcounter;

extern volatile uint8_t screenmutex;

void printnumber_3d(uint16_t n, uint8_t inverted) {
    1e58:	ff 92       	push	r15
    1e5a:	0f 93       	push	r16
    1e5c:	1f 93       	push	r17
    1e5e:	8c 01       	movw	r16, r24
    1e60:	f6 2e       	mov	r15, r22
  glcdWriteChar(n/100+'0', inverted);
    1e62:	64 e6       	ldi	r22, 0x64	; 100
    1e64:	70 e0       	ldi	r23, 0x00	; 0
    1e66:	0e 94 03 3b 	call	0x7606	; 0x7606 <__udivmodhi4>
    1e6a:	86 2f       	mov	r24, r22
    1e6c:	80 5d       	subi	r24, 0xD0	; 208
    1e6e:	6f 2d       	mov	r22, r15
    1e70:	0e 94 2b 29 	call	0x5256	; 0x5256 <glcdWriteChar>
  printnumber(n%100, inverted);
    1e74:	c8 01       	movw	r24, r16
    1e76:	64 e6       	ldi	r22, 0x64	; 100
    1e78:	70 e0       	ldi	r23, 0x00	; 0
    1e7a:	0e 94 03 3b 	call	0x7606	; 0x7606 <__udivmodhi4>
    1e7e:	6f 2d       	mov	r22, r15
    1e80:	0e 94 04 2f 	call	0x5e08	; 0x5e08 <printnumber>
}
    1e84:	1f 91       	pop	r17
    1e86:	0f 91       	pop	r16
    1e88:	ff 90       	pop	r15
    1e8a:	08 95       	ret

00001e8c <display_bmi_set>:
  else
    glcdPutStr("   Sadistic", inverted);
}

void display_bmi_set(uint8_t inverted)
{
    1e8c:	0f 93       	push	r16
    1e8e:	1f 93       	push	r17
    1e90:	08 2f       	mov	r16, r24
  glcdSetAddress(MENU_INDENT, 4);
    1e92:	88 e0       	ldi	r24, 0x08	; 8
    1e94:	64 e0       	ldi	r22, 0x04	; 4
    1e96:	0e 94 50 2d 	call	0x5aa0	; 0x5aa0 <glcdSetAddress>
  glcdPutStr("Set ", NORMAL);
    1e9a:	86 e1       	ldi	r24, 0x16	; 22
    1e9c:	91 e0       	ldi	r25, 0x01	; 1
    1e9e:	60 e0       	ldi	r22, 0x00	; 0
    1ea0:	0e 94 56 29 	call	0x52ac	; 0x52ac <glcdPutStr_rom>
  if(cfg_bmi_unit == BMI_Imperial)
    1ea4:	80 91 e5 02 	lds	r24, 0x02E5
    1ea8:	88 23       	and	r24, r24
    1eaa:	99 f5       	brne	.+102    	; 0x1f12 <display_bmi_set+0x86>
  {
  	  glcdPutStr("Imp:", inverted&1);
    1eac:	60 2f       	mov	r22, r16
    1eae:	61 70       	andi	r22, 0x01	; 1
    1eb0:	81 e1       	ldi	r24, 0x11	; 17
    1eb2:	91 e0       	ldi	r25, 0x01	; 1
    1eb4:	0e 94 56 29 	call	0x52ac	; 0x52ac <glcdPutStr_rom>
  	  printnumber_3d(cfg_bmi_weight, inverted&2);
    1eb8:	80 91 e2 02 	lds	r24, 0x02E2
    1ebc:	90 91 e3 02 	lds	r25, 0x02E3
    1ec0:	10 2f       	mov	r17, r16
    1ec2:	12 70       	andi	r17, 0x02	; 2
    1ec4:	61 2f       	mov	r22, r17
    1ec6:	0e 94 2c 0f 	call	0x1e58	; 0x1e58 <printnumber_3d>
  	  glcdPutStr("lb ", inverted&2);
    1eca:	8d e0       	ldi	r24, 0x0D	; 13
    1ecc:	91 e0       	ldi	r25, 0x01	; 1
    1ece:	61 2f       	mov	r22, r17
    1ed0:	0e 94 56 29 	call	0x52ac	; 0x52ac <glcdPutStr_rom>
  	  printnumber(cfg_bmi_height / 12, inverted&4);
    1ed4:	80 91 e7 02 	lds	r24, 0x02E7
    1ed8:	90 91 e8 02 	lds	r25, 0x02E8
    1edc:	10 2f       	mov	r17, r16
    1ede:	14 70       	andi	r17, 0x04	; 4
    1ee0:	6c e0       	ldi	r22, 0x0C	; 12
    1ee2:	70 e0       	ldi	r23, 0x00	; 0
    1ee4:	0e 94 03 3b 	call	0x7606	; 0x7606 <__udivmodhi4>
    1ee8:	86 2f       	mov	r24, r22
    1eea:	61 2f       	mov	r22, r17
    1eec:	0e 94 04 2f 	call	0x5e08	; 0x5e08 <printnumber>
  	  glcdPutStr("ft", inverted&4);
    1ef0:	8a e0       	ldi	r24, 0x0A	; 10
    1ef2:	91 e0       	ldi	r25, 0x01	; 1
    1ef4:	61 2f       	mov	r22, r17
    1ef6:	0e 94 56 29 	call	0x52ac	; 0x52ac <glcdPutStr_rom>
  	  printnumber(cfg_bmi_height % 12, inverted&4);
    1efa:	80 91 e7 02 	lds	r24, 0x02E7
    1efe:	90 91 e8 02 	lds	r25, 0x02E8
    1f02:	6c e0       	ldi	r22, 0x0C	; 12
    1f04:	70 e0       	ldi	r23, 0x00	; 0
    1f06:	0e 94 03 3b 	call	0x7606	; 0x7606 <__udivmodhi4>
    1f0a:	61 2f       	mov	r22, r17
    1f0c:	0e 94 04 2f 	call	0x5e08	; 0x5e08 <printnumber>
    1f10:	3b c0       	rjmp	.+118    	; 0x1f88 <display_bmi_set+0xfc>
  	  
  }
  else if (cfg_bmi_unit == BMI_Metric)
    1f12:	80 91 e5 02 	lds	r24, 0x02E5
    1f16:	60 2f       	mov	r22, r16
    1f18:	61 70       	andi	r22, 0x01	; 1
    1f1a:	10 2f       	mov	r17, r16
    1f1c:	12 70       	andi	r17, 0x02	; 2
    1f1e:	81 30       	cpi	r24, 0x01	; 1
    1f20:	19 f5       	brne	.+70     	; 0x1f68 <display_bmi_set+0xdc>
  {
  	  glcdPutStr("Met:", inverted&1);
    1f22:	85 e0       	ldi	r24, 0x05	; 5
    1f24:	91 e0       	ldi	r25, 0x01	; 1
    1f26:	0e 94 56 29 	call	0x52ac	; 0x52ac <glcdPutStr_rom>
  	  glcdWriteChar(' ', NORMAL);
    1f2a:	80 e2       	ldi	r24, 0x20	; 32
    1f2c:	60 e0       	ldi	r22, 0x00	; 0
    1f2e:	0e 94 2b 29 	call	0x5256	; 0x5256 <glcdWriteChar>
  	  printnumber_3d(cfg_bmi_weight, inverted&2);
    1f32:	80 91 e2 02 	lds	r24, 0x02E2
    1f36:	90 91 e3 02 	lds	r25, 0x02E3
    1f3a:	61 2f       	mov	r22, r17
    1f3c:	0e 94 2c 0f 	call	0x1e58	; 0x1e58 <printnumber_3d>
  	  glcdPutStr("kg ", inverted&2);
    1f40:	81 e0       	ldi	r24, 0x01	; 1
    1f42:	91 e0       	ldi	r25, 0x01	; 1
    1f44:	61 2f       	mov	r22, r17
    1f46:	0e 94 56 29 	call	0x52ac	; 0x52ac <glcdPutStr_rom>
  	  printnumber_3d(cfg_bmi_height, inverted&4);
    1f4a:	80 91 e7 02 	lds	r24, 0x02E7
    1f4e:	90 91 e8 02 	lds	r25, 0x02E8
    1f52:	10 2f       	mov	r17, r16
    1f54:	14 70       	andi	r17, 0x04	; 4
    1f56:	61 2f       	mov	r22, r17
    1f58:	0e 94 2c 0f 	call	0x1e58	; 0x1e58 <printnumber_3d>
  	  glcdPutStr("cm", inverted&4);
    1f5c:	8e ef       	ldi	r24, 0xFE	; 254
    1f5e:	90 e0       	ldi	r25, 0x00	; 0
    1f60:	61 2f       	mov	r22, r17
    1f62:	0e 94 56 29 	call	0x52ac	; 0x52ac <glcdPutStr_rom>
    1f66:	10 c0       	rjmp	.+32     	; 0x1f88 <display_bmi_set+0xfc>
  }
  else
  {
  	  glcdPutStr("BMI:", inverted&1);
    1f68:	89 ef       	ldi	r24, 0xF9	; 249
    1f6a:	90 e0       	ldi	r25, 0x00	; 0
    1f6c:	0e 94 56 29 	call	0x52ac	; 0x52ac <glcdPutStr_rom>
  	  glcdPutStr("         ",NORMAL);
    1f70:	8f ee       	ldi	r24, 0xEF	; 239
    1f72:	90 e0       	ldi	r25, 0x00	; 0
    1f74:	60 e0       	ldi	r22, 0x00	; 0
    1f76:	0e 94 56 29 	call	0x52ac	; 0x52ac <glcdPutStr_rom>
  	  printnumber_3d(cfg_bmi_weight, inverted&2);
    1f7a:	80 91 e2 02 	lds	r24, 0x02E2
    1f7e:	90 91 e3 02 	lds	r25, 0x02E3
    1f82:	61 2f       	mov	r22, r17
    1f84:	0e 94 2c 0f 	call	0x1e58	; 0x1e58 <printnumber_3d>
  }
}
    1f88:	1f 91       	pop	r17
    1f8a:	0f 91       	pop	r16
    1f8c:	08 95       	ret

00001f8e <display_death_menu>:
  	  glcdPutStr(" No", inverted);
}

//Setting the Death Clock needs its own screen.
void display_death_menu(void) {
  cfg_dob_m = eeprom_read_byte(&EE_DOB_MONTH);
    1f8e:	88 e0       	ldi	r24, 0x08	; 8
    1f90:	90 e0       	ldi	r25, 0x00	; 0
    1f92:	0e 94 70 3b 	call	0x76e0	; 0x76e0 <__eerd_byte_m328p>
    1f96:	80 93 e4 02 	sts	0x02E4, r24
  cfg_dob_d = eeprom_read_byte(&EE_DOB_DAY);
    1f9a:	89 e0       	ldi	r24, 0x09	; 9
    1f9c:	90 e0       	ldi	r25, 0x00	; 0
    1f9e:	0e 94 70 3b 	call	0x76e0	; 0x76e0 <__eerd_byte_m328p>
    1fa2:	80 93 e1 02 	sts	0x02E1, r24
  cfg_dob_y = eeprom_read_byte(&EE_DOB_YEAR);
    1fa6:	8a e0       	ldi	r24, 0x0A	; 10
    1fa8:	90 e0       	ldi	r25, 0x00	; 0
    1faa:	0e 94 70 3b 	call	0x76e0	; 0x76e0 <__eerd_byte_m328p>
    1fae:	80 93 df 02 	sts	0x02DF, r24
  cfg_gender = eeprom_read_byte(&EE_GENDER);
    1fb2:	8e e0       	ldi	r24, 0x0E	; 14
    1fb4:	90 e0       	ldi	r25, 0x00	; 0
    1fb6:	0e 94 70 3b 	call	0x76e0	; 0x76e0 <__eerd_byte_m328p>
    1fba:	80 93 de 02 	sts	0x02DE, r24
  cfg_dc_mode = eeprom_read_byte(&EE_DC_MODE);
    1fbe:	8f e0       	ldi	r24, 0x0F	; 15
    1fc0:	90 e0       	ldi	r25, 0x00	; 0
    1fc2:	0e 94 70 3b 	call	0x76e0	; 0x76e0 <__eerd_byte_m328p>
    1fc6:	80 93 e0 02 	sts	0x02E0, r24
  cfg_bmi_unit = eeprom_read_byte(&EE_BMI_UNIT);
    1fca:	80 e1       	ldi	r24, 0x10	; 16
    1fcc:	90 e0       	ldi	r25, 0x00	; 0
    1fce:	0e 94 70 3b 	call	0x76e0	; 0x76e0 <__eerd_byte_m328p>
    1fd2:	80 93 e5 02 	sts	0x02E5, r24
  cfg_bmi_height = eeprom_read_word(&EE_BMI_HEIGHT);
    1fd6:	83 e1       	ldi	r24, 0x13	; 19
    1fd8:	90 e0       	ldi	r25, 0x00	; 0
    1fda:	0e 94 78 3b 	call	0x76f0	; 0x76f0 <__eerd_word_m328p>
    1fde:	90 93 e8 02 	sts	0x02E8, r25
    1fe2:	80 93 e7 02 	sts	0x02E7, r24
  cfg_bmi_weight = eeprom_read_word(&EE_BMI_WEIGHT);
    1fe6:	81 e1       	ldi	r24, 0x11	; 17
    1fe8:	90 e0       	ldi	r25, 0x00	; 0
    1fea:	0e 94 78 3b 	call	0x76f0	; 0x76f0 <__eerd_word_m328p>
    1fee:	90 93 e3 02 	sts	0x02E3, r25
    1ff2:	80 93 e2 02 	sts	0x02E2, r24
  cfg_smoker = eeprom_read_byte(&EE_SMOKER);
    1ff6:	85 e1       	ldi	r24, 0x15	; 21
    1ff8:	90 e0       	ldi	r25, 0x00	; 0
    1ffa:	0e 94 70 3b 	call	0x76e0	; 0x76e0 <__eerd_byte_m328p>
    1ffe:	80 93 e6 02 	sts	0x02E6, r24


  screenmutex++;
    2002:	80 91 13 02 	lds	r24, 0x0213
    2006:	8f 5f       	subi	r24, 0xFF	; 255
    2008:	80 93 13 02 	sts	0x0213, r24
  glcdClearScreen();
    200c:	0e 94 5a 2d 	call	0x5ab4	; 0x5ab4 <glcdClearScreen>
  
  glcdSetAddress(0, 0);
    2010:	80 e0       	ldi	r24, 0x00	; 0
    2012:	60 e0       	ldi	r22, 0x00	; 0
    2014:	0e 94 50 2d 	call	0x5aa0	; 0x5aa0 <glcdSetAddress>
  glcdPutStr("DeathChron", NORMAL);
    2018:	8a ec       	ldi	r24, 0xCA	; 202
    201a:	90 e0       	ldi	r25, 0x00	; 0
    201c:	60 e0       	ldi	r22, 0x00	; 0
    201e:	0e 94 56 29 	call	0x52ac	; 0x52ac <glcdPutStr_rom>
  glcdSetAddress(64, 0);	//Not enough space in the 128 bits to put "DeathChron Config Menu"
    2022:	80 e4       	ldi	r24, 0x40	; 64
    2024:	60 e0       	ldi	r22, 0x00	; 0
    2026:	0e 94 50 2d 	call	0x5aa0	; 0x5aa0 <glcdSetAddress>
  glcdPutStr("Config", NORMAL);
    202a:	83 ec       	ldi	r24, 0xC3	; 195
    202c:	90 e0       	ldi	r25, 0x00	; 0
    202e:	60 e0       	ldi	r22, 0x00	; 0
    2030:	0e 94 56 29 	call	0x52ac	; 0x52ac <glcdPutStr_rom>
  glcdSetAddress(104, 0);  //So these two lines are making up for that. :)
    2034:	88 e6       	ldi	r24, 0x68	; 104
    2036:	60 e0       	ldi	r22, 0x00	; 0
    2038:	0e 94 50 2d 	call	0x5aa0	; 0x5aa0 <glcdSetAddress>
  glcdPutStr("Menu", NORMAL);
    203c:	8e eb       	ldi	r24, 0xBE	; 190
    203e:	90 e0       	ldi	r25, 0x00	; 0
    2040:	60 e0       	ldi	r22, 0x00	; 0
    2042:	0e 94 56 29 	call	0x52ac	; 0x52ac <glcdPutStr_rom>
  
  //DOB , render based on region setting, in mm/dd/yyyy or dd/mm/yyyy, range is 1900 - 2099.
  display_dob(displaymode);
    2046:	80 91 3a 03 	lds	r24, 0x033A
    204a:	0e 94 d2 0e 	call	0x1da4	; 0x1da4 <display_dob>
  
  //Gender, Male, Female
  display_gender(NORMAL);
    204e:	80 e0       	ldi	r24, 0x00	; 0
    2050:	0e 94 b9 0e 	call	0x1d72	; 0x1d72 <display_gender>
  
  //Mode, Normal, Optimistic, Pessimistic, Sadistic
  display_dc_mode(NORMAL);
    2054:	80 e0       	ldi	r24, 0x00	; 0
    2056:	0e 94 92 0e 	call	0x1d24	; 0x1d24 <display_dc_mode>
  
  //BMI Entry Method, Imperial (Weight in pounds, height in X foot Y inches), 
  //Metric (Weight in Kilograms, Height in Centimeters), 
  //Direct (Direct BMI value from 0-255, (actual range for calculation is less then 25, 25-44, and greater then or equal to 45.))
  display_bmi_set(NORMAL);
    205a:	80 e0       	ldi	r24, 0x00	; 0
    205c:	0e 94 46 0f 	call	0x1e8c	; 0x1e8c <display_bmi_set>
  
  //Smoking Status.
  display_smoker(NORMAL);
    2060:	80 e0       	ldi	r24, 0x00	; 0
    2062:	0e 94 79 0e 	call	0x1cf2	; 0x1cf2 <display_smoker>
  print_menu_advance();
    2066:	0e 94 66 3a 	call	0x74cc	; 0x74cc <print_menu_advance>
  
  screenmutex--;
    206a:	80 91 13 02 	lds	r24, 0x0213
    206e:	81 50       	subi	r24, 0x01	; 1
    2070:	80 93 13 02 	sts	0x0213, r24
}
    2074:	08 95       	ret

00002076 <init_set_death_menu>:

uint8_t init_set_death_menu(uint8_t line)
{
    2076:	1f 93       	push	r17
    2078:	18 2f       	mov	r17, r24
  display_death_menu();
    207a:	0e 94 c7 0f 	call	0x1f8e	; 0x1f8e <display_death_menu>
  
  screenmutex++;
    207e:	80 91 13 02 	lds	r24, 0x0213
    2082:	8f 5f       	subi	r24, 0xFF	; 255
    2084:	80 93 13 02 	sts	0x0213, r24
  if(displaymode == SET_DCSMOKER)
    2088:	80 91 3a 03 	lds	r24, 0x033A
    208c:	8f 36       	cpi	r24, 0x6F	; 111
    208e:	11 f4       	brne	.+4      	; 0x2094 <init_set_death_menu+0x1e>
  	  print_menu_exit();
    2090:	0e 94 5b 3a 	call	0x74b6	; 0x74b6 <print_menu_exit>
  // put a small arrow next to 'set 12h/24h'
  drawArrow(0, (line*8)+3, MENU_INDENT -1);
    2094:	11 0f       	add	r17, r17
    2096:	11 0f       	add	r17, r17
    2098:	11 0f       	add	r17, r17
    209a:	1d 5f       	subi	r17, 0xFD	; 253
    209c:	80 e0       	ldi	r24, 0x00	; 0
    209e:	61 2f       	mov	r22, r17
    20a0:	47 e0       	ldi	r20, 0x07	; 7
    20a2:	0e 94 3f 34 	call	0x687e	; 0x687e <drawArrow>
  screenmutex--;
    20a6:	80 91 13 02 	lds	r24, 0x0213
    20aa:	81 50       	subi	r24, 0x01	; 1
    20ac:	80 93 13 02 	sts	0x0213, r24
   
  timeoutcounter = INACTIVITYTIMEOUT;
    20b0:	8a e0       	ldi	r24, 0x0A	; 10
    20b2:	80 93 12 02 	sts	0x0212, r24
  return displaymode;
    20b6:	80 91 3a 03 	lds	r24, 0x033A
}
    20ba:	1f 91       	pop	r17
    20bc:	08 95       	ret

000020be <set_deathclock_smoker>:
	delay_ms(200);
    }
  }
}

void set_deathclock_smoker(void) {
    20be:	1f 93       	push	r17
  uint8_t mode = init_set_death_menu(5);
    20c0:	85 e0       	ldi	r24, 0x05	; 5
    20c2:	0e 94 3b 10 	call	0x2076	; 0x2076 <init_set_death_menu>
    20c6:	18 2f       	mov	r17, r24
    20c8:	48 c0       	rjmp	.+144    	; 0x215a <set_deathclock_smoker+0x9c>

  while (!check_timeout()) {
  
    if (just_pressed & 0x2) {
    20ca:	80 91 0f 02 	lds	r24, 0x020F
    20ce:	81 ff       	sbrs	r24, 1
    20d0:	1b c0       	rjmp	.+54     	; 0x2108 <set_deathclock_smoker+0x4a>
      just_pressed = 0;
    20d2:	10 92 0f 02 	sts	0x020F, r1
      screenmutex++;
    20d6:	80 91 13 02 	lds	r24, 0x0213
    20da:	8f 5f       	subi	r24, 0xFF	; 255
    20dc:	80 93 13 02 	sts	0x0213, r24

      if (mode == SET_DEATHCLOCK_SMOKER) {
    20e0:	1f 30       	cpi	r17, 0x0F	; 15
    20e2:	39 f4       	brne	.+14     	; 0x20f2 <set_deathclock_smoker+0x34>
	DEBUG(putstring("Setting deathclock smoker status"));
	// ok now its selected
	mode = SET_DCSMOKER;
	// print the region 
	display_smoker(INVERTED);
    20e4:	81 e0       	ldi	r24, 0x01	; 1
    20e6:	0e 94 79 0e 	call	0x1cf2	; 0x1cf2 <display_smoker>
	// display instructions below
	print_menu_change();
    20ea:	0e 94 54 3a 	call	0x74a8	; 0x74a8 <print_menu_change>
    20ee:	1f e6       	ldi	r17, 0x6F	; 111
    20f0:	06 c0       	rjmp	.+12     	; 0x20fe <set_deathclock_smoker+0x40>
      } else {
	mode = SET_DEATHCLOCK_SMOKER;
	// print the region normal
	display_smoker(NORMAL);
    20f2:	80 e0       	ldi	r24, 0x00	; 0
    20f4:	0e 94 79 0e 	call	0x1cf2	; 0x1cf2 <display_smoker>

	print_menu_exit();
    20f8:	0e 94 5b 3a 	call	0x74b6	; 0x74b6 <print_menu_exit>
    20fc:	1f e0       	ldi	r17, 0x0F	; 15
      }
      screenmutex--;
    20fe:	80 91 13 02 	lds	r24, 0x0213
    2102:	81 50       	subi	r24, 0x01	; 1
    2104:	80 93 13 02 	sts	0x0213, r24
    }
    if ((just_pressed & 0x4) || (pressed & 0x4)) {
    2108:	80 91 0f 02 	lds	r24, 0x020F
    210c:	82 fd       	sbrc	r24, 2
    210e:	04 c0       	rjmp	.+8      	; 0x2118 <set_deathclock_smoker+0x5a>
    2110:	80 91 10 02 	lds	r24, 0x0210
    2114:	82 ff       	sbrs	r24, 2
    2116:	21 c0       	rjmp	.+66     	; 0x215a <set_deathclock_smoker+0x9c>
      just_pressed = 0;
    2118:	10 92 0f 02 	sts	0x020F, r1
      
      if (mode == SET_DCSMOKER) {
    211c:	1f 36       	cpi	r17, 0x6F	; 111
    211e:	e9 f4       	brne	.+58     	; 0x215a <set_deathclock_smoker+0x9c>
	    cfg_smoker = !cfg_smoker;
    2120:	80 91 e6 02 	lds	r24, 0x02E6
    2124:	90 e0       	ldi	r25, 0x00	; 0
    2126:	88 23       	and	r24, r24
    2128:	09 f4       	brne	.+2      	; 0x212c <set_deathclock_smoker+0x6e>
    212a:	91 e0       	ldi	r25, 0x01	; 1
    212c:	90 93 e6 02 	sts	0x02E6, r25
	screenmutex++;
    2130:	80 91 13 02 	lds	r24, 0x0213
    2134:	8f 5f       	subi	r24, 0xFF	; 255
    2136:	80 93 13 02 	sts	0x0213, r24

	display_smoker(INVERTED);
    213a:	81 e0       	ldi	r24, 0x01	; 1
    213c:	0e 94 79 0e 	call	0x1cf2	; 0x1cf2 <display_smoker>
	screenmutex--;
    2140:	80 91 13 02 	lds	r24, 0x0213
    2144:	81 50       	subi	r24, 0x01	; 1
    2146:	80 93 13 02 	sts	0x0213, r24

	eeprom_write_byte(&EE_SMOKER, cfg_smoker);
    214a:	60 91 e6 02 	lds	r22, 0x02E6
    214e:	85 e1       	ldi	r24, 0x15	; 21
    2150:	90 e0       	ldi	r25, 0x00	; 0
    2152:	0e 94 7e 3b 	call	0x76fc	; 0x76fc <__eewr_byte_m328p>
	deathclock_changed();   
    2156:	0e 94 07 0e 	call	0x1c0e	; 0x1c0e <deathclock_changed>
}

void set_deathclock_smoker(void) {
  uint8_t mode = init_set_death_menu(5);

  while (!check_timeout()) {
    215a:	0e 94 c9 39 	call	0x7392	; 0x7392 <check_timeout>
    215e:	88 23       	and	r24, r24
    2160:	09 f4       	brne	.+2      	; 0x2164 <set_deathclock_smoker+0xa6>
    2162:	b3 cf       	rjmp	.-154    	; 0x20ca <set_deathclock_smoker+0xc>
	eeprom_write_byte(&EE_SMOKER, cfg_smoker);
	deathclock_changed();   
      }
    }
  }
}
    2164:	1f 91       	pop	r17
    2166:	08 95       	ret

00002168 <set_deathclock_mode>:
      }
    }
  }
}

void set_deathclock_mode(void) {
    2168:	1f 93       	push	r17
  uint8_t mode = init_set_death_menu(3);
    216a:	83 e0       	ldi	r24, 0x03	; 3
    216c:	0e 94 3b 10 	call	0x2076	; 0x2076 <init_set_death_menu>
    2170:	18 2f       	mov	r17, r24
    2172:	48 c0       	rjmp	.+144    	; 0x2204 <set_deathclock_mode+0x9c>

  while (!check_timeout()) {
  
    if (just_pressed & 0x2) {
    2174:	80 91 0f 02 	lds	r24, 0x020F
    2178:	81 ff       	sbrs	r24, 1
    217a:	1b c0       	rjmp	.+54     	; 0x21b2 <set_deathclock_mode+0x4a>
      just_pressed = 0;
    217c:	10 92 0f 02 	sts	0x020F, r1
      screenmutex++;
    2180:	80 91 13 02 	lds	r24, 0x0213
    2184:	8f 5f       	subi	r24, 0xFF	; 255
    2186:	80 93 13 02 	sts	0x0213, r24

      if (mode == SET_DEATHCLOCK_MODE) {
    218a:	1d 30       	cpi	r17, 0x0D	; 13
    218c:	39 f4       	brne	.+14     	; 0x219c <set_deathclock_mode+0x34>
	DEBUG(putstring("Setting deathclock mode"));
	// ok now its selected
	mode = SET_DCMODE;
	// print the region 
	display_dc_mode(INVERTED);
    218e:	81 e0       	ldi	r24, 0x01	; 1
    2190:	0e 94 92 0e 	call	0x1d24	; 0x1d24 <display_dc_mode>
	// display instructions below
	print_menu_change();
    2194:	0e 94 54 3a 	call	0x74a8	; 0x74a8 <print_menu_change>
    2198:	1b e6       	ldi	r17, 0x6B	; 107
    219a:	06 c0       	rjmp	.+12     	; 0x21a8 <set_deathclock_mode+0x40>
      } else {
	mode = SET_DEATHCLOCK_MODE;
	// print the region normal
	display_dc_mode(NORMAL);
    219c:	80 e0       	ldi	r24, 0x00	; 0
    219e:	0e 94 92 0e 	call	0x1d24	; 0x1d24 <display_dc_mode>

	print_menu_advance();
    21a2:	0e 94 66 3a 	call	0x74cc	; 0x74cc <print_menu_advance>
    21a6:	1d e0       	ldi	r17, 0x0D	; 13
      }
      screenmutex--;
    21a8:	80 91 13 02 	lds	r24, 0x0213
    21ac:	81 50       	subi	r24, 0x01	; 1
    21ae:	80 93 13 02 	sts	0x0213, r24
    }
    if ((just_pressed & 0x4) || (pressed & 0x4)) {
    21b2:	80 91 0f 02 	lds	r24, 0x020F
    21b6:	82 fd       	sbrc	r24, 2
    21b8:	04 c0       	rjmp	.+8      	; 0x21c2 <set_deathclock_mode+0x5a>
    21ba:	80 91 10 02 	lds	r24, 0x0210
    21be:	82 ff       	sbrs	r24, 2
    21c0:	21 c0       	rjmp	.+66     	; 0x2204 <set_deathclock_mode+0x9c>
      just_pressed = 0;
    21c2:	10 92 0f 02 	sts	0x020F, r1
      
      if (mode == SET_DCMODE) {
    21c6:	1b 36       	cpi	r17, 0x6B	; 107
    21c8:	e9 f4       	brne	.+58     	; 0x2204 <set_deathclock_mode+0x9c>
	    cfg_dc_mode = (cfg_dc_mode + 1) % 4;
    21ca:	80 91 e0 02 	lds	r24, 0x02E0
    21ce:	90 e0       	ldi	r25, 0x00	; 0
    21d0:	01 96       	adiw	r24, 0x01	; 1
    21d2:	83 70       	andi	r24, 0x03	; 3
    21d4:	90 70       	andi	r25, 0x00	; 0
    21d6:	80 93 e0 02 	sts	0x02E0, r24
	screenmutex++;
    21da:	80 91 13 02 	lds	r24, 0x0213
    21de:	8f 5f       	subi	r24, 0xFF	; 255
    21e0:	80 93 13 02 	sts	0x0213, r24

	display_dc_mode(INVERTED);
    21e4:	81 e0       	ldi	r24, 0x01	; 1
    21e6:	0e 94 92 0e 	call	0x1d24	; 0x1d24 <display_dc_mode>
	screenmutex--;
    21ea:	80 91 13 02 	lds	r24, 0x0213
    21ee:	81 50       	subi	r24, 0x01	; 1
    21f0:	80 93 13 02 	sts	0x0213, r24

	eeprom_write_byte(&EE_DC_MODE, cfg_dc_mode);
    21f4:	60 91 e0 02 	lds	r22, 0x02E0
    21f8:	8f e0       	ldi	r24, 0x0F	; 15
    21fa:	90 e0       	ldi	r25, 0x00	; 0
    21fc:	0e 94 7e 3b 	call	0x76fc	; 0x76fc <__eewr_byte_m328p>
	deathclock_changed();   
    2200:	0e 94 07 0e 	call	0x1c0e	; 0x1c0e <deathclock_changed>
}

void set_deathclock_mode(void) {
  uint8_t mode = init_set_death_menu(3);

  while (!check_timeout()) {
    2204:	0e 94 c9 39 	call	0x7392	; 0x7392 <check_timeout>
    2208:	88 23       	and	r24, r24
    220a:	09 f4       	brne	.+2      	; 0x220e <set_deathclock_mode+0xa6>
    220c:	b3 cf       	rjmp	.-154    	; 0x2174 <set_deathclock_mode+0xc>
	eeprom_write_byte(&EE_DC_MODE, cfg_dc_mode);
	deathclock_changed();   
      }
    }
  }
}
    220e:	1f 91       	pop	r17
    2210:	08 95       	ret

00002212 <set_deathclock_gender>:
	delay_ms(200);  
    }
  }
}

void set_deathclock_gender(void) {
    2212:	1f 93       	push	r17
  uint8_t mode = init_set_death_menu(2);
    2214:	82 e0       	ldi	r24, 0x02	; 2
    2216:	0e 94 3b 10 	call	0x2076	; 0x2076 <init_set_death_menu>
    221a:	18 2f       	mov	r17, r24
    221c:	48 c0       	rjmp	.+144    	; 0x22ae <set_deathclock_gender+0x9c>

  while (!check_timeout()) {
  
    if (just_pressed & 0x2) {
    221e:	80 91 0f 02 	lds	r24, 0x020F
    2222:	81 ff       	sbrs	r24, 1
    2224:	1b c0       	rjmp	.+54     	; 0x225c <set_deathclock_gender+0x4a>
      just_pressed = 0;
    2226:	10 92 0f 02 	sts	0x020F, r1
      screenmutex++;
    222a:	80 91 13 02 	lds	r24, 0x0213
    222e:	8f 5f       	subi	r24, 0xFF	; 255
    2230:	80 93 13 02 	sts	0x0213, r24

      if (mode == SET_DEATHCLOCK_GENDER) {
    2234:	1c 30       	cpi	r17, 0x0C	; 12
    2236:	39 f4       	brne	.+14     	; 0x2246 <set_deathclock_gender+0x34>
	DEBUG(putstring("Setting deathclock gender"));
	// ok now its selected
	mode = SET_DCGENDER;
	// print the region 
	display_gender(INVERTED);
    2238:	81 e0       	ldi	r24, 0x01	; 1
    223a:	0e 94 b9 0e 	call	0x1d72	; 0x1d72 <display_gender>
	// display instructions below
	print_menu_change();
    223e:	0e 94 54 3a 	call	0x74a8	; 0x74a8 <print_menu_change>
    2242:	1a e6       	ldi	r17, 0x6A	; 106
    2244:	06 c0       	rjmp	.+12     	; 0x2252 <set_deathclock_gender+0x40>
      } else {
	mode = SET_DEATHCLOCK_GENDER;
	// print the region normal
	display_gender(NORMAL);
    2246:	80 e0       	ldi	r24, 0x00	; 0
    2248:	0e 94 b9 0e 	call	0x1d72	; 0x1d72 <display_gender>

	print_menu_advance();
    224c:	0e 94 66 3a 	call	0x74cc	; 0x74cc <print_menu_advance>
    2250:	1c e0       	ldi	r17, 0x0C	; 12
      }
      screenmutex--;
    2252:	80 91 13 02 	lds	r24, 0x0213
    2256:	81 50       	subi	r24, 0x01	; 1
    2258:	80 93 13 02 	sts	0x0213, r24
    }
    if ((just_pressed & 0x4) || (pressed & 0x4)) {
    225c:	80 91 0f 02 	lds	r24, 0x020F
    2260:	82 fd       	sbrc	r24, 2
    2262:	04 c0       	rjmp	.+8      	; 0x226c <set_deathclock_gender+0x5a>
    2264:	80 91 10 02 	lds	r24, 0x0210
    2268:	82 ff       	sbrs	r24, 2
    226a:	21 c0       	rjmp	.+66     	; 0x22ae <set_deathclock_gender+0x9c>
      just_pressed = 0;
    226c:	10 92 0f 02 	sts	0x020F, r1
      
      if (mode == SET_DCGENDER) {
    2270:	1a 36       	cpi	r17, 0x6A	; 106
    2272:	e9 f4       	brne	.+58     	; 0x22ae <set_deathclock_gender+0x9c>
	    cfg_gender = !cfg_gender;
    2274:	80 91 de 02 	lds	r24, 0x02DE
    2278:	90 e0       	ldi	r25, 0x00	; 0
    227a:	88 23       	and	r24, r24
    227c:	09 f4       	brne	.+2      	; 0x2280 <set_deathclock_gender+0x6e>
    227e:	91 e0       	ldi	r25, 0x01	; 1
    2280:	90 93 de 02 	sts	0x02DE, r25
	screenmutex++;
    2284:	80 91 13 02 	lds	r24, 0x0213
    2288:	8f 5f       	subi	r24, 0xFF	; 255
    228a:	80 93 13 02 	sts	0x0213, r24
	//print_menu_change();

	// put a small arrow next to 'set 12h/24h'
	//drawArrow(0, 19, MENU_INDENT -1);

	display_gender(INVERTED);
    228e:	81 e0       	ldi	r24, 0x01	; 1
    2290:	0e 94 b9 0e 	call	0x1d72	; 0x1d72 <display_gender>
	screenmutex--;
    2294:	80 91 13 02 	lds	r24, 0x0213
    2298:	81 50       	subi	r24, 0x01	; 1
    229a:	80 93 13 02 	sts	0x0213, r24

	eeprom_write_byte(&EE_GENDER, cfg_gender);
    229e:	60 91 de 02 	lds	r22, 0x02DE
    22a2:	8e e0       	ldi	r24, 0x0E	; 14
    22a4:	90 e0       	ldi	r25, 0x00	; 0
    22a6:	0e 94 7e 3b 	call	0x76fc	; 0x76fc <__eewr_byte_m328p>
	deathclock_changed();   
    22aa:	0e 94 07 0e 	call	0x1c0e	; 0x1c0e <deathclock_changed>
}

void set_deathclock_gender(void) {
  uint8_t mode = init_set_death_menu(2);

  while (!check_timeout()) {
    22ae:	0e 94 c9 39 	call	0x7392	; 0x7392 <check_timeout>
    22b2:	88 23       	and	r24, r24
    22b4:	09 f4       	brne	.+2      	; 0x22b8 <set_deathclock_gender+0xa6>
    22b6:	b3 cf       	rjmp	.-154    	; 0x221e <set_deathclock_gender+0xc>
	eeprom_write_byte(&EE_GENDER, cfg_gender);
	deathclock_changed();   
      }
    }
  }
}
    22b8:	1f 91       	pop	r17
    22ba:	08 95       	ret

000022bc <set_deathclock_dob>:
extern uint8_t next_mode_setmonth[];
extern uint8_t next_mode_setday[];
void print_monthday_help(uint8_t mode);


void set_deathclock_dob(void) {
    22bc:	1f 93       	push	r17
   uint8_t mode = init_set_death_menu(1);
    22be:	81 e0       	ldi	r24, 0x01	; 1
    22c0:	0e 94 3b 10 	call	0x2076	; 0x2076 <init_set_death_menu>
    22c4:	18 2f       	mov	r17, r24
    22c6:	8a c0       	rjmp	.+276    	; 0x23dc <set_deathclock_dob+0x120>

  while (!check_timeout()) {

    if (just_pressed & 0x2) {
    22c8:	80 91 0f 02 	lds	r24, 0x020F
    22cc:	81 ff       	sbrs	r24, 1
    22ce:	40 c0       	rjmp	.+128    	; 0x2350 <set_deathclock_dob+0x94>
      just_pressed = 0;
    22d0:	10 92 0f 02 	sts	0x020F, r1
      screenmutex++;
    22d4:	80 91 13 02 	lds	r24, 0x0213
    22d8:	8f 5f       	subi	r24, 0xFF	; 255
    22da:	80 93 13 02 	sts	0x0213, r24

      if (mode == SET_DEATHCLOCK_DOB) {
    22de:	1b 30       	cpi	r17, 0x0B	; 11
    22e0:	31 f4       	brne	.+12     	; 0x22ee <set_deathclock_dob+0x32>
	// ok now its selected
	mode = next_mode_setdate[region];
    22e2:	e0 91 37 03 	lds	r30, 0x0337
    22e6:	f0 e0       	ldi	r31, 0x00	; 0
    22e8:	e6 57       	subi	r30, 0x76	; 118
    22ea:	fe 4f       	sbci	r31, 0xFE	; 254
    22ec:	07 c0       	rjmp	.+14     	; 0x22fc <set_deathclock_dob+0x40>
      } else if (mode == SET_MONTH) {
    22ee:	10 31       	cpi	r17, 0x10	; 16
    22f0:	39 f4       	brne	.+14     	; 0x2300 <set_deathclock_dob+0x44>
	mode = next_mode_setmonth[region];
    22f2:	e0 91 37 03 	lds	r30, 0x0337
    22f6:	f0 e0       	ldi	r31, 0x00	; 0
    22f8:	e4 57       	subi	r30, 0x74	; 116
    22fa:	fe 4f       	sbci	r31, 0xFE	; 254
    22fc:	10 81       	ld	r17, Z
    22fe:	1d c0       	rjmp	.+58     	; 0x233a <set_deathclock_dob+0x7e>
      } else if (mode == SET_DAY) {
    2300:	11 31       	cpi	r17, 0x11	; 17
    2302:	31 f4       	brne	.+12     	; 0x2310 <set_deathclock_dob+0x54>
	mode = next_mode_setday[region];
    2304:	e0 91 37 03 	lds	r30, 0x0337
    2308:	f0 e0       	ldi	r31, 0x00	; 0
    230a:	e2 57       	subi	r30, 0x72	; 114
    230c:	fe 4f       	sbci	r31, 0xFE	; 254
    230e:	f6 cf       	rjmp	.-20     	; 0x22fc <set_deathclock_dob+0x40>
	mode = SET_DEATHCLOCK_DOB;
	
	//date_y = year;
	//date_m = month;
	//date_d = day;
	eeprom_write_byte(&EE_DOB_MONTH,cfg_dob_m);
    2310:	60 91 e4 02 	lds	r22, 0x02E4
    2314:	88 e0       	ldi	r24, 0x08	; 8
    2316:	90 e0       	ldi	r25, 0x00	; 0
    2318:	0e 94 7e 3b 	call	0x76fc	; 0x76fc <__eewr_byte_m328p>
    eeprom_write_byte(&EE_DOB_DAY,cfg_dob_d);
    231c:	60 91 e1 02 	lds	r22, 0x02E1
    2320:	89 e0       	ldi	r24, 0x09	; 9
    2322:	90 e0       	ldi	r25, 0x00	; 0
    2324:	0e 94 7e 3b 	call	0x76fc	; 0x76fc <__eewr_byte_m328p>
    eeprom_write_byte(&EE_DOB_YEAR,cfg_dob_y);
    2328:	60 91 df 02 	lds	r22, 0x02DF
    232c:	8a e0       	ldi	r24, 0x0A	; 10
    232e:	90 e0       	ldi	r25, 0x00	; 0
    2330:	0e 94 7e 3b 	call	0x76fc	; 0x76fc <__eewr_byte_m328p>
    deathclock_changed();
    2334:	0e 94 07 0e 	call	0x1c0e	; 0x1c0e <deathclock_changed>
    2338:	1b e0       	ldi	r17, 0x0B	; 11
      }
      display_dob(mode);
    233a:	81 2f       	mov	r24, r17
    233c:	0e 94 d2 0e 	call	0x1da4	; 0x1da4 <display_dob>
	  print_monthday_help(mode);
    2340:	81 2f       	mov	r24, r17
    2342:	0e 94 24 20 	call	0x4048	; 0x4048 <print_monthday_help>
      screenmutex--;
    2346:	80 91 13 02 	lds	r24, 0x0213
    234a:	81 50       	subi	r24, 0x01	; 1
    234c:	80 93 13 02 	sts	0x0213, r24
    }
    if ((just_pressed & 0x4) || (pressed & 0x4)) {
    2350:	80 91 0f 02 	lds	r24, 0x020F
    2354:	82 fd       	sbrc	r24, 2
    2356:	04 c0       	rjmp	.+8      	; 0x2360 <set_deathclock_dob+0xa4>
    2358:	80 91 10 02 	lds	r24, 0x0210
    235c:	82 ff       	sbrs	r24, 2
    235e:	3e c0       	rjmp	.+124    	; 0x23dc <set_deathclock_dob+0x120>
      just_pressed = 0;
    2360:	10 92 0f 02 	sts	0x020F, r1

      screenmutex++;
    2364:	80 91 13 02 	lds	r24, 0x0213
    2368:	8f 5f       	subi	r24, 0xFF	; 255
    236a:	80 93 13 02 	sts	0x0213, r24

      if (mode == SET_MONTH) {
    236e:	10 31       	cpi	r17, 0x10	; 16
    2370:	31 f4       	brne	.+12     	; 0x237e <set_deathclock_dob+0xc2>
    cfg_dob_m++;
    2372:	80 91 e4 02 	lds	r24, 0x02E4
    2376:	8f 5f       	subi	r24, 0xFF	; 255
    2378:	80 93 e4 02 	sts	0x02E4, r24
    237c:	14 c0       	rjmp	.+40     	; 0x23a6 <set_deathclock_dob+0xea>
      }
      if (mode == SET_DAY) {
    237e:	11 31       	cpi	r17, 0x11	; 17
    2380:	31 f4       	brne	.+12     	; 0x238e <set_deathclock_dob+0xd2>
	cfg_dob_d++;
    2382:	80 91 e1 02 	lds	r24, 0x02E1
    2386:	8f 5f       	subi	r24, 0xFF	; 255
    2388:	80 93 e1 02 	sts	0x02E1, r24
    238c:	0c c0       	rjmp	.+24     	; 0x23a6 <set_deathclock_dob+0xea>
      }
      if (mode == SET_YEAR) {
    238e:	12 31       	cpi	r17, 0x12	; 18
    2390:	51 f4       	brne	.+20     	; 0x23a6 <set_deathclock_dob+0xea>
	cfg_dob_y = (cfg_dob_y+1) % 200;
    2392:	80 91 df 02 	lds	r24, 0x02DF
    2396:	90 e0       	ldi	r25, 0x00	; 0
    2398:	01 96       	adiw	r24, 0x01	; 1
    239a:	68 ec       	ldi	r22, 0xC8	; 200
    239c:	70 e0       	ldi	r23, 0x00	; 0
    239e:	0e 94 17 3b 	call	0x762e	; 0x762e <__divmodhi4>
    23a2:	80 93 df 02 	sts	0x02DF, r24
      }
      add_month(&cfg_dob_m,&cfg_dob_d,cfg_dob_d+1900);
    23a6:	40 91 e1 02 	lds	r20, 0x02E1
    23aa:	50 e0       	ldi	r21, 0x00	; 0
    23ac:	44 59       	subi	r20, 0x94	; 148
    23ae:	58 4f       	sbci	r21, 0xF8	; 248
    23b0:	84 ee       	ldi	r24, 0xE4	; 228
    23b2:	92 e0       	ldi	r25, 0x02	; 2
    23b4:	61 ee       	ldi	r22, 0xE1	; 225
    23b6:	72 e0       	ldi	r23, 0x02	; 2
    23b8:	0e 94 90 39 	call	0x7320	; 0x7320 <add_month>
      display_dob(mode);
    23bc:	81 2f       	mov	r24, r17
    23be:	0e 94 d2 0e 	call	0x1da4	; 0x1da4 <display_dob>
      screenmutex--;
    23c2:	80 91 13 02 	lds	r24, 0x0213
    23c6:	81 50       	subi	r24, 0x01	; 1
    23c8:	80 93 13 02 	sts	0x0213, r24

      if (pressed & 0x4)
    23cc:	80 91 10 02 	lds	r24, 0x0210
    23d0:	82 ff       	sbrs	r24, 2
    23d2:	04 c0       	rjmp	.+8      	; 0x23dc <set_deathclock_dob+0x120>
	delay_ms(200);  
    23d4:	88 ec       	ldi	r24, 0xC8	; 200
    23d6:	90 e0       	ldi	r25, 0x00	; 0
    23d8:	0e 94 fd 35 	call	0x6bfa	; 0x6bfa <delay_ms>


void set_deathclock_dob(void) {
   uint8_t mode = init_set_death_menu(1);

  while (!check_timeout()) {
    23dc:	0e 94 c9 39 	call	0x7392	; 0x7392 <check_timeout>
    23e0:	88 23       	and	r24, r24
    23e2:	09 f4       	brne	.+2      	; 0x23e6 <set_deathclock_dob+0x12a>
    23e4:	71 cf       	rjmp	.-286    	; 0x22c8 <set_deathclock_dob+0xc>

      if (pressed & 0x4)
	delay_ms(200);  
    }
  }
}
    23e6:	1f 91       	pop	r17
    23e8:	08 95       	ret

000023ea <set_deathclock_bmi>:
      }
    }
  }
}

void set_deathclock_bmi(void) {
    23ea:	af 92       	push	r10
    23ec:	bf 92       	push	r11
    23ee:	cf 92       	push	r12
    23f0:	df 92       	push	r13
    23f2:	ef 92       	push	r14
    23f4:	ff 92       	push	r15
    23f6:	1f 93       	push	r17
    23f8:	cf 93       	push	r28
    23fa:	df 93       	push	r29
  uint8_t mode = init_set_death_menu(4);
    23fc:	84 e0       	ldi	r24, 0x04	; 4
    23fe:	0e 94 3b 10 	call	0x2076	; 0x2076 <init_set_death_menu>
    2402:	18 2f       	mov	r17, r24
      	  	  if ( cfg_bmi_height > 120 )
      	  	  	  cfg_bmi_height = 36;
      	  } else if (cfg_bmi_unit == BMI_Metric) {
      	  	  cfg_bmi_height++;
      	  	  if ( cfg_bmi_height > 305 )
      	  	  	  cfg_bmi_height = 92;
    2404:	7c e5       	ldi	r23, 0x5C	; 92
    2406:	a7 2e       	mov	r10, r23
    2408:	b1 2c       	mov	r11, r1
      }
      if (mode == SET_BMI_HT) {
      	  if(cfg_bmi_unit == BMI_Imperial) {
      	  	  cfg_bmi_height++;
      	  	  if ( cfg_bmi_height > 120 )
      	  	  	  cfg_bmi_height = 36;
    240a:	64 e2       	ldi	r22, 0x24	; 36
    240c:	c6 2e       	mov	r12, r22
    240e:	d1 2c       	mov	r13, r1
      	  	  if ( cfg_bmi_weight > 660 )
      	  	  	  cfg_bmi_weight = 35;
      	  } else if (cfg_bmi_unit == BMI_Metric) {
      	  	  cfg_bmi_weight += 5;
      	  	  if ( cfg_bmi_weight > 300 )
      	  	  	  cfg_bmi_weight = 15;
    2410:	5f e0       	ldi	r21, 0x0F	; 15
    2412:	e5 2e       	mov	r14, r21
    2414:	f1 2c       	mov	r15, r1
      if (mode == SET_BMI_WT) {
      	  if(cfg_bmi_unit == BMI_Imperial) {
      	  	  //cfg_bmi_weight = (cfg_bmi_weight + 5) % 660;
      	  	  cfg_bmi_weight += 5;
      	  	  if ( cfg_bmi_weight > 660 )
      	  	  	  cfg_bmi_weight = 35;
    2416:	c3 e2       	ldi	r28, 0x23	; 35
    2418:	d0 e0       	ldi	r29, 0x00	; 0
    241a:	21 c1       	rjmp	.+578    	; 0x265e <set_deathclock_bmi+0x274>

void set_deathclock_bmi(void) {
  uint8_t mode = init_set_death_menu(4);

  while (!check_timeout()) {
    if (just_pressed & 0x2) {
    241c:	80 91 0f 02 	lds	r24, 0x020F
    2420:	81 ff       	sbrs	r24, 1
    2422:	46 c0       	rjmp	.+140    	; 0x24b0 <set_deathclock_bmi+0xc6>
      just_pressed = 0;
    2424:	10 92 0f 02 	sts	0x020F, r1
      screenmutex++;
    2428:	80 91 13 02 	lds	r24, 0x0213
    242c:	8f 5f       	subi	r24, 0xFF	; 255
    242e:	80 93 13 02 	sts	0x0213, r24

      if (mode == SET_DEATHCLOCK_BMI) {
    2432:	1e 30       	cpi	r17, 0x0E	; 14
    2434:	59 f4       	brne	.+22     	; 0x244c <set_deathclock_bmi+0x62>
	DEBUG(putstring("Set BMI Unit"));
	// ok now its selected
	mode = SET_BMI_UNIT;

	//Set BMI Unit
	display_bmi_set(1);
    2436:	81 e0       	ldi	r24, 0x01	; 1
    2438:	0e 94 46 0f 	call	0x1e8c	; 0x1e8c <display_bmi_set>
	// display instructions below
	//PLUS_TO_CHANGE(" ut."," set unit");
	print_menu_opts("change ut.","set unit");
    243c:	83 eb       	ldi	r24, 0xB3	; 179
    243e:	90 e0       	ldi	r25, 0x00	; 0
    2440:	6a ea       	ldi	r22, 0xAA	; 170
    2442:	70 e0       	ldi	r23, 0x00	; 0
    2444:	0e 94 4a 3a 	call	0x7494	; 0x7494 <PRINT_MENU_OPTS>
    2448:	1c e6       	ldi	r17, 0x6C	; 108
    244a:	2d c0       	rjmp	.+90     	; 0x24a6 <set_deathclock_bmi+0xbc>
      } else if (mode == SET_BMI_UNIT) {
    244c:	1c 36       	cpi	r17, 0x6C	; 108
    244e:	a1 f4       	brne	.+40     	; 0x2478 <set_deathclock_bmi+0x8e>
	DEBUG(putstring("Set bmi weight / bmi direct"));
	mode = SET_BMI_WT;
	display_bmi_set(2);
    2450:	82 e0       	ldi	r24, 0x02	; 2
    2452:	0e 94 46 0f 	call	0x1e8c	; 0x1e8c <display_bmi_set>
	// display instructions below
	if(cfg_bmi_unit != BMI_Direct)
    2456:	80 91 e5 02 	lds	r24, 0x02E5
    245a:	82 30       	cpi	r24, 0x02	; 2
    245c:	29 f0       	breq	.+10     	; 0x2468 <set_deathclock_bmi+0x7e>
	  //PLUS_TO_CHANGE(" wt."," set wt. ");
	  print_menu_opts("change wt."," set wt.");
    245e:	8f e9       	ldi	r24, 0x9F	; 159
    2460:	90 e0       	ldi	r25, 0x00	; 0
    2462:	66 e9       	ldi	r22, 0x96	; 150
    2464:	70 e0       	ldi	r23, 0x00	; 0
    2466:	04 c0       	rjmp	.+8      	; 0x2470 <set_deathclock_bmi+0x86>
	else
	  //PLUS_TO_CHANGE(" bmi"," set bmi ");
	  print_menu_opts("change bmi","set bmi");
    2468:	8b e8       	ldi	r24, 0x8B	; 139
    246a:	90 e0       	ldi	r25, 0x00	; 0
    246c:	63 e8       	ldi	r22, 0x83	; 131
    246e:	70 e0       	ldi	r23, 0x00	; 0
    2470:	0e 94 4a 3a 	call	0x7494	; 0x7494 <PRINT_MENU_OPTS>
    2474:	1d e6       	ldi	r17, 0x6D	; 109
    2476:	17 c0       	rjmp	.+46     	; 0x24a6 <set_deathclock_bmi+0xbc>
	  } else if ((mode == SET_BMI_WT) && (cfg_bmi_unit != BMI_Direct)) {
    2478:	1d 36       	cpi	r17, 0x6D	; 109
    247a:	79 f4       	brne	.+30     	; 0x249a <set_deathclock_bmi+0xb0>
    247c:	80 91 e5 02 	lds	r24, 0x02E5
    2480:	82 30       	cpi	r24, 0x02	; 2
    2482:	59 f0       	breq	.+22     	; 0x249a <set_deathclock_bmi+0xb0>
	mode = SET_BMI_HT;
    display_bmi_set(4);
    2484:	84 e0       	ldi	r24, 0x04	; 4
    2486:	0e 94 46 0f 	call	0x1e8c	; 0x1e8c <display_bmi_set>
    //PLUS_TO_CHANGE(" ht."," set ht. ");
    print_menu_opts("change ht.","set ht.");
    248a:	88 e7       	ldi	r24, 0x78	; 120
    248c:	90 e0       	ldi	r25, 0x00	; 0
    248e:	60 e7       	ldi	r22, 0x70	; 112
    2490:	70 e0       	ldi	r23, 0x00	; 0
    2492:	0e 94 4a 3a 	call	0x7494	; 0x7494 <PRINT_MENU_OPTS>
    2496:	1e e6       	ldi	r17, 0x6E	; 110
    2498:	06 c0       	rjmp	.+12     	; 0x24a6 <set_deathclock_bmi+0xbc>
      } else {
	mode = SET_DEATHCLOCK_BMI;
	display_bmi_set(NORMAL);
    249a:	80 e0       	ldi	r24, 0x00	; 0
    249c:	0e 94 46 0f 	call	0x1e8c	; 0x1e8c <display_bmi_set>
	// display instructions below
	print_menu_advance();
    24a0:	0e 94 66 3a 	call	0x74cc	; 0x74cc <print_menu_advance>
    24a4:	1e e0       	ldi	r17, 0x0E	; 14
      }
      screenmutex--;
    24a6:	80 91 13 02 	lds	r24, 0x0213
    24aa:	81 50       	subi	r24, 0x01	; 1
    24ac:	80 93 13 02 	sts	0x0213, r24
    }
    if ((just_pressed & 0x4) || (pressed & 0x4)) {
    24b0:	80 91 0f 02 	lds	r24, 0x020F
    24b4:	82 fd       	sbrc	r24, 2
    24b6:	04 c0       	rjmp	.+8      	; 0x24c0 <set_deathclock_bmi+0xd6>
    24b8:	80 91 10 02 	lds	r24, 0x0210
    24bc:	82 ff       	sbrs	r24, 2
    24be:	cf c0       	rjmp	.+414    	; 0x265e <set_deathclock_bmi+0x274>
      just_pressed = 0;
    24c0:	10 92 0f 02 	sts	0x020F, r1
      screenmutex++;
    24c4:	80 91 13 02 	lds	r24, 0x0213
    24c8:	8f 5f       	subi	r24, 0xFF	; 255
    24ca:	80 93 13 02 	sts	0x0213, r24

      if (mode == SET_BMI_UNIT) { 
    24ce:	1c 36       	cpi	r17, 0x6C	; 108
    24d0:	51 f5       	brne	.+84     	; 0x2526 <set_deathclock_bmi+0x13c>
      	  cfg_bmi_unit = (cfg_bmi_unit + 1) % 3;
    24d2:	80 91 e5 02 	lds	r24, 0x02E5
    24d6:	90 e0       	ldi	r25, 0x00	; 0
    24d8:	01 96       	adiw	r24, 0x01	; 1
    24da:	63 e0       	ldi	r22, 0x03	; 3
    24dc:	70 e0       	ldi	r23, 0x00	; 0
    24de:	0e 94 17 3b 	call	0x762e	; 0x762e <__divmodhi4>
    24e2:	80 93 e5 02 	sts	0x02E5, r24
      	  if(cfg_bmi_unit == BMI_Imperial) {
    24e6:	80 91 e5 02 	lds	r24, 0x02E5
    24ea:	88 23       	and	r24, r24
    24ec:	49 f4       	brne	.+18     	; 0x2500 <set_deathclock_bmi+0x116>
      	  	  cfg_bmi_weight = 35;
    24ee:	d0 93 e3 02 	sts	0x02E3, r29
    24f2:	c0 93 e2 02 	sts	0x02E2, r28
      	  	  cfg_bmi_height = 36;
    24f6:	d0 92 e8 02 	sts	0x02E8, r13
    24fa:	c0 92 e7 02 	sts	0x02E7, r12
    24fe:	11 c0       	rjmp	.+34     	; 0x2522 <set_deathclock_bmi+0x138>
      	  } else if (cfg_bmi_unit == BMI_Metric) {
    2500:	80 91 e5 02 	lds	r24, 0x02E5
    2504:	81 30       	cpi	r24, 0x01	; 1
    2506:	49 f4       	brne	.+18     	; 0x251a <set_deathclock_bmi+0x130>
      	  	  cfg_bmi_weight = 15;
    2508:	f0 92 e3 02 	sts	0x02E3, r15
    250c:	e0 92 e2 02 	sts	0x02E2, r14
      	  	  cfg_bmi_height = 92;
    2510:	b0 92 e8 02 	sts	0x02E8, r11
    2514:	a0 92 e7 02 	sts	0x02E7, r10
    2518:	04 c0       	rjmp	.+8      	; 0x2522 <set_deathclock_bmi+0x138>
      	  } else {
      	  	  cfg_bmi_weight = 0;
    251a:	10 92 e3 02 	sts	0x02E3, r1
    251e:	10 92 e2 02 	sts	0x02E2, r1
      	  }
      	  display_bmi_set(1);
    2522:	81 e0       	ldi	r24, 0x01	; 1
    2524:	75 c0       	rjmp	.+234    	; 0x2610 <set_deathclock_bmi+0x226>
      } 
      if (mode == SET_BMI_WT) {
    2526:	1d 36       	cpi	r17, 0x6D	; 109
    2528:	09 f0       	breq	.+2      	; 0x252c <set_deathclock_bmi+0x142>
    252a:	3e c0       	rjmp	.+124    	; 0x25a8 <set_deathclock_bmi+0x1be>
      	  if(cfg_bmi_unit == BMI_Imperial) {
    252c:	80 91 e5 02 	lds	r24, 0x02E5
    2530:	88 23       	and	r24, r24
    2532:	a9 f4       	brne	.+42     	; 0x255e <set_deathclock_bmi+0x174>
      	  	  //cfg_bmi_weight = (cfg_bmi_weight + 5) % 660;
      	  	  cfg_bmi_weight += 5;
    2534:	80 91 e2 02 	lds	r24, 0x02E2
    2538:	90 91 e3 02 	lds	r25, 0x02E3
    253c:	05 96       	adiw	r24, 0x05	; 5
    253e:	90 93 e3 02 	sts	0x02E3, r25
    2542:	80 93 e2 02 	sts	0x02E2, r24
      	  	  if ( cfg_bmi_weight > 660 )
    2546:	80 91 e2 02 	lds	r24, 0x02E2
    254a:	90 91 e3 02 	lds	r25, 0x02E3
    254e:	85 59       	subi	r24, 0x95	; 149
    2550:	92 40       	sbci	r25, 0x02	; 2
    2552:	40 f1       	brcs	.+80     	; 0x25a4 <set_deathclock_bmi+0x1ba>
      	  	  	  cfg_bmi_weight = 35;
    2554:	d0 93 e3 02 	sts	0x02E3, r29
    2558:	c0 93 e2 02 	sts	0x02E2, r28
    255c:	23 c0       	rjmp	.+70     	; 0x25a4 <set_deathclock_bmi+0x1ba>
      	  } else if (cfg_bmi_unit == BMI_Metric) {
    255e:	80 91 e5 02 	lds	r24, 0x02E5
    2562:	81 30       	cpi	r24, 0x01	; 1
    2564:	a9 f4       	brne	.+42     	; 0x2590 <set_deathclock_bmi+0x1a6>
      	  	  cfg_bmi_weight += 5;
    2566:	80 91 e2 02 	lds	r24, 0x02E2
    256a:	90 91 e3 02 	lds	r25, 0x02E3
    256e:	05 96       	adiw	r24, 0x05	; 5
    2570:	90 93 e3 02 	sts	0x02E3, r25
    2574:	80 93 e2 02 	sts	0x02E2, r24
      	  	  if ( cfg_bmi_weight > 300 )
    2578:	80 91 e2 02 	lds	r24, 0x02E2
    257c:	90 91 e3 02 	lds	r25, 0x02E3
    2580:	8d 52       	subi	r24, 0x2D	; 45
    2582:	91 40       	sbci	r25, 0x01	; 1
    2584:	78 f0       	brcs	.+30     	; 0x25a4 <set_deathclock_bmi+0x1ba>
      	  	  	  cfg_bmi_weight = 15;
    2586:	f0 92 e3 02 	sts	0x02E3, r15
    258a:	e0 92 e2 02 	sts	0x02E2, r14
    258e:	0a c0       	rjmp	.+20     	; 0x25a4 <set_deathclock_bmi+0x1ba>
      	  } else {
      	  	  cfg_bmi_weight = (cfg_bmi_weight + 1) % 256;
    2590:	80 91 e2 02 	lds	r24, 0x02E2
    2594:	90 91 e3 02 	lds	r25, 0x02E3
    2598:	01 96       	adiw	r24, 0x01	; 1
    259a:	90 70       	andi	r25, 0x00	; 0
    259c:	90 93 e3 02 	sts	0x02E3, r25
    25a0:	80 93 e2 02 	sts	0x02E2, r24
      	  }
      	  display_bmi_set(2);
    25a4:	82 e0       	ldi	r24, 0x02	; 2
    25a6:	34 c0       	rjmp	.+104    	; 0x2610 <set_deathclock_bmi+0x226>
      }
      if (mode == SET_BMI_HT) {
    25a8:	1e 36       	cpi	r17, 0x6E	; 110
    25aa:	a1 f5       	brne	.+104    	; 0x2614 <set_deathclock_bmi+0x22a>
      	  if(cfg_bmi_unit == BMI_Imperial) {
    25ac:	80 91 e5 02 	lds	r24, 0x02E5
    25b0:	88 23       	and	r24, r24
    25b2:	a9 f4       	brne	.+42     	; 0x25de <set_deathclock_bmi+0x1f4>
      	  	  cfg_bmi_height++;
    25b4:	80 91 e7 02 	lds	r24, 0x02E7
    25b8:	90 91 e8 02 	lds	r25, 0x02E8
    25bc:	01 96       	adiw	r24, 0x01	; 1
    25be:	90 93 e8 02 	sts	0x02E8, r25
    25c2:	80 93 e7 02 	sts	0x02E7, r24
      	  	  if ( cfg_bmi_height > 120 )
    25c6:	80 91 e7 02 	lds	r24, 0x02E7
    25ca:	90 91 e8 02 	lds	r25, 0x02E8
    25ce:	89 37       	cpi	r24, 0x79	; 121
    25d0:	91 05       	cpc	r25, r1
    25d2:	e8 f0       	brcs	.+58     	; 0x260e <set_deathclock_bmi+0x224>
      	  	  	  cfg_bmi_height = 36;
    25d4:	d0 92 e8 02 	sts	0x02E8, r13
    25d8:	c0 92 e7 02 	sts	0x02E7, r12
    25dc:	18 c0       	rjmp	.+48     	; 0x260e <set_deathclock_bmi+0x224>
      	  } else if (cfg_bmi_unit == BMI_Metric) {
    25de:	80 91 e5 02 	lds	r24, 0x02E5
    25e2:	81 30       	cpi	r24, 0x01	; 1
    25e4:	a1 f4       	brne	.+40     	; 0x260e <set_deathclock_bmi+0x224>
      	  	  cfg_bmi_height++;
    25e6:	80 91 e7 02 	lds	r24, 0x02E7
    25ea:	90 91 e8 02 	lds	r25, 0x02E8
    25ee:	01 96       	adiw	r24, 0x01	; 1
    25f0:	90 93 e8 02 	sts	0x02E8, r25
    25f4:	80 93 e7 02 	sts	0x02E7, r24
      	  	  if ( cfg_bmi_height > 305 )
    25f8:	80 91 e7 02 	lds	r24, 0x02E7
    25fc:	90 91 e8 02 	lds	r25, 0x02E8
    2600:	82 53       	subi	r24, 0x32	; 50
    2602:	91 40       	sbci	r25, 0x01	; 1
    2604:	20 f0       	brcs	.+8      	; 0x260e <set_deathclock_bmi+0x224>
      	  	  	  cfg_bmi_height = 92;
    2606:	b0 92 e8 02 	sts	0x02E8, r11
    260a:	a0 92 e7 02 	sts	0x02E7, r10
      	  }
      	  display_bmi_set(4);
    260e:	84 e0       	ldi	r24, 0x04	; 4
    2610:	0e 94 46 0f 	call	0x1e8c	; 0x1e8c <display_bmi_set>
      }
      eeprom_write_byte(&EE_BMI_UNIT,cfg_bmi_unit);
    2614:	60 91 e5 02 	lds	r22, 0x02E5
    2618:	80 e1       	ldi	r24, 0x10	; 16
    261a:	90 e0       	ldi	r25, 0x00	; 0
    261c:	0e 94 7e 3b 	call	0x76fc	; 0x76fc <__eewr_byte_m328p>
      eeprom_write_word(&EE_BMI_WEIGHT,cfg_bmi_weight);
    2620:	60 91 e2 02 	lds	r22, 0x02E2
    2624:	70 91 e3 02 	lds	r23, 0x02E3
    2628:	81 e1       	ldi	r24, 0x11	; 17
    262a:	90 e0       	ldi	r25, 0x00	; 0
    262c:	0e 94 8c 3b 	call	0x7718	; 0x7718 <__eewr_word_m328p>
      eeprom_write_word(&EE_BMI_HEIGHT,cfg_bmi_height);
    2630:	60 91 e7 02 	lds	r22, 0x02E7
    2634:	70 91 e8 02 	lds	r23, 0x02E8
    2638:	83 e1       	ldi	r24, 0x13	; 19
    263a:	90 e0       	ldi	r25, 0x00	; 0
    263c:	0e 94 8c 3b 	call	0x7718	; 0x7718 <__eewr_word_m328p>
      deathclock_changed();
    2640:	0e 94 07 0e 	call	0x1c0e	; 0x1c0e <deathclock_changed>
      screenmutex--;
    2644:	80 91 13 02 	lds	r24, 0x0213
    2648:	81 50       	subi	r24, 0x01	; 1
    264a:	80 93 13 02 	sts	0x0213, r24
      if (pressed & 0x4)
    264e:	80 91 10 02 	lds	r24, 0x0210
    2652:	82 ff       	sbrs	r24, 2
    2654:	04 c0       	rjmp	.+8      	; 0x265e <set_deathclock_bmi+0x274>
	delay_ms(200);
    2656:	88 ec       	ldi	r24, 0xC8	; 200
    2658:	90 e0       	ldi	r25, 0x00	; 0
    265a:	0e 94 fd 35 	call	0x6bfa	; 0x6bfa <delay_ms>
}

void set_deathclock_bmi(void) {
  uint8_t mode = init_set_death_menu(4);

  while (!check_timeout()) {
    265e:	0e 94 c9 39 	call	0x7392	; 0x7392 <check_timeout>
    2662:	88 23       	and	r24, r24
    2664:	09 f4       	brne	.+2      	; 0x2668 <set_deathclock_bmi+0x27e>
    2666:	da ce       	rjmp	.-588    	; 0x241c <set_deathclock_bmi+0x32>
      screenmutex--;
      if (pressed & 0x4)
	delay_ms(200);
    }
  }
}
    2668:	df 91       	pop	r29
    266a:	cf 91       	pop	r28
    266c:	1f 91       	pop	r17
    266e:	ff 90       	pop	r15
    2670:	ef 90       	pop	r14
    2672:	df 90       	pop	r13
    2674:	cf 90       	pop	r12
    2676:	bf 90       	pop	r11
    2678:	af 90       	pop	r10
    267a:	08 95       	ret

0000267c <initanim_deathcfg>:
      }
    }
  }
}

void initanim_deathcfg(void) {
    267c:	df 92       	push	r13
    267e:	ef 92       	push	r14
    2680:	ff 92       	push	r15
    2682:	0f 93       	push	r16
    2684:	1f 93       	push	r17

  load_etd();	//Only need to do this once at power on, and once if Death Clock settings are changed, and refresh if date/time is changed.
    2686:	0e 94 70 27 	call	0x4ee0	; 0x4ee0 <load_etd>
		set_deathclock_bmi();
  	} else if (displaymode == SET_DEATHCLOCK_GENDER) {
  		displaymode = SET_DEATHCLOCK_MODE;
		set_deathclock_mode();
  	} else if (displaymode == SET_DEATHCLOCK_BMI) {
  		displaymode = SET_DEATHCLOCK_SMOKER;
    268a:	af e0       	ldi	r26, 0x0F	; 15
    268c:	da 2e       	mov	r13, r26
		set_deathclock_gender();
  	} else if (displaymode == SET_DEATHCLOCK_MODE) {
  		displaymode = SET_DEATHCLOCK_BMI;
		set_deathclock_bmi();
  	} else if (displaymode == SET_DEATHCLOCK_GENDER) {
  		displaymode = SET_DEATHCLOCK_MODE;
    268e:	fd e0       	ldi	r31, 0x0D	; 13
    2690:	ef 2e       	mov	r14, r31
		set_deathclock_dob();
  	} else if (displaymode == SET_DEATHCLOCK_DOB) {
  		displaymode = SET_DEATHCLOCK_GENDER;
		set_deathclock_gender();
  	} else if (displaymode == SET_DEATHCLOCK_MODE) {
  		displaymode = SET_DEATHCLOCK_BMI;
    2692:	ee e0       	ldi	r30, 0x0E	; 14
    2694:	fe 2e       	mov	r15, r30
  		just_pressed = 0;
  	if(displaymode == SHOW_TIME) {
  		displaymode = SET_DEATHCLOCK_DOB;
		set_deathclock_dob();
  	} else if (displaymode == SET_DEATHCLOCK_DOB) {
  		displaymode = SET_DEATHCLOCK_GENDER;
    2696:	0c e0       	ldi	r16, 0x0C	; 12
  load_etd();	//Only need to do this once at power on, and once if Death Clock settings are changed, and refresh if date/time is changed.
  do {
  	if(just_pressed & 1)
  		just_pressed = 0;
  	if(displaymode == SHOW_TIME) {
  		displaymode = SET_DEATHCLOCK_DOB;
    2698:	1b e0       	ldi	r17, 0x0B	; 11

void initanim_deathcfg(void) {

  load_etd();	//Only need to do this once at power on, and once if Death Clock settings are changed, and refresh if date/time is changed.
  do {
  	if(just_pressed & 1)
    269a:	80 91 0f 02 	lds	r24, 0x020F
    269e:	80 ff       	sbrs	r24, 0
    26a0:	02 c0       	rjmp	.+4      	; 0x26a6 <initanim_deathcfg+0x2a>
  		just_pressed = 0;
    26a2:	10 92 0f 02 	sts	0x020F, r1
  	if(displaymode == SHOW_TIME) {
    26a6:	80 91 3a 03 	lds	r24, 0x033A
    26aa:	88 23       	and	r24, r24
    26ac:	29 f4       	brne	.+10     	; 0x26b8 <initanim_deathcfg+0x3c>
  		displaymode = SET_DEATHCLOCK_DOB;
    26ae:	10 93 3a 03 	sts	0x033A, r17
		set_deathclock_dob();
    26b2:	0e 94 5e 11 	call	0x22bc	; 0x22bc <set_deathclock_dob>
    26b6:	23 c0       	rjmp	.+70     	; 0x26fe <initanim_deathcfg+0x82>
  	} else if (displaymode == SET_DEATHCLOCK_DOB) {
    26b8:	80 91 3a 03 	lds	r24, 0x033A
    26bc:	8b 30       	cpi	r24, 0x0B	; 11
    26be:	29 f4       	brne	.+10     	; 0x26ca <initanim_deathcfg+0x4e>
  		displaymode = SET_DEATHCLOCK_GENDER;
    26c0:	00 93 3a 03 	sts	0x033A, r16
		set_deathclock_gender();
    26c4:	0e 94 09 11 	call	0x2212	; 0x2212 <set_deathclock_gender>
    26c8:	1a c0       	rjmp	.+52     	; 0x26fe <initanim_deathcfg+0x82>
  	} else if (displaymode == SET_DEATHCLOCK_MODE) {
    26ca:	80 91 3a 03 	lds	r24, 0x033A
    26ce:	8d 30       	cpi	r24, 0x0D	; 13
    26d0:	29 f4       	brne	.+10     	; 0x26dc <initanim_deathcfg+0x60>
  		displaymode = SET_DEATHCLOCK_BMI;
    26d2:	f0 92 3a 03 	sts	0x033A, r15
		set_deathclock_bmi();
    26d6:	0e 94 f5 11 	call	0x23ea	; 0x23ea <set_deathclock_bmi>
    26da:	11 c0       	rjmp	.+34     	; 0x26fe <initanim_deathcfg+0x82>
  	} else if (displaymode == SET_DEATHCLOCK_GENDER) {
    26dc:	80 91 3a 03 	lds	r24, 0x033A
    26e0:	8c 30       	cpi	r24, 0x0C	; 12
    26e2:	29 f4       	brne	.+10     	; 0x26ee <initanim_deathcfg+0x72>
  		displaymode = SET_DEATHCLOCK_MODE;
    26e4:	e0 92 3a 03 	sts	0x033A, r14
		set_deathclock_mode();
    26e8:	0e 94 b4 10 	call	0x2168	; 0x2168 <set_deathclock_mode>
    26ec:	08 c0       	rjmp	.+16     	; 0x26fe <initanim_deathcfg+0x82>
  	} else if (displaymode == SET_DEATHCLOCK_BMI) {
    26ee:	80 91 3a 03 	lds	r24, 0x033A
    26f2:	8e 30       	cpi	r24, 0x0E	; 14
    26f4:	21 f4       	brne	.+8      	; 0x26fe <initanim_deathcfg+0x82>
  		displaymode = SET_DEATHCLOCK_SMOKER;
    26f6:	d0 92 3a 03 	sts	0x033A, r13
		set_deathclock_smoker();
    26fa:	0e 94 5f 10 	call	0x20be	; 0x20be <set_deathclock_smoker>
  	}
  } while ((displaymode != SHOW_TIME) && (displaymode != SET_DEATHCLOCK_SMOKER));
    26fe:	80 91 3a 03 	lds	r24, 0x033A
    2702:	88 23       	and	r24, r24
    2704:	21 f0       	breq	.+8      	; 0x270e <initanim_deathcfg+0x92>
    2706:	80 91 3a 03 	lds	r24, 0x033A
    270a:	8f 30       	cpi	r24, 0x0F	; 15
    270c:	31 f6       	brne	.-116    	; 0x269a <initanim_deathcfg+0x1e>
  just_pressed = 1;	//Exit, returning to the main cfg menu.
    270e:	81 e0       	ldi	r24, 0x01	; 1
    2710:	80 93 0f 02 	sts	0x020F, r24
  displaymode = CFG_MENU;
    2714:	82 e6       	ldi	r24, 0x62	; 98
    2716:	80 93 3a 03 	sts	0x033A, r24
  displaystyle=eeprom_read_byte(&EE_STYLE);
    271a:	87 e0       	ldi	r24, 0x07	; 7
    271c:	90 e0       	ldi	r25, 0x00	; 0
    271e:	0e 94 70 3b 	call	0x76e0	; 0x76e0 <__eerd_byte_m328p>
    2722:	80 93 31 03 	sts	0x0331, r24
  glcdClearScreen();
    2726:	0e 94 5a 2d 	call	0x5ab4	; 0x5ab4 <glcdClearScreen>
}
    272a:	1f 91       	pop	r17
    272c:	0f 91       	pop	r16
    272e:	ff 90       	pop	r15
    2730:	ef 90       	pop	r14
    2732:	df 90       	pop	r13
    2734:	08 95       	ret

00002736 <initanim_GPS>:
	                 "\x15" "GPS Time:        UTC\0"
	                 "\x01" "\0"
	                 "\x14" "Menu=Exit, Set=-, +";
	                 

void initanim_GPS(void){
    2736:	0f 93       	push	r16
    2738:	1f 93       	push	r17
    273a:	cf 93       	push	r28
    273c:	df 93       	push	r29
 uint8_t UpdateTZ =1;
 uint8_t i,j;
 timezone=(int8_t)eeprom_read_byte(&EE_TIMEZONE);
    273e:	89 e1       	ldi	r24, 0x19	; 25
    2740:	90 e0       	ldi	r25, 0x00	; 0
    2742:	0e 94 70 3b 	call	0x76e0	; 0x76e0 <__eerd_byte_m328p>
    2746:	80 93 24 02 	sts	0x0224, r24
 glcdClearScreen();
    274a:	0e 94 5a 2d 	call	0x5ab4	; 0x5ab4 <glcdClearScreen>
    274e:	00 e0       	ldi	r16, 0x00	; 0
    2750:	10 e0       	ldi	r17, 0x00	; 0
    2752:	04 c0       	rjmp	.+8      	; 0x275c <initanim_GPS+0x26>
 for(i=0,j=0;i<8;i++)
 {
 	 if(i) glcdSetAddress(MENU_INDENT, i);
    2754:	88 e0       	ldi	r24, 0x08	; 8
    2756:	60 2f       	mov	r22, r16
    2758:	0e 94 50 2d 	call	0x5aa0	; 0x5aa0 <glcdSetAddress>
     glcdPutStr_rom(&GPS_Text[j+1] ,NORMAL);
    275c:	c1 2f       	mov	r28, r17
    275e:	d0 e0       	ldi	r29, 0x00	; 0
    2760:	ce 01       	movw	r24, r28
    2762:	82 58       	subi	r24, 0x82	; 130
    2764:	9e 4f       	sbci	r25, 0xFE	; 254
    2766:	60 e0       	ldi	r22, 0x00	; 0
    2768:	0e 94 56 29 	call	0x52ac	; 0x52ac <glcdPutStr_rom>
     j+=pgm_read_byte(&GPS_Text[j])+1;
    276c:	c3 58       	subi	r28, 0x83	; 131
    276e:	de 4f       	sbci	r29, 0xFE	; 254
    2770:	fe 01       	movw	r30, r28
    2772:	84 91       	lpm	r24, Z+
    2774:	18 0f       	add	r17, r24
    2776:	1f 5f       	subi	r17, 0xFF	; 255
void initanim_GPS(void){
 uint8_t UpdateTZ =1;
 uint8_t i,j;
 timezone=(int8_t)eeprom_read_byte(&EE_TIMEZONE);
 glcdClearScreen();
 for(i=0,j=0;i<8;i++)
    2778:	0f 5f       	subi	r16, 0xFF	; 255
    277a:	08 30       	cpi	r16, 0x08	; 8
    277c:	59 f7       	brne	.-42     	; 0x2754 <initanim_GPS+0x1e>
    277e:	91 e0       	ldi	r25, 0x01	; 1
  if (just_pressed) {
   switch (just_pressed) {
    case 4: if (++timezone>56) {timezone=56;}
            UpdateTZ=1;
            break;
    case 2: if (--timezone<-48) {timezone=-48;}
    2780:	00 ed       	ldi	r16, 0xD0	; 208
 while (1) {
  // Must get a good test to enable gps
  // read buttons
  if (just_pressed) {
   switch (just_pressed) {
    case 4: if (++timezone>56) {timezone=56;}
    2782:	18 e3       	ldi	r17, 0x38	; 56
     j+=pgm_read_byte(&GPS_Text[j])+1;
 }
 while (1) {
  // Must get a good test to enable gps
  // read buttons
  if (just_pressed) {
    2784:	80 91 0f 02 	lds	r24, 0x020F
    2788:	88 23       	and	r24, r24
    278a:	a1 f1       	breq	.+104    	; 0x27f4 <initanim_GPS+0xbe>
   switch (just_pressed) {
    278c:	80 91 0f 02 	lds	r24, 0x020F
    2790:	82 30       	cpi	r24, 0x02	; 2
    2792:	89 f0       	breq	.+34     	; 0x27b6 <initanim_GPS+0x80>
    2794:	84 30       	cpi	r24, 0x04	; 4
    2796:	19 f0       	breq	.+6      	; 0x279e <initanim_GPS+0x68>
    2798:	81 30       	cpi	r24, 0x01	; 1
    279a:	51 f5       	brne	.+84     	; 0x27f0 <initanim_GPS+0xba>
    279c:	18 c0       	rjmp	.+48     	; 0x27ce <initanim_GPS+0x98>
    case 4: if (++timezone>56) {timezone=56;}
    279e:	80 91 24 02 	lds	r24, 0x0224
    27a2:	8f 5f       	subi	r24, 0xFF	; 255
    27a4:	80 93 24 02 	sts	0x0224, r24
    27a8:	80 91 24 02 	lds	r24, 0x0224
    27ac:	89 33       	cpi	r24, 0x39	; 57
    27ae:	fc f0       	brlt	.+62     	; 0x27ee <initanim_GPS+0xb8>
    27b0:	10 93 24 02 	sts	0x0224, r17
    27b4:	1c c0       	rjmp	.+56     	; 0x27ee <initanim_GPS+0xb8>
            UpdateTZ=1;
            break;
    case 2: if (--timezone<-48) {timezone=-48;}
    27b6:	80 91 24 02 	lds	r24, 0x0224
    27ba:	81 50       	subi	r24, 0x01	; 1
    27bc:	80 93 24 02 	sts	0x0224, r24
    27c0:	80 91 24 02 	lds	r24, 0x0224
    27c4:	80 3d       	cpi	r24, 0xD0	; 208
    27c6:	9c f4       	brge	.+38     	; 0x27ee <initanim_GPS+0xb8>
    27c8:	00 93 24 02 	sts	0x0224, r16
    27cc:	10 c0       	rjmp	.+32     	; 0x27ee <initanim_GPS+0xb8>
            UpdateTZ=1;
            break;
    case 1: displaystyle=eeprom_read_byte(&EE_STYLE); glcdClearScreen(); displaymode = CFG_MENU; return;
    27ce:	87 e0       	ldi	r24, 0x07	; 7
    27d0:	90 e0       	ldi	r25, 0x00	; 0
    27d2:	0e 94 70 3b 	call	0x76e0	; 0x76e0 <__eerd_byte_m328p>
    27d6:	80 93 31 03 	sts	0x0331, r24
    27da:	0e 94 5a 2d 	call	0x5ab4	; 0x5ab4 <glcdClearScreen>
    27de:	82 e6       	ldi	r24, 0x62	; 98
    27e0:	80 93 3a 03 	sts	0x033A, r24
  //GPSRead(1); //1 if debugging to screen on line 5
  //Hooked GPSRead elsewhere, that is quick enough for actual use.
  // display
  //_delay_ms(500);
 }
}
    27e4:	df 91       	pop	r29
    27e6:	cf 91       	pop	r28
    27e8:	1f 91       	pop	r17
    27ea:	0f 91       	pop	r16
    27ec:	08 95       	ret
            UpdateTZ=1;
            break;
    case 2: if (--timezone<-48) {timezone=-48;}
            UpdateTZ=1;
            break;
    case 1: displaystyle=eeprom_read_byte(&EE_STYLE); glcdClearScreen(); displaymode = CFG_MENU; return;
    27ee:	91 e0       	ldi	r25, 0x01	; 1
   }
   just_pressed=0;
    27f0:	10 92 0f 02 	sts	0x020F, r1
  }
  // display
  if (UpdateTZ) {
    27f4:	99 23       	and	r25, r25
    27f6:	31 f2       	breq	.-116    	; 0x2784 <initanim_GPS+0x4e>
   UpdateTZ=0;
   eeprom_write_byte(&EE_TIMEZONE, timezone);
    27f8:	60 91 24 02 	lds	r22, 0x0224
    27fc:	89 e1       	ldi	r24, 0x19	; 25
    27fe:	90 e0       	ldi	r25, 0x00	; 0
    2800:	0e 94 7e 3b 	call	0x76fc	; 0x76fc <__eewr_byte_m328p>
   glcdSetAddress(45+MENU_INDENT,2);
    2804:	85 e3       	ldi	r24, 0x35	; 53
    2806:	62 e0       	ldi	r22, 0x02	; 2
    2808:	0e 94 50 2d 	call	0x5aa0	; 0x5aa0 <glcdSetAddress>
   if(timezone<0)
    280c:	80 91 24 02 	lds	r24, 0x0224
    2810:	87 ff       	sbrs	r24, 7
    2812:	03 c0       	rjmp	.+6      	; 0x281a <initanim_GPS+0xe4>
   	   glcdPutStr("-",NORMAL);
    2814:	85 ee       	ldi	r24, 0xE5	; 229
    2816:	91 e0       	ldi	r25, 0x01	; 1
    2818:	02 c0       	rjmp	.+4      	; 0x281e <initanim_GPS+0xe8>
   else
   	   glcdPutStr("+",NORMAL);
    281a:	83 ee       	ldi	r24, 0xE3	; 227
    281c:	91 e0       	ldi	r25, 0x01	; 1
    281e:	60 e0       	ldi	r22, 0x00	; 0
    2820:	0e 94 56 29 	call	0x52ac	; 0x52ac <glcdPutStr_rom>
   //glcdPutStr((timezone<0 ? "-" : "+"),NORMAL);
   printnumber(TIMEZONEHOUR,NORMAL);
    2824:	80 91 24 02 	lds	r24, 0x0224
    2828:	99 27       	eor	r25, r25
    282a:	87 fd       	sbrc	r24, 7
    282c:	90 95       	com	r25
    282e:	97 ff       	sbrs	r25, 7
    2830:	03 c0       	rjmp	.+6      	; 0x2838 <initanim_GPS+0x102>
    2832:	90 95       	com	r25
    2834:	81 95       	neg	r24
    2836:	9f 4f       	sbci	r25, 0xFF	; 255
    2838:	95 95       	asr	r25
    283a:	87 95       	ror	r24
    283c:	95 95       	asr	r25
    283e:	87 95       	ror	r24
    2840:	60 e0       	ldi	r22, 0x00	; 0
    2842:	0e 94 04 2f 	call	0x5e08	; 0x5e08 <printnumber>
   glcdPutStr(":",NORMAL);
    2846:	81 ee       	ldi	r24, 0xE1	; 225
    2848:	91 e0       	ldi	r25, 0x01	; 1
    284a:	60 e0       	ldi	r22, 0x00	; 0
    284c:	0e 94 56 29 	call	0x52ac	; 0x52ac <glcdPutStr_rom>
   printnumber(TIMEZONEMIN,NORMAL);
    2850:	80 91 24 02 	lds	r24, 0x0224
    2854:	28 2f       	mov	r18, r24
    2856:	33 27       	eor	r19, r19
    2858:	27 fd       	sbrc	r18, 7
    285a:	30 95       	com	r19
    285c:	37 ff       	sbrs	r19, 7
    285e:	03 c0       	rjmp	.+6      	; 0x2866 <initanim_GPS+0x130>
    2860:	30 95       	com	r19
    2862:	21 95       	neg	r18
    2864:	3f 4f       	sbci	r19, 0xFF	; 255
    2866:	23 70       	andi	r18, 0x03	; 3
    2868:	30 70       	andi	r19, 0x00	; 0
    286a:	c9 01       	movw	r24, r18
    286c:	34 e0       	ldi	r19, 0x04	; 4
    286e:	88 0f       	add	r24, r24
    2870:	99 1f       	adc	r25, r25
    2872:	3a 95       	dec	r19
    2874:	e1 f7       	brne	.-8      	; 0x286e <initanim_GPS+0x138>
    2876:	82 1b       	sub	r24, r18
    2878:	60 e0       	ldi	r22, 0x00	; 0
    287a:	0e 94 04 2f 	call	0x5e08	; 0x5e08 <printnumber>
    287e:	90 e0       	ldi	r25, 0x00	; 0
    2880:	81 cf       	rjmp	.-254    	; 0x2784 <initanim_GPS+0x4e>

00002882 <sine>:
	 0x7d8a,  0x7e1d,  0x7e9d,  0x7f09,  0x7f62,  0x7fa7,  0x7fd8,  0x7ff6,
};

int16_t sine(int8_t angle)
{
	if(angle == -128) return 0;
    2882:	80 38       	cpi	r24, 0x80	; 128
    2884:	19 f4       	brne	.+6      	; 0x288c <sine+0xa>
    2886:	e0 e0       	ldi	r30, 0x00	; 0
    2888:	f0 e0       	ldi	r31, 0x00	; 0
    288a:	27 c0       	rjmp	.+78     	; 0x28da <sine+0x58>
	if(angle < 0) return -sine(-angle);
    288c:	87 ff       	sbrs	r24, 7
    288e:	08 c0       	rjmp	.+16     	; 0x28a0 <sine+0x1e>
    2890:	81 95       	neg	r24
    2892:	0e 94 41 14 	call	0x2882	; 0x2882 <sine>
    2896:	ee 27       	eor	r30, r30
    2898:	ff 27       	eor	r31, r31
    289a:	e8 1b       	sub	r30, r24
    289c:	f9 0b       	sbc	r31, r25
    289e:	1d c0       	rjmp	.+58     	; 0x28da <sine+0x58>
	if(angle == 64) return 32767;
    28a0:	80 34       	cpi	r24, 0x40	; 64
    28a2:	19 f4       	brne	.+6      	; 0x28aa <sine+0x28>
    28a4:	ef ef       	ldi	r30, 0xFF	; 255
    28a6:	ff e7       	ldi	r31, 0x7F	; 127
    28a8:	18 c0       	rjmp	.+48     	; 0x28da <sine+0x58>
    28aa:	a8 2f       	mov	r26, r24
    28ac:	bb 27       	eor	r27, r27
    28ae:	a7 fd       	sbrc	r26, 7
    28b0:	b0 95       	com	r27
	if(angle < 64) return sine_table[angle];
    28b2:	80 34       	cpi	r24, 0x40	; 64
    28b4:	3c f4       	brge	.+14     	; 0x28c4 <sine+0x42>
    28b6:	aa 0f       	add	r26, r26
    28b8:	bb 1f       	adc	r27, r27
    28ba:	a6 5f       	subi	r26, 0xF6	; 246
    28bc:	be 4f       	sbci	r27, 0xFE	; 254
    28be:	ed 91       	ld	r30, X+
    28c0:	fc 91       	ld	r31, X
    28c2:	0b c0       	rjmp	.+22     	; 0x28da <sine+0x58>
	return sine_table[63-(angle-65)];
    28c4:	e0 e8       	ldi	r30, 0x80	; 128
    28c6:	f0 e0       	ldi	r31, 0x00	; 0
    28c8:	ea 1b       	sub	r30, r26
    28ca:	fb 0b       	sbc	r31, r27
    28cc:	ee 0f       	add	r30, r30
    28ce:	ff 1f       	adc	r31, r31
    28d0:	e6 5f       	subi	r30, 0xF6	; 246
    28d2:	fe 4f       	sbci	r31, 0xFE	; 254
    28d4:	01 90       	ld	r0, Z+
    28d6:	f0 81       	ld	r31, Z
    28d8:	e0 2d       	mov	r30, r0
}
    28da:	cf 01       	movw	r24, r30
    28dc:	08 95       	ret

000028de <cosine>:

int16_t cosine(int8_t angle)
{
	return sine(angle+64);
    28de:	80 5c       	subi	r24, 0xC0	; 192
    28e0:	0e 94 41 14 	call	0x2882	; 0x2882 <sine>
}
    28e4:	08 95       	ret

000028e6 <move_paddle>:
  drawbigdigit(DISPLAY_M1_X_RAT, DISPLAY_TIME_Y_RAT, right_score%10, inverted);

  drawmidline(inverted);
}

void move_paddle(int32_t *paddle, uint32_t dest) {
    28e6:	1f 93       	push	r17
    28e8:	fc 01       	movw	r30, r24
	if(abs(*paddle - dest) < MAX_PADDLE_SPEED) {
    28ea:	80 81       	ld	r24, Z
    28ec:	91 81       	ldd	r25, Z+1	; 0x01
    28ee:	a2 81       	ldd	r26, Z+2	; 0x02
    28f0:	b3 81       	ldd	r27, Z+3	; 0x03
    28f2:	9c 01       	movw	r18, r24
    28f4:	24 1b       	sub	r18, r20
    28f6:	35 0b       	sbc	r19, r21
    28f8:	1e ef       	ldi	r17, 0xFE	; 254
    28fa:	2d 30       	cpi	r18, 0x0D	; 13
    28fc:	31 07       	cpc	r19, r17
    28fe:	44 f0       	brlt	.+16     	; 0x2910 <move_paddle+0x2a>
    2900:	24 5f       	subi	r18, 0xF4	; 244
    2902:	31 40       	sbci	r19, 0x01	; 1
    2904:	2c f4       	brge	.+10     	; 0x2910 <move_paddle+0x2a>
        *paddle = dest;
    2906:	40 83       	st	Z, r20
    2908:	51 83       	std	Z+1, r21	; 0x01
    290a:	62 83       	std	Z+2, r22	; 0x02
    290c:	73 83       	std	Z+3, r23	; 0x03
    290e:	12 c0       	rjmp	.+36     	; 0x2934 <move_paddle+0x4e>
      } else {
        if(*paddle > dest)
    2910:	48 17       	cp	r20, r24
    2912:	59 07       	cpc	r21, r25
    2914:	6a 07       	cpc	r22, r26
    2916:	7b 07       	cpc	r23, r27
    2918:	28 f4       	brcc	.+10     	; 0x2924 <move_paddle+0x3e>
          *paddle -= MAX_PADDLE_SPEED;
    291a:	84 5f       	subi	r24, 0xF4	; 244
    291c:	91 40       	sbci	r25, 0x01	; 1
    291e:	a0 40       	sbci	r26, 0x00	; 0
    2920:	b0 40       	sbci	r27, 0x00	; 0
    2922:	04 c0       	rjmp	.+8      	; 0x292c <move_paddle+0x46>
        else
          *paddle += MAX_PADDLE_SPEED;
    2924:	8c 50       	subi	r24, 0x0C	; 12
    2926:	9e 4f       	sbci	r25, 0xFE	; 254
    2928:	af 4f       	sbci	r26, 0xFF	; 255
    292a:	bf 4f       	sbci	r27, 0xFF	; 255
    292c:	80 83       	st	Z, r24
    292e:	91 83       	std	Z+1, r25	; 0x01
    2930:	a2 83       	std	Z+2, r26	; 0x02
    2932:	b3 83       	std	Z+3, r27	; 0x03
      }
}
    2934:	1f 91       	pop	r17
    2936:	08 95       	ret

00002938 <calculate_keepout>:
	return angle & 0xFF;
}


uint8_t calculate_keepout(int32_t theball_x, int32_t theball_y, int32_t theball_dx, int32_t theball_dy, uint32_t *keepout1, uint32_t *keepout2)
{
    2938:	2f 92       	push	r2
    293a:	3f 92       	push	r3
    293c:	4f 92       	push	r4
    293e:	5f 92       	push	r5
    2940:	6f 92       	push	r6
    2942:	7f 92       	push	r7
    2944:	8f 92       	push	r8
    2946:	9f 92       	push	r9
    2948:	af 92       	push	r10
    294a:	bf 92       	push	r11
    294c:	cf 92       	push	r12
    294e:	df 92       	push	r13
    2950:	ef 92       	push	r14
    2952:	ff 92       	push	r15
    2954:	0f 93       	push	r16
    2956:	1f 93       	push	r17
    2958:	df 93       	push	r29
    295a:	cf 93       	push	r28
    295c:	cd b7       	in	r28, 0x3d	; 61
    295e:	de b7       	in	r29, 0x3e	; 62
    2960:	64 97       	sbiw	r28, 0x14	; 20
    2962:	0f b6       	in	r0, 0x3f	; 63
    2964:	f8 94       	cli
    2966:	de bf       	out	0x3e, r29	; 62
    2968:	0f be       	out	0x3f, r0	; 63
    296a:	cd bf       	out	0x3d, r28	; 61
    296c:	27 01       	movw	r4, r14
    296e:	38 01       	movw	r6, r16
    2970:	14 01       	movw	r2, r8
    2972:	e6 0e       	add	r14, r22
    2974:	f7 1e       	adc	r15, r23
    2976:	08 1f       	adc	r16, r24
    2978:	19 1f       	adc	r17, r25
    297a:	e9 86       	std	Y+9, r14	; 0x09
    297c:	fa 86       	std	Y+10, r15	; 0x0a
    297e:	0b 87       	std	Y+11, r16	; 0x0b
    2980:	1c 87       	std	Y+12, r17	; 0x0c
    2982:	ee 24       	eor	r14, r14
    2984:	ff 24       	eor	r15, r15
    2986:	87 01       	movw	r16, r14
    2988:	e4 18       	sub	r14, r4
    298a:	f5 08       	sbc	r15, r5
    298c:	06 09       	sbc	r16, r6
    298e:	17 09       	sbc	r17, r7
    2990:	e9 82       	std	Y+1, r14	; 0x01
    2992:	fa 82       	std	Y+2, r15	; 0x02
    2994:	0b 83       	std	Y+3, r16	; 0x03
    2996:	1c 83       	std	Y+4, r17	; 0x04
    2998:	e4 e1       	ldi	r30, 0x14	; 20
    299a:	ee 2e       	mov	r14, r30
    299c:	e5 e0       	ldi	r30, 0x05	; 5
    299e:	fe 2e       	mov	r15, r30
    29a0:	01 2d       	mov	r16, r1
    29a2:	11 2d       	mov	r17, r1
    29a4:	e6 1a       	sub	r14, r22
    29a6:	f7 0a       	sbc	r15, r23
    29a8:	08 0b       	sbc	r16, r24
    29aa:	19 0b       	sbc	r17, r25
    29ac:	ed 82       	std	Y+5, r14	; 0x05
    29ae:	fe 82       	std	Y+6, r15	; 0x06
    29b0:	0f 83       	std	Y+7, r16	; 0x07
    29b2:	18 87       	std	Y+8, r17	; 0x08
    29b4:	79 01       	movw	r14, r18
    29b6:	8a 01       	movw	r16, r20
    29b8:	6d 87       	std	Y+13, r22	; 0x0d
    29ba:	7e 87       	std	Y+14, r23	; 0x0e
    29bc:	8f 87       	std	Y+15, r24	; 0x0f
    29be:	98 8b       	std	Y+16, r25	; 0x10
    29c0:	c5 01       	movw	r24, r10
    29c2:	d6 01       	movw	r26, r12
    29c4:	5c 01       	movw	r10, r24
    29c6:	6d 01       	movw	r12, r26
    29c8:	99 24       	eor	r9, r9
    29ca:	20 e0       	ldi	r18, 0x00	; 0
    29cc:	ba c0       	rjmp	.+372    	; 0x2b42 <calculate_keepout+0x20a>
  uint8_t tix = 0, collided = 0;

  while ((sim_ball_x < (RIGHTPADDLE_X_FIXED + PADDLE_W_FIXED)) && ((sim_ball_x + (ball_radius*2*FIXED_MATH)) > LEFTPADDLE_X_FIXED)) {
    int32_t old_sim_ball_x = sim_ball_x;
    int32_t old_sim_ball_y = sim_ball_y;
    sim_ball_y += sim_ball_dy;
    29ce:	b6 01       	movw	r22, r12
    29d0:	a5 01       	movw	r20, r10
    29d2:	4e 0d       	add	r20, r14
    29d4:	5f 1d       	adc	r21, r15
    29d6:	60 1f       	adc	r22, r16
    29d8:	71 1f       	adc	r23, r17
    29da:	49 8b       	std	Y+17, r20	; 0x11
    29dc:	5a 8b       	std	Y+18, r21	; 0x12
    29de:	6b 8b       	std	Y+19, r22	; 0x13
    29e0:	7c 8b       	std	Y+20, r23	; 0x14
    29e2:	6d 85       	ldd	r22, Y+13	; 0x0d
    29e4:	7e 85       	ldd	r23, Y+14	; 0x0e
    29e6:	8f 85       	ldd	r24, Y+15	; 0x0f
    29e8:	98 89       	ldd	r25, Y+16	; 0x10
    29ea:	64 0d       	add	r22, r4
    29ec:	75 1d       	adc	r23, r5
    29ee:	86 1d       	adc	r24, r6
    29f0:	97 1d       	adc	r25, r7
    29f2:	6d 87       	std	Y+13, r22	; 0x0d
    29f4:	7e 87       	std	Y+14, r23	; 0x0e
    29f6:	8f 87       	std	Y+15, r24	; 0x0f
    29f8:	98 8b       	std	Y+16, r25	; 0x10
    sim_ball_x += sim_ball_dx;
	
    if (sim_ball_y  > (SCREEN_H_FIXED - ball_radius*2*FIXED_MATH - BOTBAR_H_FIXED)) {
    29fa:	89 89       	ldd	r24, Y+17	; 0x11
    29fc:	9a 89       	ldd	r25, Y+18	; 0x12
    29fe:	ab 89       	ldd	r26, Y+19	; 0x13
    2a00:	bc 89       	ldd	r27, Y+20	; 0x14
    2a02:	89 5a       	subi	r24, 0xA9	; 169
    2a04:	96 41       	sbci	r25, 0x16	; 22
    2a06:	a0 40       	sbci	r26, 0x00	; 0
    2a08:	b0 40       	sbci	r27, 0x00	; 0
    2a0a:	8c f0       	brlt	.+34     	; 0x2a2e <calculate_keepout+0xf6>
      sim_ball_y = SCREEN_H_FIXED - ball_radius*2*FIXED_MATH - BOTBAR_H_FIXED;
      sim_ball_dy *= -1;
    2a0c:	d0 94       	com	r13
    2a0e:	c0 94       	com	r12
    2a10:	b0 94       	com	r11
    2a12:	a0 94       	com	r10
    2a14:	a1 1c       	adc	r10, r1
    2a16:	b1 1c       	adc	r11, r1
    2a18:	c1 1c       	adc	r12, r1
    2a1a:	d1 1c       	adc	r13, r1
    2a1c:	48 ea       	ldi	r20, 0xA8	; 168
    2a1e:	56 e1       	ldi	r21, 0x16	; 22
    2a20:	60 e0       	ldi	r22, 0x00	; 0
    2a22:	70 e0       	ldi	r23, 0x00	; 0
    2a24:	49 8b       	std	Y+17, r20	; 0x11
    2a26:	5a 8b       	std	Y+18, r21	; 0x12
    2a28:	6b 8b       	std	Y+19, r22	; 0x13
    2a2a:	7c 8b       	std	Y+20, r23	; 0x14
    2a2c:	19 c0       	rjmp	.+50     	; 0x2a60 <calculate_keepout+0x128>
    }
	
    if (sim_ball_y <  TOPBAR_H_FIXED) {
    2a2e:	69 89       	ldd	r22, Y+17	; 0x11
    2a30:	7a 89       	ldd	r23, Y+18	; 0x12
    2a32:	8b 89       	ldd	r24, Y+19	; 0x13
    2a34:	9c 89       	ldd	r25, Y+20	; 0x14
    2a36:	68 3c       	cpi	r22, 0xC8	; 200
    2a38:	71 05       	cpc	r23, r1
    2a3a:	81 05       	cpc	r24, r1
    2a3c:	91 05       	cpc	r25, r1
    2a3e:	84 f4       	brge	.+32     	; 0x2a60 <calculate_keepout+0x128>
      sim_ball_y = TOPBAR_H_FIXED;
      sim_ball_dy *= -1;
    2a40:	d0 94       	com	r13
    2a42:	c0 94       	com	r12
    2a44:	b0 94       	com	r11
    2a46:	a0 94       	com	r10
    2a48:	a1 1c       	adc	r10, r1
    2a4a:	b1 1c       	adc	r11, r1
    2a4c:	c1 1c       	adc	r12, r1
    2a4e:	d1 1c       	adc	r13, r1
    2a50:	88 ec       	ldi	r24, 0xC8	; 200
    2a52:	90 e0       	ldi	r25, 0x00	; 0
    2a54:	a0 e0       	ldi	r26, 0x00	; 0
    2a56:	b0 e0       	ldi	r27, 0x00	; 0
    2a58:	89 8b       	std	Y+17, r24	; 0x11
    2a5a:	9a 8b       	std	Y+18, r25	; 0x12
    2a5c:	ab 8b       	std	Y+19, r26	; 0x13
    2a5e:	bc 8b       	std	Y+20, r27	; 0x14
    }
    
    if (((sim_ball_x + ball_radius*2*FIXED_MATH) >= RIGHTPADDLE_X_FIXED) && 
    2a60:	49 85       	ldd	r20, Y+9	; 0x09
    2a62:	5a 85       	ldd	r21, Y+10	; 0x0a
    2a64:	6b 85       	ldd	r22, Y+11	; 0x0b
    2a66:	7c 85       	ldd	r23, Y+12	; 0x0c
    2a68:	4c 55       	subi	r20, 0x5C	; 92
    2a6a:	5b 42       	sbci	r21, 0x2B	; 43
    2a6c:	60 40       	sbci	r22, 0x00	; 0
    2a6e:	70 40       	sbci	r23, 0x00	; 0
    2a70:	b4 f0       	brlt	.+44     	; 0x2a9e <calculate_keepout+0x166>
	return angle & 0xFF;
}


uint8_t calculate_keepout(int32_t theball_x, int32_t theball_y, int32_t theball_dx, int32_t theball_dy, uint32_t *keepout1, uint32_t *keepout2)
{
    2a72:	8d 85       	ldd	r24, Y+13	; 0x0d
    2a74:	9e 85       	ldd	r25, Y+14	; 0x0e
    2a76:	af 85       	ldd	r26, Y+15	; 0x0f
    2a78:	b8 89       	ldd	r27, Y+16	; 0x10
    2a7a:	84 19       	sub	r24, r4
    2a7c:	95 09       	sbc	r25, r5
    2a7e:	a6 09       	sbc	r26, r6
    2a80:	b7 09       	sbc	r27, r7
    if (sim_ball_y <  TOPBAR_H_FIXED) {
      sim_ball_y = TOPBAR_H_FIXED;
      sim_ball_dy *= -1;
    }
    
    if (((sim_ball_x + ball_radius*2*FIXED_MATH) >= RIGHTPADDLE_X_FIXED) && 
    2a82:	8c 55       	subi	r24, 0x5C	; 92
    2a84:	9b 42       	sbci	r25, 0x2B	; 43
    2a86:	a0 40       	sbci	r26, 0x00	; 0
    2a88:	b0 40       	sbci	r27, 0x00	; 0
    2a8a:	4c f4       	brge	.+18     	; 0x2a9e <calculate_keepout+0x166>
      // now figure out what fraction that is of the motion and multiply that by the dy
      int32_t dy = (dx / sim_ball_dx) * sim_ball_dy;
	  
      //if(DEBUGGING){putstring("RCOLL@ ("); uart_putw_dec(old_sim_ball_x + dx); putstring(", "); uart_putw_dec(old_sim_ball_y + dy);}
      
      *keepout1 = (old_sim_ball_y + dy); 
    2a8c:	6d 81       	ldd	r22, Y+5	; 0x05
    2a8e:	7e 81       	ldd	r23, Y+6	; 0x06
    2a90:	8f 81       	ldd	r24, Y+7	; 0x07
    2a92:	98 85       	ldd	r25, Y+8	; 0x08
    2a94:	68 5b       	subi	r22, 0xB8	; 184
    2a96:	79 4d       	sbci	r23, 0xD9	; 217
    2a98:	8f 4f       	sbci	r24, 0xFF	; 255
    2a9a:	9f 4f       	sbci	r25, 0xFF	; 255
    2a9c:	1a c0       	rjmp	.+52     	; 0x2ad2 <calculate_keepout+0x19a>
      collided = 1;
    } else if ((sim_ball_x <= (LEFTPADDLE_X_FIXED + PADDLE_W_FIXED)) && 
    2a9e:	49 85       	ldd	r20, Y+9	; 0x09
    2aa0:	5a 85       	ldd	r21, Y+10	; 0x0a
    2aa2:	6b 85       	ldd	r22, Y+11	; 0x0b
    2aa4:	7c 85       	ldd	r23, Y+12	; 0x0c
    2aa6:	45 51       	subi	r20, 0x15	; 21
    2aa8:	55 40       	sbci	r21, 0x05	; 5
    2aaa:	60 40       	sbci	r22, 0x00	; 0
    2aac:	70 40       	sbci	r23, 0x00	; 0
    2aae:	24 f5       	brge	.+72     	; 0x2af8 <calculate_keepout+0x1c0>
	return angle & 0xFF;
}


uint8_t calculate_keepout(int32_t theball_x, int32_t theball_y, int32_t theball_dx, int32_t theball_dy, uint32_t *keepout1, uint32_t *keepout2)
{
    2ab0:	8d 85       	ldd	r24, Y+13	; 0x0d
    2ab2:	9e 85       	ldd	r25, Y+14	; 0x0e
    2ab4:	af 85       	ldd	r26, Y+15	; 0x0f
    2ab6:	b8 89       	ldd	r27, Y+16	; 0x10
    2ab8:	84 19       	sub	r24, r4
    2aba:	95 09       	sbc	r25, r5
    2abc:	a6 09       	sbc	r26, r6
    2abe:	b7 09       	sbc	r27, r7
	  
      //if(DEBUGGING){putstring("RCOLL@ ("); uart_putw_dec(old_sim_ball_x + dx); putstring(", "); uart_putw_dec(old_sim_ball_y + dy);}
      
      *keepout1 = (old_sim_ball_y + dy); 
      collided = 1;
    } else if ((sim_ball_x <= (LEFTPADDLE_X_FIXED + PADDLE_W_FIXED)) && 
    2ac0:	85 51       	subi	r24, 0x15	; 21
    2ac2:	95 40       	sbci	r25, 0x05	; 5
    2ac4:	a0 40       	sbci	r26, 0x00	; 0
    2ac6:	b0 40       	sbci	r27, 0x00	; 0
    2ac8:	bc f0       	brlt	.+46     	; 0x2af8 <calculate_keepout+0x1c0>
      // now figure out what fraction that is of the motion and multiply that by the dy
      int32_t dy = (dx / sim_ball_dx) * sim_ball_dy;
	  
      //if(DEBUGGING){putstring("LCOLL@ ("); uart_putw_dec(old_sim_ball_x + dx); putstring(", "); uart_putw_dec(old_sim_ball_y + dy);}
      
      *keepout1 = (old_sim_ball_y + dy); 
    2aca:	6d 81       	ldd	r22, Y+5	; 0x05
    2acc:	7e 81       	ldd	r23, Y+6	; 0x06
    2ace:	8f 81       	ldd	r24, Y+7	; 0x07
    2ad0:	98 85       	ldd	r25, Y+8	; 0x08
    2ad2:	a3 01       	movw	r20, r6
    2ad4:	92 01       	movw	r18, r4
    2ad6:	0e 94 4c 3b 	call	0x7698	; 0x7698 <__divmodsi4>
    2ada:	c6 01       	movw	r24, r12
    2adc:	b5 01       	movw	r22, r10
    2ade:	0e 94 d8 3a 	call	0x75b0	; 0x75b0 <__mulsi3>
    2ae2:	e6 0e       	add	r14, r22
    2ae4:	f7 1e       	adc	r15, r23
    2ae6:	08 1f       	adc	r16, r24
    2ae8:	19 1f       	adc	r17, r25
    2aea:	d1 01       	movw	r26, r2
    2aec:	ed 92       	st	X+, r14
    2aee:	fd 92       	st	X+, r15
    2af0:	0d 93       	st	X+, r16
    2af2:	1c 93       	st	X, r17
    2af4:	13 97       	sbiw	r26, 0x03	; 3
    2af6:	04 c0       	rjmp	.+8      	; 0x2b00 <calculate_keepout+0x1c8>
      collided = 1;
    }
    if (!collided) {
    2af8:	22 23       	and	r18, r18
    2afa:	11 f4       	brne	.+4      	; 0x2b00 <calculate_keepout+0x1c8>
      tix++;
    2afc:	93 94       	inc	r9
    2afe:	01 c0       	rjmp	.+2      	; 0x2b02 <calculate_keepout+0x1ca>
    2b00:	21 e0       	ldi	r18, 0x01	; 1
    2b02:	e9 84       	ldd	r14, Y+9	; 0x09
    2b04:	fa 84       	ldd	r15, Y+10	; 0x0a
    2b06:	0b 85       	ldd	r16, Y+11	; 0x0b
    2b08:	1c 85       	ldd	r17, Y+12	; 0x0c
    2b0a:	e4 0c       	add	r14, r4
    2b0c:	f5 1c       	adc	r15, r5
    2b0e:	06 1d       	adc	r16, r6
    2b10:	17 1d       	adc	r17, r7
    2b12:	e9 86       	std	Y+9, r14	; 0x09
    2b14:	fa 86       	std	Y+10, r15	; 0x0a
    2b16:	0b 87       	std	Y+11, r16	; 0x0b
    2b18:	1c 87       	std	Y+12, r17	; 0x0c
    2b1a:	4d 81       	ldd	r20, Y+5	; 0x05
    2b1c:	5e 81       	ldd	r21, Y+6	; 0x06
    2b1e:	6f 81       	ldd	r22, Y+7	; 0x07
    2b20:	78 85       	ldd	r23, Y+8	; 0x08
    2b22:	89 81       	ldd	r24, Y+1	; 0x01
    2b24:	9a 81       	ldd	r25, Y+2	; 0x02
    2b26:	ab 81       	ldd	r26, Y+3	; 0x03
    2b28:	bc 81       	ldd	r27, Y+4	; 0x04
    2b2a:	48 0f       	add	r20, r24
    2b2c:	59 1f       	adc	r21, r25
    2b2e:	6a 1f       	adc	r22, r26
    2b30:	7b 1f       	adc	r23, r27
    2b32:	4d 83       	std	Y+5, r20	; 0x05
    2b34:	5e 83       	std	Y+6, r21	; 0x06
    2b36:	6f 83       	std	Y+7, r22	; 0x07
    2b38:	78 87       	std	Y+8, r23	; 0x08
    2b3a:	e9 88       	ldd	r14, Y+17	; 0x11
    2b3c:	fa 88       	ldd	r15, Y+18	; 0x12
    2b3e:	0b 89       	ldd	r16, Y+19	; 0x13
    2b40:	1c 89       	ldd	r17, Y+20	; 0x14
  int32_t sim_ball_dy = theball_dy;
  int32_t sim_ball_dx = theball_dx;
  
  uint8_t tix = 0, collided = 0;

  while ((sim_ball_x < (RIGHTPADDLE_X_FIXED + PADDLE_W_FIXED)) && ((sim_ball_x + (ball_radius*2*FIXED_MATH)) > LEFTPADDLE_X_FIXED)) {
    2b42:	8d 85       	ldd	r24, Y+13	; 0x0d
    2b44:	9e 85       	ldd	r25, Y+14	; 0x0e
    2b46:	af 85       	ldd	r26, Y+15	; 0x0f
    2b48:	b8 89       	ldd	r27, Y+16	; 0x10
    2b4a:	89 55       	subi	r24, 0x59	; 89
    2b4c:	92 40       	sbci	r25, 0x02	; 2
    2b4e:	a0 40       	sbci	r26, 0x00	; 0
    2b50:	b0 40       	sbci	r27, 0x00	; 0
    2b52:	8f 5b       	subi	r24, 0xBF	; 191
    2b54:	9b 42       	sbci	r25, 0x2B	; 43
    2b56:	a0 40       	sbci	r26, 0x00	; 0
    2b58:	b0 40       	sbci	r27, 0x00	; 0
    2b5a:	08 f4       	brcc	.+2      	; 0x2b5e <calculate_keepout+0x226>
    2b5c:	38 cf       	rjmp	.-400    	; 0x29ce <calculate_keepout+0x96>
      tix++;
    }
    
    //if(DEBUGGING){putstring("\tSIMball @ ["); uart_putw_dec(sim_ball_x); putstring(", "); uart_putw_dec(sim_ball_y); putstring_nl("]");}
  }
  *keepout2 = sim_ball_y / FIXED_MATH;
    2b5e:	c8 01       	movw	r24, r16
    2b60:	b7 01       	movw	r22, r14
    2b62:	24 e6       	ldi	r18, 0x64	; 100
    2b64:	30 e0       	ldi	r19, 0x00	; 0
    2b66:	40 e0       	ldi	r20, 0x00	; 0
    2b68:	50 e0       	ldi	r21, 0x00	; 0
    2b6a:	0e 94 4c 3b 	call	0x7698	; 0x7698 <__divmodsi4>
    2b6e:	e9 a5       	ldd	r30, Y+41	; 0x29
    2b70:	fa a5       	ldd	r31, Y+42	; 0x2a
    2b72:	20 83       	st	Z, r18
    2b74:	31 83       	std	Z+1, r19	; 0x01
    2b76:	42 83       	std	Z+2, r20	; 0x02
    2b78:	53 83       	std	Z+3, r21	; 0x03

  return tix;
}
    2b7a:	89 2d       	mov	r24, r9
    2b7c:	64 96       	adiw	r28, 0x14	; 20
    2b7e:	0f b6       	in	r0, 0x3f	; 63
    2b80:	f8 94       	cli
    2b82:	de bf       	out	0x3e, r29	; 62
    2b84:	0f be       	out	0x3f, r0	; 63
    2b86:	cd bf       	out	0x3d, r28	; 61
    2b88:	cf 91       	pop	r28
    2b8a:	df 91       	pop	r29
    2b8c:	1f 91       	pop	r17
    2b8e:	0f 91       	pop	r16
    2b90:	ff 90       	pop	r15
    2b92:	ef 90       	pop	r14
    2b94:	df 90       	pop	r13
    2b96:	cf 90       	pop	r12
    2b98:	bf 90       	pop	r11
    2b9a:	af 90       	pop	r10
    2b9c:	9f 90       	pop	r9
    2b9e:	8f 90       	pop	r8
    2ba0:	7f 90       	pop	r7
    2ba2:	6f 90       	pop	r6
    2ba4:	5f 90       	pop	r5
    2ba6:	4f 90       	pop	r4
    2ba8:	3f 90       	pop	r3
    2baa:	2f 90       	pop	r2
    2bac:	08 95       	ret

00002bae <random_angle>:
    }
  }
}
#endif

int8_t random_angle(void) {
    2bae:	ef 92       	push	r14
    2bb0:	ff 92       	push	r15
    2bb2:	0f 93       	push	r16
    2bb4:	1f 93       	push	r17
	uint32_t angle = crand(0);
    2bb6:	80 e0       	ldi	r24, 0x00	; 0
    2bb8:	0e 94 14 39 	call	0x7228	; 0x7228 <crand>
    2bbc:	a0 e0       	ldi	r26, 0x00	; 0
    2bbe:	b0 e0       	ldi	r27, 0x00	; 0
	angle *= (64 - MIN_BALL_ANGLE*2);
    2bc0:	bc 01       	movw	r22, r24
    2bc2:	cd 01       	movw	r24, r26
    2bc4:	22 e2       	ldi	r18, 0x22	; 34
    2bc6:	30 e0       	ldi	r19, 0x00	; 0
    2bc8:	40 e0       	ldi	r20, 0x00	; 0
    2bca:	50 e0       	ldi	r21, 0x00	; 0
    2bcc:	0e 94 d8 3a 	call	0x75b0	; 0x75b0 <__mulsi3>
	angle /= RAND_MAX;
    2bd0:	2f ef       	ldi	r18, 0xFF	; 255
    2bd2:	3f e7       	ldi	r19, 0x7F	; 127
    2bd4:	40 e0       	ldi	r20, 0x00	; 0
    2bd6:	50 e0       	ldi	r21, 0x00	; 0
    2bd8:	0e 94 2a 3b 	call	0x7654	; 0x7654 <__udivmodsi4>
    2bdc:	79 01       	movw	r14, r18
    2bde:	8a 01       	movw	r16, r20
	angle += MIN_BALL_ANGLE;
	uint8_t quadrant = (crand(1)) % 4;
    2be0:	81 e0       	ldi	r24, 0x01	; 1
    2be2:	0e 94 14 39 	call	0x7228	; 0x7228 <crand>

int8_t random_angle(void) {
	uint32_t angle = crand(0);
	angle *= (64 - MIN_BALL_ANGLE*2);
	angle /= RAND_MAX;
	angle += MIN_BALL_ANGLE;
    2be6:	2f e0       	ldi	r18, 0x0F	; 15
    2be8:	30 e0       	ldi	r19, 0x00	; 0
    2bea:	40 e0       	ldi	r20, 0x00	; 0
    2bec:	50 e0       	ldi	r21, 0x00	; 0
    2bee:	e2 0e       	add	r14, r18
    2bf0:	f3 1e       	adc	r15, r19
    2bf2:	04 1f       	adc	r16, r20
    2bf4:	15 1f       	adc	r17, r21
    2bf6:	82 95       	swap	r24
    2bf8:	88 0f       	add	r24, r24
    2bfa:	88 0f       	add	r24, r24
    2bfc:	80 7c       	andi	r24, 0xC0	; 192
	uint8_t quadrant = (crand(1)) % 4;
	angle += quadrant*64;
	return angle & 0xFF;
}
    2bfe:	8e 0d       	add	r24, r14
    2c00:	1f 91       	pop	r17
    2c02:	0f 91       	pop	r16
    2c04:	ff 90       	pop	r15
    2c06:	ef 90       	pop	r14
    2c08:	08 95       	ret

00002c0a <calculate_dest_pos>:
        else
          *paddle += MAX_PADDLE_SPEED;
      }
}

uint8_t calculate_dest_pos(uint32_t *left, uint32_t *right, uint32_t *dest, uint8_t dir) {
    2c0a:	2f 92       	push	r2
    2c0c:	3f 92       	push	r3
    2c0e:	4f 92       	push	r4
    2c10:	5f 92       	push	r5
    2c12:	6f 92       	push	r6
    2c14:	7f 92       	push	r7
    2c16:	8f 92       	push	r8
    2c18:	9f 92       	push	r9
    2c1a:	af 92       	push	r10
    2c1c:	bf 92       	push	r11
    2c1e:	cf 92       	push	r12
    2c20:	df 92       	push	r13
    2c22:	ef 92       	push	r14
    2c24:	ff 92       	push	r15
    2c26:	0f 93       	push	r16
    2c28:	1f 93       	push	r17
    2c2a:	cf 93       	push	r28
    2c2c:	df 93       	push	r29
    2c2e:	1c 01       	movw	r2, r24
    2c30:	eb 01       	movw	r28, r22
    2c32:	2a 01       	movw	r4, r20
    2c34:	60 91 0b 03 	lds	r22, 0x030B
    2c38:	70 91 0c 03 	lds	r23, 0x030C
    2c3c:	80 91 0d 03 	lds	r24, 0x030D
    2c40:	90 91 0e 03 	lds	r25, 0x030E
    2c44:	e0 90 f9 02 	lds	r14, 0x02F9
    2c48:	f0 90 fa 02 	lds	r15, 0x02FA
    2c4c:	00 91 fb 02 	lds	r16, 0x02FB
    2c50:	10 91 fc 02 	lds	r17, 0x02FC
    2c54:	a0 90 ff 02 	lds	r10, 0x02FF
    2c58:	b0 90 00 03 	lds	r11, 0x0300
    2c5c:	c0 90 01 03 	lds	r12, 0x0301
    2c60:	d0 90 02 03 	lds	r13, 0x0302
    2c64:	60 90 f5 02 	lds	r6, 0x02F5
    2c68:	70 90 f6 02 	lds	r7, 0x02F6
    2c6c:	80 90 f7 02 	lds	r8, 0x02F7
    2c70:	90 90 f8 02 	lds	r9, 0x02F8
  uint8_t miss=0;
  if(dir) //Ball moving to the left
    2c74:	22 23       	and	r18, r18
    2c76:	f9 f0       	breq	.+62     	; 0x2cb6 <calculate_dest_pos+0xac>
  {
  	ticksremaining = calculate_keepout(ball_x, ball_y, ball_dx, ball_dy, left, right);
    2c78:	00 d0       	rcall	.+0      	; 0x2c7a <calculate_dest_pos+0x70>
    2c7a:	ed b7       	in	r30, 0x3d	; 61
    2c7c:	fe b7       	in	r31, 0x3e	; 62
    2c7e:	d2 83       	std	Z+2, r29	; 0x02
    2c80:	c1 83       	std	Z+1, r28	; 0x01
    2c82:	a8 01       	movw	r20, r16
    2c84:	97 01       	movw	r18, r14
    2c86:	86 01       	movw	r16, r12
    2c88:	75 01       	movw	r14, r10
    2c8a:	64 01       	movw	r12, r8
    2c8c:	53 01       	movw	r10, r6
    2c8e:	41 01       	movw	r8, r2
    2c90:	0e 94 9c 14 	call	0x2938	; 0x2938 <calculate_keepout>
    2c94:	80 93 fd 02 	sts	0x02FD, r24
    2c98:	10 92 fe 02 	sts	0x02FE, r1
  	*dest = *left;
    2c9c:	f1 01       	movw	r30, r2
    2c9e:	80 81       	ld	r24, Z
    2ca0:	91 81       	ldd	r25, Z+1	; 0x01
    2ca2:	a2 81       	ldd	r26, Z+2	; 0x02
    2ca4:	b3 81       	ldd	r27, Z+3	; 0x03
    2ca6:	f2 01       	movw	r30, r4
    2ca8:	80 83       	st	Z, r24
    2caa:	91 83       	std	Z+1, r25	; 0x01
    2cac:	a2 83       	std	Z+2, r26	; 0x02
    2cae:	b3 83       	std	Z+3, r27	; 0x03
  	if(minute_changed) miss=1;
    2cb0:	80 91 1e 02 	lds	r24, 0x021E
    2cb4:	1d c0       	rjmp	.+58     	; 0x2cf0 <calculate_dest_pos+0xe6>
  }
  else
  {
  	ticksremaining = calculate_keepout(ball_x, ball_y, ball_dx, ball_dy, right, left);
    2cb6:	00 d0       	rcall	.+0      	; 0x2cb8 <calculate_dest_pos+0xae>
    2cb8:	ed b7       	in	r30, 0x3d	; 61
    2cba:	fe b7       	in	r31, 0x3e	; 62
    2cbc:	32 82       	std	Z+2, r3	; 0x02
    2cbe:	21 82       	std	Z+1, r2	; 0x01
    2cc0:	a8 01       	movw	r20, r16
    2cc2:	97 01       	movw	r18, r14
    2cc4:	86 01       	movw	r16, r12
    2cc6:	75 01       	movw	r14, r10
    2cc8:	64 01       	movw	r12, r8
    2cca:	53 01       	movw	r10, r6
    2ccc:	4e 01       	movw	r8, r28
    2cce:	0e 94 9c 14 	call	0x2938	; 0x2938 <calculate_keepout>
    2cd2:	80 93 fd 02 	sts	0x02FD, r24
    2cd6:	10 92 fe 02 	sts	0x02FE, r1
  	*dest = *right;
    2cda:	88 81       	ld	r24, Y
    2cdc:	99 81       	ldd	r25, Y+1	; 0x01
    2cde:	aa 81       	ldd	r26, Y+2	; 0x02
    2ce0:	bb 81       	ldd	r27, Y+3	; 0x03
    2ce2:	f2 01       	movw	r30, r4
    2ce4:	80 83       	st	Z, r24
    2ce6:	91 83       	std	Z+1, r25	; 0x01
    2ce8:	a2 83       	std	Z+2, r26	; 0x02
    2cea:	b3 83       	std	Z+3, r27	; 0x03
  	if(hour_changed) miss=1;
    2cec:	80 91 1f 02 	lds	r24, 0x021F
    2cf0:	0f 90       	pop	r0
    2cf2:	0f 90       	pop	r0
    2cf4:	88 23       	and	r24, r24
    2cf6:	11 f0       	breq	.+4      	; 0x2cfc <calculate_dest_pos+0xf2>
    2cf8:	21 e0       	ldi	r18, 0x01	; 1
    2cfa:	01 c0       	rjmp	.+2      	; 0x2cfe <calculate_dest_pos+0xf4>
    2cfc:	20 e0       	ldi	r18, 0x00	; 0
  }
  *dest -= (PADDLE_H_FIXED / 3);
    2cfe:	f2 01       	movw	r30, r4
    2d00:	80 81       	ld	r24, Z
    2d02:	91 81       	ldd	r25, Z+1	; 0x01
    2d04:	a2 81       	ldd	r26, Z+2	; 0x02
    2d06:	b3 81       	ldd	r27, Z+3	; 0x03
    2d08:	30 e7       	ldi	r19, 0x70	; 112
    2d0a:	e3 2e       	mov	r14, r19
    2d0c:	3e ef       	ldi	r19, 0xFE	; 254
    2d0e:	f3 2e       	mov	r15, r19
    2d10:	3f ef       	ldi	r19, 0xFF	; 255
    2d12:	03 2f       	mov	r16, r19
    2d14:	3f ef       	ldi	r19, 0xFF	; 255
    2d16:	13 2f       	mov	r17, r19
    2d18:	e8 0e       	add	r14, r24
    2d1a:	f9 1e       	adc	r15, r25
    2d1c:	0a 1f       	adc	r16, r26
    2d1e:	1b 1f       	adc	r17, r27
    2d20:	e0 82       	st	Z, r14
    2d22:	f1 82       	std	Z+1, r15	; 0x01
    2d24:	02 83       	std	Z+2, r16	; 0x02
    2d26:	13 83       	std	Z+3, r17	; 0x03
    if(miss)
    2d28:	22 23       	and	r18, r18
    2d2a:	99 f1       	breq	.+102    	; 0x2d92 <calculate_dest_pos+0x188>
    {
      if(*dest < (SCREEN_H_FIXED/3)) {
    2d2c:	f5 e5       	ldi	r31, 0x55	; 85
    2d2e:	ef 16       	cp	r14, r31
    2d30:	f8 e0       	ldi	r31, 0x08	; 8
    2d32:	ff 06       	cpc	r15, r31
    2d34:	f0 e0       	ldi	r31, 0x00	; 0
    2d36:	0f 07       	cpc	r16, r31
    2d38:	f0 e0       	ldi	r31, 0x00	; 0
    2d3a:	1f 07       	cpc	r17, r31
    2d3c:	28 f4       	brcc	.+10     	; 0x2d48 <calculate_dest_pos+0x13e>
      	*dest += (PADDLE_H_FIXED*2);
    2d3e:	80 53       	subi	r24, 0x30	; 48
    2d40:	98 4f       	sbci	r25, 0xF8	; 248
    2d42:	af 4f       	sbci	r26, 0xFF	; 255
    2d44:	bf 4f       	sbci	r27, 0xFF	; 255
    2d46:	20 c0       	rjmp	.+64     	; 0x2d88 <calculate_dest_pos+0x17e>
      }
      else if (*dest > ((SCREEN_H_FIXED/3)*2)) {
    2d48:	fb ea       	ldi	r31, 0xAB	; 171
    2d4a:	ef 16       	cp	r14, r31
    2d4c:	f0 e1       	ldi	r31, 0x10	; 16
    2d4e:	ff 06       	cpc	r15, r31
    2d50:	f0 e0       	ldi	r31, 0x00	; 0
    2d52:	0f 07       	cpc	r16, r31
    2d54:	f0 e0       	ldi	r31, 0x00	; 0
    2d56:	1f 07       	cpc	r17, r31
    2d58:	28 f0       	brcs	.+10     	; 0x2d64 <calculate_dest_pos+0x15a>
      	*dest -= (PADDLE_H_FIXED*2);
    2d5a:	80 5f       	subi	r24, 0xF0	; 240
    2d5c:	9a 40       	sbci	r25, 0x0A	; 10
    2d5e:	a0 40       	sbci	r26, 0x00	; 0
    2d60:	b0 40       	sbci	r27, 0x00	; 0
    2d62:	12 c0       	rjmp	.+36     	; 0x2d88 <calculate_dest_pos+0x17e>
      }
      else {
      	//*dest = crand(2)?0:SCREEN_H_FIXED;
      	*dest += crand(2) ? (PADDLE_H_FIXED*2) : -(PADDLE_H_FIXED*2);
    2d64:	82 e0       	ldi	r24, 0x02	; 2
    2d66:	0e 94 14 39 	call	0x7228	; 0x7228 <crand>
    2d6a:	89 2b       	or	r24, r25
    2d6c:	29 f4       	brne	.+10     	; 0x2d78 <calculate_dest_pos+0x16e>
    2d6e:	80 ea       	ldi	r24, 0xA0	; 160
    2d70:	96 ef       	ldi	r25, 0xF6	; 246
    2d72:	af ef       	ldi	r26, 0xFF	; 255
    2d74:	bf ef       	ldi	r27, 0xFF	; 255
    2d76:	04 c0       	rjmp	.+8      	; 0x2d80 <calculate_dest_pos+0x176>
    2d78:	80 e6       	ldi	r24, 0x60	; 96
    2d7a:	99 e0       	ldi	r25, 0x09	; 9
    2d7c:	a0 e0       	ldi	r26, 0x00	; 0
    2d7e:	b0 e0       	ldi	r27, 0x00	; 0
    2d80:	8e 0d       	add	r24, r14
    2d82:	9f 1d       	adc	r25, r15
    2d84:	a0 1f       	adc	r26, r16
    2d86:	b1 1f       	adc	r27, r17
    2d88:	f2 01       	movw	r30, r4
    2d8a:	80 83       	st	Z, r24
    2d8c:	91 83       	std	Z+1, r25	; 0x01
    2d8e:	a2 83       	std	Z+2, r26	; 0x02
    2d90:	b3 83       	std	Z+3, r27	; 0x03
      }
    }
    return ticksremaining;
}
    2d92:	80 91 fd 02 	lds	r24, 0x02FD
    2d96:	df 91       	pop	r29
    2d98:	cf 91       	pop	r28
    2d9a:	1f 91       	pop	r17
    2d9c:	0f 91       	pop	r16
    2d9e:	ff 90       	pop	r15
    2da0:	ef 90       	pop	r14
    2da2:	df 90       	pop	r13
    2da4:	cf 90       	pop	r12
    2da6:	bf 90       	pop	r11
    2da8:	af 90       	pop	r10
    2daa:	9f 90       	pop	r9
    2dac:	8f 90       	pop	r8
    2dae:	7f 90       	pop	r7
    2db0:	6f 90       	pop	r6
    2db2:	5f 90       	pop	r5
    2db4:	4f 90       	pop	r4
    2db6:	3f 90       	pop	r3
    2db8:	2f 90       	pop	r2
    2dba:	08 95       	ret

00002dbc <check_ball_digit_collision>:
	DISPLAY_DOW3_X
};
#endif

void check_ball_digit_collision(uint8_t redraw_digits, uint8_t digit_x, uint8_t digit, uint8_t inverted)
{
    2dbc:	af 92       	push	r10
    2dbe:	bf 92       	push	r11
    2dc0:	cf 92       	push	r12
    2dc2:	df 92       	push	r13
    2dc4:	ef 92       	push	r14
    2dc6:	ff 92       	push	r15
    2dc8:	0f 93       	push	r16
    2dca:	1f 93       	push	r17
    2dcc:	f6 2e       	mov	r15, r22
    2dce:	d4 2e       	mov	r13, r20
    2dd0:	b2 2e       	mov	r11, r18
	if (redraw_digits || intersectrect(oldball_x/FIXED_MATH, oldball_y/FIXED_MATH, ball_radius*2, ball_radius*2,
    2dd2:	88 23       	and	r24, r24
    2dd4:	61 f5       	brne	.+88     	; 0x2e2e <check_ball_digit_collision+0x72>
    2dd6:	60 91 07 03 	lds	r22, 0x0307
    2dda:	70 91 08 03 	lds	r23, 0x0308
    2dde:	80 91 09 03 	lds	r24, 0x0309
    2de2:	90 91 0a 03 	lds	r25, 0x030A
    2de6:	24 e6       	ldi	r18, 0x64	; 100
    2de8:	30 e0       	ldi	r19, 0x00	; 0
    2dea:	40 e0       	ldi	r20, 0x00	; 0
    2dec:	50 e0       	ldi	r21, 0x00	; 0
    2dee:	0e 94 4c 3b 	call	0x7698	; 0x7698 <__divmodsi4>
    2df2:	12 2f       	mov	r17, r18
    2df4:	60 91 17 03 	lds	r22, 0x0317
    2df8:	70 91 18 03 	lds	r23, 0x0318
    2dfc:	80 91 19 03 	lds	r24, 0x0319
    2e00:	90 91 1a 03 	lds	r25, 0x031A
    2e04:	24 e6       	ldi	r18, 0x64	; 100
    2e06:	30 e0       	ldi	r19, 0x00	; 0
    2e08:	40 e0       	ldi	r20, 0x00	; 0
    2e0a:	50 e0       	ldi	r21, 0x00	; 0
    2e0c:	0e 94 4c 3b 	call	0x7698	; 0x7698 <__divmodsi4>
    2e10:	81 2f       	mov	r24, r17
    2e12:	62 2f       	mov	r22, r18
    2e14:	44 e0       	ldi	r20, 0x04	; 4
    2e16:	24 e0       	ldi	r18, 0x04	; 4
    2e18:	0f 2d       	mov	r16, r15
    2e1a:	e4 e0       	ldi	r30, 0x04	; 4
    2e1c:	ee 2e       	mov	r14, r30
    2e1e:	7a e0       	ldi	r23, 0x0A	; 10
    2e20:	c7 2e       	mov	r12, r23
    2e22:	50 e1       	ldi	r21, 0x10	; 16
    2e24:	a5 2e       	mov	r10, r21
    2e26:	0e 94 66 39 	call	0x72cc	; 0x72cc <intersectrect>
    2e2a:	88 23       	and	r24, r24
    2e2c:	31 f0       	breq	.+12     	; 0x2e3a <check_ball_digit_collision+0x7e>
#ifdef OPTION_DOW_DATELONG
        if(digit > 10)
          drawbigfont(digit_x, DISPLAY_TIME_Y_RAT, digit, inverted);
        else
#endif
	      drawbigdigit(digit_x, DISPLAY_TIME_Y_RAT, digit, inverted);
    2e2e:	8f 2d       	mov	r24, r15
    2e30:	64 e0       	ldi	r22, 0x04	; 4
    2e32:	4d 2d       	mov	r20, r13
    2e34:	2b 2d       	mov	r18, r11
    2e36:	0e 94 71 3a 	call	0x74e2	; 0x74e2 <drawbigdigit>
      }
}
    2e3a:	1f 91       	pop	r17
    2e3c:	0f 91       	pop	r16
    2e3e:	ff 90       	pop	r15
    2e40:	ef 90       	pop	r14
    2e42:	df 90       	pop	r13
    2e44:	cf 90       	pop	r12
    2e46:	bf 90       	pop	r11
    2e48:	af 90       	pop	r10
    2e4a:	08 95       	ret

00002e4c <draw_score_rat>:

void draw_score_rat(uint8_t redraw_digits, uint8_t inverted) {
    2e4c:	0f 93       	push	r16
    2e4e:	1f 93       	push	r17
    2e50:	18 2f       	mov	r17, r24
    2e52:	06 2f       	mov	r16, r22
		    }
			glcdFillRectangle(ball_x/FIXED_MATH, ball_y/FIXED_MATH, ball_radius*2, ball_radius*2, ! inverted);
			prev_mode = SCORE_MODE_TIME;
	    }
#endif
	check_ball_digit_collision(redraw_digits, DISPLAY_H10_X_RAT,left_score/10,inverted);
    2e54:	80 91 d6 02 	lds	r24, 0x02D6
    2e58:	6a e0       	ldi	r22, 0x0A	; 10
    2e5a:	0e 94 f7 3a 	call	0x75ee	; 0x75ee <__udivmodqi4>
    2e5e:	48 2f       	mov	r20, r24
    2e60:	81 2f       	mov	r24, r17
    2e62:	6e e1       	ldi	r22, 0x1E	; 30
    2e64:	20 2f       	mov	r18, r16
    2e66:	0e 94 de 16 	call	0x2dbc	; 0x2dbc <check_ball_digit_collision>
	check_ball_digit_collision(redraw_digits, DISPLAY_H1_X_RAT,left_score%10,inverted);
    2e6a:	80 91 d6 02 	lds	r24, 0x02D6
    2e6e:	6a e0       	ldi	r22, 0x0A	; 10
    2e70:	0e 94 f7 3a 	call	0x75ee	; 0x75ee <__udivmodqi4>
    2e74:	81 2f       	mov	r24, r17
    2e76:	6d e2       	ldi	r22, 0x2D	; 45
    2e78:	49 2f       	mov	r20, r25
    2e7a:	20 2f       	mov	r18, r16
    2e7c:	0e 94 de 16 	call	0x2dbc	; 0x2dbc <check_ball_digit_collision>
	check_ball_digit_collision(redraw_digits, DISPLAY_M10_X_RAT,right_score/10,inverted);
    2e80:	80 91 da 02 	lds	r24, 0x02DA
    2e84:	6a e0       	ldi	r22, 0x0A	; 10
    2e86:	0e 94 f7 3a 	call	0x75ee	; 0x75ee <__udivmodqi4>
    2e8a:	48 2f       	mov	r20, r24
    2e8c:	81 2f       	mov	r24, r17
    2e8e:	66 e4       	ldi	r22, 0x46	; 70
    2e90:	20 2f       	mov	r18, r16
    2e92:	0e 94 de 16 	call	0x2dbc	; 0x2dbc <check_ball_digit_collision>
	check_ball_digit_collision(redraw_digits, DISPLAY_M1_X_RAT,right_score%10,inverted);
    2e96:	80 91 da 02 	lds	r24, 0x02DA
    2e9a:	6a e0       	ldi	r22, 0x0A	; 10
    2e9c:	0e 94 f7 3a 	call	0x75ee	; 0x75ee <__udivmodqi4>
    2ea0:	81 2f       	mov	r24, r17
    2ea2:	65 e5       	ldi	r22, 0x55	; 85
    2ea4:	49 2f       	mov	r20, r25
    2ea6:	20 2f       	mov	r18, r16
    2ea8:	0e 94 de 16 	call	0x2dbc	; 0x2dbc <check_ball_digit_collision>
#ifdef OPTION_DOW_DATELONG
  }
#endif
}
    2eac:	1f 91       	pop	r17
    2eae:	0f 91       	pop	r16
    2eb0:	08 95       	ret

00002eb2 <drawmidline>:
    //ticksremaining = calculate_dest_pos(&left_dest, &right_dest, &dest_paddle_pos, 0);
  }
  
}

void drawmidline(uint8_t inverted) {
    2eb2:	0f 93       	push	r16
    2eb4:	1f 93       	push	r17
    2eb6:	08 2f       	mov	r16, r24
    2eb8:	10 e0       	ldi	r17, 0x00	; 0
  uint8_t i;
  for (i=0; i < (SCREEN_H/8 - 1); i++) { 
    glcdSetAddress((SCREEN_W-MIDLINE_W)/2, i);
    2eba:	8f e3       	ldi	r24, 0x3F	; 63
    2ebc:	61 2f       	mov	r22, r17
    2ebe:	0e 94 50 2d 	call	0x5aa0	; 0x5aa0 <glcdSetAddress>
    if (inverted) {
    2ec2:	00 23       	and	r16, r16
    2ec4:	11 f0       	breq	.+4      	; 0x2eca <drawmidline+0x18>
      glcdDataWrite(0xF0);
    2ec6:	80 ef       	ldi	r24, 0xF0	; 240
    2ec8:	01 c0       	rjmp	.+2      	; 0x2ecc <drawmidline+0x1a>
    } else {
      glcdDataWrite(0x0F);  
    2eca:	8f e0       	ldi	r24, 0x0F	; 15
    2ecc:	0e 94 f7 2c 	call	0x59ee	; 0x59ee <glcdDataWrite>
  
}

void drawmidline(uint8_t inverted) {
  uint8_t i;
  for (i=0; i < (SCREEN_H/8 - 1); i++) { 
    2ed0:	1f 5f       	subi	r17, 0xFF	; 255
    2ed2:	17 30       	cpi	r17, 0x07	; 7
    2ed4:	91 f7       	brne	.-28     	; 0x2eba <drawmidline+0x8>
      glcdDataWrite(0xF0);
    } else {
      glcdDataWrite(0x0F);  
    }
  }
  glcdSetAddress((SCREEN_W-MIDLINE_W)/2, i);
    2ed6:	8f e3       	ldi	r24, 0x3F	; 63
    2ed8:	67 e0       	ldi	r22, 0x07	; 7
    2eda:	0e 94 50 2d 	call	0x5aa0	; 0x5aa0 <glcdSetAddress>
  if (inverted) {
    2ede:	00 23       	and	r16, r16
    2ee0:	11 f0       	breq	.+4      	; 0x2ee6 <drawmidline+0x34>
    glcdDataWrite(0x20);  
    2ee2:	80 e2       	ldi	r24, 0x20	; 32
    2ee4:	01 c0       	rjmp	.+2      	; 0x2ee8 <drawmidline+0x36>
  } else {
    glcdDataWrite(0xCF);  
    2ee6:	8f ec       	ldi	r24, 0xCF	; 207
    2ee8:	0e 94 f7 2c 	call	0x59ee	; 0x59ee <glcdDataWrite>
  }
}
    2eec:	1f 91       	pop	r17
    2eee:	0f 91       	pop	r16
    2ef0:	08 95       	ret

00002ef2 <setscore_rat>:
	return sine(angle+64);
}

void setscore_rat(void)
{
  if(score_mode != last_score_mode_rat) {
    2ef2:	90 91 22 02 	lds	r25, 0x0222
    2ef6:	80 91 fc 01 	lds	r24, 0x01FC
    2efa:	98 17       	cp	r25, r24
    2efc:	39 f0       	breq	.+14     	; 0x2f0c <setscore_rat+0x1a>
    redraw_time_rat = 1;
    2efe:	81 e0       	ldi	r24, 0x01	; 1
    2f00:	80 93 fb 01 	sts	0x01FB, r24
    last_score_mode_rat = score_mode;
    2f04:	80 91 22 02 	lds	r24, 0x0222
    2f08:	80 93 fc 01 	sts	0x01FC, r24
  }
  switch(score_mode) {
    2f0c:	80 91 22 02 	lds	r24, 0x0222
    2f10:	81 30       	cpi	r24, 0x01	; 1
    2f12:	59 f1       	breq	.+86     	; 0x2f6a <setscore_rat+0x78>
    2f14:	81 30       	cpi	r24, 0x01	; 1
    2f16:	30 f0       	brcs	.+12     	; 0x2f24 <setscore_rat+0x32>
    2f18:	82 30       	cpi	r24, 0x02	; 2
    2f1a:	c9 f1       	breq	.+114    	; 0x2f8e <setscore_rat+0x9c>
    2f1c:	83 30       	cpi	r24, 0x03	; 3
    2f1e:	09 f0       	breq	.+2      	; 0x2f22 <setscore_rat+0x30>
    2f20:	48 c0       	rjmp	.+144    	; 0x2fb2 <setscore_rat+0xc0>
    2f22:	3d c0       	rjmp	.+122    	; 0x2f9e <setscore_rat+0xac>
  	case SCORE_MODE_DATELONG:
  	  right_score = date_d;
  	  break;
#endif
    case SCORE_MODE_TIME:
      if((minute_changed || hour_changed)) {
    2f24:	80 91 1e 02 	lds	r24, 0x021E
    2f28:	88 23       	and	r24, r24
    2f2a:	21 f4       	brne	.+8      	; 0x2f34 <setscore_rat+0x42>
    2f2c:	80 91 1f 02 	lds	r24, 0x021F
    2f30:	88 23       	and	r24, r24
    2f32:	91 f0       	breq	.+36     	; 0x2f58 <setscore_rat+0x66>
      	if(hour_changed) {
    2f34:	80 91 1f 02 	lds	r24, 0x021F
    2f38:	88 23       	and	r24, r24
    2f3a:	39 f0       	breq	.+14     	; 0x2f4a <setscore_rat+0x58>
	      left_score = hours(old_h);
    2f3c:	80 91 35 03 	lds	r24, 0x0335
    2f40:	0e 94 d1 37 	call	0x6fa2	; 0x6fa2 <hours>
    2f44:	80 93 d6 02 	sts	0x02D6, r24
    2f48:	04 c0       	rjmp	.+8      	; 0x2f52 <setscore_rat+0x60>
	      right_score = old_m;
	    } else if (minute_changed) {
    2f4a:	80 91 1e 02 	lds	r24, 0x021E
    2f4e:	88 23       	and	r24, r24
    2f50:	81 f1       	breq	.+96     	; 0x2fb2 <setscore_rat+0xc0>
	      right_score = old_m;
    2f52:	80 91 2b 03 	lds	r24, 0x032B
    2f56:	20 c0       	rjmp	.+64     	; 0x2f98 <setscore_rat+0xa6>
	    }
      } else {
        left_score = hours(time_h);
    2f58:	80 91 2a 03 	lds	r24, 0x032A
    2f5c:	0e 94 d1 37 	call	0x6fa2	; 0x6fa2 <hours>
    2f60:	80 93 d6 02 	sts	0x02D6, r24
        right_score = time_m;
    2f64:	80 91 34 03 	lds	r24, 0x0334
    2f68:	17 c0       	rjmp	.+46     	; 0x2f98 <setscore_rat+0xa6>
      break;
    case SCORE_MODE_DATE:
#ifdef OPTION_DOW_DATELONG
      if((region == REGION_US)||(region == DOW_REGION_US)) {
#else
      if(region == REGION_US) {
    2f6a:	80 91 37 03 	lds	r24, 0x0337
    2f6e:	88 23       	and	r24, r24
    2f70:	39 f4       	brne	.+14     	; 0x2f80 <setscore_rat+0x8e>
#endif
        left_score = date_m;
    2f72:	80 91 3e 03 	lds	r24, 0x033E
    2f76:	80 93 d6 02 	sts	0x02D6, r24
        right_score = date_d;
    2f7a:	80 91 33 03 	lds	r24, 0x0333
    2f7e:	0c c0       	rjmp	.+24     	; 0x2f98 <setscore_rat+0xa6>
      } else {
        left_score = date_d;
    2f80:	80 91 33 03 	lds	r24, 0x0333
    2f84:	80 93 d6 02 	sts	0x02D6, r24
        right_score = date_m;
    2f88:	80 91 3e 03 	lds	r24, 0x033E
    2f8c:	05 c0       	rjmp	.+10     	; 0x2f98 <setscore_rat+0xa6>
      }
      break;
    case SCORE_MODE_YEAR:
      left_score = 20;
    2f8e:	84 e1       	ldi	r24, 0x14	; 20
    2f90:	80 93 d6 02 	sts	0x02D6, r24
      right_score = date_y;
    2f94:	80 91 2d 03 	lds	r24, 0x032D
    2f98:	80 93 da 02 	sts	0x02DA, r24
    2f9c:	08 95       	ret
      break;
    case SCORE_MODE_ALARM:
      left_score = hours(alarm_h);
    2f9e:	80 91 38 03 	lds	r24, 0x0338
    2fa2:	0e 94 d1 37 	call	0x6fa2	; 0x6fa2 <hours>
    2fa6:	80 93 d6 02 	sts	0x02D6, r24
      right_score = alarm_m;
    2faa:	80 91 2e 03 	lds	r24, 0x032E
    2fae:	80 93 da 02 	sts	0x02DA, r24
    2fb2:	08 95       	ret

00002fb4 <drawdisplay_rat>:
  } else {
    glcdDataWrite(0xCF);  
  }
}

void drawdisplay_rat(uint8_t inverted) {
    2fb4:	af 92       	push	r10
    2fb6:	cf 92       	push	r12
    2fb8:	df 92       	push	r13
    2fba:	ef 92       	push	r14
    2fbc:	ff 92       	push	r15
    2fbe:	0f 93       	push	r16
    2fc0:	1f 93       	push	r17
    2fc2:	d8 2e       	mov	r13, r24

	setscore_rat();
    2fc4:	0e 94 79 17 	call	0x2ef2	; 0x2ef2 <setscore_rat>
    // erase old ball
    glcdFillRectangle(oldball_x/FIXED_MATH, oldball_y/FIXED_MATH, ball_radius*2, ball_radius*2, inverted);
    2fc8:	60 91 07 03 	lds	r22, 0x0307
    2fcc:	70 91 08 03 	lds	r23, 0x0308
    2fd0:	80 91 09 03 	lds	r24, 0x0309
    2fd4:	90 91 0a 03 	lds	r25, 0x030A
    2fd8:	24 e6       	ldi	r18, 0x64	; 100
    2fda:	30 e0       	ldi	r19, 0x00	; 0
    2fdc:	40 e0       	ldi	r20, 0x00	; 0
    2fde:	50 e0       	ldi	r21, 0x00	; 0
    2fe0:	0e 94 4c 3b 	call	0x7698	; 0x7698 <__divmodsi4>
    2fe4:	12 2f       	mov	r17, r18
    2fe6:	60 91 17 03 	lds	r22, 0x0317
    2fea:	70 91 18 03 	lds	r23, 0x0318
    2fee:	80 91 19 03 	lds	r24, 0x0319
    2ff2:	90 91 1a 03 	lds	r25, 0x031A
    2ff6:	24 e6       	ldi	r18, 0x64	; 100
    2ff8:	30 e0       	ldi	r19, 0x00	; 0
    2ffa:	40 e0       	ldi	r20, 0x00	; 0
    2ffc:	50 e0       	ldi	r21, 0x00	; 0
    2ffe:	0e 94 4c 3b 	call	0x7698	; 0x7698 <__divmodsi4>
    3002:	81 2f       	mov	r24, r17
    3004:	62 2f       	mov	r22, r18
    3006:	44 e0       	ldi	r20, 0x04	; 4
    3008:	24 e0       	ldi	r18, 0x04	; 4
    300a:	0d 2d       	mov	r16, r13
    300c:	0e 94 7e 29 	call	0x52fc	; 0x52fc <glcdFillRectangle>
    // draw new ball
    glcdFillRectangle(ball_x/FIXED_MATH, ball_y/FIXED_MATH, ball_radius*2, ball_radius*2, ! inverted);
    3010:	ff 24       	eor	r15, r15
    3012:	dd 20       	and	r13, r13
    3014:	11 f4       	brne	.+4      	; 0x301a <drawdisplay_rat+0x66>
    3016:	ff 24       	eor	r15, r15
    3018:	f3 94       	inc	r15
    301a:	60 91 0b 03 	lds	r22, 0x030B
    301e:	70 91 0c 03 	lds	r23, 0x030C
    3022:	80 91 0d 03 	lds	r24, 0x030D
    3026:	90 91 0e 03 	lds	r25, 0x030E
    302a:	24 e6       	ldi	r18, 0x64	; 100
    302c:	30 e0       	ldi	r19, 0x00	; 0
    302e:	40 e0       	ldi	r20, 0x00	; 0
    3030:	50 e0       	ldi	r21, 0x00	; 0
    3032:	0e 94 4c 3b 	call	0x7698	; 0x7698 <__divmodsi4>
    3036:	12 2f       	mov	r17, r18
    3038:	60 91 f9 02 	lds	r22, 0x02F9
    303c:	70 91 fa 02 	lds	r23, 0x02FA
    3040:	80 91 fb 02 	lds	r24, 0x02FB
    3044:	90 91 fc 02 	lds	r25, 0x02FC
    3048:	24 e6       	ldi	r18, 0x64	; 100
    304a:	30 e0       	ldi	r19, 0x00	; 0
    304c:	40 e0       	ldi	r20, 0x00	; 0
    304e:	50 e0       	ldi	r21, 0x00	; 0
    3050:	0e 94 4c 3b 	call	0x7698	; 0x7698 <__divmodsi4>
    3054:	81 2f       	mov	r24, r17
    3056:	62 2f       	mov	r22, r18
    3058:	44 e0       	ldi	r20, 0x04	; 4
    305a:	24 e0       	ldi	r18, 0x04	; 4
    305c:	0f 2d       	mov	r16, r15
    305e:	0e 94 7e 29 	call	0x52fc	; 0x52fc <glcdFillRectangle>

    // draw middle lines around where the ball may have intersected it?
    if  (intersectrect(oldball_x/FIXED_MATH, oldball_y/FIXED_MATH, ball_radius*2, ball_radius*2,
    3062:	60 91 07 03 	lds	r22, 0x0307
    3066:	70 91 08 03 	lds	r23, 0x0308
    306a:	80 91 09 03 	lds	r24, 0x0309
    306e:	90 91 0a 03 	lds	r25, 0x030A
    3072:	24 e6       	ldi	r18, 0x64	; 100
    3074:	30 e0       	ldi	r19, 0x00	; 0
    3076:	40 e0       	ldi	r20, 0x00	; 0
    3078:	50 e0       	ldi	r21, 0x00	; 0
    307a:	0e 94 4c 3b 	call	0x7698	; 0x7698 <__divmodsi4>
    307e:	12 2f       	mov	r17, r18
    3080:	60 91 17 03 	lds	r22, 0x0317
    3084:	70 91 18 03 	lds	r23, 0x0318
    3088:	80 91 19 03 	lds	r24, 0x0319
    308c:	90 91 1a 03 	lds	r25, 0x031A
    3090:	24 e6       	ldi	r18, 0x64	; 100
    3092:	30 e0       	ldi	r19, 0x00	; 0
    3094:	40 e0       	ldi	r20, 0x00	; 0
    3096:	50 e0       	ldi	r21, 0x00	; 0
    3098:	0e 94 4c 3b 	call	0x7698	; 0x7698 <__divmodsi4>
    309c:	81 2f       	mov	r24, r17
    309e:	62 2f       	mov	r22, r18
    30a0:	44 e0       	ldi	r20, 0x04	; 4
    30a2:	24 e0       	ldi	r18, 0x04	; 4
    30a4:	0f e3       	ldi	r16, 0x3F	; 63
    30a6:	ee 24       	eor	r14, r14
    30a8:	cc 24       	eor	r12, r12
    30aa:	c3 94       	inc	r12
    30ac:	90 e4       	ldi	r25, 0x40	; 64
    30ae:	a9 2e       	mov	r10, r25
    30b0:	0e 94 66 39 	call	0x72cc	; 0x72cc <intersectrect>
    30b4:	88 23       	and	r24, r24
    30b6:	19 f0       	breq	.+6      	; 0x30be <drawdisplay_rat+0x10a>
		       SCREEN_W/2-MIDLINE_W, 0, MIDLINE_W, SCREEN_H)) {
      // redraw it since we had an intersection
      drawmidline(inverted);
    30b8:	8d 2d       	mov	r24, r13
    30ba:	0e 94 59 17 	call	0x2eb2	; 0x2eb2 <drawmidline>
    }



    
    if (oldleftpaddle_y != leftpaddle_y) {
    30be:	20 91 e9 02 	lds	r18, 0x02E9
    30c2:	30 91 ea 02 	lds	r19, 0x02EA
    30c6:	40 91 eb 02 	lds	r20, 0x02EB
    30ca:	50 91 ec 02 	lds	r21, 0x02EC
    30ce:	80 91 ed 02 	lds	r24, 0x02ED
    30d2:	90 91 ee 02 	lds	r25, 0x02EE
    30d6:	a0 91 ef 02 	lds	r26, 0x02EF
    30da:	b0 91 f0 02 	lds	r27, 0x02F0
    30de:	28 17       	cp	r18, r24
    30e0:	39 07       	cpc	r19, r25
    30e2:	4a 07       	cpc	r20, r26
    30e4:	5b 07       	cpc	r21, r27
    30e6:	79 f0       	breq	.+30     	; 0x3106 <drawdisplay_rat+0x152>
      // clear left paddle
      glcdFillRectangle(LEFTPADDLE_X, oldleftpaddle_y/FIXED_MATH, PADDLE_W, PADDLE_H, inverted);
    30e8:	ca 01       	movw	r24, r20
    30ea:	b9 01       	movw	r22, r18
    30ec:	24 e6       	ldi	r18, 0x64	; 100
    30ee:	30 e0       	ldi	r19, 0x00	; 0
    30f0:	40 e0       	ldi	r20, 0x00	; 0
    30f2:	50 e0       	ldi	r21, 0x00	; 0
    30f4:	0e 94 4c 3b 	call	0x7698	; 0x7698 <__divmodsi4>
    30f8:	8a e0       	ldi	r24, 0x0A	; 10
    30fa:	62 2f       	mov	r22, r18
    30fc:	43 e0       	ldi	r20, 0x03	; 3
    30fe:	2c e0       	ldi	r18, 0x0C	; 12
    3100:	0d 2d       	mov	r16, r13
    3102:	0e 94 7e 29 	call	0x52fc	; 0x52fc <glcdFillRectangle>
    }
      // draw left paddle
      glcdFillRectangle(LEFTPADDLE_X, leftpaddle_y/FIXED_MATH, PADDLE_W, PADDLE_H, !inverted);
    3106:	60 91 ed 02 	lds	r22, 0x02ED
    310a:	70 91 ee 02 	lds	r23, 0x02EE
    310e:	80 91 ef 02 	lds	r24, 0x02EF
    3112:	90 91 f0 02 	lds	r25, 0x02F0
    3116:	24 e6       	ldi	r18, 0x64	; 100
    3118:	30 e0       	ldi	r19, 0x00	; 0
    311a:	40 e0       	ldi	r20, 0x00	; 0
    311c:	50 e0       	ldi	r21, 0x00	; 0
    311e:	0e 94 4c 3b 	call	0x7698	; 0x7698 <__divmodsi4>
    3122:	8a e0       	ldi	r24, 0x0A	; 10
    3124:	62 2f       	mov	r22, r18
    3126:	43 e0       	ldi	r20, 0x03	; 3
    3128:	2c e0       	ldi	r18, 0x0C	; 12
    312a:	0f 2d       	mov	r16, r15
    312c:	0e 94 7e 29 	call	0x52fc	; 0x52fc <glcdFillRectangle>
    

    if (oldrightpaddle_y != rightpaddle_y) {
    3130:	20 91 13 03 	lds	r18, 0x0313
    3134:	30 91 14 03 	lds	r19, 0x0314
    3138:	40 91 15 03 	lds	r20, 0x0315
    313c:	50 91 16 03 	lds	r21, 0x0316
    3140:	80 91 0f 03 	lds	r24, 0x030F
    3144:	90 91 10 03 	lds	r25, 0x0310
    3148:	a0 91 11 03 	lds	r26, 0x0311
    314c:	b0 91 12 03 	lds	r27, 0x0312
    3150:	28 17       	cp	r18, r24
    3152:	39 07       	cpc	r19, r25
    3154:	4a 07       	cpc	r20, r26
    3156:	5b 07       	cpc	r21, r27
    3158:	79 f0       	breq	.+30     	; 0x3178 <drawdisplay_rat+0x1c4>
      // clear right paddle
      glcdFillRectangle(RIGHTPADDLE_X, oldrightpaddle_y/FIXED_MATH, PADDLE_W, PADDLE_H, inverted);
    315a:	ca 01       	movw	r24, r20
    315c:	b9 01       	movw	r22, r18
    315e:	24 e6       	ldi	r18, 0x64	; 100
    3160:	30 e0       	ldi	r19, 0x00	; 0
    3162:	40 e0       	ldi	r20, 0x00	; 0
    3164:	50 e0       	ldi	r21, 0x00	; 0
    3166:	0e 94 4c 3b 	call	0x7698	; 0x7698 <__divmodsi4>
    316a:	83 e7       	ldi	r24, 0x73	; 115
    316c:	62 2f       	mov	r22, r18
    316e:	43 e0       	ldi	r20, 0x03	; 3
    3170:	2c e0       	ldi	r18, 0x0C	; 12
    3172:	0d 2d       	mov	r16, r13
    3174:	0e 94 7e 29 	call	0x52fc	; 0x52fc <glcdFillRectangle>
    }
      // draw right paddle
      glcdFillRectangle(RIGHTPADDLE_X, rightpaddle_y/FIXED_MATH, PADDLE_W, PADDLE_H, !inverted);
    3178:	60 91 0f 03 	lds	r22, 0x030F
    317c:	70 91 10 03 	lds	r23, 0x0310
    3180:	80 91 11 03 	lds	r24, 0x0311
    3184:	90 91 12 03 	lds	r25, 0x0312
    3188:	24 e6       	ldi	r18, 0x64	; 100
    318a:	30 e0       	ldi	r19, 0x00	; 0
    318c:	40 e0       	ldi	r20, 0x00	; 0
    318e:	50 e0       	ldi	r21, 0x00	; 0
    3190:	0e 94 4c 3b 	call	0x7698	; 0x7698 <__divmodsi4>
    3194:	83 e7       	ldi	r24, 0x73	; 115
    3196:	62 2f       	mov	r22, r18
    3198:	43 e0       	ldi	r20, 0x03	; 3
    319a:	2c e0       	ldi	r18, 0x0C	; 12
    319c:	0f 2d       	mov	r16, r15
    319e:	0e 94 7e 29 	call	0x52fc	; 0x52fc <glcdFillRectangle>
    

    if (intersectrect(oldball_x/FIXED_MATH, oldball_y/FIXED_MATH, ball_radius*2, ball_radius*2, RIGHTPADDLE_X, rightpaddle_y/FIXED_MATH, PADDLE_W, PADDLE_H)) {
    31a2:	60 91 07 03 	lds	r22, 0x0307
    31a6:	70 91 08 03 	lds	r23, 0x0308
    31aa:	80 91 09 03 	lds	r24, 0x0309
    31ae:	90 91 0a 03 	lds	r25, 0x030A
    31b2:	24 e6       	ldi	r18, 0x64	; 100
    31b4:	30 e0       	ldi	r19, 0x00	; 0
    31b6:	40 e0       	ldi	r20, 0x00	; 0
    31b8:	50 e0       	ldi	r21, 0x00	; 0
    31ba:	0e 94 4c 3b 	call	0x7698	; 0x7698 <__divmodsi4>
    31be:	02 2f       	mov	r16, r18
    31c0:	60 91 17 03 	lds	r22, 0x0317
    31c4:	70 91 18 03 	lds	r23, 0x0318
    31c8:	80 91 19 03 	lds	r24, 0x0319
    31cc:	90 91 1a 03 	lds	r25, 0x031A
    31d0:	24 e6       	ldi	r18, 0x64	; 100
    31d2:	30 e0       	ldi	r19, 0x00	; 0
    31d4:	40 e0       	ldi	r20, 0x00	; 0
    31d6:	50 e0       	ldi	r21, 0x00	; 0
    31d8:	0e 94 4c 3b 	call	0x7698	; 0x7698 <__divmodsi4>
    31dc:	12 2f       	mov	r17, r18
    31de:	60 91 0f 03 	lds	r22, 0x030F
    31e2:	70 91 10 03 	lds	r23, 0x0310
    31e6:	80 91 11 03 	lds	r24, 0x0311
    31ea:	90 91 12 03 	lds	r25, 0x0312
    31ee:	24 e6       	ldi	r18, 0x64	; 100
    31f0:	30 e0       	ldi	r19, 0x00	; 0
    31f2:	40 e0       	ldi	r20, 0x00	; 0
    31f4:	50 e0       	ldi	r21, 0x00	; 0
    31f6:	0e 94 4c 3b 	call	0x7698	; 0x7698 <__divmodsi4>
    31fa:	e2 2e       	mov	r14, r18
    31fc:	80 2f       	mov	r24, r16
    31fe:	61 2f       	mov	r22, r17
    3200:	44 e0       	ldi	r20, 0x04	; 4
    3202:	24 e0       	ldi	r18, 0x04	; 4
    3204:	03 e7       	ldi	r16, 0x73	; 115
    3206:	13 e0       	ldi	r17, 0x03	; 3
    3208:	c1 2e       	mov	r12, r17
    320a:	bc e0       	ldi	r27, 0x0C	; 12
    320c:	ab 2e       	mov	r10, r27
    320e:	0e 94 66 39 	call	0x72cc	; 0x72cc <intersectrect>
    3212:	88 23       	and	r24, r24
    3214:	a9 f0       	breq	.+42     	; 0x3240 <drawdisplay_rat+0x28c>
      glcdFillRectangle(RIGHTPADDLE_X, rightpaddle_y/FIXED_MATH, PADDLE_W, PADDLE_H, !inverted);
    3216:	60 91 0f 03 	lds	r22, 0x030F
    321a:	70 91 10 03 	lds	r23, 0x0310
    321e:	80 91 11 03 	lds	r24, 0x0311
    3222:	90 91 12 03 	lds	r25, 0x0312
    3226:	24 e6       	ldi	r18, 0x64	; 100
    3228:	30 e0       	ldi	r19, 0x00	; 0
    322a:	40 e0       	ldi	r20, 0x00	; 0
    322c:	50 e0       	ldi	r21, 0x00	; 0
    322e:	0e 94 4c 3b 	call	0x7698	; 0x7698 <__divmodsi4>
    3232:	83 e7       	ldi	r24, 0x73	; 115
    3234:	62 2f       	mov	r22, r18
    3236:	43 e0       	ldi	r20, 0x03	; 3
    3238:	2c e0       	ldi	r18, 0x0C	; 12
    323a:	0f 2d       	mov	r16, r15
    323c:	0e 94 7e 29 	call	0x52fc	; 0x52fc <glcdFillRectangle>
    }
    if (intersectrect(oldball_x/FIXED_MATH, oldball_y/FIXED_MATH, ball_radius*2, ball_radius*2, LEFTPADDLE_X, leftpaddle_y/FIXED_MATH, PADDLE_W, PADDLE_H)) {
    3240:	60 91 07 03 	lds	r22, 0x0307
    3244:	70 91 08 03 	lds	r23, 0x0308
    3248:	80 91 09 03 	lds	r24, 0x0309
    324c:	90 91 0a 03 	lds	r25, 0x030A
    3250:	24 e6       	ldi	r18, 0x64	; 100
    3252:	30 e0       	ldi	r19, 0x00	; 0
    3254:	40 e0       	ldi	r20, 0x00	; 0
    3256:	50 e0       	ldi	r21, 0x00	; 0
    3258:	0e 94 4c 3b 	call	0x7698	; 0x7698 <__divmodsi4>
    325c:	02 2f       	mov	r16, r18
    325e:	60 91 17 03 	lds	r22, 0x0317
    3262:	70 91 18 03 	lds	r23, 0x0318
    3266:	80 91 19 03 	lds	r24, 0x0319
    326a:	90 91 1a 03 	lds	r25, 0x031A
    326e:	24 e6       	ldi	r18, 0x64	; 100
    3270:	30 e0       	ldi	r19, 0x00	; 0
    3272:	40 e0       	ldi	r20, 0x00	; 0
    3274:	50 e0       	ldi	r21, 0x00	; 0
    3276:	0e 94 4c 3b 	call	0x7698	; 0x7698 <__divmodsi4>
    327a:	12 2f       	mov	r17, r18
    327c:	60 91 ed 02 	lds	r22, 0x02ED
    3280:	70 91 ee 02 	lds	r23, 0x02EE
    3284:	80 91 ef 02 	lds	r24, 0x02EF
    3288:	90 91 f0 02 	lds	r25, 0x02F0
    328c:	24 e6       	ldi	r18, 0x64	; 100
    328e:	30 e0       	ldi	r19, 0x00	; 0
    3290:	40 e0       	ldi	r20, 0x00	; 0
    3292:	50 e0       	ldi	r21, 0x00	; 0
    3294:	0e 94 4c 3b 	call	0x7698	; 0x7698 <__divmodsi4>
    3298:	e2 2e       	mov	r14, r18
    329a:	80 2f       	mov	r24, r16
    329c:	61 2f       	mov	r22, r17
    329e:	44 e0       	ldi	r20, 0x04	; 4
    32a0:	24 e0       	ldi	r18, 0x04	; 4
    32a2:	0a e0       	ldi	r16, 0x0A	; 10
    32a4:	a3 e0       	ldi	r26, 0x03	; 3
    32a6:	ca 2e       	mov	r12, r26
    32a8:	fc e0       	ldi	r31, 0x0C	; 12
    32aa:	af 2e       	mov	r10, r31
    32ac:	0e 94 66 39 	call	0x72cc	; 0x72cc <intersectrect>
    32b0:	88 23       	and	r24, r24
    32b2:	a9 f0       	breq	.+42     	; 0x32de <drawdisplay_rat+0x32a>
      glcdFillRectangle(LEFTPADDLE_X, leftpaddle_y/FIXED_MATH, PADDLE_W, PADDLE_H, !inverted);
    32b4:	60 91 ed 02 	lds	r22, 0x02ED
    32b8:	70 91 ee 02 	lds	r23, 0x02EE
    32bc:	80 91 ef 02 	lds	r24, 0x02EF
    32c0:	90 91 f0 02 	lds	r25, 0x02F0
    32c4:	24 e6       	ldi	r18, 0x64	; 100
    32c6:	30 e0       	ldi	r19, 0x00	; 0
    32c8:	40 e0       	ldi	r20, 0x00	; 0
    32ca:	50 e0       	ldi	r21, 0x00	; 0
    32cc:	0e 94 4c 3b 	call	0x7698	; 0x7698 <__divmodsi4>
    32d0:	8a e0       	ldi	r24, 0x0A	; 10
    32d2:	62 2f       	mov	r22, r18
    32d4:	43 e0       	ldi	r20, 0x03	; 3
    32d6:	2c e0       	ldi	r18, 0x0C	; 12
    32d8:	0f 2d       	mov	r16, r15
    32da:	0e 94 7e 29 	call	0x52fc	; 0x52fc <glcdFillRectangle>
    }
   // draw time
   uint8_t redraw_digits;
   TIMSK2 = 0;	//Disable Timer 2 interrupt, to prevent a race condition.
    32de:	10 92 70 00 	sts	0x0070, r1
   if(redraw_time_rat)
    32e2:	80 91 fb 01 	lds	r24, 0x01FB
    32e6:	88 23       	and	r24, r24
    32e8:	11 f0       	breq	.+4      	; 0x32ee <drawdisplay_rat+0x33a>
   {
   	   redraw_digits = 1;
   	   redraw_time_rat = 0;
    32ea:	10 92 fb 01 	sts	0x01FB, r1
   }
   TIMSK2 = _BV(TOIE2); //Race issue gone, renable.
    32ee:	81 e0       	ldi	r24, 0x01	; 1
    32f0:	80 93 70 00 	sts	0x0070, r24
    
    draw_score_rat(redraw_digits,inverted);
    32f4:	6d 2d       	mov	r22, r13
    32f6:	0e 94 26 17 	call	0x2e4c	; 0x2e4c <draw_score_rat>
    
    redraw_digits = 0;
    
}
    32fa:	1f 91       	pop	r17
    32fc:	0f 91       	pop	r16
    32fe:	ff 90       	pop	r15
    3300:	ef 90       	pop	r14
    3302:	df 90       	pop	r13
    3304:	cf 90       	pop	r12
    3306:	af 90       	pop	r10
    3308:	08 95       	ret

0000330a <step_rat>:
      }
    }
    return ticksremaining;
}

void step_rat(void) {
    330a:	6f 92       	push	r6
    330c:	7f 92       	push	r7
    330e:	8f 92       	push	r8
    3310:	9f 92       	push	r9
    3312:	af 92       	push	r10
    3314:	bf 92       	push	r11
    3316:	cf 92       	push	r12
    3318:	df 92       	push	r13
    331a:	ef 92       	push	r14
    331c:	ff 92       	push	r15
    331e:	0f 93       	push	r16
    3320:	1f 93       	push	r17
  static uint8_t left_keepout_top, left_keepout_bot, left_bouncepos, left_endpos;
  static uint32_t dest_paddle_pos;
  static uint32_t right_dest, left_dest;

  // Save old ball location so we can do some vector stuff 
  oldball_x = ball_x;
    3322:	80 91 0b 03 	lds	r24, 0x030B
    3326:	90 91 0c 03 	lds	r25, 0x030C
    332a:	a0 91 0d 03 	lds	r26, 0x030D
    332e:	b0 91 0e 03 	lds	r27, 0x030E
    3332:	80 93 07 03 	sts	0x0307, r24
    3336:	90 93 08 03 	sts	0x0308, r25
    333a:	a0 93 09 03 	sts	0x0309, r26
    333e:	b0 93 0a 03 	sts	0x030A, r27
  oldball_y = ball_y;
    3342:	20 91 f9 02 	lds	r18, 0x02F9
    3346:	30 91 fa 02 	lds	r19, 0x02FA
    334a:	40 91 fb 02 	lds	r20, 0x02FB
    334e:	50 91 fc 02 	lds	r21, 0x02FC
    3352:	20 93 17 03 	sts	0x0317, r18
    3356:	30 93 18 03 	sts	0x0318, r19
    335a:	40 93 19 03 	sts	0x0319, r20
    335e:	50 93 1a 03 	sts	0x031A, r21

  // move ball according to the vector
  ball_x += ball_dx;
    3362:	60 90 ff 02 	lds	r6, 0x02FF
    3366:	70 90 00 03 	lds	r7, 0x0300
    336a:	80 90 01 03 	lds	r8, 0x0301
    336e:	90 90 02 03 	lds	r9, 0x0302
    3372:	64 01       	movw	r12, r8
    3374:	53 01       	movw	r10, r6
    3376:	a8 0e       	add	r10, r24
    3378:	b9 1e       	adc	r11, r25
    337a:	ca 1e       	adc	r12, r26
    337c:	db 1e       	adc	r13, r27
    337e:	a0 92 0b 03 	sts	0x030B, r10
    3382:	b0 92 0c 03 	sts	0x030C, r11
    3386:	c0 92 0d 03 	sts	0x030D, r12
    338a:	d0 92 0e 03 	sts	0x030E, r13
  ball_y += ball_dy;
    338e:	e0 90 f5 02 	lds	r14, 0x02F5
    3392:	f0 90 f6 02 	lds	r15, 0x02F6
    3396:	00 91 f7 02 	lds	r16, 0x02F7
    339a:	10 91 f8 02 	lds	r17, 0x02F8
    339e:	d8 01       	movw	r26, r16
    33a0:	c7 01       	movw	r24, r14
    33a2:	82 0f       	add	r24, r18
    33a4:	93 1f       	adc	r25, r19
    33a6:	a4 1f       	adc	r26, r20
    33a8:	b5 1f       	adc	r27, r21
    33aa:	80 93 f9 02 	sts	0x02F9, r24
    33ae:	90 93 fa 02 	sts	0x02FA, r25
    33b2:	a0 93 fb 02 	sts	0x02FB, r26
    33b6:	b0 93 fc 02 	sts	0x02FC, r27
  
    
  
  /************************************* TOP & BOTTOM WALLS */
  // bouncing off bottom wall, reverse direction
  if (ball_y  > (SCREEN_H_FIXED - ball_radius*2*FIXED_MATH - BOTBAR_H_FIXED)) {
    33ba:	89 5a       	subi	r24, 0xA9	; 169
    33bc:	96 41       	sbci	r25, 0x16	; 22
    33be:	a0 40       	sbci	r26, 0x00	; 0
    33c0:	b0 40       	sbci	r27, 0x00	; 0
    33c2:	dc f0       	brlt	.+54     	; 0x33fa <step_rat+0xf0>
    //DEBUG(putstring_nl("bottom wall bounce"));
    ball_y = SCREEN_H_FIXED - ball_radius*2*FIXED_MATH - BOTBAR_H_FIXED;
    33c4:	88 ea       	ldi	r24, 0xA8	; 168
    33c6:	96 e1       	ldi	r25, 0x16	; 22
    33c8:	a0 e0       	ldi	r26, 0x00	; 0
    33ca:	b0 e0       	ldi	r27, 0x00	; 0
    33cc:	80 93 f9 02 	sts	0x02F9, r24
    33d0:	90 93 fa 02 	sts	0x02FA, r25
    33d4:	a0 93 fb 02 	sts	0x02FB, r26
    33d8:	b0 93 fc 02 	sts	0x02FC, r27
    ball_dy *= -1;
    33dc:	88 27       	eor	r24, r24
    33de:	99 27       	eor	r25, r25
    33e0:	dc 01       	movw	r26, r24
    33e2:	8e 19       	sub	r24, r14
    33e4:	9f 09       	sbc	r25, r15
    33e6:	a0 0b       	sbc	r26, r16
    33e8:	b1 0b       	sbc	r27, r17
    33ea:	80 93 f5 02 	sts	0x02F5, r24
    33ee:	90 93 f6 02 	sts	0x02F6, r25
    33f2:	a0 93 f7 02 	sts	0x02F7, r26
    33f6:	b0 93 f8 02 	sts	0x02F8, r27
  }
  
  // bouncing off top wall, reverse direction
  if (ball_y < TOPBAR_H_FIXED) {
    33fa:	80 91 f9 02 	lds	r24, 0x02F9
    33fe:	90 91 fa 02 	lds	r25, 0x02FA
    3402:	a0 91 fb 02 	lds	r26, 0x02FB
    3406:	b0 91 fc 02 	lds	r27, 0x02FC
    340a:	88 3c       	cpi	r24, 0xC8	; 200
    340c:	91 05       	cpc	r25, r1
    340e:	a1 05       	cpc	r26, r1
    3410:	b1 05       	cpc	r27, r1
    3412:	1c f5       	brge	.+70     	; 0x345a <step_rat+0x150>
    //DEBUG(putstring_nl("top wall bounce"));
    ball_y = TOPBAR_H_FIXED;
    3414:	88 ec       	ldi	r24, 0xC8	; 200
    3416:	90 e0       	ldi	r25, 0x00	; 0
    3418:	a0 e0       	ldi	r26, 0x00	; 0
    341a:	b0 e0       	ldi	r27, 0x00	; 0
    341c:	80 93 f9 02 	sts	0x02F9, r24
    3420:	90 93 fa 02 	sts	0x02FA, r25
    3424:	a0 93 fb 02 	sts	0x02FB, r26
    3428:	b0 93 fc 02 	sts	0x02FC, r27
    ball_dy *= -1;
    342c:	80 91 f5 02 	lds	r24, 0x02F5
    3430:	90 91 f6 02 	lds	r25, 0x02F6
    3434:	a0 91 f7 02 	lds	r26, 0x02F7
    3438:	b0 91 f8 02 	lds	r27, 0x02F8
    343c:	b0 95       	com	r27
    343e:	a0 95       	com	r26
    3440:	90 95       	com	r25
    3442:	81 95       	neg	r24
    3444:	9f 4f       	sbci	r25, 0xFF	; 255
    3446:	af 4f       	sbci	r26, 0xFF	; 255
    3448:	bf 4f       	sbci	r27, 0xFF	; 255
    344a:	80 93 f5 02 	sts	0x02F5, r24
    344e:	90 93 f6 02 	sts	0x02F6, r25
    3452:	a0 93 f7 02 	sts	0x02F7, r26
    3456:	b0 93 f8 02 	sts	0x02F8, r27
  
  
  
  /************************************* LEFT & RIGHT WALLS */
  // the ball hits either wall, the ball resets location & angle
  if (((ball_x/FIXED_MATH)  > (SCREEN_W - ball_radius*2)) || ((int8_t)(ball_x/FIXED_MATH) <= 0) || (!ball_dx && !ball_dy)) {
    345a:	84 ed       	ldi	r24, 0xD4	; 212
    345c:	a8 16       	cp	r10, r24
    345e:	80 e3       	ldi	r24, 0x30	; 48
    3460:	b8 06       	cpc	r11, r24
    3462:	80 e0       	ldi	r24, 0x00	; 0
    3464:	c8 06       	cpc	r12, r24
    3466:	80 e0       	ldi	r24, 0x00	; 0
    3468:	d8 06       	cpc	r13, r24
    346a:	ec f4       	brge	.+58     	; 0x34a6 <step_rat+0x19c>
    346c:	c6 01       	movw	r24, r12
    346e:	b5 01       	movw	r22, r10
    3470:	24 e6       	ldi	r18, 0x64	; 100
    3472:	30 e0       	ldi	r19, 0x00	; 0
    3474:	40 e0       	ldi	r20, 0x00	; 0
    3476:	50 e0       	ldi	r21, 0x00	; 0
    3478:	0e 94 4c 3b 	call	0x7698	; 0x7698 <__divmodsi4>
    347c:	12 16       	cp	r1, r18
    347e:	9c f4       	brge	.+38     	; 0x34a6 <step_rat+0x19c>
    3480:	61 14       	cp	r6, r1
    3482:	71 04       	cpc	r7, r1
    3484:	81 04       	cpc	r8, r1
    3486:	91 04       	cpc	r9, r1
    3488:	09 f0       	breq	.+2      	; 0x348c <step_rat+0x182>
    348a:	ce c0       	rjmp	.+412    	; 0x3628 <step_rat+0x31e>
    348c:	80 91 f5 02 	lds	r24, 0x02F5
    3490:	90 91 f6 02 	lds	r25, 0x02F6
    3494:	a0 91 f7 02 	lds	r26, 0x02F7
    3498:	b0 91 f8 02 	lds	r27, 0x02F8
    349c:	00 97       	sbiw	r24, 0x00	; 0
    349e:	a1 05       	cpc	r26, r1
    34a0:	b1 05       	cpc	r27, r1
    34a2:	09 f0       	breq	.+2      	; 0x34a6 <step_rat+0x19c>
    34a4:	c1 c0       	rjmp	.+386    	; 0x3628 <step_rat+0x31e>
        }
      }
    }

    // place ball in the middle of the screen
    ball_x = (SCREEN_W_FIXED / 2) - FIXED_MATH;
    34a6:	8c e9       	ldi	r24, 0x9C	; 156
    34a8:	98 e1       	ldi	r25, 0x18	; 24
    34aa:	a0 e0       	ldi	r26, 0x00	; 0
    34ac:	b0 e0       	ldi	r27, 0x00	; 0
    34ae:	80 93 0b 03 	sts	0x030B, r24
    34b2:	90 93 0c 03 	sts	0x030C, r25
    34b6:	a0 93 0d 03 	sts	0x030D, r26
    34ba:	b0 93 0e 03 	sts	0x030E, r27
    ball_y = (SCREEN_H_FIXED / 2) - FIXED_MATH;
    34be:	8c e1       	ldi	r24, 0x1C	; 28
    34c0:	9c e0       	ldi	r25, 0x0C	; 12
    34c2:	a0 e0       	ldi	r26, 0x00	; 0
    34c4:	b0 e0       	ldi	r27, 0x00	; 0
    34c6:	80 93 f9 02 	sts	0x02F9, r24
    34ca:	90 93 fa 02 	sts	0x02FA, r25
    34ce:	a0 93 fb 02 	sts	0x02FB, r26
    34d2:	b0 93 fc 02 	sts	0x02FC, r27

    int8_t angle = random_angle();
    34d6:	0e 94 d7 15 	call	0x2bae	; 0x2bae <random_angle>
    34da:	18 2f       	mov	r17, r24
    ball_dx = MAX_BALL_SPEED;
    34dc:	84 ef       	ldi	r24, 0xF4	; 244
    34de:	91 e0       	ldi	r25, 0x01	; 1
    34e0:	a0 e0       	ldi	r26, 0x00	; 0
    34e2:	b0 e0       	ldi	r27, 0x00	; 0
    34e4:	80 93 ff 02 	sts	0x02FF, r24
    34e8:	90 93 00 03 	sts	0x0300, r25
    34ec:	a0 93 01 03 	sts	0x0301, r26
    34f0:	b0 93 02 03 	sts	0x0302, r27
    ball_dy = MAX_BALL_SPEED;
    34f4:	80 93 f5 02 	sts	0x02F5, r24
    34f8:	90 93 f6 02 	sts	0x02F6, r25
    34fc:	a0 93 f7 02 	sts	0x02F7, r26
    3500:	b0 93 f8 02 	sts	0x02F8, r27
    ball_dx *= cosine(angle);
    3504:	81 2f       	mov	r24, r17
    3506:	0e 94 6f 14 	call	0x28de	; 0x28de <cosine>
    350a:	aa 27       	eor	r26, r26
    350c:	97 fd       	sbrc	r25, 7
    350e:	a0 95       	com	r26
    3510:	ba 2f       	mov	r27, r26
    3512:	bc 01       	movw	r22, r24
    3514:	cd 01       	movw	r24, r26
    3516:	24 ef       	ldi	r18, 0xF4	; 244
    3518:	31 e0       	ldi	r19, 0x01	; 1
    351a:	40 e0       	ldi	r20, 0x00	; 0
    351c:	50 e0       	ldi	r21, 0x00	; 0
    351e:	0e 94 d8 3a 	call	0x75b0	; 0x75b0 <__mulsi3>
    3522:	60 93 ff 02 	sts	0x02FF, r22
    3526:	70 93 00 03 	sts	0x0300, r23
    352a:	80 93 01 03 	sts	0x0301, r24
    352e:	90 93 02 03 	sts	0x0302, r25
    ball_dy *= sine(angle);
    3532:	a0 90 f5 02 	lds	r10, 0x02F5
    3536:	b0 90 f6 02 	lds	r11, 0x02F6
    353a:	c0 90 f7 02 	lds	r12, 0x02F7
    353e:	d0 90 f8 02 	lds	r13, 0x02F8
    3542:	81 2f       	mov	r24, r17
    3544:	0e 94 41 14 	call	0x2882	; 0x2882 <sine>
    3548:	7c 01       	movw	r14, r24
    ball_dx /= 0x7FFF;
    354a:	60 91 ff 02 	lds	r22, 0x02FF
    354e:	70 91 00 03 	lds	r23, 0x0300
    3552:	80 91 01 03 	lds	r24, 0x0301
    3556:	90 91 02 03 	lds	r25, 0x0302
    355a:	2f ef       	ldi	r18, 0xFF	; 255
    355c:	3f e7       	ldi	r19, 0x7F	; 127
    355e:	40 e0       	ldi	r20, 0x00	; 0
    3560:	50 e0       	ldi	r21, 0x00	; 0
    3562:	0e 94 4c 3b 	call	0x7698	; 0x7698 <__divmodsi4>
    3566:	20 93 ff 02 	sts	0x02FF, r18
    356a:	30 93 00 03 	sts	0x0300, r19
    356e:	40 93 01 03 	sts	0x0301, r20
    3572:	50 93 02 03 	sts	0x0302, r21
    ball_dy /= 0x7FFF;
    3576:	00 27       	eor	r16, r16
    3578:	f7 fc       	sbrc	r15, 7
    357a:	00 95       	com	r16
    357c:	10 2f       	mov	r17, r16
    357e:	c8 01       	movw	r24, r16
    3580:	b7 01       	movw	r22, r14
    3582:	a6 01       	movw	r20, r12
    3584:	95 01       	movw	r18, r10
    3586:	0e 94 d8 3a 	call	0x75b0	; 0x75b0 <__mulsi3>
    358a:	2f ef       	ldi	r18, 0xFF	; 255
    358c:	3f e7       	ldi	r19, 0x7F	; 127
    358e:	40 e0       	ldi	r20, 0x00	; 0
    3590:	50 e0       	ldi	r21, 0x00	; 0
    3592:	0e 94 4c 3b 	call	0x7698	; 0x7698 <__divmodsi4>
    3596:	20 93 f5 02 	sts	0x02F5, r18
    359a:	30 93 f6 02 	sts	0x02F6, r19
    359e:	40 93 f7 02 	sts	0x02F7, r20
    35a2:	50 93 f8 02 	sts	0x02F8, r21
    

    glcdFillRectangle(LEFTPADDLE_X, left_keepout_top, PADDLE_W, left_keepout_bot - left_keepout_top, 0);
    35a6:	60 91 0a 02 	lds	r22, 0x020A
    35aa:	20 91 09 02 	lds	r18, 0x0209
    35ae:	26 1b       	sub	r18, r22
    35b0:	8a e0       	ldi	r24, 0x0A	; 10
    35b2:	43 e0       	ldi	r20, 0x03	; 3
    35b4:	00 e0       	ldi	r16, 0x00	; 0
    35b6:	0e 94 7e 29 	call	0x52fc	; 0x52fc <glcdFillRectangle>
    glcdFillRectangle(RIGHTPADDLE_X, right_keepout_top, PADDLE_W, right_keepout_bot - right_keepout_top, 0);
    35ba:	60 91 0c 02 	lds	r22, 0x020C
    35be:	20 91 0b 02 	lds	r18, 0x020B
    35c2:	26 1b       	sub	r18, r22
    35c4:	83 e7       	ldi	r24, 0x73	; 115
    35c6:	43 e0       	ldi	r20, 0x03	; 3
    35c8:	0e 94 7e 29 	call	0x52fc	; 0x52fc <glcdFillRectangle>

    right_keepout_top = right_keepout_bot = 0;
    35cc:	10 92 0b 02 	sts	0x020B, r1
    35d0:	10 92 0c 02 	sts	0x020C, r1
    left_keepout_top = left_keepout_bot = 0;
    35d4:	10 92 09 02 	sts	0x0209, r1
    35d8:	10 92 0a 02 	sts	0x020A, r1
    redraw_time_rat = 1;
    35dc:	81 e0       	ldi	r24, 0x01	; 1
    35de:	80 93 fb 01 	sts	0x01FB, r24
    minute_changed = hour_changed = 0;
    35e2:	10 92 1f 02 	sts	0x021F, r1
    35e6:	80 91 1f 02 	lds	r24, 0x021F
    35ea:	80 93 1e 02 	sts	0x021E, r24
    ticksremaining = calculate_dest_pos(&left_dest, &right_dest, &dest_paddle_pos, ball_dx > 0);
    35ee:	20 e0       	ldi	r18, 0x00	; 0
    35f0:	80 91 ff 02 	lds	r24, 0x02FF
    35f4:	90 91 00 03 	lds	r25, 0x0300
    35f8:	a0 91 01 03 	lds	r26, 0x0301
    35fc:	b0 91 02 03 	lds	r27, 0x0302
    3600:	18 16       	cp	r1, r24
    3602:	19 06       	cpc	r1, r25
    3604:	1a 06       	cpc	r1, r26
    3606:	1b 06       	cpc	r1, r27
    3608:	0c f4       	brge	.+2      	; 0x360c <step_rat+0x302>
    360a:	21 e0       	ldi	r18, 0x01	; 1
    360c:	8d ef       	ldi	r24, 0xFD	; 253
    360e:	91 e0       	ldi	r25, 0x01	; 1
    3610:	61 e0       	ldi	r22, 0x01	; 1
    3612:	72 e0       	ldi	r23, 0x02	; 2
    3614:	45 e0       	ldi	r20, 0x05	; 5
    3616:	52 e0       	ldi	r21, 0x02	; 2
    3618:	0e 94 05 16 	call	0x2c0a	; 0x2c0a <calculate_dest_pos>
    361c:	80 93 fd 02 	sts	0x02FD, r24
    3620:	10 92 fe 02 	sts	0x02FE, r1

		//left_score = time_h;
		//right_score = time_m;
		setscore_rat();
    3624:	0e 94 79 17 	call	0x2ef2	; 0x2ef2 <setscore_rat>
	}

 

  // save old paddle position
  oldleftpaddle_y = leftpaddle_y;
    3628:	80 91 ed 02 	lds	r24, 0x02ED
    362c:	90 91 ee 02 	lds	r25, 0x02EE
    3630:	a0 91 ef 02 	lds	r26, 0x02EF
    3634:	b0 91 f0 02 	lds	r27, 0x02F0
    3638:	80 93 e9 02 	sts	0x02E9, r24
    363c:	90 93 ea 02 	sts	0x02EA, r25
    3640:	a0 93 eb 02 	sts	0x02EB, r26
    3644:	b0 93 ec 02 	sts	0x02EC, r27
  oldrightpaddle_y = rightpaddle_y;
    3648:	80 91 0f 03 	lds	r24, 0x030F
    364c:	90 91 10 03 	lds	r25, 0x0310
    3650:	a0 91 11 03 	lds	r26, 0x0311
    3654:	b0 91 12 03 	lds	r27, 0x0312
    3658:	80 93 13 03 	sts	0x0313, r24
    365c:	90 93 14 03 	sts	0x0314, r25
    3660:	a0 93 15 03 	sts	0x0315, r26
    3664:	b0 93 16 03 	sts	0x0316, r27
    	move_paddle(&leftpaddle_y, dest_paddle_pos);
    }
  }*/
  
  //ticksremaining--;
  if((ball_dx < 0) && (ball_x < (SCREEN_W_FIXED/2))) {
    3668:	80 91 ff 02 	lds	r24, 0x02FF
    366c:	90 91 00 03 	lds	r25, 0x0300
    3670:	a0 91 01 03 	lds	r26, 0x0301
    3674:	b0 91 02 03 	lds	r27, 0x0302
    3678:	b7 ff       	sbrs	r27, 7
    367a:	2a c0       	rjmp	.+84     	; 0x36d0 <step_rat+0x3c6>
    367c:	80 91 0b 03 	lds	r24, 0x030B
    3680:	90 91 0c 03 	lds	r25, 0x030C
    3684:	a0 91 0d 03 	lds	r26, 0x030D
    3688:	b0 91 0e 03 	lds	r27, 0x030E
    368c:	80 50       	subi	r24, 0x00	; 0
    368e:	99 41       	sbci	r25, 0x19	; 25
    3690:	a0 40       	sbci	r26, 0x00	; 0
    3692:	b0 40       	sbci	r27, 0x00	; 0
    3694:	0c f0       	brlt	.+2      	; 0x3698 <step_rat+0x38e>
    3696:	4b c0       	rjmp	.+150    	; 0x372e <step_rat+0x424>
    move_paddle(&leftpaddle_y, minute_changed?dest_paddle_pos:(ball_y-(PADDLE_H_FIXED/3)));
    3698:	80 91 1e 02 	lds	r24, 0x021E
    369c:	88 23       	and	r24, r24
    369e:	49 f0       	breq	.+18     	; 0x36b2 <step_rat+0x3a8>
    36a0:	40 91 05 02 	lds	r20, 0x0205
    36a4:	50 91 06 02 	lds	r21, 0x0206
    36a8:	60 91 07 02 	lds	r22, 0x0207
    36ac:	70 91 08 02 	lds	r23, 0x0208
    36b0:	0c c0       	rjmp	.+24     	; 0x36ca <step_rat+0x3c0>
    36b2:	40 91 f9 02 	lds	r20, 0x02F9
    36b6:	50 91 fa 02 	lds	r21, 0x02FA
    36ba:	60 91 fb 02 	lds	r22, 0x02FB
    36be:	70 91 fc 02 	lds	r23, 0x02FC
    36c2:	40 59       	subi	r20, 0x90	; 144
    36c4:	51 40       	sbci	r21, 0x01	; 1
    36c6:	60 40       	sbci	r22, 0x00	; 0
    36c8:	70 40       	sbci	r23, 0x00	; 0
    36ca:	8d ee       	ldi	r24, 0xED	; 237
    36cc:	92 e0       	ldi	r25, 0x02	; 2
    36ce:	2c c0       	rjmp	.+88     	; 0x3728 <step_rat+0x41e>
  } else if((ball_dx > 0) && (ball_x > (SCREEN_W_FIXED/2))) {
    36d0:	00 97       	sbiw	r24, 0x00	; 0
    36d2:	a1 05       	cpc	r26, r1
    36d4:	b1 05       	cpc	r27, r1
    36d6:	99 f1       	breq	.+102    	; 0x373e <step_rat+0x434>
    36d8:	80 91 0b 03 	lds	r24, 0x030B
    36dc:	90 91 0c 03 	lds	r25, 0x030C
    36e0:	a0 91 0d 03 	lds	r26, 0x030D
    36e4:	b0 91 0e 03 	lds	r27, 0x030E
    36e8:	81 50       	subi	r24, 0x01	; 1
    36ea:	99 41       	sbci	r25, 0x19	; 25
    36ec:	a0 40       	sbci	r26, 0x00	; 0
    36ee:	b0 40       	sbci	r27, 0x00	; 0
    36f0:	34 f1       	brlt	.+76     	; 0x373e <step_rat+0x434>
  	move_paddle(&rightpaddle_y, hour_changed?dest_paddle_pos:(ball_y-(PADDLE_H_FIXED/3)));
    36f2:	80 91 1f 02 	lds	r24, 0x021F
    36f6:	88 23       	and	r24, r24
    36f8:	49 f0       	breq	.+18     	; 0x370c <step_rat+0x402>
    36fa:	40 91 05 02 	lds	r20, 0x0205
    36fe:	50 91 06 02 	lds	r21, 0x0206
    3702:	60 91 07 02 	lds	r22, 0x0207
    3706:	70 91 08 02 	lds	r23, 0x0208
    370a:	0c c0       	rjmp	.+24     	; 0x3724 <step_rat+0x41a>
    370c:	40 91 f9 02 	lds	r20, 0x02F9
    3710:	50 91 fa 02 	lds	r21, 0x02FA
    3714:	60 91 fb 02 	lds	r22, 0x02FB
    3718:	70 91 fc 02 	lds	r23, 0x02FC
    371c:	40 59       	subi	r20, 0x90	; 144
    371e:	51 40       	sbci	r21, 0x01	; 1
    3720:	60 40       	sbci	r22, 0x00	; 0
    3722:	70 40       	sbci	r23, 0x00	; 0
    3724:	8f e0       	ldi	r24, 0x0F	; 15
    3726:	93 e0       	ldi	r25, 0x03	; 3
    3728:	0e 94 73 14 	call	0x28e6	; 0x28e6 <move_paddle>
    372c:	15 c0       	rjmp	.+42     	; 0x3758 <step_rat+0x44e>
  } else {
  	if(ball_dx < 0)
  		ticksremaining = calculate_dest_pos(&left_dest, &right_dest, &dest_paddle_pos, 1);
    372e:	8d ef       	ldi	r24, 0xFD	; 253
    3730:	91 e0       	ldi	r25, 0x01	; 1
    3732:	61 e0       	ldi	r22, 0x01	; 1
    3734:	72 e0       	ldi	r23, 0x02	; 2
    3736:	45 e0       	ldi	r20, 0x05	; 5
    3738:	52 e0       	ldi	r21, 0x02	; 2
    373a:	21 e0       	ldi	r18, 0x01	; 1
    373c:	07 c0       	rjmp	.+14     	; 0x374c <step_rat+0x442>
  	else
  		ticksremaining = calculate_dest_pos(&left_dest, &right_dest, &dest_paddle_pos, 0);
    373e:	8d ef       	ldi	r24, 0xFD	; 253
    3740:	91 e0       	ldi	r25, 0x01	; 1
    3742:	61 e0       	ldi	r22, 0x01	; 1
    3744:	72 e0       	ldi	r23, 0x02	; 2
    3746:	45 e0       	ldi	r20, 0x05	; 5
    3748:	52 e0       	ldi	r21, 0x02	; 2
    374a:	20 e0       	ldi	r18, 0x00	; 0
    374c:	0e 94 05 16 	call	0x2c0a	; 0x2c0a <calculate_dest_pos>
    3750:	80 93 fd 02 	sts	0x02FD, r24
    3754:	10 92 fe 02 	sts	0x02FE, r1
  }

  // make sure the paddles dont hit the top or bottom
  if (leftpaddle_y < TOPBAR_H_FIXED +1)
    3758:	80 91 ed 02 	lds	r24, 0x02ED
    375c:	90 91 ee 02 	lds	r25, 0x02EE
    3760:	a0 91 ef 02 	lds	r26, 0x02EF
    3764:	b0 91 f0 02 	lds	r27, 0x02F0
    3768:	89 3c       	cpi	r24, 0xC9	; 201
    376a:	91 05       	cpc	r25, r1
    376c:	a1 05       	cpc	r26, r1
    376e:	b1 05       	cpc	r27, r1
    3770:	64 f4       	brge	.+24     	; 0x378a <step_rat+0x480>
    leftpaddle_y = TOPBAR_H_FIXED + 1;
    3772:	89 ec       	ldi	r24, 0xC9	; 201
    3774:	90 e0       	ldi	r25, 0x00	; 0
    3776:	a0 e0       	ldi	r26, 0x00	; 0
    3778:	b0 e0       	ldi	r27, 0x00	; 0
    377a:	80 93 ed 02 	sts	0x02ED, r24
    377e:	90 93 ee 02 	sts	0x02EE, r25
    3782:	a0 93 ef 02 	sts	0x02EF, r26
    3786:	b0 93 f0 02 	sts	0x02F0, r27
  if (rightpaddle_y < TOPBAR_H_FIXED + 1)
    378a:	80 91 0f 03 	lds	r24, 0x030F
    378e:	90 91 10 03 	lds	r25, 0x0310
    3792:	a0 91 11 03 	lds	r26, 0x0311
    3796:	b0 91 12 03 	lds	r27, 0x0312
    379a:	89 3c       	cpi	r24, 0xC9	; 201
    379c:	91 05       	cpc	r25, r1
    379e:	a1 05       	cpc	r26, r1
    37a0:	b1 05       	cpc	r27, r1
    37a2:	64 f4       	brge	.+24     	; 0x37bc <step_rat+0x4b2>
    rightpaddle_y = TOPBAR_H_FIXED + 1;
    37a4:	89 ec       	ldi	r24, 0xC9	; 201
    37a6:	90 e0       	ldi	r25, 0x00	; 0
    37a8:	a0 e0       	ldi	r26, 0x00	; 0
    37aa:	b0 e0       	ldi	r27, 0x00	; 0
    37ac:	80 93 0f 03 	sts	0x030F, r24
    37b0:	90 93 10 03 	sts	0x0310, r25
    37b4:	a0 93 11 03 	sts	0x0311, r26
    37b8:	b0 93 12 03 	sts	0x0312, r27
  
  if (leftpaddle_y > (SCREEN_H_FIXED - PADDLE_H_FIXED - BOTBAR_H_FIXED - 1))
    37bc:	80 91 ed 02 	lds	r24, 0x02ED
    37c0:	90 91 ee 02 	lds	r25, 0x02EE
    37c4:	a0 91 ef 02 	lds	r26, 0x02EF
    37c8:	b0 91 f0 02 	lds	r27, 0x02F0
    37cc:	88 58       	subi	r24, 0x88	; 136
    37ce:	93 41       	sbci	r25, 0x13	; 19
    37d0:	a0 40       	sbci	r26, 0x00	; 0
    37d2:	b0 40       	sbci	r27, 0x00	; 0
    37d4:	64 f0       	brlt	.+24     	; 0x37ee <step_rat+0x4e4>
    leftpaddle_y = (SCREEN_H_FIXED - PADDLE_H_FIXED - BOTBAR_H_FIXED - 1);
    37d6:	87 e8       	ldi	r24, 0x87	; 135
    37d8:	93 e1       	ldi	r25, 0x13	; 19
    37da:	a0 e0       	ldi	r26, 0x00	; 0
    37dc:	b0 e0       	ldi	r27, 0x00	; 0
    37de:	80 93 ed 02 	sts	0x02ED, r24
    37e2:	90 93 ee 02 	sts	0x02EE, r25
    37e6:	a0 93 ef 02 	sts	0x02EF, r26
    37ea:	b0 93 f0 02 	sts	0x02F0, r27
  if (rightpaddle_y > (SCREEN_H_FIXED - PADDLE_H_FIXED - BOTBAR_H_FIXED - 1))
    37ee:	80 91 0f 03 	lds	r24, 0x030F
    37f2:	90 91 10 03 	lds	r25, 0x0310
    37f6:	a0 91 11 03 	lds	r26, 0x0311
    37fa:	b0 91 12 03 	lds	r27, 0x0312
    37fe:	88 58       	subi	r24, 0x88	; 136
    3800:	93 41       	sbci	r25, 0x13	; 19
    3802:	a0 40       	sbci	r26, 0x00	; 0
    3804:	b0 40       	sbci	r27, 0x00	; 0
    3806:	64 f0       	brlt	.+24     	; 0x3820 <step_rat+0x516>
    rightpaddle_y = (SCREEN_H_FIXED - PADDLE_H_FIXED - BOTBAR_H_FIXED - 1);
    3808:	87 e8       	ldi	r24, 0x87	; 135
    380a:	93 e1       	ldi	r25, 0x13	; 19
    380c:	a0 e0       	ldi	r26, 0x00	; 0
    380e:	b0 e0       	ldi	r27, 0x00	; 0
    3810:	80 93 0f 03 	sts	0x030F, r24
    3814:	90 93 10 03 	sts	0x0310, r25
    3818:	a0 93 11 03 	sts	0x0311, r26
    381c:	b0 93 12 03 	sts	0x0312, r27
  
  if ((ball_dx > 0) && intersectrect(ball_x/FIXED_MATH, ball_y/FIXED_MATH, ball_radius*2, ball_radius*2, RIGHTPADDLE_X, rightpaddle_y/FIXED_MATH, PADDLE_W, PADDLE_H)) {
    3820:	80 91 ff 02 	lds	r24, 0x02FF
    3824:	90 91 00 03 	lds	r25, 0x0300
    3828:	a0 91 01 03 	lds	r26, 0x0301
    382c:	b0 91 02 03 	lds	r27, 0x0302
    3830:	18 16       	cp	r1, r24
    3832:	19 06       	cpc	r1, r25
    3834:	1a 06       	cpc	r1, r26
    3836:	1b 06       	cpc	r1, r27
    3838:	0c f0       	brlt	.+2      	; 0x383c <step_rat+0x532>
    383a:	5d c0       	rjmp	.+186    	; 0x38f6 <step_rat+0x5ec>
    383c:	60 91 0b 03 	lds	r22, 0x030B
    3840:	70 91 0c 03 	lds	r23, 0x030C
    3844:	80 91 0d 03 	lds	r24, 0x030D
    3848:	90 91 0e 03 	lds	r25, 0x030E
    384c:	24 e6       	ldi	r18, 0x64	; 100
    384e:	30 e0       	ldi	r19, 0x00	; 0
    3850:	40 e0       	ldi	r20, 0x00	; 0
    3852:	50 e0       	ldi	r21, 0x00	; 0
    3854:	0e 94 4c 3b 	call	0x7698	; 0x7698 <__divmodsi4>
    3858:	02 2f       	mov	r16, r18
    385a:	60 91 f9 02 	lds	r22, 0x02F9
    385e:	70 91 fa 02 	lds	r23, 0x02FA
    3862:	80 91 fb 02 	lds	r24, 0x02FB
    3866:	90 91 fc 02 	lds	r25, 0x02FC
    386a:	24 e6       	ldi	r18, 0x64	; 100
    386c:	30 e0       	ldi	r19, 0x00	; 0
    386e:	40 e0       	ldi	r20, 0x00	; 0
    3870:	50 e0       	ldi	r21, 0x00	; 0
    3872:	0e 94 4c 3b 	call	0x7698	; 0x7698 <__divmodsi4>
    3876:	12 2f       	mov	r17, r18
    3878:	60 91 0f 03 	lds	r22, 0x030F
    387c:	70 91 10 03 	lds	r23, 0x0310
    3880:	80 91 11 03 	lds	r24, 0x0311
    3884:	90 91 12 03 	lds	r25, 0x0312
    3888:	24 e6       	ldi	r18, 0x64	; 100
    388a:	30 e0       	ldi	r19, 0x00	; 0
    388c:	40 e0       	ldi	r20, 0x00	; 0
    388e:	50 e0       	ldi	r21, 0x00	; 0
    3890:	0e 94 4c 3b 	call	0x7698	; 0x7698 <__divmodsi4>
    3894:	e2 2e       	mov	r14, r18
    3896:	80 2f       	mov	r24, r16
    3898:	61 2f       	mov	r22, r17
    389a:	44 e0       	ldi	r20, 0x04	; 4
    389c:	24 e0       	ldi	r18, 0x04	; 4
    389e:	03 e7       	ldi	r16, 0x73	; 115
    38a0:	e3 e0       	ldi	r30, 0x03	; 3
    38a2:	ce 2e       	mov	r12, r30
    38a4:	7c e0       	ldi	r23, 0x0C	; 12
    38a6:	a7 2e       	mov	r10, r23
    38a8:	0e 94 66 39 	call	0x72cc	; 0x72cc <intersectrect>
    38ac:	88 23       	and	r24, r24
    38ae:	19 f1       	breq	.+70     	; 0x38f6 <step_rat+0x5ec>
    ball_dx *= -1;
    38b0:	80 91 ff 02 	lds	r24, 0x02FF
    38b4:	90 91 00 03 	lds	r25, 0x0300
    38b8:	a0 91 01 03 	lds	r26, 0x0301
    38bc:	b0 91 02 03 	lds	r27, 0x0302
    38c0:	b0 95       	com	r27
    38c2:	a0 95       	com	r26
    38c4:	90 95       	com	r25
    38c6:	81 95       	neg	r24
    38c8:	9f 4f       	sbci	r25, 0xFF	; 255
    38ca:	af 4f       	sbci	r26, 0xFF	; 255
    38cc:	bf 4f       	sbci	r27, 0xFF	; 255
    38ce:	80 93 ff 02 	sts	0x02FF, r24
    38d2:	90 93 00 03 	sts	0x0300, r25
    38d6:	a0 93 01 03 	sts	0x0301, r26
    38da:	b0 93 02 03 	sts	0x0302, r27
    ball_x = RIGHTPADDLE_X_FIXED - (ball_radius*2*FIXED_MATH);
    38de:	8c e5       	ldi	r24, 0x5C	; 92
    38e0:	9b e2       	ldi	r25, 0x2B	; 43
    38e2:	a0 e0       	ldi	r26, 0x00	; 0
    38e4:	b0 e0       	ldi	r27, 0x00	; 0
    38e6:	80 93 0b 03 	sts	0x030B, r24
    38ea:	90 93 0c 03 	sts	0x030C, r25
    38ee:	a0 93 0d 03 	sts	0x030D, r26
    38f2:	b0 93 0e 03 	sts	0x030E, r27
    //ball_y = right_dest;
    //ticksremaining = calculate_dest_pos(&left_dest, &right_dest, &dest_paddle_pos, 1);
  }
  if ((ball_dx < 0) && intersectrect(ball_x/FIXED_MATH, ball_y/FIXED_MATH, ball_radius*2, ball_radius*2, LEFTPADDLE_X, leftpaddle_y/FIXED_MATH, PADDLE_W, PADDLE_H)) {
    38f6:	80 91 ff 02 	lds	r24, 0x02FF
    38fa:	90 91 00 03 	lds	r25, 0x0300
    38fe:	a0 91 01 03 	lds	r26, 0x0301
    3902:	b0 91 02 03 	lds	r27, 0x0302
    3906:	b7 ff       	sbrs	r27, 7
    3908:	5d c0       	rjmp	.+186    	; 0x39c4 <step_rat+0x6ba>
    390a:	60 91 0b 03 	lds	r22, 0x030B
    390e:	70 91 0c 03 	lds	r23, 0x030C
    3912:	80 91 0d 03 	lds	r24, 0x030D
    3916:	90 91 0e 03 	lds	r25, 0x030E
    391a:	24 e6       	ldi	r18, 0x64	; 100
    391c:	30 e0       	ldi	r19, 0x00	; 0
    391e:	40 e0       	ldi	r20, 0x00	; 0
    3920:	50 e0       	ldi	r21, 0x00	; 0
    3922:	0e 94 4c 3b 	call	0x7698	; 0x7698 <__divmodsi4>
    3926:	02 2f       	mov	r16, r18
    3928:	60 91 f9 02 	lds	r22, 0x02F9
    392c:	70 91 fa 02 	lds	r23, 0x02FA
    3930:	80 91 fb 02 	lds	r24, 0x02FB
    3934:	90 91 fc 02 	lds	r25, 0x02FC
    3938:	24 e6       	ldi	r18, 0x64	; 100
    393a:	30 e0       	ldi	r19, 0x00	; 0
    393c:	40 e0       	ldi	r20, 0x00	; 0
    393e:	50 e0       	ldi	r21, 0x00	; 0
    3940:	0e 94 4c 3b 	call	0x7698	; 0x7698 <__divmodsi4>
    3944:	12 2f       	mov	r17, r18
    3946:	60 91 ed 02 	lds	r22, 0x02ED
    394a:	70 91 ee 02 	lds	r23, 0x02EE
    394e:	80 91 ef 02 	lds	r24, 0x02EF
    3952:	90 91 f0 02 	lds	r25, 0x02F0
    3956:	24 e6       	ldi	r18, 0x64	; 100
    3958:	30 e0       	ldi	r19, 0x00	; 0
    395a:	40 e0       	ldi	r20, 0x00	; 0
    395c:	50 e0       	ldi	r21, 0x00	; 0
    395e:	0e 94 4c 3b 	call	0x7698	; 0x7698 <__divmodsi4>
    3962:	e2 2e       	mov	r14, r18
    3964:	80 2f       	mov	r24, r16
    3966:	61 2f       	mov	r22, r17
    3968:	44 e0       	ldi	r20, 0x04	; 4
    396a:	24 e0       	ldi	r18, 0x04	; 4
    396c:	0a e0       	ldi	r16, 0x0A	; 10
    396e:	53 e0       	ldi	r21, 0x03	; 3
    3970:	c5 2e       	mov	r12, r21
    3972:	3c e0       	ldi	r19, 0x0C	; 12
    3974:	a3 2e       	mov	r10, r19
    3976:	0e 94 66 39 	call	0x72cc	; 0x72cc <intersectrect>
    397a:	88 23       	and	r24, r24
    397c:	19 f1       	breq	.+70     	; 0x39c4 <step_rat+0x6ba>
    ball_dx *= -1;
    397e:	80 91 ff 02 	lds	r24, 0x02FF
    3982:	90 91 00 03 	lds	r25, 0x0300
    3986:	a0 91 01 03 	lds	r26, 0x0301
    398a:	b0 91 02 03 	lds	r27, 0x0302
    398e:	b0 95       	com	r27
    3990:	a0 95       	com	r26
    3992:	90 95       	com	r25
    3994:	81 95       	neg	r24
    3996:	9f 4f       	sbci	r25, 0xFF	; 255
    3998:	af 4f       	sbci	r26, 0xFF	; 255
    399a:	bf 4f       	sbci	r27, 0xFF	; 255
    399c:	80 93 ff 02 	sts	0x02FF, r24
    39a0:	90 93 00 03 	sts	0x0300, r25
    39a4:	a0 93 01 03 	sts	0x0301, r26
    39a8:	b0 93 02 03 	sts	0x0302, r27
    ball_x = LEFTPADDLE_X_FIXED + PADDLE_W_FIXED;
    39ac:	84 e1       	ldi	r24, 0x14	; 20
    39ae:	95 e0       	ldi	r25, 0x05	; 5
    39b0:	a0 e0       	ldi	r26, 0x00	; 0
    39b2:	b0 e0       	ldi	r27, 0x00	; 0
    39b4:	80 93 0b 03 	sts	0x030B, r24
    39b8:	90 93 0c 03 	sts	0x030C, r25
    39bc:	a0 93 0d 03 	sts	0x030D, r26
    39c0:	b0 93 0e 03 	sts	0x030E, r27
    //ball_y = left_dest;
    //ticksremaining = calculate_dest_pos(&left_dest, &right_dest, &dest_paddle_pos, 0);
  }
  
}
    39c4:	1f 91       	pop	r17
    39c6:	0f 91       	pop	r16
    39c8:	ff 90       	pop	r15
    39ca:	ef 90       	pop	r14
    39cc:	df 90       	pop	r13
    39ce:	cf 90       	pop	r12
    39d0:	bf 90       	pop	r11
    39d2:	af 90       	pop	r10
    39d4:	9f 90       	pop	r9
    39d6:	8f 90       	pop	r8
    39d8:	7f 90       	pop	r7
    39da:	6f 90       	pop	r6
    39dc:	08 95       	ret

000039de <initdisplay_rat>:

  ball_dx = ball_dy = 0;
  initdisplay_rat(0);
}

void initdisplay_rat(uint8_t inverted) {
    39de:	ff 92       	push	r15
    39e0:	0f 93       	push	r16
    39e2:	1f 93       	push	r17
    39e4:	f8 2e       	mov	r15, r24

  glcdFillRectangle(0, 0, GLCD_XPIXELS, GLCD_YPIXELS, inverted);
    39e6:	80 e0       	ldi	r24, 0x00	; 0
    39e8:	60 e0       	ldi	r22, 0x00	; 0
    39ea:	40 e8       	ldi	r20, 0x80	; 128
    39ec:	20 e4       	ldi	r18, 0x40	; 64
    39ee:	0f 2d       	mov	r16, r15
    39f0:	0e 94 7e 29 	call	0x52fc	; 0x52fc <glcdFillRectangle>
  
  // draw top 'line'
  glcdFillRectangle(0, 0, GLCD_XPIXELS, 2, ! inverted);
    39f4:	10 e0       	ldi	r17, 0x00	; 0
    39f6:	ff 20       	and	r15, r15
    39f8:	09 f4       	brne	.+2      	; 0x39fc <initdisplay_rat+0x1e>
    39fa:	11 e0       	ldi	r17, 0x01	; 1
    39fc:	80 e0       	ldi	r24, 0x00	; 0
    39fe:	60 e0       	ldi	r22, 0x00	; 0
    3a00:	40 e8       	ldi	r20, 0x80	; 128
    3a02:	22 e0       	ldi	r18, 0x02	; 2
    3a04:	01 2f       	mov	r16, r17
    3a06:	0e 94 7e 29 	call	0x52fc	; 0x52fc <glcdFillRectangle>
  
  // bottom line
  glcdFillRectangle(0, GLCD_YPIXELS - 2, GLCD_XPIXELS, 2, ! inverted);
    3a0a:	80 e0       	ldi	r24, 0x00	; 0
    3a0c:	6e e3       	ldi	r22, 0x3E	; 62
    3a0e:	40 e8       	ldi	r20, 0x80	; 128
    3a10:	22 e0       	ldi	r18, 0x02	; 2
    3a12:	0e 94 7e 29 	call	0x52fc	; 0x52fc <glcdFillRectangle>

  // left paddle
  glcdFillRectangle(LEFTPADDLE_X, leftpaddle_y/FIXED_MATH, PADDLE_W, PADDLE_H, ! inverted);
    3a16:	60 91 ed 02 	lds	r22, 0x02ED
    3a1a:	70 91 ee 02 	lds	r23, 0x02EE
    3a1e:	80 91 ef 02 	lds	r24, 0x02EF
    3a22:	90 91 f0 02 	lds	r25, 0x02F0
    3a26:	24 e6       	ldi	r18, 0x64	; 100
    3a28:	30 e0       	ldi	r19, 0x00	; 0
    3a2a:	40 e0       	ldi	r20, 0x00	; 0
    3a2c:	50 e0       	ldi	r21, 0x00	; 0
    3a2e:	0e 94 4c 3b 	call	0x7698	; 0x7698 <__divmodsi4>
    3a32:	8a e0       	ldi	r24, 0x0A	; 10
    3a34:	62 2f       	mov	r22, r18
    3a36:	43 e0       	ldi	r20, 0x03	; 3
    3a38:	2c e0       	ldi	r18, 0x0C	; 12
    3a3a:	0e 94 7e 29 	call	0x52fc	; 0x52fc <glcdFillRectangle>
  // right paddle
  glcdFillRectangle(RIGHTPADDLE_X, rightpaddle_y/FIXED_MATH, PADDLE_W, PADDLE_H, ! inverted);
    3a3e:	60 91 0f 03 	lds	r22, 0x030F
    3a42:	70 91 10 03 	lds	r23, 0x0310
    3a46:	80 91 11 03 	lds	r24, 0x0311
    3a4a:	90 91 12 03 	lds	r25, 0x0312
    3a4e:	24 e6       	ldi	r18, 0x64	; 100
    3a50:	30 e0       	ldi	r19, 0x00	; 0
    3a52:	40 e0       	ldi	r20, 0x00	; 0
    3a54:	50 e0       	ldi	r21, 0x00	; 0
    3a56:	0e 94 4c 3b 	call	0x7698	; 0x7698 <__divmodsi4>
    3a5a:	83 e7       	ldi	r24, 0x73	; 115
    3a5c:	62 2f       	mov	r22, r18
    3a5e:	43 e0       	ldi	r20, 0x03	; 3
    3a60:	2c e0       	ldi	r18, 0x0C	; 12
    3a62:	0e 94 7e 29 	call	0x52fc	; 0x52fc <glcdFillRectangle>
      
	//left_score = time_h;
	//right_score = time_m;
	setscore_rat();
    3a66:	0e 94 79 17 	call	0x2ef2	; 0x2ef2 <setscore_rat>

  // time
    drawbigdigit(DISPLAY_H10_X_RAT, DISPLAY_TIME_Y_RAT, left_score/10, inverted);
    3a6a:	80 91 d6 02 	lds	r24, 0x02D6
    3a6e:	6a e0       	ldi	r22, 0x0A	; 10
    3a70:	0e 94 f7 3a 	call	0x75ee	; 0x75ee <__udivmodqi4>
    3a74:	48 2f       	mov	r20, r24
    3a76:	8e e1       	ldi	r24, 0x1E	; 30
    3a78:	64 e0       	ldi	r22, 0x04	; 4
    3a7a:	2f 2d       	mov	r18, r15
    3a7c:	0e 94 71 3a 	call	0x74e2	; 0x74e2 <drawbigdigit>
    drawbigdigit(DISPLAY_H1_X_RAT, DISPLAY_TIME_Y_RAT, left_score%10, inverted);
    3a80:	80 91 d6 02 	lds	r24, 0x02D6
    3a84:	6a e0       	ldi	r22, 0x0A	; 10
    3a86:	0e 94 f7 3a 	call	0x75ee	; 0x75ee <__udivmodqi4>
    3a8a:	8d e2       	ldi	r24, 0x2D	; 45
    3a8c:	64 e0       	ldi	r22, 0x04	; 4
    3a8e:	49 2f       	mov	r20, r25
    3a90:	2f 2d       	mov	r18, r15
    3a92:	0e 94 71 3a 	call	0x74e2	; 0x74e2 <drawbigdigit>
  
  drawbigdigit(DISPLAY_M10_X_RAT, DISPLAY_TIME_Y_RAT, right_score/10, inverted);
    3a96:	80 91 da 02 	lds	r24, 0x02DA
    3a9a:	6a e0       	ldi	r22, 0x0A	; 10
    3a9c:	0e 94 f7 3a 	call	0x75ee	; 0x75ee <__udivmodqi4>
    3aa0:	48 2f       	mov	r20, r24
    3aa2:	86 e4       	ldi	r24, 0x46	; 70
    3aa4:	64 e0       	ldi	r22, 0x04	; 4
    3aa6:	2f 2d       	mov	r18, r15
    3aa8:	0e 94 71 3a 	call	0x74e2	; 0x74e2 <drawbigdigit>
  drawbigdigit(DISPLAY_M1_X_RAT, DISPLAY_TIME_Y_RAT, right_score%10, inverted);
    3aac:	80 91 da 02 	lds	r24, 0x02DA
    3ab0:	6a e0       	ldi	r22, 0x0A	; 10
    3ab2:	0e 94 f7 3a 	call	0x75ee	; 0x75ee <__udivmodqi4>
    3ab6:	85 e5       	ldi	r24, 0x55	; 85
    3ab8:	64 e0       	ldi	r22, 0x04	; 4
    3aba:	49 2f       	mov	r20, r25
    3abc:	2f 2d       	mov	r18, r15
    3abe:	0e 94 71 3a 	call	0x74e2	; 0x74e2 <drawbigdigit>

  drawmidline(inverted);
    3ac2:	8f 2d       	mov	r24, r15
    3ac4:	0e 94 59 17 	call	0x2eb2	; 0x2eb2 <drawmidline>
}
    3ac8:	1f 91       	pop	r17
    3aca:	0f 91       	pop	r16
    3acc:	ff 90       	pop	r15
    3ace:	08 95       	ret

00003ad0 <initanim_rat>:
  DEBUG(uart_putw_dec(GLCD_XPIXELS));
  DEBUG(putstring("\n\rscreen height: "));
  DEBUG(uart_putw_dec(GLCD_YPIXELS));
  DEBUG(putstring_nl(""));

  oldball_x = ball_x = 2500;
    3ad0:	84 ec       	ldi	r24, 0xC4	; 196
    3ad2:	99 e0       	ldi	r25, 0x09	; 9
    3ad4:	a0 e0       	ldi	r26, 0x00	; 0
    3ad6:	b0 e0       	ldi	r27, 0x00	; 0
    3ad8:	80 93 0b 03 	sts	0x030B, r24
    3adc:	90 93 0c 03 	sts	0x030C, r25
    3ae0:	a0 93 0d 03 	sts	0x030D, r26
    3ae4:	b0 93 0e 03 	sts	0x030E, r27
    3ae8:	80 93 07 03 	sts	0x0307, r24
    3aec:	90 93 08 03 	sts	0x0308, r25
    3af0:	a0 93 09 03 	sts	0x0309, r26
    3af4:	b0 93 0a 03 	sts	0x030A, r27
  oldball_y = ball_y = 2500;	//Somewhere away from 0,0.
    3af8:	80 93 f9 02 	sts	0x02F9, r24
    3afc:	90 93 fa 02 	sts	0x02FA, r25
    3b00:	a0 93 fb 02 	sts	0x02FB, r26
    3b04:	b0 93 fc 02 	sts	0x02FC, r27
    3b08:	80 93 17 03 	sts	0x0317, r24
    3b0c:	90 93 18 03 	sts	0x0318, r25
    3b10:	a0 93 19 03 	sts	0x0319, r26
    3b14:	b0 93 1a 03 	sts	0x031A, r27
  oldleftpaddle_y = leftpaddle_y = 2500;
    3b18:	80 93 ed 02 	sts	0x02ED, r24
    3b1c:	90 93 ee 02 	sts	0x02EE, r25
    3b20:	a0 93 ef 02 	sts	0x02EF, r26
    3b24:	b0 93 f0 02 	sts	0x02F0, r27
    3b28:	80 93 e9 02 	sts	0x02E9, r24
    3b2c:	90 93 ea 02 	sts	0x02EA, r25
    3b30:	a0 93 eb 02 	sts	0x02EB, r26
    3b34:	b0 93 ec 02 	sts	0x02EC, r27
  oldrightpaddle_y = rightpaddle_y = 2500;
    3b38:	80 93 0f 03 	sts	0x030F, r24
    3b3c:	90 93 10 03 	sts	0x0310, r25
    3b40:	a0 93 11 03 	sts	0x0311, r26
    3b44:	b0 93 12 03 	sts	0x0312, r27
    3b48:	80 93 13 03 	sts	0x0313, r24
    3b4c:	90 93 14 03 	sts	0x0314, r25
    3b50:	a0 93 15 03 	sts	0x0315, r26
    3b54:	b0 93 16 03 	sts	0x0316, r27
  init_crand();
    3b58:	0e 94 0b 39 	call	0x7216	; 0x7216 <init_crand>

  ball_dx = ball_dy = 0;
    3b5c:	10 92 f5 02 	sts	0x02F5, r1
    3b60:	10 92 f6 02 	sts	0x02F6, r1
    3b64:	10 92 f7 02 	sts	0x02F7, r1
    3b68:	10 92 f8 02 	sts	0x02F8, r1
    3b6c:	10 92 ff 02 	sts	0x02FF, r1
    3b70:	10 92 00 03 	sts	0x0300, r1
    3b74:	10 92 01 03 	sts	0x0301, r1
    3b78:	10 92 02 03 	sts	0x0302, r1
  initdisplay_rat(0);
    3b7c:	80 e0       	ldi	r24, 0x00	; 0
    3b7e:	0e 94 ef 1c 	call	0x39de	; 0x39de <initdisplay_rat>
}
    3b82:	08 95       	ret

00003b84 <initbuttons>:
// whether hte alarm is going off
extern volatile uint8_t alarming;

void initbuttons(void) {
  // alarm pin requires a pullup
  ALARM_DDR &= ~_BV(ALARM);
    3b84:	26 98       	cbi	0x04, 6	; 4
  ALARM_PORT |= _BV(ALARM);
    3b86:	2e 9a       	sbi	0x05, 6	; 5

  // alarm switching is detected by using the pin change interrupt
  PCICR =  _BV(PCIE0);
    3b88:	81 e0       	ldi	r24, 0x01	; 1
    3b8a:	80 93 68 00 	sts	0x0068, r24
  PCMSK0 |= _BV(ALARM);
    3b8e:	eb e6       	ldi	r30, 0x6B	; 107
    3b90:	f0 e0       	ldi	r31, 0x00	; 0
    3b92:	80 81       	ld	r24, Z
    3b94:	80 64       	ori	r24, 0x40	; 64
    3b96:	80 83       	st	Z, r24

  // The buttons are totem pole'd together so we can read the buttons with one pin
  // set up ADC
  ADMUX = 2;      // listen to ADC2 for button presses
    3b98:	82 e0       	ldi	r24, 0x02	; 2
    3b9a:	80 93 7c 00 	sts	0x007C, r24
  ADCSRB = 0;     // free running mode
    3b9e:	10 92 7b 00 	sts	0x007B, r1
  // enable ADC and interrupts, prescale down to <200KHz
  ADCSRA = _BV(ADEN) | _BV(ADIE) | _BV(ADPS2) | _BV(ADPS1); 
    3ba2:	ea e7       	ldi	r30, 0x7A	; 122
    3ba4:	f0 e0       	ldi	r31, 0x00	; 0
    3ba6:	8e e8       	ldi	r24, 0x8E	; 142
    3ba8:	80 83       	st	Z, r24
  ADCSRA |= _BV(ADSC); // start a conversion
    3baa:	80 81       	ld	r24, Z
    3bac:	80 64       	ori	r24, 0x40	; 64
    3bae:	80 83       	st	Z, r24
}
    3bb0:	08 95       	ret

00003bb2 <readADC>:

uint16_t readADC(void) {
  // basically just the busy-wait code to read the ADC and return the value
  ADCSRA &= ~_BV(ADIE); // no interrupt
    3bb2:	80 91 7a 00 	lds	r24, 0x007A
    3bb6:	87 7f       	andi	r24, 0xF7	; 247
    3bb8:	80 93 7a 00 	sts	0x007A, r24
  ADCSRA |= _BV(ADSC); // start a conversion
    3bbc:	80 91 7a 00 	lds	r24, 0x007A
    3bc0:	80 64       	ori	r24, 0x40	; 64
    3bc2:	80 93 7a 00 	sts	0x007A, r24
  while (! (ADCSRA & _BV(ADIF)));
    3bc6:	80 91 7a 00 	lds	r24, 0x007A
    3bca:	84 ff       	sbrs	r24, 4
    3bcc:	fc cf       	rjmp	.-8      	; 0x3bc6 <readADC+0x14>
  return ADC;
    3bce:	20 91 78 00 	lds	r18, 0x0078
    3bd2:	30 91 79 00 	lds	r19, 0x0079
}
    3bd6:	c9 01       	movw	r24, r18
    3bd8:	08 95       	ret

00003bda <__vector_3>:
  }
  ADCSRA |= _BV(ADIE) | _BV(ADSC); // start next conversion  
}

// We use the pin change interrupts to detect when alarm changes
SIGNAL(PCINT0_vect) {
    3bda:	1f 92       	push	r1
    3bdc:	0f 92       	push	r0
    3bde:	0f b6       	in	r0, 0x3f	; 63
    3be0:	0f 92       	push	r0
    3be2:	11 24       	eor	r1, r1
    3be4:	2f 93       	push	r18
    3be6:	3f 93       	push	r19
    3be8:	4f 93       	push	r20
    3bea:	5f 93       	push	r21
    3bec:	6f 93       	push	r22
    3bee:	7f 93       	push	r23
    3bf0:	8f 93       	push	r24
    3bf2:	9f 93       	push	r25
    3bf4:	af 93       	push	r26
    3bf6:	bf 93       	push	r27
    3bf8:	ef 93       	push	r30
    3bfa:	ff 93       	push	r31
  // allow interrupts while we're doing this
  sei();
    3bfc:	78 94       	sei
  setalarmstate();
    3bfe:	0e 94 89 2e 	call	0x5d12	; 0x5d12 <setalarmstate>
}
    3c02:	ff 91       	pop	r31
    3c04:	ef 91       	pop	r30
    3c06:	bf 91       	pop	r27
    3c08:	af 91       	pop	r26
    3c0a:	9f 91       	pop	r25
    3c0c:	8f 91       	pop	r24
    3c0e:	7f 91       	pop	r23
    3c10:	6f 91       	pop	r22
    3c12:	5f 91       	pop	r21
    3c14:	4f 91       	pop	r20
    3c16:	3f 91       	pop	r19
    3c18:	2f 91       	pop	r18
    3c1a:	0f 90       	pop	r0
    3c1c:	0f be       	out	0x3f, r0	; 63
    3c1e:	0f 90       	pop	r0
    3c20:	1f 90       	pop	r1
    3c22:	18 95       	reti

00003c24 <__vector_21>:
  return ADC;
}

// Every time the ADC finishes a conversion, we'll see whether
// the buttons have changed
SIGNAL(ADC_vect) {
    3c24:	1f 92       	push	r1
    3c26:	0f 92       	push	r0
    3c28:	0f b6       	in	r0, 0x3f	; 63
    3c2a:	0f 92       	push	r0
    3c2c:	11 24       	eor	r1, r1
    3c2e:	2f 93       	push	r18
    3c30:	3f 93       	push	r19
    3c32:	4f 93       	push	r20
    3c34:	5f 93       	push	r21
    3c36:	6f 93       	push	r22
    3c38:	7f 93       	push	r23
    3c3a:	8f 93       	push	r24
    3c3c:	9f 93       	push	r25
    3c3e:	af 93       	push	r26
    3c40:	bf 93       	push	r27
    3c42:	ef 93       	push	r30
    3c44:	ff 93       	push	r31
  uint16_t reading, reading2;
  sei();
    3c46:	78 94       	sei

  // We get called when ADC is ready so no need to request a conversion
  reading = ADC;
    3c48:	80 91 78 00 	lds	r24, 0x0078
    3c4c:	90 91 79 00 	lds	r25, 0x0079

  if (reading > 735) {
    3c50:	22 e0       	ldi	r18, 0x02	; 2
    3c52:	80 3e       	cpi	r24, 0xE0	; 224
    3c54:	92 07       	cpc	r25, r18
    3c56:	28 f0       	brcs	.+10     	; 0x3c62 <__vector_21+0x3e>
    // no presses
    pressed = 0;
    3c58:	10 92 10 02 	sts	0x0210, r1
    last_buttonstate = 0;
    3c5c:	10 92 0d 02 	sts	0x020D, r1
    3c60:	4a c0       	rjmp	.+148    	; 0x3cf6 <__vector_21+0xd2>
    
    ADCSRA |= _BV(ADIE) | _BV(ADSC); // start next conversion  
    return;
  } else if (reading > 610) {
    3c62:	22 e0       	ldi	r18, 0x02	; 2
    3c64:	83 36       	cpi	r24, 0x63	; 99
    3c66:	92 07       	cpc	r25, r18
    3c68:	f0 f0       	brcs	.+60     	; 0x3ca6 <__vector_21+0x82>
    // button 3 "+" pressed
    if (!last_buttonstate) { // was not pressed before
    3c6a:	80 91 0d 02 	lds	r24, 0x020D
    3c6e:	88 23       	and	r24, r24
    3c70:	a1 f4       	brne	.+40     	; 0x3c9a <__vector_21+0x76>
      // debounce by taking a second reading 
      delay_ms(10);
    3c72:	8a e0       	ldi	r24, 0x0A	; 10
    3c74:	90 e0       	ldi	r25, 0x00	; 0
    3c76:	0e 94 fd 35 	call	0x6bfa	; 0x6bfa <delay_ms>
      reading2 = readADC();
    3c7a:	0e 94 d9 1d 	call	0x3bb2	; 0x3bb2 <readADC>
      if ( (reading2 > 735) || (reading2 < 610)) {
    3c7e:	82 56       	subi	r24, 0x62	; 98
    3c80:	92 40       	sbci	r25, 0x02	; 2
    3c82:	8e 37       	cpi	r24, 0x7E	; 126
    3c84:	91 05       	cpc	r25, r1
    3c86:	b8 f5       	brcc	.+110    	; 0x3cf6 <__vector_21+0xd2>
	// was a bounce, ignore it
	ADCSRA |= _BV(ADIE) | _BV(ADSC); // start next conversion  	
	return;
      }
      buttonholdcounter = 2;
    3c88:	82 e0       	ldi	r24, 0x02	; 2
    3c8a:	80 93 11 02 	sts	0x0211, r24
      last_buttonstate = 0x4;
    3c8e:	84 e0       	ldi	r24, 0x04	; 4
    3c90:	80 93 0d 02 	sts	0x020D, r24
      just_pressed = 0x4;
    3c94:	80 93 0f 02 	sts	0x020F, r24
    3c98:	2e c0       	rjmp	.+92     	; 0x3cf6 <__vector_21+0xd2>
	  ADCSRA |= _BV(ADIE) | _BV(ADSC); // start next conversion  	
	  return;
    } else {

      // the buttonholdcounter is decremented by a timer!
      if (buttonholdcounter) {
    3c9a:	80 91 11 02 	lds	r24, 0x0211
    3c9e:	88 23       	and	r24, r24
    3ca0:	51 f5       	brne	.+84     	; 0x3cf6 <__vector_21+0xd2>
	     ADCSRA |= _BV(ADIE) | _BV(ADSC); // start next conversion  	
	     return;
      }
      // 2 seconds later...
      pressed = 0x4;                 // The button was held down (fast advance)
    3ca2:	84 e0       	ldi	r24, 0x04	; 4
    3ca4:	26 c0       	rjmp	.+76     	; 0x3cf2 <__vector_21+0xce>
    }

  } else if (reading > 270) {
    3ca6:	8f 50       	subi	r24, 0x0F	; 15
    3ca8:	91 40       	sbci	r25, 0x01	; 1
    3caa:	88 f0       	brcs	.+34     	; 0x3cce <__vector_21+0xaa>
    // button 2 "SET" pressed
    if (!last_buttonstate) { // was not pressed before
    3cac:	80 91 0d 02 	lds	r24, 0x020D
    3cb0:	88 23       	and	r24, r24
    3cb2:	09 f5       	brne	.+66     	; 0x3cf6 <__vector_21+0xd2>
      // debounce by taking a second reading 
      delay_ms(10);
    3cb4:	8a e0       	ldi	r24, 0x0A	; 10
    3cb6:	90 e0       	ldi	r25, 0x00	; 0
    3cb8:	0e 94 fd 35 	call	0x6bfa	; 0x6bfa <delay_ms>
      reading2 = readADC();
    3cbc:	0e 94 d9 1d 	call	0x3bb2	; 0x3bb2 <readADC>
      if ( (reading2 > 610) || (reading2 < 270)) {
    3cc0:	8e 50       	subi	r24, 0x0E	; 14
    3cc2:	91 40       	sbci	r25, 0x01	; 1
    3cc4:	85 55       	subi	r24, 0x55	; 85
    3cc6:	91 40       	sbci	r25, 0x01	; 1
    3cc8:	b0 f4       	brcc	.+44     	; 0x3cf6 <__vector_21+0xd2>
	// was a bounce, ignore it
	ADCSRA |= _BV(ADIE) | _BV(ADSC); // start next conversion  	
	return;
      }
      DEBUG(putstring_nl("b2"));
      just_pressed = 0x2;
    3cca:	82 e0       	ldi	r24, 0x02	; 2
    3ccc:	0e c0       	rjmp	.+28     	; 0x3cea <__vector_21+0xc6>
      last_buttonstate = 0x2;
      pressed = 0x2;                 // held down
    }
  } else {
    // button 1 "MENU" pressed
    if (!last_buttonstate) { // was not pressed before
    3cce:	80 91 0d 02 	lds	r24, 0x020D
    3cd2:	88 23       	and	r24, r24
    3cd4:	81 f4       	brne	.+32     	; 0x3cf6 <__vector_21+0xd2>
      // debounce by taking a second reading 
      delay_ms(10);
    3cd6:	8a e0       	ldi	r24, 0x0A	; 10
    3cd8:	90 e0       	ldi	r25, 0x00	; 0
    3cda:	0e 94 fd 35 	call	0x6bfa	; 0x6bfa <delay_ms>
      reading2 = readADC();
    3cde:	0e 94 d9 1d 	call	0x3bb2	; 0x3bb2 <readADC>
      if (reading2 > 270) {
    3ce2:	8f 50       	subi	r24, 0x0F	; 15
    3ce4:	91 40       	sbci	r25, 0x01	; 1
    3ce6:	38 f4       	brcc	.+14     	; 0x3cf6 <__vector_21+0xd2>
	// was a bounce, ignore it
	ADCSRA |= _BV(ADIE) | _BV(ADSC); // start next conversion  	
	return;
      }
      DEBUG(putstring_nl("b1"));
      just_pressed = 0x1;
    3ce8:	81 e0       	ldi	r24, 0x01	; 1
    3cea:	80 93 0f 02 	sts	0x020F, r24
      last_buttonstate = 0x1;
    3cee:	80 93 0d 02 	sts	0x020D, r24
      pressed = 0x1;                 // held down
    3cf2:	80 93 10 02 	sts	0x0210, r24
    }
  }
  ADCSRA |= _BV(ADIE) | _BV(ADSC); // start next conversion  
    3cf6:	80 91 7a 00 	lds	r24, 0x007A
    3cfa:	88 64       	ori	r24, 0x48	; 72
    3cfc:	80 93 7a 00 	sts	0x007A, r24
}
    3d00:	ff 91       	pop	r31
    3d02:	ef 91       	pop	r30
    3d04:	bf 91       	pop	r27
    3d06:	af 91       	pop	r26
    3d08:	9f 91       	pop	r25
    3d0a:	8f 91       	pop	r24
    3d0c:	7f 91       	pop	r23
    3d0e:	6f 91       	pop	r22
    3d10:	5f 91       	pop	r21
    3d12:	4f 91       	pop	r20
    3d14:	3f 91       	pop	r19
    3d16:	2f 91       	pop	r18
    3d18:	0f 90       	pop	r0
    3d1a:	0f be       	out	0x3f, r0	; 63
    3d1c:	0f 90       	pop	r0
    3d1e:	1f 90       	pop	r1
    3d20:	18 95       	reti

00003d22 <print_style_setting>:
#endif
  STYLE_ABOUT, 'A','b','o','u','t',0,
  0xFF,
};

void print_style_setting(uint8_t inverted) {
    3d22:	1f 93       	push	r17
    3d24:	18 2f       	mov	r17, r24
glcdSetAddress(43, 0);
    3d26:	8b e2       	ldi	r24, 0x2B	; 43
    3d28:	60 e0       	ldi	r22, 0x00	; 0
    3d2a:	0e 94 50 2d 	call	0x5aa0	; 0x5aa0 <glcdSetAddress>
    3d2e:	20 e0       	ldi	r18, 0x00	; 0
    3d30:	30 e0       	ldi	r19, 0x00	; 0
    3d32:	90 e0       	ldi	r25, 0x00	; 0
    3d34:	06 c0       	rjmp	.+12     	; 0x3d42 <print_style_setting+0x20>
  uint16_t i=0;
  uint8_t j=0;
  while((j!=displaystyle)&&(j!=0xFF))
    3d36:	f9 01       	movw	r30, r18
    3d38:	e5 5e       	subi	r30, 0xE5	; 229
    3d3a:	fd 4f       	sbci	r31, 0xFD	; 253
  	  j=pgm_read_byte(&style_setting_str[i++]);
    3d3c:	2f 5f       	subi	r18, 0xFF	; 255
    3d3e:	3f 4f       	sbci	r19, 0xFF	; 255
    3d40:	94 91       	lpm	r25, Z+

void print_style_setting(uint8_t inverted) {
glcdSetAddress(43, 0);
  uint16_t i=0;
  uint8_t j=0;
  while((j!=displaystyle)&&(j!=0xFF))
    3d42:	80 91 31 03 	lds	r24, 0x0331
    3d46:	98 17       	cp	r25, r24
    3d48:	19 f0       	breq	.+6      	; 0x3d50 <print_style_setting+0x2e>
    3d4a:	9f 3f       	cpi	r25, 0xFF	; 255
    3d4c:	a1 f7       	brne	.-24     	; 0x3d36 <print_style_setting+0x14>
    3d4e:	08 c0       	rjmp	.+16     	; 0x3d60 <print_style_setting+0x3e>
  	  j=pgm_read_byte(&style_setting_str[i++]);
  if(j==0xFF)
    3d50:	9f 3f       	cpi	r25, 0xFF	; 255
    3d52:	31 f0       	breq	.+12     	; 0x3d60 <print_style_setting+0x3e>
  	  return;
  glcdPutStr_rom(&style_setting_str[i],inverted);
    3d54:	c9 01       	movw	r24, r18
    3d56:	85 5e       	subi	r24, 0xE5	; 229
    3d58:	9d 4f       	sbci	r25, 0xFD	; 253
    3d5a:	61 2f       	mov	r22, r17
    3d5c:	0e 94 56 29 	call	0x52ac	; 0x52ac <glcdPutStr_rom>
}
    3d60:	1f 91       	pop	r17
    3d62:	08 95       	ret

00003d64 <print_region_setting>:
	"12h LONG DOW",
	"24h LONG DOW"
#endif
};

void print_region_setting(uint8_t inverted) {
    3d64:	1f 93       	push	r17
    3d66:	18 2f       	mov	r17, r24
  glcdSetAddress(MENU_INDENT, 4);
    3d68:	88 e0       	ldi	r24, 0x08	; 8
    3d6a:	64 e0       	ldi	r22, 0x04	; 4
    3d6c:	0e 94 50 2d 	call	0x5aa0	; 0x5aa0 <glcdSetAddress>
  glcdPutStr("Region: ", NORMAL);
    3d70:	88 ec       	ldi	r24, 0xC8	; 200
    3d72:	92 e0       	ldi	r25, 0x02	; 2
    3d74:	60 e0       	ldi	r22, 0x00	; 0
    3d76:	0e 94 56 29 	call	0x52ac	; 0x52ac <glcdPutStr_rom>
  glcdPutStr_rom(&region_setting_table[(region * 2) + time_format][0], inverted);
    3d7a:	80 91 37 03 	lds	r24, 0x0337
    3d7e:	20 91 2c 03 	lds	r18, 0x032C
    3d82:	90 e0       	ldi	r25, 0x00	; 0
    3d84:	88 0f       	add	r24, r24
    3d86:	99 1f       	adc	r25, r25
    3d88:	82 0f       	add	r24, r18
    3d8a:	91 1d       	adc	r25, r1
    3d8c:	2d e0       	ldi	r18, 0x0D	; 13
    3d8e:	30 e0       	ldi	r19, 0x00	; 0
    3d90:	ac 01       	movw	r20, r24
    3d92:	42 9f       	mul	r20, r18
    3d94:	c0 01       	movw	r24, r0
    3d96:	43 9f       	mul	r20, r19
    3d98:	90 0d       	add	r25, r0
    3d9a:	52 9f       	mul	r21, r18
    3d9c:	90 0d       	add	r25, r0
    3d9e:	11 24       	eor	r1, r1
    3da0:	89 51       	subi	r24, 0x19	; 25
    3da2:	9e 4f       	sbci	r25, 0xFE	; 254
    3da4:	61 2f       	mov	r22, r17
    3da6:	0e 94 56 29 	call	0x52ac	; 0x52ac <glcdPutStr_rom>
}
    3daa:	1f 91       	pop	r17
    3dac:	08 95       	ret

00003dae <print_alarmhour>:
    glcdWriteChar(' ', NORMAL);
    printnumber(h, inverted);
  }
}

void print_alarmhour(uint8_t h, uint8_t inverted) {
    3dae:	0f 93       	push	r16
    3db0:	1f 93       	push	r17
    3db2:	cf 93       	push	r28
    3db4:	df 93       	push	r29
    3db6:	18 2f       	mov	r17, r24
    3db8:	06 2f       	mov	r16, r22
  if (time_format == TIME_12H) {
    3dba:	80 91 2c 03 	lds	r24, 0x032C
    3dbe:	88 23       	and	r24, r24
    3dc0:	71 f5       	brne	.+92     	; 0x3e1e <print_alarmhour+0x70>
    glcdSetAddress(MENU_INDENT + 18*6, 1);
    3dc2:	84 e7       	ldi	r24, 0x74	; 116
    3dc4:	61 e0       	ldi	r22, 0x01	; 1
    3dc6:	0e 94 50 2d 	call	0x5aa0	; 0x5aa0 <glcdSetAddress>
    if (h >= 12) 
    3dca:	1c 30       	cpi	r17, 0x0C	; 12
    3dcc:	10 f0       	brcs	.+4      	; 0x3dd2 <print_alarmhour+0x24>
      glcdWriteChar('P', NORMAL);
    3dce:	80 e5       	ldi	r24, 0x50	; 80
    3dd0:	01 c0       	rjmp	.+2      	; 0x3dd4 <print_alarmhour+0x26>
    else
      glcdWriteChar('A', NORMAL);
    3dd2:	81 e4       	ldi	r24, 0x41	; 65
    3dd4:	60 e0       	ldi	r22, 0x00	; 0
    3dd6:	0e 94 2b 29 	call	0x5256	; 0x5256 <glcdWriteChar>
    glcdWriteChar('M', NORMAL);
    3dda:	8d e4       	ldi	r24, 0x4D	; 77
    3ddc:	60 e0       	ldi	r22, 0x00	; 0
    3dde:	0e 94 2b 29 	call	0x5256	; 0x5256 <glcdWriteChar>
    glcdSetAddress(MENU_INDENT + 12*6, 1);
    3de2:	80 e5       	ldi	r24, 0x50	; 80
    3de4:	61 e0       	ldi	r22, 0x01	; 1
    3de6:	0e 94 50 2d 	call	0x5aa0	; 0x5aa0 <glcdSetAddress>

    if (((h + 23)%12 + 1) >= 10 ) {
    3dea:	81 2f       	mov	r24, r17
    3dec:	90 e0       	ldi	r25, 0x00	; 0
    3dee:	47 96       	adiw	r24, 0x17	; 23
    3df0:	6c e0       	ldi	r22, 0x0C	; 12
    3df2:	70 e0       	ldi	r23, 0x00	; 0
    3df4:	0e 94 17 3b 	call	0x762e	; 0x762e <__divmodhi4>
    3df8:	ec 01       	movw	r28, r24
    3dfa:	89 30       	cpi	r24, 0x09	; 9
    3dfc:	91 05       	cpc	r25, r1
    3dfe:	24 f0       	brlt	.+8      	; 0x3e08 <print_alarmhour+0x5a>
      printnumber((h + 23)%12 + 1, inverted);
    3e00:	9c 01       	movw	r18, r24
    3e02:	2f 5f       	subi	r18, 0xFF	; 255
    3e04:	82 2f       	mov	r24, r18
    3e06:	10 c0       	rjmp	.+32     	; 0x3e28 <print_alarmhour+0x7a>
    } else {
      glcdWriteChar(' ', NORMAL);
    3e08:	80 e2       	ldi	r24, 0x20	; 32
    3e0a:	60 e0       	ldi	r22, 0x00	; 0
    3e0c:	0e 94 2b 29 	call	0x5256	; 0x5256 <glcdWriteChar>
      glcdWriteChar('0' + (h + 23)%12 + 1, inverted);
    3e10:	9e 01       	movw	r18, r28
    3e12:	2f 5c       	subi	r18, 0xCF	; 207
    3e14:	82 2f       	mov	r24, r18
    3e16:	60 2f       	mov	r22, r16
    3e18:	0e 94 2b 29 	call	0x5256	; 0x5256 <glcdWriteChar>
    3e1c:	08 c0       	rjmp	.+16     	; 0x3e2e <print_alarmhour+0x80>
    }
   } else {
    glcdSetAddress(MENU_INDENT + 12*6, 1);
    3e1e:	80 e5       	ldi	r24, 0x50	; 80
    3e20:	61 e0       	ldi	r22, 0x01	; 1
    3e22:	0e 94 50 2d 	call	0x5aa0	; 0x5aa0 <glcdSetAddress>
    printnumber(h, inverted);
    3e26:	81 2f       	mov	r24, r17
    3e28:	60 2f       	mov	r22, r16
    3e2a:	0e 94 04 2f 	call	0x5e08	; 0x5e08 <printnumber>
  }
}
    3e2e:	df 91       	pop	r29
    3e30:	cf 91       	pop	r28
    3e32:	1f 91       	pop	r17
    3e34:	0f 91       	pop	r16
    3e36:	08 95       	ret

00003e38 <print_timehour>:
	delay_ms(200);
    }
  }
}

void print_timehour(uint8_t h, uint8_t inverted) {
    3e38:	0f 93       	push	r16
    3e3a:	1f 93       	push	r17
    3e3c:	cf 93       	push	r28
    3e3e:	df 93       	push	r29
    3e40:	08 2f       	mov	r16, r24
    3e42:	16 2f       	mov	r17, r22
  if (time_format == TIME_12H) {
    3e44:	80 91 2c 03 	lds	r24, 0x032C
    3e48:	88 23       	and	r24, r24
    3e4a:	d1 f4       	brne	.+52     	; 0x3e80 <print_timehour+0x48>
    if (((h + 23)%12 + 1) >= 10 ) {
    3e4c:	80 2f       	mov	r24, r16
    3e4e:	90 e0       	ldi	r25, 0x00	; 0
    3e50:	47 96       	adiw	r24, 0x17	; 23
    3e52:	6c e0       	ldi	r22, 0x0C	; 12
    3e54:	70 e0       	ldi	r23, 0x00	; 0
    3e56:	0e 94 17 3b 	call	0x762e	; 0x762e <__divmodhi4>
    3e5a:	ec 01       	movw	r28, r24
    3e5c:	89 30       	cpi	r24, 0x09	; 9
    3e5e:	91 05       	cpc	r25, r1
    3e60:	24 f0       	brlt	.+8      	; 0x3e6a <print_timehour+0x32>
      printnumber((h + 23)%12 + 1, inverted);
    3e62:	9c 01       	movw	r18, r24
    3e64:	2f 5f       	subi	r18, 0xFF	; 255
    3e66:	82 2f       	mov	r24, r18
    3e68:	14 c0       	rjmp	.+40     	; 0x3e92 <print_timehour+0x5a>
    } else {
      glcdWriteChar(' ', NORMAL);
    3e6a:	80 e2       	ldi	r24, 0x20	; 32
    3e6c:	60 e0       	ldi	r22, 0x00	; 0
    3e6e:	0e 94 2b 29 	call	0x5256	; 0x5256 <glcdWriteChar>
      glcdWriteChar('0' + (h + 23)%12 + 1, inverted);
    3e72:	9e 01       	movw	r18, r28
    3e74:	2f 5c       	subi	r18, 0xCF	; 207
    3e76:	82 2f       	mov	r24, r18
    3e78:	61 2f       	mov	r22, r17
    3e7a:	0e 94 2b 29 	call	0x5256	; 0x5256 <glcdWriteChar>
    3e7e:	0c c0       	rjmp	.+24     	; 0x3e98 <print_timehour+0x60>
    }
  } else {
    glcdWriteChar(' ', NORMAL);
    3e80:	80 e2       	ldi	r24, 0x20	; 32
    3e82:	60 e0       	ldi	r22, 0x00	; 0
    3e84:	0e 94 2b 29 	call	0x5256	; 0x5256 <glcdWriteChar>
    glcdWriteChar(' ', NORMAL);
    3e88:	80 e2       	ldi	r24, 0x20	; 32
    3e8a:	60 e0       	ldi	r22, 0x00	; 0
    3e8c:	0e 94 2b 29 	call	0x5256	; 0x5256 <glcdWriteChar>
    printnumber(h, inverted);
    3e90:	80 2f       	mov	r24, r16
    3e92:	61 2f       	mov	r22, r17
    3e94:	0e 94 04 2f 	call	0x5e08	; 0x5e08 <printnumber>
  }
}
    3e98:	df 91       	pop	r29
    3e9a:	cf 91       	pop	r28
    3e9c:	1f 91       	pop	r17
    3e9e:	0f 91       	pop	r16
    3ea0:	08 95       	ret

00003ea2 <print_number_slash>:
}  
#endif

void print_number_slash(uint8_t number, uint8_t inverted)
{
	printnumber(number, inverted);
    3ea2:	0e 94 04 2f 	call	0x5e08	; 0x5e08 <printnumber>
	glcdWriteChar('/', NORMAL);
    3ea6:	8f e2       	ldi	r24, 0x2F	; 47
    3ea8:	60 e0       	ldi	r22, 0x00	; 0
    3eaa:	0e 94 2b 29 	call	0x5256	; 0x5256 <glcdWriteChar>
}
    3eae:	08 95       	ret

00003eb0 <print_date>:
  #define MAX_ORDER 6
#else
  #define MAX_ORDER 2
#endif

void print_date(uint8_t month, uint8_t day, uint8_t year, uint8_t mode) {
    3eb0:	ef 92       	push	r14
    3eb2:	ff 92       	push	r15
    3eb4:	0f 93       	push	r16
    3eb6:	1f 93       	push	r17
    3eb8:	f8 2e       	mov	r15, r24
    3eba:	16 2f       	mov	r17, r22
    3ebc:	e4 2e       	mov	r14, r20
    3ebe:	02 2f       	mov	r16, r18
  glcdSetAddress(MENU_INDENT, 3);
    3ec0:	88 e0       	ldi	r24, 0x08	; 8
    3ec2:	63 e0       	ldi	r22, 0x03	; 3
    3ec4:	0e 94 50 2d 	call	0x5aa0	; 0x5aa0 <glcdSetAddress>
  glcdPutStr("Date:", NORMAL);
    3ec8:	89 e1       	ldi	r24, 0x19	; 25
    3eca:	93 e0       	ldi	r25, 0x03	; 3
    3ecc:	60 e0       	ldi	r22, 0x00	; 0
    3ece:	0e 94 56 29 	call	0x52ac	; 0x52ac <glcdPutStr_rom>
  if (region == REGION_US) {
    3ed2:	80 91 37 03 	lds	r24, 0x0337
    3ed6:	88 23       	and	r24, r24
    3ed8:	91 f4       	brne	.+36     	; 0x3efe <print_date+0x4e>
  	glcdPutStr("     ",NORMAL);
    3eda:	83 e1       	ldi	r24, 0x13	; 19
    3edc:	93 e0       	ldi	r25, 0x03	; 3
    3ede:	60 e0       	ldi	r22, 0x00	; 0
    3ee0:	0e 94 56 29 	call	0x52ac	; 0x52ac <glcdPutStr_rom>
  	print_number_slash(month,(mode == SET_MONTH)?INVERTED:NORMAL);
    3ee4:	60 e0       	ldi	r22, 0x00	; 0
    3ee6:	00 31       	cpi	r16, 0x10	; 16
    3ee8:	09 f4       	brne	.+2      	; 0x3eec <print_date+0x3c>
    3eea:	61 e0       	ldi	r22, 0x01	; 1
    3eec:	8f 2d       	mov	r24, r15
    3eee:	0e 94 51 1f 	call	0x3ea2	; 0x3ea2 <print_number_slash>
  	print_number_slash(day, (mode == SET_DAY)?INVERTED:NORMAL);
    3ef2:	60 e0       	ldi	r22, 0x00	; 0
    3ef4:	01 31       	cpi	r16, 0x11	; 17
    3ef6:	09 f4       	brne	.+2      	; 0x3efa <print_date+0x4a>
    3ef8:	61 e0       	ldi	r22, 0x01	; 1
    3efa:	81 2f       	mov	r24, r17
    3efc:	15 c0       	rjmp	.+42     	; 0x3f28 <print_date+0x78>
  } else if (region == REGION_EU) {
    3efe:	80 91 37 03 	lds	r24, 0x0337
    3f02:	81 30       	cpi	r24, 0x01	; 1
    3f04:	99 f4       	brne	.+38     	; 0x3f2c <print_date+0x7c>
  	glcdPutStr("     ",NORMAL);
    3f06:	8d e0       	ldi	r24, 0x0D	; 13
    3f08:	93 e0       	ldi	r25, 0x03	; 3
    3f0a:	60 e0       	ldi	r22, 0x00	; 0
    3f0c:	0e 94 56 29 	call	0x52ac	; 0x52ac <glcdPutStr_rom>
  	print_number_slash(day, (mode == SET_DAY)?INVERTED:NORMAL);
    3f10:	60 e0       	ldi	r22, 0x00	; 0
    3f12:	01 31       	cpi	r16, 0x11	; 17
    3f14:	09 f4       	brne	.+2      	; 0x3f18 <print_date+0x68>
    3f16:	61 e0       	ldi	r22, 0x01	; 1
    3f18:	81 2f       	mov	r24, r17
    3f1a:	0e 94 51 1f 	call	0x3ea2	; 0x3ea2 <print_number_slash>
  	print_number_slash(month,(mode == SET_MONTH)?INVERTED:NORMAL);
    3f1e:	60 e0       	ldi	r22, 0x00	; 0
    3f20:	00 31       	cpi	r16, 0x10	; 16
    3f22:	09 f4       	brne	.+2      	; 0x3f26 <print_date+0x76>
    3f24:	61 e0       	ldi	r22, 0x01	; 1
    3f26:	8f 2d       	mov	r24, r15
    3f28:	0e 94 51 1f 	call	0x3ea2	; 0x3ea2 <print_number_slash>
  	glcdWriteChar(' ', NORMAL);
  	printnumber(day, (mode == SET_DAY)?INVERTED:NORMAL);
  	glcdWriteChar(',', NORMAL);
  }
#endif
  printnumber(20,(mode == SET_YEAR)?INVERTED:NORMAL);
    3f2c:	10 e0       	ldi	r17, 0x00	; 0
    3f2e:	02 31       	cpi	r16, 0x12	; 18
    3f30:	09 f4       	brne	.+2      	; 0x3f34 <print_date+0x84>
    3f32:	11 e0       	ldi	r17, 0x01	; 1
    3f34:	84 e1       	ldi	r24, 0x14	; 20
    3f36:	61 2f       	mov	r22, r17
    3f38:	0e 94 04 2f 	call	0x5e08	; 0x5e08 <printnumber>
  printnumber(year, (mode == SET_YEAR)?INVERTED:NORMAL);
    3f3c:	8e 2d       	mov	r24, r14
    3f3e:	61 2f       	mov	r22, r17
    3f40:	0e 94 04 2f 	call	0x5e08	; 0x5e08 <printnumber>
}
    3f44:	1f 91       	pop	r17
    3f46:	0f 91       	pop	r16
    3f48:	ff 90       	pop	r15
    3f4a:	ef 90       	pop	r14
    3f4c:	08 95       	ret

00003f4e <print_backlight>:
    }
  }
}

void print_backlight(uint8_t mode)
{
    3f4e:	1f 93       	push	r17
    3f50:	18 2f       	mov	r17, r24
  glcdSetAddress(MENU_INDENT, 5);
    3f52:	88 e0       	ldi	r24, 0x08	; 8
    3f54:	65 e0       	ldi	r22, 0x05	; 5
    3f56:	0e 94 50 2d 	call	0x5aa0	; 0x5aa0 <glcdSetAddress>
  glcdPutStr("Set Backlight: ", NORMAL);
    3f5a:	85 e2       	ldi	r24, 0x25	; 37
    3f5c:	93 e0       	ldi	r25, 0x03	; 3
    3f5e:	60 e0       	ldi	r22, 0x00	; 0
    3f60:	0e 94 56 29 	call	0x52ac	; 0x52ac <glcdPutStr_rom>
  printnumber(OCR2B>>OCR2B_BITSHIFT,((mode==SET_BRT)?INVERTED:NORMAL));
    3f64:	80 91 b4 00 	lds	r24, 0x00B4
    3f68:	60 e0       	ldi	r22, 0x00	; 0
    3f6a:	19 36       	cpi	r17, 0x69	; 105
    3f6c:	09 f4       	brne	.+2      	; 0x3f70 <print_backlight+0x22>
    3f6e:	61 e0       	ldi	r22, 0x01	; 1
    3f70:	0e 94 04 2f 	call	0x5e08	; 0x5e08 <printnumber>
}
    3f74:	1f 91       	pop	r17
    3f76:	08 95       	ret

00003f78 <print_time>:
  glcdWriteChar(':', NORMAL);
  printnumber(alarm_m, ((mode==SET_MIN)?INVERTED:NORMAL));
}

void print_time(uint8_t hour, uint8_t min, uint8_t sec, uint8_t mode)
{
    3f78:	df 92       	push	r13
    3f7a:	ef 92       	push	r14
    3f7c:	ff 92       	push	r15
    3f7e:	0f 93       	push	r16
    3f80:	1f 93       	push	r17
    3f82:	e8 2e       	mov	r14, r24
    3f84:	f6 2e       	mov	r15, r22
    3f86:	d4 2e       	mov	r13, r20
    3f88:	12 2f       	mov	r17, r18
  glcdSetAddress(MENU_INDENT, 2);
    3f8a:	88 e0       	ldi	r24, 0x08	; 8
    3f8c:	62 e0       	ldi	r22, 0x02	; 2
    3f8e:	0e 94 50 2d 	call	0x5aa0	; 0x5aa0 <glcdSetAddress>
  glcdPutStr("Set Time: ", NORMAL);
    3f92:	85 e3       	ldi	r24, 0x35	; 53
    3f94:	93 e0       	ldi	r25, 0x03	; 3
    3f96:	60 e0       	ldi	r22, 0x00	; 0
    3f98:	0e 94 56 29 	call	0x52ac	; 0x52ac <glcdPutStr_rom>
  print_timehour(hour, ((mode==SET_HOUR)?INVERTED:NORMAL));
    3f9c:	00 e0       	ldi	r16, 0x00	; 0
    3f9e:	15 36       	cpi	r17, 0x65	; 101
    3fa0:	09 f4       	brne	.+2      	; 0x3fa4 <print_time+0x2c>
    3fa2:	01 e0       	ldi	r16, 0x01	; 1
    3fa4:	8e 2d       	mov	r24, r14
    3fa6:	60 2f       	mov	r22, r16
    3fa8:	0e 94 1c 1f 	call	0x3e38	; 0x3e38 <print_timehour>
  glcdWriteChar(':', NORMAL);
    3fac:	8a e3       	ldi	r24, 0x3A	; 58
    3fae:	60 e0       	ldi	r22, 0x00	; 0
    3fb0:	0e 94 2b 29 	call	0x5256	; 0x5256 <glcdWriteChar>
  printnumber(min, ((mode==SET_MIN)?INVERTED:NORMAL));
    3fb4:	60 e0       	ldi	r22, 0x00	; 0
    3fb6:	16 36       	cpi	r17, 0x66	; 102
    3fb8:	09 f4       	brne	.+2      	; 0x3fbc <print_time+0x44>
    3fba:	61 e0       	ldi	r22, 0x01	; 1
    3fbc:	8f 2d       	mov	r24, r15
    3fbe:	0e 94 04 2f 	call	0x5e08	; 0x5e08 <printnumber>
  glcdWriteChar(':', NORMAL);
    3fc2:	8a e3       	ldi	r24, 0x3A	; 58
    3fc4:	60 e0       	ldi	r22, 0x00	; 0
    3fc6:	0e 94 2b 29 	call	0x5256	; 0x5256 <glcdWriteChar>
  printnumber(sec, ((mode==SET_SEC)?INVERTED:NORMAL));
    3fca:	60 e0       	ldi	r22, 0x00	; 0
    3fcc:	17 36       	cpi	r17, 0x67	; 103
    3fce:	09 f4       	brne	.+2      	; 0x3fd2 <print_time+0x5a>
    3fd0:	61 e0       	ldi	r22, 0x01	; 1
    3fd2:	8d 2d       	mov	r24, r13
    3fd4:	0e 94 04 2f 	call	0x5e08	; 0x5e08 <printnumber>
  if (time_format == TIME_12H) {
    3fd8:	80 91 2c 03 	lds	r24, 0x032C
    3fdc:	88 23       	and	r24, r24
    3fde:	69 f4       	brne	.+26     	; 0x3ffa <print_time+0x82>
    glcdWriteChar(' ', NORMAL);
    3fe0:	80 e2       	ldi	r24, 0x20	; 32
    3fe2:	60 e0       	ldi	r22, 0x00	; 0
    3fe4:	0e 94 2b 29 	call	0x5256	; 0x5256 <glcdWriteChar>
    if (hour >= 12) {
    3fe8:	8b e0       	ldi	r24, 0x0B	; 11
    3fea:	8e 15       	cp	r24, r14
    3fec:	10 f4       	brcc	.+4      	; 0x3ff2 <print_time+0x7a>
      glcdWriteChar('P', ((mode==SET_HOUR)?INVERTED:NORMAL));
    3fee:	80 e5       	ldi	r24, 0x50	; 80
    3ff0:	01 c0       	rjmp	.+2      	; 0x3ff4 <print_time+0x7c>
    } else {
      glcdWriteChar('A', ((mode==SET_HOUR)?INVERTED:NORMAL));
    3ff2:	81 e4       	ldi	r24, 0x41	; 65
    3ff4:	60 2f       	mov	r22, r16
    3ff6:	0e 94 2b 29 	call	0x5256	; 0x5256 <glcdWriteChar>
    }
  }
}
    3ffa:	1f 91       	pop	r17
    3ffc:	0f 91       	pop	r16
    3ffe:	ff 90       	pop	r15
    4000:	ef 90       	pop	r14
    4002:	df 90       	pop	r13
    4004:	08 95       	ret

00004006 <print_alarmline>:
void print_style_setting(uint8_t inverted);
void print_region_setting(uint8_t inverted);
//

void print_alarmline(uint8_t mode)
{
    4006:	1f 93       	push	r17
    4008:	18 2f       	mov	r17, r24
  glcdSetAddress(MENU_INDENT, 1);
    400a:	88 e0       	ldi	r24, 0x08	; 8
    400c:	61 e0       	ldi	r22, 0x01	; 1
    400e:	0e 94 50 2d 	call	0x5aa0	; 0x5aa0 <glcdSetAddress>
  glcdPutStr("Set Alarm:  ", NORMAL);
    4012:	80 e4       	ldi	r24, 0x40	; 64
    4014:	93 e0       	ldi	r25, 0x03	; 3
    4016:	60 e0       	ldi	r22, 0x00	; 0
    4018:	0e 94 56 29 	call	0x52ac	; 0x52ac <glcdPutStr_rom>
  print_alarmhour(alarm_h, ((mode==SET_HOUR)?INVERTED:NORMAL));
    401c:	80 91 38 03 	lds	r24, 0x0338
    4020:	60 e0       	ldi	r22, 0x00	; 0
    4022:	15 36       	cpi	r17, 0x65	; 101
    4024:	09 f4       	brne	.+2      	; 0x4028 <print_alarmline+0x22>
    4026:	61 e0       	ldi	r22, 0x01	; 1
    4028:	0e 94 d7 1e 	call	0x3dae	; 0x3dae <print_alarmhour>
  glcdWriteChar(':', NORMAL);
    402c:	8a e3       	ldi	r24, 0x3A	; 58
    402e:	60 e0       	ldi	r22, 0x00	; 0
    4030:	0e 94 2b 29 	call	0x5256	; 0x5256 <glcdWriteChar>
  printnumber(alarm_m, ((mode==SET_MIN)?INVERTED:NORMAL));
    4034:	80 91 2e 03 	lds	r24, 0x032E
    4038:	60 e0       	ldi	r22, 0x00	; 0
    403a:	16 36       	cpi	r17, 0x66	; 102
    403c:	09 f4       	brne	.+2      	; 0x4040 <print_alarmline+0x3a>
    403e:	61 e0       	ldi	r22, 0x01	; 1
    4040:	0e 94 04 2f 	call	0x5e08	; 0x5e08 <printnumber>
}
    4044:	1f 91       	pop	r17
    4046:	08 95       	ret

00004048 <print_monthday_help>:
  printnumber(year, (mode == SET_YEAR)?INVERTED:NORMAL);
}

void print_monthday_help(uint8_t mode)
{
	if(mode == SET_MONTH)
    4048:	80 31       	cpi	r24, 0x10	; 16
    404a:	29 f4       	brne	.+10     	; 0x4056 <print_monthday_help+0xe>
		print_menu_opts("change mon","set mon.");
    404c:	82 e0       	ldi	r24, 0x02	; 2
    404e:	93 e0       	ldi	r25, 0x03	; 3
    4050:	69 ef       	ldi	r22, 0xF9	; 249
    4052:	72 e0       	ldi	r23, 0x02	; 2
    4054:	0d c0       	rjmp	.+26     	; 0x4070 <print_monthday_help+0x28>
	else if (mode == SET_DAY)
    4056:	81 31       	cpi	r24, 0x11	; 17
    4058:	29 f4       	brne	.+10     	; 0x4064 <print_monthday_help+0x1c>
		print_menu_opts("change day","set date");
    405a:	8e ee       	ldi	r24, 0xEE	; 238
    405c:	92 e0       	ldi	r25, 0x02	; 2
    405e:	65 ee       	ldi	r22, 0xE5	; 229
    4060:	72 e0       	ldi	r23, 0x02	; 2
    4062:	06 c0       	rjmp	.+12     	; 0x4070 <print_monthday_help+0x28>
	else if (mode == SET_YEAR)
    4064:	82 31       	cpi	r24, 0x12	; 18
    4066:	39 f4       	brne	.+14     	; 0x4076 <print_monthday_help+0x2e>
		print_menu_opts("change yr.","set year");
    4068:	8a ed       	ldi	r24, 0xDA	; 218
    406a:	92 e0       	ldi	r25, 0x02	; 2
    406c:	61 ed       	ldi	r22, 0xD1	; 209
    406e:	72 e0       	ldi	r23, 0x02	; 2
    4070:	0e 94 4a 3a 	call	0x7494	; 0x7494 <PRINT_MENU_OPTS>
    4074:	08 95       	ret
	else
		print_menu_advance();
    4076:	0e 94 66 3a 	call	0x74cc	; 0x74cc <print_menu_advance>
    407a:	08 95       	ret

0000407c <display_menu>:
  glcdSetAddress(MENU_INDENT, 5);
  glcdPutStr("Set Backlight: ", NORMAL);
  printnumber(OCR2B>>OCR2B_BITSHIFT,((mode==SET_BRT)?INVERTED:NORMAL));
}

void display_menu(uint8_t line) {
    407c:	1f 93       	push	r17
    407e:	18 2f       	mov	r17, r24
  DEBUGP("display menu");
  
  screenmutex++;
    4080:	80 91 13 02 	lds	r24, 0x0213
    4084:	8f 5f       	subi	r24, 0xFF	; 255
    4086:	80 93 13 02 	sts	0x0213, r24

  glcdClearScreen();
    408a:	0e 94 5a 2d 	call	0x5ab4	; 0x5ab4 <glcdClearScreen>
  
  //Dataman - Mode Menu Option
  //glcdSetAddress(0, 0);
  //glcdPutStr("Configuration Menu", NORMAL);
  glcdSetAddress(MENU_INDENT, 0);
    408e:	88 e0       	ldi	r24, 0x08	; 8
    4090:	60 e0       	ldi	r22, 0x00	; 0
    4092:	0e 94 50 2d 	call	0x5aa0	; 0x5aa0 <glcdSetAddress>
  glcdPutStr("Mode:", NORMAL);
    4096:	8f e1       	ldi	r24, 0x1F	; 31
    4098:	93 e0       	ldi	r25, 0x03	; 3
    409a:	60 e0       	ldi	r22, 0x00	; 0
    409c:	0e 94 56 29 	call	0x52ac	; 0x52ac <glcdPutStr_rom>
  print_style_setting(NORMAL);
    40a0:	80 e0       	ldi	r24, 0x00	; 0
    40a2:	0e 94 91 1e 	call	0x3d22	; 0x3d22 <print_style_setting>
 
  print_alarmline(SET_ALARM);
    40a6:	84 e0       	ldi	r24, 0x04	; 4
    40a8:	0e 94 03 20 	call	0x4006	; 0x4006 <print_alarmline>
  
  print_time(time_h,time_m,time_s,SET_TIME);
    40ac:	80 91 2a 03 	lds	r24, 0x032A
    40b0:	60 91 34 03 	lds	r22, 0x0334
    40b4:	40 91 3f 03 	lds	r20, 0x033F
    40b8:	23 e0       	ldi	r18, 0x03	; 3
    40ba:	0e 94 bc 1f 	call	0x3f78	; 0x3f78 <print_time>
  print_date(date_m,date_d,date_y,SET_DATE);
    40be:	80 91 3e 03 	lds	r24, 0x033E
    40c2:	60 91 33 03 	lds	r22, 0x0333
    40c6:	40 91 2d 03 	lds	r20, 0x032D
    40ca:	25 e0       	ldi	r18, 0x05	; 5
    40cc:	0e 94 58 1f 	call	0x3eb0	; 0x3eb0 <print_date>
  print_region_setting(NORMAL);
    40d0:	80 e0       	ldi	r24, 0x00	; 0
    40d2:	0e 94 b2 1e 	call	0x3d64	; 0x3d64 <print_region_setting>
  
#ifdef BACKLIGHT_ADJUST
  print_backlight(SET_BRIGHTNESS);
    40d6:	86 e0       	ldi	r24, 0x06	; 6
    40d8:	0e 94 a7 1f 	call	0x3f4e	; 0x3f4e <print_backlight>

  if(displaymode == SET_BRIGHTNESS)
    40dc:	80 91 3a 03 	lds	r24, 0x033A
    40e0:	86 30       	cpi	r24, 0x06	; 6
    40e2:	19 f4       	brne	.+6      	; 0x40ea <display_menu+0x6e>
#else
  if(displaymode == SET_REGION)
#endif
  	  print_menu_exit();
    40e4:	0e 94 5b 3a 	call	0x74b6	; 0x74b6 <print_menu_exit>
    40e8:	02 c0       	rjmp	.+4      	; 0x40ee <display_menu+0x72>
  else
  	print_menu_advance();
    40ea:	0e 94 66 3a 	call	0x74cc	; 0x74cc <print_menu_advance>

  drawArrow(0, (line*8)+3, MENU_INDENT -1);
    40ee:	11 0f       	add	r17, r17
    40f0:	11 0f       	add	r17, r17
    40f2:	11 0f       	add	r17, r17
    40f4:	1d 5f       	subi	r17, 0xFD	; 253
    40f6:	80 e0       	ldi	r24, 0x00	; 0
    40f8:	61 2f       	mov	r22, r17
    40fa:	47 e0       	ldi	r20, 0x07	; 7
    40fc:	0e 94 3f 34 	call	0x687e	; 0x687e <drawArrow>
  screenmutex--;
    4100:	80 91 13 02 	lds	r24, 0x0213
    4104:	81 50       	subi	r24, 0x01	; 1
    4106:	80 93 13 02 	sts	0x0213, r24
}
    410a:	1f 91       	pop	r17
    410c:	08 95       	ret

0000410e <init_set_menu>:

uint8_t init_set_menu(uint8_t line)
{
  display_menu(line);
    410e:	0e 94 3e 20 	call	0x407c	; 0x407c <display_menu>
  timeoutcounter = INACTIVITYTIMEOUT;
    4112:	8a e0       	ldi	r24, 0x0A	; 10
    4114:	80 93 12 02 	sts	0x0212, r24
  return displaymode;
    4118:	80 91 3a 03 	lds	r24, 0x033A
}
    411c:	08 95       	ret

0000411e <set_time>:
	delay_ms(200);
    }
  }
}

void set_time(void) {
    411e:	cf 92       	push	r12
    4120:	df 92       	push	r13
    4122:	ef 92       	push	r14
    4124:	ff 92       	push	r15
    4126:	0f 93       	push	r16
    4128:	1f 93       	push	r17
  uint8_t mode = init_set_menu(2);
    412a:	82 e0       	ldi	r24, 0x02	; 2
    412c:	0e 94 87 20 	call	0x410e	; 0x410e <init_set_menu>
    4130:	08 2f       	mov	r16, r24

  uint8_t hour, min, sec;
    
  hour = time_h;
    4132:	10 91 2a 03 	lds	r17, 0x032A
  min = time_m;
    4136:	d0 90 34 03 	lds	r13, 0x0334
  sec = time_s;
    413a:	f0 90 3f 03 	lds	r15, 0x033F
    413e:	8d c0       	rjmp	.+282    	; 0x425a <set_time+0x13c>

  while (!check_timeout()) {
    
    if (just_pressed & 0x2) {
    4140:	80 91 0f 02 	lds	r24, 0x020F
    4144:	81 ff       	sbrs	r24, 1
    4146:	45 c0       	rjmp	.+138    	; 0x41d2 <set_time+0xb4>
      just_pressed = 0;
    4148:	10 92 0f 02 	sts	0x020F, r1
      screenmutex++;
    414c:	80 91 13 02 	lds	r24, 0x0213
    4150:	8f 5f       	subi	r24, 0xFF	; 255
    4152:	80 93 13 02 	sts	0x0213, r24

      if (mode == SET_TIME) {
    4156:	03 30       	cpi	r16, 0x03	; 3
    4158:	41 f4       	brne	.+16     	; 0x416a <set_time+0x4c>
	DEBUG(putstring("Set time hour"));
	// ok now its selected
	mode = SET_HOUR;
	// display instructions below
        print_menu_opts("change hr","set hour");
    415a:	86 e9       	ldi	r24, 0x96	; 150
    415c:	92 e0       	ldi	r25, 0x02	; 2
    415e:	6d e8       	ldi	r22, 0x8D	; 141
    4160:	72 e0       	ldi	r23, 0x02	; 2
    4162:	0e 94 4a 3a 	call	0x7494	; 0x7494 <PRINT_MENU_OPTS>
    4166:	05 e6       	ldi	r16, 0x65	; 101
    4168:	29 c0       	rjmp	.+82     	; 0x41bc <set_time+0x9e>
      } else if (mode == SET_HOUR) {
    416a:	05 36       	cpi	r16, 0x65	; 101
    416c:	41 f4       	brne	.+16     	; 0x417e <set_time+0x60>
	DEBUG(putstring("Set time min"));
	mode = SET_MIN;
	// display instructions below
        print_menu_opts("change min","set mins");
    416e:	82 e8       	ldi	r24, 0x82	; 130
    4170:	92 e0       	ldi	r25, 0x02	; 2
    4172:	69 e7       	ldi	r22, 0x79	; 121
    4174:	72 e0       	ldi	r23, 0x02	; 2
    4176:	0e 94 4a 3a 	call	0x7494	; 0x7494 <PRINT_MENU_OPTS>
    417a:	06 e6       	ldi	r16, 0x66	; 102
    417c:	1f c0       	rjmp	.+62     	; 0x41bc <set_time+0x9e>
      } else if (mode == SET_MIN) {
    417e:	06 36       	cpi	r16, 0x66	; 102
    4180:	41 f4       	brne	.+16     	; 0x4192 <set_time+0x74>
	DEBUG(putstring("Set time sec"));
	mode = SET_SEC;
	// display instructions below
        print_menu_opts("change sec","set secs");
    4182:	8e e6       	ldi	r24, 0x6E	; 110
    4184:	92 e0       	ldi	r25, 0x02	; 2
    4186:	65 e6       	ldi	r22, 0x65	; 101
    4188:	72 e0       	ldi	r23, 0x02	; 2
    418a:	0e 94 4a 3a 	call	0x7494	; 0x7494 <PRINT_MENU_OPTS>
    418e:	07 e6       	ldi	r16, 0x67	; 103
    4190:	15 c0       	rjmp	.+42     	; 0x41bc <set_time+0x9e>
      } else {
	// done!
	DEBUG(putstring("done setting time"));
	mode = SET_TIME;
	// display instructions below
	print_menu_advance();
    4192:	0e 94 66 3a 	call	0x74cc	; 0x74cc <print_menu_advance>
	
	writei2ctime(sec, min, hour, 0, date_d, date_m, date_y);
    4196:	00 91 33 03 	lds	r16, 0x0333
    419a:	e0 90 3e 03 	lds	r14, 0x033E
    419e:	c0 90 2d 03 	lds	r12, 0x032D
    41a2:	8f 2d       	mov	r24, r15
    41a4:	6d 2d       	mov	r22, r13
    41a6:	41 2f       	mov	r20, r17
    41a8:	20 e0       	ldi	r18, 0x00	; 0
    41aa:	0e 94 63 31 	call	0x62c6	; 0x62c6 <writei2ctime>
	time_h = hour;
    41ae:	10 93 2a 03 	sts	0x032A, r17
	time_m = min;
    41b2:	d0 92 34 03 	sts	0x0334, r13
	time_s = sec;
    41b6:	f0 92 3f 03 	sts	0x033F, r15
    41ba:	03 e0       	ldi	r16, 0x03	; 3
	
      }
      print_time(hour,min,sec,mode);
    41bc:	81 2f       	mov	r24, r17
    41be:	6d 2d       	mov	r22, r13
    41c0:	4f 2d       	mov	r20, r15
    41c2:	20 2f       	mov	r18, r16
    41c4:	0e 94 bc 1f 	call	0x3f78	; 0x3f78 <print_time>
      screenmutex--;
    41c8:	80 91 13 02 	lds	r24, 0x0213
    41cc:	81 50       	subi	r24, 0x01	; 1
    41ce:	80 93 13 02 	sts	0x0213, r24
    }
    // was easter egg
    if ((just_pressed & 0x4) || (pressed & 0x4)) {
    41d2:	80 91 0f 02 	lds	r24, 0x020F
    41d6:	82 fd       	sbrc	r24, 2
    41d8:	04 c0       	rjmp	.+8      	; 0x41e2 <set_time+0xc4>
    41da:	80 91 10 02 	lds	r24, 0x0210
    41de:	82 ff       	sbrs	r24, 2
    41e0:	3c c0       	rjmp	.+120    	; 0x425a <set_time+0x13c>
      just_pressed = 0;
    41e2:	10 92 0f 02 	sts	0x020F, r1
      screenmutex++;
    41e6:	80 91 13 02 	lds	r24, 0x0213
    41ea:	8f 5f       	subi	r24, 0xFF	; 255
    41ec:	80 93 13 02 	sts	0x0213, r24
      if (mode == SET_HOUR) {
    41f0:	05 36       	cpi	r16, 0x65	; 101
    41f2:	59 f4       	brne	.+22     	; 0x420a <set_time+0xec>
	hour = (hour+1) % 24;
    41f4:	81 2f       	mov	r24, r17
    41f6:	90 e0       	ldi	r25, 0x00	; 0
    41f8:	01 96       	adiw	r24, 0x01	; 1
    41fa:	68 e1       	ldi	r22, 0x18	; 24
    41fc:	70 e0       	ldi	r23, 0x00	; 0
    41fe:	0e 94 17 3b 	call	0x762e	; 0x762e <__divmodhi4>
    4202:	18 2f       	mov	r17, r24
	time_h = hour;
    4204:	80 93 2a 03 	sts	0x032A, r24
    4208:	15 c0       	rjmp	.+42     	; 0x4234 <set_time+0x116>
      }
      if (mode == SET_MIN) {
    420a:	06 36       	cpi	r16, 0x66	; 102
    420c:	49 f4       	brne	.+18     	; 0x4220 <set_time+0x102>
	min = (min+1) % 60;
    420e:	8d 2d       	mov	r24, r13
    4210:	90 e0       	ldi	r25, 0x00	; 0
    4212:	01 96       	adiw	r24, 0x01	; 1
    4214:	6c e3       	ldi	r22, 0x3C	; 60
    4216:	70 e0       	ldi	r23, 0x00	; 0
    4218:	0e 94 17 3b 	call	0x762e	; 0x762e <__divmodhi4>
    421c:	d8 2e       	mov	r13, r24
    421e:	0a c0       	rjmp	.+20     	; 0x4234 <set_time+0x116>
      }
      if (mode == SET_SEC) {
    4220:	07 36       	cpi	r16, 0x67	; 103
    4222:	41 f4       	brne	.+16     	; 0x4234 <set_time+0x116>
	sec = (sec+1) % 60;
    4224:	8f 2d       	mov	r24, r15
    4226:	90 e0       	ldi	r25, 0x00	; 0
    4228:	01 96       	adiw	r24, 0x01	; 1
    422a:	6c e3       	ldi	r22, 0x3C	; 60
    422c:	70 e0       	ldi	r23, 0x00	; 0
    422e:	0e 94 17 3b 	call	0x762e	; 0x762e <__divmodhi4>
    4232:	f8 2e       	mov	r15, r24
      }
      print_time(hour,min,sec,mode);
    4234:	81 2f       	mov	r24, r17
    4236:	6d 2d       	mov	r22, r13
    4238:	4f 2d       	mov	r20, r15
    423a:	20 2f       	mov	r18, r16
    423c:	0e 94 bc 1f 	call	0x3f78	; 0x3f78 <print_time>
      screenmutex--;
    4240:	80 91 13 02 	lds	r24, 0x0213
    4244:	81 50       	subi	r24, 0x01	; 1
    4246:	80 93 13 02 	sts	0x0213, r24
      if (pressed & 0x4)
    424a:	80 91 10 02 	lds	r24, 0x0210
    424e:	82 ff       	sbrs	r24, 2
    4250:	04 c0       	rjmp	.+8      	; 0x425a <set_time+0x13c>
	delay_ms(200);
    4252:	88 ec       	ldi	r24, 0xC8	; 200
    4254:	90 e0       	ldi	r25, 0x00	; 0
    4256:	0e 94 fd 35 	call	0x6bfa	; 0x6bfa <delay_ms>
    
  hour = time_h;
  min = time_m;
  sec = time_s;

  while (!check_timeout()) {
    425a:	0e 94 c9 39 	call	0x7392	; 0x7392 <check_timeout>
    425e:	88 23       	and	r24, r24
    4260:	09 f4       	brne	.+2      	; 0x4264 <set_time+0x146>
    4262:	6e cf       	rjmp	.-292    	; 0x4140 <set_time+0x22>
      screenmutex--;
      if (pressed & 0x4)
	delay_ms(200);
    }
  }
}
    4264:	1f 91       	pop	r17
    4266:	0f 91       	pop	r16
    4268:	ff 90       	pop	r15
    426a:	ef 90       	pop	r14
    426c:	df 90       	pop	r13
    426e:	cf 90       	pop	r12
    4270:	08 95       	ret

00004272 <set_alarm>:
      }
    }
  }
}

void set_alarm(void) {
    4272:	1f 93       	push	r17
  uint8_t mode = init_set_menu(1);
    4274:	81 e0       	ldi	r24, 0x01	; 1
    4276:	0e 94 87 20 	call	0x410e	; 0x410e <init_set_menu>
    427a:	18 2f       	mov	r17, r24
    427c:	6c c0       	rjmp	.+216    	; 0x4356 <set_alarm+0xe4>

  while (!check_timeout()) {
    
    if (just_pressed & 0x2) {
    427e:	80 91 0f 02 	lds	r24, 0x020F
    4282:	81 ff       	sbrs	r24, 1
    4284:	26 c0       	rjmp	.+76     	; 0x42d2 <set_alarm+0x60>
      just_pressed = 0;
    4286:	10 92 0f 02 	sts	0x020F, r1
      screenmutex++;
    428a:	80 91 13 02 	lds	r24, 0x0213
    428e:	8f 5f       	subi	r24, 0xFF	; 255
    4290:	80 93 13 02 	sts	0x0213, r24

      if (mode == SET_ALARM) {
    4294:	14 30       	cpi	r17, 0x04	; 4
    4296:	41 f4       	brne	.+16     	; 0x42a8 <set_alarm+0x36>
	DEBUG(putstring("Set alarm hour"));
	// ok now its selected
	mode = SET_HOUR;
	// display instructions below
        print_menu_opts("change hr.","set hour");
    4298:	8d eb       	ldi	r24, 0xBD	; 189
    429a:	92 e0       	ldi	r25, 0x02	; 2
    429c:	64 eb       	ldi	r22, 0xB4	; 180
    429e:	72 e0       	ldi	r23, 0x02	; 2
    42a0:	0e 94 4a 3a 	call	0x7494	; 0x7494 <PRINT_MENU_OPTS>
    42a4:	15 e6       	ldi	r17, 0x65	; 101
    42a6:	0d c0       	rjmp	.+26     	; 0x42c2 <set_alarm+0x50>
      } else if (mode == SET_HOUR) {
    42a8:	15 36       	cpi	r17, 0x65	; 101
    42aa:	41 f4       	brne	.+16     	; 0x42bc <set_alarm+0x4a>
	DEBUG(putstring("Set alarm min"));
	mode = SET_MIN;
	// print the hour normal
	// display instructions below
	print_menu_opts("change min","set mins");
    42ac:	89 ea       	ldi	r24, 0xA9	; 169
    42ae:	92 e0       	ldi	r25, 0x02	; 2
    42b0:	60 ea       	ldi	r22, 0xA0	; 160
    42b2:	72 e0       	ldi	r23, 0x02	; 2
    42b4:	0e 94 4a 3a 	call	0x7494	; 0x7494 <PRINT_MENU_OPTS>
    42b8:	16 e6       	ldi	r17, 0x66	; 102
    42ba:	03 c0       	rjmp	.+6      	; 0x42c2 <set_alarm+0x50>
      } else {
	mode = SET_ALARM;
	// print the hour normal
	// display instructions below
	print_menu_advance();
    42bc:	0e 94 66 3a 	call	0x74cc	; 0x74cc <print_menu_advance>
    42c0:	14 e0       	ldi	r17, 0x04	; 4
      }
      print_alarmline(mode);
    42c2:	81 2f       	mov	r24, r17
    42c4:	0e 94 03 20 	call	0x4006	; 0x4006 <print_alarmline>
      screenmutex--;
    42c8:	80 91 13 02 	lds	r24, 0x0213
    42cc:	81 50       	subi	r24, 0x01	; 1
    42ce:	80 93 13 02 	sts	0x0213, r24
    }
    if ((just_pressed & 0x4) || (pressed & 0x4)) {
    42d2:	80 91 0f 02 	lds	r24, 0x020F
    42d6:	82 fd       	sbrc	r24, 2
    42d8:	04 c0       	rjmp	.+8      	; 0x42e2 <set_alarm+0x70>
    42da:	80 91 10 02 	lds	r24, 0x0210
    42de:	82 ff       	sbrs	r24, 2
    42e0:	3a c0       	rjmp	.+116    	; 0x4356 <set_alarm+0xe4>
      just_pressed = 0;
    42e2:	10 92 0f 02 	sts	0x020F, r1
      screenmutex++;
    42e6:	80 91 13 02 	lds	r24, 0x0213
    42ea:	8f 5f       	subi	r24, 0xFF	; 255
    42ec:	80 93 13 02 	sts	0x0213, r24

      if (mode == SET_HOUR) {
    42f0:	15 36       	cpi	r17, 0x65	; 101
    42f2:	79 f4       	brne	.+30     	; 0x4312 <set_alarm+0xa0>
	alarm_h = (alarm_h+1) % 24;
    42f4:	80 91 38 03 	lds	r24, 0x0338
    42f8:	90 e0       	ldi	r25, 0x00	; 0
    42fa:	01 96       	adiw	r24, 0x01	; 1
    42fc:	68 e1       	ldi	r22, 0x18	; 24
    42fe:	70 e0       	ldi	r23, 0x00	; 0
    4300:	0e 94 17 3b 	call	0x762e	; 0x762e <__divmodhi4>
    4304:	80 93 38 03 	sts	0x0338, r24
	// print the hour inverted
	eeprom_write_byte(&EE_ALARM_HOUR, alarm_h);    
    4308:	60 91 38 03 	lds	r22, 0x0338
    430c:	81 e0       	ldi	r24, 0x01	; 1
    430e:	90 e0       	ldi	r25, 0x00	; 0
    4310:	10 c0       	rjmp	.+32     	; 0x4332 <set_alarm+0xc0>
      }
      if (mode == SET_MIN) {
    4312:	16 36       	cpi	r17, 0x66	; 102
    4314:	81 f4       	brne	.+32     	; 0x4336 <set_alarm+0xc4>
	alarm_m = (alarm_m+1) % 60;
    4316:	80 91 2e 03 	lds	r24, 0x032E
    431a:	90 e0       	ldi	r25, 0x00	; 0
    431c:	01 96       	adiw	r24, 0x01	; 1
    431e:	6c e3       	ldi	r22, 0x3C	; 60
    4320:	70 e0       	ldi	r23, 0x00	; 0
    4322:	0e 94 17 3b 	call	0x762e	; 0x762e <__divmodhi4>
    4326:	80 93 2e 03 	sts	0x032E, r24
	eeprom_write_byte(&EE_ALARM_MIN, alarm_m);    
    432a:	60 91 2e 03 	lds	r22, 0x032E
    432e:	82 e0       	ldi	r24, 0x02	; 2
    4330:	90 e0       	ldi	r25, 0x00	; 0
    4332:	0e 94 7e 3b 	call	0x76fc	; 0x76fc <__eewr_byte_m328p>
      }
      print_alarmline(mode);
    4336:	81 2f       	mov	r24, r17
    4338:	0e 94 03 20 	call	0x4006	; 0x4006 <print_alarmline>
      screenmutex--;
    433c:	80 91 13 02 	lds	r24, 0x0213
    4340:	81 50       	subi	r24, 0x01	; 1
    4342:	80 93 13 02 	sts	0x0213, r24
      if (pressed & 0x4)
    4346:	80 91 10 02 	lds	r24, 0x0210
    434a:	82 ff       	sbrs	r24, 2
    434c:	04 c0       	rjmp	.+8      	; 0x4356 <set_alarm+0xe4>
	delay_ms(200);
    434e:	88 ec       	ldi	r24, 0xC8	; 200
    4350:	90 e0       	ldi	r25, 0x00	; 0
    4352:	0e 94 fd 35 	call	0x6bfa	; 0x6bfa <delay_ms>
}

void set_alarm(void) {
  uint8_t mode = init_set_menu(1);

  while (!check_timeout()) {
    4356:	0e 94 c9 39 	call	0x7392	; 0x7392 <check_timeout>
    435a:	88 23       	and	r24, r24
    435c:	09 f4       	brne	.+2      	; 0x4360 <set_alarm+0xee>
    435e:	8f cf       	rjmp	.-226    	; 0x427e <set_alarm+0xc>
      screenmutex--;
      if (pressed & 0x4)
	delay_ms(200);
    }
  }
}
    4360:	1f 91       	pop	r17
    4362:	08 95       	ret

00004364 <set_backlight>:
  }

}

#ifdef BACKLIGHT_ADJUST
void set_backlight(void) {
    4364:	1f 93       	push	r17
  uint8_t mode = init_set_menu(5);
    4366:	85 e0       	ldi	r24, 0x05	; 5
    4368:	0e 94 87 20 	call	0x410e	; 0x410e <init_set_menu>
    436c:	18 2f       	mov	r17, r24
    436e:	46 c0       	rjmp	.+140    	; 0x43fc <set_backlight+0x98>
  while (!check_timeout()) {
    
  
    if (just_pressed & 0x2) {
    4370:	80 91 0f 02 	lds	r24, 0x020F
    4374:	81 ff       	sbrs	r24, 1
    4376:	18 c0       	rjmp	.+48     	; 0x43a8 <set_backlight+0x44>
      just_pressed = 0;
    4378:	10 92 0f 02 	sts	0x020F, r1
      screenmutex++;
    437c:	80 91 13 02 	lds	r24, 0x0213
    4380:	8f 5f       	subi	r24, 0xFF	; 255
    4382:	80 93 13 02 	sts	0x0213, r24

      if (mode == SET_BRIGHTNESS) {
    4386:	16 30       	cpi	r17, 0x06	; 6
    4388:	21 f4       	brne	.+8      	; 0x4392 <set_backlight+0x2e>
	DEBUG(putstring("Setting backlight"));
	// ok now its selected
	mode = SET_BRT;
	// print the region 
	// display instructions below
	print_menu_change();
    438a:	0e 94 54 3a 	call	0x74a8	; 0x74a8 <print_menu_change>
    438e:	19 e6       	ldi	r17, 0x69	; 105
    4390:	03 c0       	rjmp	.+6      	; 0x4398 <set_backlight+0x34>

      } else {
	mode = SET_BRIGHTNESS;
	// print the region normal
        print_menu_exit();
    4392:	0e 94 5b 3a 	call	0x74b6	; 0x74b6 <print_menu_exit>
    4396:	16 e0       	ldi	r17, 0x06	; 6
      }
      print_backlight(mode);
    4398:	81 2f       	mov	r24, r17
    439a:	0e 94 a7 1f 	call	0x3f4e	; 0x3f4e <print_backlight>
      screenmutex--;
    439e:	80 91 13 02 	lds	r24, 0x0213
    43a2:	81 50       	subi	r24, 0x01	; 1
    43a4:	80 93 13 02 	sts	0x0213, r24
    }
    if ((just_pressed & 0x4) || (pressed & 0x4)) {
    43a8:	80 91 0f 02 	lds	r24, 0x020F
    43ac:	82 fd       	sbrc	r24, 2
    43ae:	04 c0       	rjmp	.+8      	; 0x43b8 <set_backlight+0x54>
    43b0:	80 91 10 02 	lds	r24, 0x0210
    43b4:	82 ff       	sbrs	r24, 2
    43b6:	22 c0       	rjmp	.+68     	; 0x43fc <set_backlight+0x98>
      just_pressed = 0;
    43b8:	10 92 0f 02 	sts	0x020F, r1
      
      if (mode == SET_BRT) {
    43bc:	19 36       	cpi	r17, 0x69	; 105
    43be:	f1 f4       	brne	.+60     	; 0x43fc <set_backlight+0x98>
	    OCR2B += OCR2B_PLUS;
    43c0:	80 91 b4 00 	lds	r24, 0x00B4
    43c4:	8f 5f       	subi	r24, 0xFF	; 255
    43c6:	80 93 b4 00 	sts	0x00B4, r24
	    if(OCR2B > OCR2A_VALUE)
    43ca:	80 91 b4 00 	lds	r24, 0x00B4
    43ce:	81 31       	cpi	r24, 0x11	; 17
    43d0:	10 f0       	brcs	.+4      	; 0x43d6 <set_backlight+0x72>
	      OCR2B = 0;
    43d2:	10 92 b4 00 	sts	0x00B4, r1
	screenmutex++;
    43d6:	80 91 13 02 	lds	r24, 0x0213
    43da:	8f 5f       	subi	r24, 0xFF	; 255
    43dc:	80 93 13 02 	sts	0x0213, r24
	print_backlight(mode);
    43e0:	89 e6       	ldi	r24, 0x69	; 105
    43e2:	0e 94 a7 1f 	call	0x3f4e	; 0x3f4e <print_backlight>
	screenmutex--;
    43e6:	80 91 13 02 	lds	r24, 0x0213
    43ea:	81 50       	subi	r24, 0x01	; 1
    43ec:	80 93 13 02 	sts	0x0213, r24

	eeprom_write_byte(&EE_BRIGHT, OCR2B);
    43f0:	60 91 b4 00 	lds	r22, 0x00B4
    43f4:	83 e0       	ldi	r24, 0x03	; 3
    43f6:	90 e0       	ldi	r25, 0x00	; 0
    43f8:	0e 94 7e 3b 	call	0x76fc	; 0x76fc <__eewr_byte_m328p>
}

#ifdef BACKLIGHT_ADJUST
void set_backlight(void) {
  uint8_t mode = init_set_menu(5);
  while (!check_timeout()) {
    43fc:	0e 94 c9 39 	call	0x7392	; 0x7392 <check_timeout>
    4400:	88 23       	and	r24, r24
    4402:	09 f4       	brne	.+2      	; 0x4406 <set_backlight+0xa2>
    4404:	b5 cf       	rjmp	.-150    	; 0x4370 <set_backlight+0xc>

	eeprom_write_byte(&EE_BRIGHT, OCR2B);
      }
    }
  }
}
    4406:	1f 91       	pop	r17
    4408:	08 95       	ret

0000440a <set_date>:
	SET_YEAR,
	SET_YEAR
#endif
};

void set_date(void) {
    440a:	8f 92       	push	r8
    440c:	9f 92       	push	r9
    440e:	af 92       	push	r10
    4410:	bf 92       	push	r11
    4412:	cf 92       	push	r12
    4414:	ef 92       	push	r14
    4416:	0f 93       	push	r16
    4418:	1f 93       	push	r17
    441a:	df 93       	push	r29
    441c:	cf 93       	push	r28
    441e:	00 d0       	rcall	.+0      	; 0x4420 <set_date+0x16>
    4420:	cd b7       	in	r28, 0x3d	; 61
    4422:	de b7       	in	r29, 0x3e	; 62
  uint8_t mode = init_set_menu(3);
    4424:	83 e0       	ldi	r24, 0x03	; 3
    4426:	0e 94 87 20 	call	0x410e	; 0x410e <init_set_menu>
    442a:	08 2f       	mov	r16, r24
  uint8_t day, month, year;
    
  day = date_d;
    442c:	80 91 33 03 	lds	r24, 0x0333
    4430:	89 83       	std	Y+1, r24	; 0x01
  month = date_m;
    4432:	80 91 3e 03 	lds	r24, 0x033E
    4436:	8a 83       	std	Y+2, r24	; 0x02
  year = date_y;
    4438:	10 91 2d 03 	lds	r17, 0x032D
	day++;
      }
      if (mode == SET_YEAR) {
	year = (year+1) % 100;
      }
      add_month(&month, &day, year);
    443c:	42 e0       	ldi	r20, 0x02	; 2
    443e:	84 2e       	mov	r8, r20
    4440:	91 2c       	mov	r9, r1
    4442:	8c 0e       	add	r8, r28
    4444:	9d 1e       	adc	r9, r29
    4446:	5e 01       	movw	r10, r28
    4448:	08 94       	sec
    444a:	a1 1c       	adc	r10, r1
    444c:	b1 1c       	adc	r11, r1
    444e:	85 c0       	rjmp	.+266    	; 0x455a <set_date+0x150>
  day = date_d;
  month = date_m;
  year = date_y;
  while (!check_timeout()) {
    
    if (just_pressed & 0x2) {
    4450:	80 91 0f 02 	lds	r24, 0x020F
    4454:	81 ff       	sbrs	r24, 1
    4456:	43 c0       	rjmp	.+134    	; 0x44de <set_date+0xd4>
      just_pressed = 0;
    4458:	10 92 0f 02 	sts	0x020F, r1
      screenmutex++;
    445c:	80 91 13 02 	lds	r24, 0x0213
    4460:	8f 5f       	subi	r24, 0xFF	; 255
    4462:	80 93 13 02 	sts	0x0213, r24

      if (mode == SET_DATE) {
    4466:	05 30       	cpi	r16, 0x05	; 5
    4468:	31 f4       	brne	.+12     	; 0x4476 <set_date+0x6c>
	DEBUG(putstring("Set date month/day, depending on region"));
	// ok now its selected
	mode = next_mode_setdate[region];
    446a:	e0 91 37 03 	lds	r30, 0x0337
    446e:	f0 e0       	ldi	r31, 0x00	; 0
    4470:	e6 57       	subi	r30, 0x76	; 118
    4472:	fe 4f       	sbci	r31, 0xFE	; 254
    4474:	07 c0       	rjmp	.+14     	; 0x4484 <set_date+0x7a>
	
      } else if (mode == SET_MONTH) {
    4476:	00 31       	cpi	r16, 0x10	; 16
    4478:	39 f4       	brne	.+14     	; 0x4488 <set_date+0x7e>
	DEBUG(putstring("Set date day/year, depending on region"));
	mode = next_mode_setmonth[region];
    447a:	e0 91 37 03 	lds	r30, 0x0337
    447e:	f0 e0       	ldi	r31, 0x00	; 0
    4480:	e4 57       	subi	r30, 0x74	; 116
    4482:	fe 4f       	sbci	r31, 0xFE	; 254
    4484:	00 81       	ld	r16, Z
    4486:	1d c0       	rjmp	.+58     	; 0x44c2 <set_date+0xb8>
      } else if (mode == SET_DAY) {
    4488:	01 31       	cpi	r16, 0x11	; 17
    448a:	31 f4       	brne	.+12     	; 0x4498 <set_date+0x8e>
	DEBUG(putstring("Set date month/year, depending on region"));
	mode = next_mode_setday[region];
    448c:	e0 91 37 03 	lds	r30, 0x0337
    4490:	f0 e0       	ldi	r31, 0x00	; 0
    4492:	e2 57       	subi	r30, 0x72	; 114
    4494:	fe 4f       	sbci	r31, 0xFE	; 254
    4496:	f6 cf       	rjmp	.-20     	; 0x4484 <set_date+0x7a>
	// done!
	DEBUG(putstring("done setting date"));
	mode = SET_DATE;
	
	//Update the DS1307 with set date.
	writei2ctime(time_s, time_m, time_h, 0, day, month, year);
    4498:	80 91 3f 03 	lds	r24, 0x033F
    449c:	60 91 34 03 	lds	r22, 0x0334
    44a0:	40 91 2a 03 	lds	r20, 0x032A
    44a4:	20 e0       	ldi	r18, 0x00	; 0
    44a6:	09 81       	ldd	r16, Y+1	; 0x01
    44a8:	ea 80       	ldd	r14, Y+2	; 0x02
    44aa:	c1 2e       	mov	r12, r17
    44ac:	0e 94 63 31 	call	0x62c6	; 0x62c6 <writei2ctime>
	date_y = year;
    44b0:	10 93 2d 03 	sts	0x032D, r17
	date_m = month;
    44b4:	8a 81       	ldd	r24, Y+2	; 0x02
    44b6:	80 93 3e 03 	sts	0x033E, r24
	date_d = day;
    44ba:	89 81       	ldd	r24, Y+1	; 0x01
    44bc:	80 93 33 03 	sts	0x0333, r24
    44c0:	05 e0       	ldi	r16, 0x05	; 5
	
      }
      //Print the instructions below
      print_monthday_help(mode);
    44c2:	80 2f       	mov	r24, r16
    44c4:	0e 94 24 20 	call	0x4048	; 0x4048 <print_monthday_help>
      //Refresh the date.
      print_date(month,day,year,mode);
    44c8:	8a 81       	ldd	r24, Y+2	; 0x02
    44ca:	69 81       	ldd	r22, Y+1	; 0x01
    44cc:	41 2f       	mov	r20, r17
    44ce:	20 2f       	mov	r18, r16
    44d0:	0e 94 58 1f 	call	0x3eb0	; 0x3eb0 <print_date>
      screenmutex--;
    44d4:	80 91 13 02 	lds	r24, 0x0213
    44d8:	81 50       	subi	r24, 0x01	; 1
    44da:	80 93 13 02 	sts	0x0213, r24
    }
    if ((just_pressed & 0x4) || (pressed & 0x4)) {
    44de:	80 91 0f 02 	lds	r24, 0x020F
    44e2:	82 fd       	sbrc	r24, 2
    44e4:	04 c0       	rjmp	.+8      	; 0x44ee <set_date+0xe4>
    44e6:	80 91 10 02 	lds	r24, 0x0210
    44ea:	82 ff       	sbrs	r24, 2
    44ec:	36 c0       	rjmp	.+108    	; 0x455a <set_date+0x150>
      just_pressed = 0;
    44ee:	10 92 0f 02 	sts	0x020F, r1

      screenmutex++;
    44f2:	80 91 13 02 	lds	r24, 0x0213
    44f6:	8f 5f       	subi	r24, 0xFF	; 255
    44f8:	80 93 13 02 	sts	0x0213, r24

      if (mode == SET_MONTH) {
    44fc:	00 31       	cpi	r16, 0x10	; 16
    44fe:	21 f4       	brne	.+8      	; 0x4508 <set_date+0xfe>
      month++;
    4500:	8a 81       	ldd	r24, Y+2	; 0x02
    4502:	8f 5f       	subi	r24, 0xFF	; 255
    4504:	8a 83       	std	Y+2, r24	; 0x02
    4506:	10 c0       	rjmp	.+32     	; 0x4528 <set_date+0x11e>
      }
      if (mode == SET_DAY) {
    4508:	01 31       	cpi	r16, 0x11	; 17
    450a:	21 f4       	brne	.+8      	; 0x4514 <set_date+0x10a>
	day++;
    450c:	89 81       	ldd	r24, Y+1	; 0x01
    450e:	8f 5f       	subi	r24, 0xFF	; 255
    4510:	89 83       	std	Y+1, r24	; 0x01
    4512:	0a c0       	rjmp	.+20     	; 0x4528 <set_date+0x11e>
      }
      if (mode == SET_YEAR) {
    4514:	02 31       	cpi	r16, 0x12	; 18
    4516:	41 f4       	brne	.+16     	; 0x4528 <set_date+0x11e>
	year = (year+1) % 100;
    4518:	81 2f       	mov	r24, r17
    451a:	90 e0       	ldi	r25, 0x00	; 0
    451c:	01 96       	adiw	r24, 0x01	; 1
    451e:	64 e6       	ldi	r22, 0x64	; 100
    4520:	70 e0       	ldi	r23, 0x00	; 0
    4522:	0e 94 17 3b 	call	0x762e	; 0x762e <__divmodhi4>
    4526:	18 2f       	mov	r17, r24
      }
      add_month(&month, &day, year);
    4528:	c4 01       	movw	r24, r8
    452a:	b5 01       	movw	r22, r10
    452c:	41 2f       	mov	r20, r17
    452e:	50 e0       	ldi	r21, 0x00	; 0
    4530:	0e 94 90 39 	call	0x7320	; 0x7320 <add_month>
      print_date(month,day,year,mode);
    4534:	8a 81       	ldd	r24, Y+2	; 0x02
    4536:	69 81       	ldd	r22, Y+1	; 0x01
    4538:	41 2f       	mov	r20, r17
    453a:	20 2f       	mov	r18, r16
    453c:	0e 94 58 1f 	call	0x3eb0	; 0x3eb0 <print_date>
      screenmutex--;
    4540:	80 91 13 02 	lds	r24, 0x0213
    4544:	81 50       	subi	r24, 0x01	; 1
    4546:	80 93 13 02 	sts	0x0213, r24

      if (pressed & 0x4)
    454a:	80 91 10 02 	lds	r24, 0x0210
    454e:	82 ff       	sbrs	r24, 2
    4550:	04 c0       	rjmp	.+8      	; 0x455a <set_date+0x150>
	delay_ms(200);  
    4552:	88 ec       	ldi	r24, 0xC8	; 200
    4554:	90 e0       	ldi	r25, 0x00	; 0
    4556:	0e 94 fd 35 	call	0x6bfa	; 0x6bfa <delay_ms>
  uint8_t day, month, year;
    
  day = date_d;
  month = date_m;
  year = date_y;
  while (!check_timeout()) {
    455a:	0e 94 c9 39 	call	0x7392	; 0x7392 <check_timeout>
    455e:	88 23       	and	r24, r24
    4560:	09 f4       	brne	.+2      	; 0x4564 <set_date+0x15a>
    4562:	76 cf       	rjmp	.-276    	; 0x4450 <set_date+0x46>
      if (pressed & 0x4)
	delay_ms(200);  
    }
  }

}
    4564:	0f 90       	pop	r0
    4566:	0f 90       	pop	r0
    4568:	cf 91       	pop	r28
    456a:	df 91       	pop	r29
    456c:	1f 91       	pop	r17
    456e:	0f 91       	pop	r16
    4570:	ef 90       	pop	r14
    4572:	cf 90       	pop	r12
    4574:	bf 90       	pop	r11
    4576:	af 90       	pop	r10
    4578:	9f 90       	pop	r9
    457a:	8f 90       	pop	r8
    457c:	08 95       	ret

0000457e <set_region>:
  glcdSetAddress(MENU_INDENT, 4);
  glcdPutStr("Region: ", NORMAL);
  glcdPutStr_rom(&region_setting_table[(region * 2) + time_format][0], inverted);
}

void set_region(void) {
    457e:	1f 93       	push	r17
  uint8_t mode = init_set_menu(4);
    4580:	84 e0       	ldi	r24, 0x04	; 4
    4582:	0e 94 87 20 	call	0x410e	; 0x410e <init_set_menu>
    4586:	18 2f       	mov	r17, r24
    4588:	60 c0       	rjmp	.+192    	; 0x464a <set_region+0xcc>

  while (!check_timeout()) {
    
  
    if (just_pressed & 0x2) {
    458a:	80 91 0f 02 	lds	r24, 0x020F
    458e:	81 ff       	sbrs	r24, 1
    4590:	1b c0       	rjmp	.+54     	; 0x45c8 <set_region+0x4a>
      just_pressed = 0;
    4592:	10 92 0f 02 	sts	0x020F, r1
      screenmutex++;
    4596:	80 91 13 02 	lds	r24, 0x0213
    459a:	8f 5f       	subi	r24, 0xFF	; 255
    459c:	80 93 13 02 	sts	0x0213, r24

      if (mode == SET_REGION) {
    45a0:	18 30       	cpi	r17, 0x08	; 8
    45a2:	39 f4       	brne	.+14     	; 0x45b2 <set_region+0x34>
	DEBUG(putstring("Setting region"));
	// ok now its selected
	mode = SET_REG;
	// print the region 
	print_region_setting(INVERTED);
    45a4:	81 e0       	ldi	r24, 0x01	; 1
    45a6:	0e 94 b2 1e 	call	0x3d64	; 0x3d64 <print_region_setting>
	// display instructions below
	print_menu_change();
    45aa:	0e 94 54 3a 	call	0x74a8	; 0x74a8 <print_menu_change>
    45ae:	18 e6       	ldi	r17, 0x68	; 104
    45b0:	06 c0       	rjmp	.+12     	; 0x45be <set_region+0x40>
      } else {
	mode = SET_REGION;
	// print the region normal
	print_region_setting(NORMAL);
    45b2:	80 e0       	ldi	r24, 0x00	; 0
    45b4:	0e 94 b2 1e 	call	0x3d64	; 0x3d64 <print_region_setting>
#ifdef BACKLIGHT_ADJUST
        print_menu_advance();
    45b8:	0e 94 66 3a 	call	0x74cc	; 0x74cc <print_menu_advance>
    45bc:	18 e0       	ldi	r17, 0x08	; 8
#else
	print_menu_exit();
#endif
      }
      screenmutex--;
    45be:	80 91 13 02 	lds	r24, 0x0213
    45c2:	81 50       	subi	r24, 0x01	; 1
    45c4:	80 93 13 02 	sts	0x0213, r24
    }
    if ((just_pressed & 0x4) || (pressed & 0x4)) {
    45c8:	80 91 0f 02 	lds	r24, 0x020F
    45cc:	82 fd       	sbrc	r24, 2
    45ce:	04 c0       	rjmp	.+8      	; 0x45d8 <set_region+0x5a>
    45d0:	80 91 10 02 	lds	r24, 0x0210
    45d4:	82 ff       	sbrs	r24, 2
    45d6:	39 c0       	rjmp	.+114    	; 0x464a <set_region+0xcc>
      just_pressed = 0;
    45d8:	10 92 0f 02 	sts	0x020F, r1
      
      if (mode == SET_REG) {
    45dc:	18 36       	cpi	r17, 0x68	; 104
    45de:	a9 f5       	brne	.+106    	; 0x464a <set_region+0xcc>
	    if(time_format) {        
    45e0:	80 91 2c 03 	lds	r24, 0x032C
    45e4:	88 23       	and	r24, r24
    45e6:	59 f0       	breq	.+22     	; 0x45fe <set_region+0x80>
	      region++;
    45e8:	80 91 37 03 	lds	r24, 0x0337
    45ec:	8f 5f       	subi	r24, 0xFF	; 255
    45ee:	80 93 37 03 	sts	0x0337, r24
#ifdef OPTION_DOW_DATELONG
	      if(region > DATELONG_DOW)
#else
          if(region > REGION_EU)
    45f2:	80 91 37 03 	lds	r24, 0x0337
    45f6:	82 30       	cpi	r24, 0x02	; 2
    45f8:	10 f0       	brcs	.+4      	; 0x45fe <set_region+0x80>
#endif
	        region = 0;
    45fa:	10 92 37 03 	sts	0x0337, r1
		}
		time_format = !time_format;
    45fe:	80 91 2c 03 	lds	r24, 0x032C
    4602:	90 e0       	ldi	r25, 0x00	; 0
    4604:	88 23       	and	r24, r24
    4606:	09 f4       	brne	.+2      	; 0x460a <set_region+0x8c>
    4608:	91 e0       	ldi	r25, 0x01	; 1
    460a:	90 93 2c 03 	sts	0x032C, r25
	screenmutex++;
    460e:	80 91 13 02 	lds	r24, 0x0213
    4612:	8f 5f       	subi	r24, 0xFF	; 255
    4614:	80 93 13 02 	sts	0x0213, r24
	display_menu(4);
    4618:	84 e0       	ldi	r24, 0x04	; 4
    461a:	0e 94 3e 20 	call	0x407c	; 0x407c <display_menu>
	print_menu_change();
    461e:	0e 94 54 3a 	call	0x74a8	; 0x74a8 <print_menu_change>

	print_region_setting(INVERTED);
    4622:	81 e0       	ldi	r24, 0x01	; 1
    4624:	0e 94 b2 1e 	call	0x3d64	; 0x3d64 <print_region_setting>
	screenmutex--;
    4628:	80 91 13 02 	lds	r24, 0x0213
    462c:	81 50       	subi	r24, 0x01	; 1
    462e:	80 93 13 02 	sts	0x0213, r24

	eeprom_write_byte(&EE_REGION, region);
    4632:	60 91 37 03 	lds	r22, 0x0337
    4636:	84 e0       	ldi	r24, 0x04	; 4
    4638:	90 e0       	ldi	r25, 0x00	; 0
    463a:	0e 94 7e 3b 	call	0x76fc	; 0x76fc <__eewr_byte_m328p>
	eeprom_write_byte(&EE_TIME_FORMAT, time_format);    
    463e:	60 91 2c 03 	lds	r22, 0x032C
    4642:	85 e0       	ldi	r24, 0x05	; 5
    4644:	90 e0       	ldi	r25, 0x00	; 0
    4646:	0e 94 7e 3b 	call	0x76fc	; 0x76fc <__eewr_byte_m328p>
}

void set_region(void) {
  uint8_t mode = init_set_menu(4);

  while (!check_timeout()) {
    464a:	0e 94 c9 39 	call	0x7392	; 0x7392 <check_timeout>
    464e:	88 23       	and	r24, r24
    4650:	09 f4       	brne	.+2      	; 0x4654 <set_region+0xd6>
    4652:	9b cf       	rjmp	.-202    	; 0x458a <set_region+0xc>
	eeprom_write_byte(&EE_REGION, region);
	eeprom_write_byte(&EE_TIME_FORMAT, time_format);    
      }
    }
  }
}
    4654:	1f 91       	pop	r17
    4656:	08 95       	ret

00004658 <set_style>:
  return displaymode;
}


//Dataman - Handle setting style
void set_style(void) {
    4658:	0f 93       	push	r16
    465a:	1f 93       	push	r17
  displaystyle = eeprom_read_byte(&EE_STYLE);
    465c:	87 e0       	ldi	r24, 0x07	; 7
    465e:	90 e0       	ldi	r25, 0x00	; 0
    4660:	0e 94 70 3b 	call	0x76e0	; 0x76e0 <__eerd_byte_m328p>
    4664:	80 93 31 03 	sts	0x0331, r24
  uint8_t mode = init_set_menu(0);
    4668:	80 e0       	ldi	r24, 0x00	; 0
    466a:	0e 94 87 20 	call	0x410e	; 0x410e <init_set_menu>
    466e:	18 2f       	mov	r17, r24
    if ((just_pressed & 0x4) || (pressed & 0x4)) {
      just_pressed = 0;
      
      if (mode == SET_STL) {
	    displaystyle ++;
	    if (displaystyle>STYLE_ABOUT) displaystyle=STYLE_BASE + 1;
    4670:	02 ed       	ldi	r16, 0xD2	; 210
    4672:	5e c0       	rjmp	.+188    	; 0x4730 <set_style+0xd8>
void set_style(void) {
  displaystyle = eeprom_read_byte(&EE_STYLE);
  uint8_t mode = init_set_menu(0);
  while (!check_timeout()) {
  
    if (just_pressed & 0x2) {
    4674:	80 91 0f 02 	lds	r24, 0x020F
    4678:	81 ff       	sbrs	r24, 1
    467a:	29 c0       	rjmp	.+82     	; 0x46ce <set_style+0x76>
      just_pressed = 0;
    467c:	10 92 0f 02 	sts	0x020F, r1
      screenmutex++;
    4680:	80 91 13 02 	lds	r24, 0x0213
    4684:	8f 5f       	subi	r24, 0xFF	; 255
    4686:	80 93 13 02 	sts	0x0213, r24

      if (mode == SET_STYLE) {
    468a:	18 3c       	cpi	r17, 0xC8	; 200
    468c:	61 f4       	brne	.+24     	; 0x46a6 <set_style+0x4e>
	DEBUG(putstring("Setting mode"));
	// ok now its selected
	mode = SET_STL;
	// print the region 
	print_style_setting(INVERTED);
    468e:	81 e0       	ldi	r24, 0x01	; 1
    4690:	0e 94 91 1e 	call	0x3d22	; 0x3d22 <print_style_setting>
 	
	// display instructions below
	print_menu_change();
    4694:	0e 94 54 3a 	call	0x74a8	; 0x74a8 <print_menu_change>
        RotateFlag = 0;
        displaymode = SHOW_TIME;
		if (displaystyle<=STYLE_ROTATE) eeprom_write_byte(&EE_STYLE,displaystyle);
        return;
      }
      screenmutex--;
    4698:	80 91 13 02 	lds	r24, 0x0213
    469c:	81 50       	subi	r24, 0x01	; 1
    469e:	80 93 13 02 	sts	0x0213, r24
    46a2:	19 ec       	ldi	r17, 0xC9	; 201
    46a4:	14 c0       	rjmp	.+40     	; 0x46ce <set_style+0x76>
	// display instructions below
	print_menu_change();
      } else {
	mode = SET_STYLE;
	// print the region normal
	print_style_setting(NORMAL);
    46a6:	80 e0       	ldi	r24, 0x00	; 0
    46a8:	0e 94 91 1e 	call	0x3d22	; 0x3d22 <print_style_setting>
	print_menu_advance();
    46ac:	0e 94 66 3a 	call	0x74cc	; 0x74cc <print_menu_advance>
        // faster return?
        RotateFlag = 0;
    46b0:	10 92 3d 03 	sts	0x033D, r1
        displaymode = SHOW_TIME;
    46b4:	10 92 3a 03 	sts	0x033A, r1
		if (displaystyle<=STYLE_ROTATE) eeprom_write_byte(&EE_STYLE,displaystyle);
    46b8:	80 91 31 03 	lds	r24, 0x0331
    46bc:	86 3d       	cpi	r24, 0xD6	; 214
    46be:	e8 f5       	brcc	.+122    	; 0x473a <set_style+0xe2>
    46c0:	60 91 31 03 	lds	r22, 0x0331
    46c4:	87 e0       	ldi	r24, 0x07	; 7
    46c6:	90 e0       	ldi	r25, 0x00	; 0
    46c8:	0e 94 7e 3b 	call	0x76fc	; 0x76fc <__eewr_byte_m328p>
    46cc:	36 c0       	rjmp	.+108    	; 0x473a <set_style+0xe2>
        return;
      }
      screenmutex--;
    }
    if ((just_pressed & 0x4) || (pressed & 0x4)) {
    46ce:	80 91 0f 02 	lds	r24, 0x020F
    46d2:	82 fd       	sbrc	r24, 2
    46d4:	04 c0       	rjmp	.+8      	; 0x46de <set_style+0x86>
    46d6:	80 91 10 02 	lds	r24, 0x0210
    46da:	82 ff       	sbrs	r24, 2
    46dc:	29 c0       	rjmp	.+82     	; 0x4730 <set_style+0xd8>
      just_pressed = 0;
    46de:	10 92 0f 02 	sts	0x020F, r1
      
      if (mode == SET_STL) {
    46e2:	19 3c       	cpi	r17, 0xC9	; 201
    46e4:	29 f5       	brne	.+74     	; 0x4730 <set_style+0xd8>
	    displaystyle ++;
    46e6:	80 91 31 03 	lds	r24, 0x0331
    46ea:	8f 5f       	subi	r24, 0xFF	; 255
    46ec:	80 93 31 03 	sts	0x0331, r24
	    if (displaystyle>STYLE_ABOUT) displaystyle=STYLE_BASE + 1;
    46f0:	80 91 31 03 	lds	r24, 0x0331
    46f4:	89 3d       	cpi	r24, 0xD9	; 217
    46f6:	10 f0       	brcs	.+4      	; 0x46fc <set_style+0xa4>
    46f8:	00 93 31 03 	sts	0x0331, r16
	screenmutex++;
    46fc:	80 91 13 02 	lds	r24, 0x0213
    4700:	8f 5f       	subi	r24, 0xFF	; 255
    4702:	80 93 13 02 	sts	0x0213, r24
	display_menu(0);
    4706:	80 e0       	ldi	r24, 0x00	; 0
    4708:	0e 94 3e 20 	call	0x407c	; 0x407c <display_menu>
	print_menu_change();
    470c:	0e 94 54 3a 	call	0x74a8	; 0x74a8 <print_menu_change>

	// put a small arrow next to 'set 12h/24h'
	print_style_setting(INVERTED);
    4710:	81 e0       	ldi	r24, 0x01	; 1
    4712:	0e 94 91 1e 	call	0x3d22	; 0x3d22 <print_style_setting>
 	
	screenmutex--;
    4716:	80 91 13 02 	lds	r24, 0x0213
    471a:	81 50       	subi	r24, 0x01	; 1
    471c:	80 93 13 02 	sts	0x0213, r24
	if(pressed & 4)
    4720:	80 91 10 02 	lds	r24, 0x0210
    4724:	82 ff       	sbrs	r24, 2
    4726:	04 c0       	rjmp	.+8      	; 0x4730 <set_style+0xd8>
		delay_ms(200);
    4728:	88 ec       	ldi	r24, 0xC8	; 200
    472a:	90 e0       	ldi	r25, 0x00	; 0
    472c:	0e 94 fd 35 	call	0x6bfa	; 0x6bfa <delay_ms>

//Dataman - Handle setting style
void set_style(void) {
  displaystyle = eeprom_read_byte(&EE_STYLE);
  uint8_t mode = init_set_menu(0);
  while (!check_timeout()) {
    4730:	0e 94 c9 39 	call	0x7392	; 0x7392 <check_timeout>
    4734:	88 23       	and	r24, r24
    4736:	09 f4       	brne	.+2      	; 0x473a <set_style+0xe2>
    4738:	9d cf       	rjmp	.-198    	; 0x4674 <set_style+0x1c>

	//eeprom_write_byte(&EE_BRIGHT, OCR2B);
      }
    }
  }
}
    473a:	1f 91       	pop	r17
    473c:	0f 91       	pop	r16
    473e:	08 95       	ret

00004740 <is_leap_year>:


const uint8_t day_in_month[12] PROGMEM = {31,28,31,30,31,30,31,31,30,31,30,31};

uint8_t is_leap_year ( uint16_t year )
{
    4740:	9c 01       	movw	r18, r24
  if ((year % 400) == 0)
    4742:	60 e9       	ldi	r22, 0x90	; 144
    4744:	71 e0       	ldi	r23, 0x01	; 1
    4746:	0e 94 03 3b 	call	0x7606	; 0x7606 <__udivmodhi4>
    474a:	89 2b       	or	r24, r25
    474c:	11 f4       	brne	.+4      	; 0x4752 <is_leap_year+0x12>
    474e:	81 e0       	ldi	r24, 0x01	; 1
    4750:	08 95       	ret
    return 1;
  if ((year % 100) == 0)
    4752:	c9 01       	movw	r24, r18
    4754:	64 e6       	ldi	r22, 0x64	; 100
    4756:	70 e0       	ldi	r23, 0x00	; 0
    4758:	0e 94 03 3b 	call	0x7606	; 0x7606 <__udivmodhi4>
    475c:	89 2b       	or	r24, r25
    475e:	11 f4       	brne	.+4      	; 0x4764 <is_leap_year+0x24>
    4760:	80 e0       	ldi	r24, 0x00	; 0
    4762:	08 95       	ret
    4764:	80 e0       	ldi	r24, 0x00	; 0
    4766:	23 70       	andi	r18, 0x03	; 3
    4768:	30 70       	andi	r19, 0x00	; 0
    476a:	23 2b       	or	r18, r19
    476c:	09 f4       	brne	.+2      	; 0x4770 <is_leap_year+0x30>
    476e:	81 e0       	ldi	r24, 0x01	; 1
    return 0;
  if ((year % 4) == 0)
    return 1;
  return 0;
}
    4770:	08 95       	ret

00004772 <date_diff>:

uint32_t date_diff ( uint8_t month1, uint8_t day1, uint8_t year1, uint8_t month2, uint8_t day2, uint8_t year2 )
{
    4772:	4f 92       	push	r4
    4774:	5f 92       	push	r5
    4776:	6f 92       	push	r6
    4778:	7f 92       	push	r7
    477a:	8f 92       	push	r8
    477c:	9f 92       	push	r9
    477e:	af 92       	push	r10
    4780:	bf 92       	push	r11
    4782:	cf 92       	push	r12
    4784:	df 92       	push	r13
    4786:	ef 92       	push	r14
    4788:	ff 92       	push	r15
    478a:	0f 93       	push	r16
    478c:	1f 93       	push	r17
    478e:	cf 93       	push	r28
    4790:	df 93       	push	r29
    4792:	38 2f       	mov	r19, r24
    4794:	56 2f       	mov	r21, r22
    4796:	94 2e       	mov	r9, r20
    4798:	52 2e       	mov	r5, r18
    479a:	40 2e       	mov	r4, r16
    479c:	8e 2c       	mov	r8, r14
  uint32_t diff = 0;
  int i;

  if((year2 < year1) || ((year2 == year1) && (month2 < month1)))
    479e:	e4 16       	cp	r14, r20
    47a0:	20 f0       	brcs	.+8      	; 0x47aa <date_diff+0x38>
    47a2:	e4 16       	cp	r14, r20
    47a4:	91 f4       	brne	.+36     	; 0x47ca <date_diff+0x58>
    47a6:	28 17       	cp	r18, r24
    47a8:	80 f4       	brcc	.+32     	; 0x47ca <date_diff+0x58>
    return date_diff( month2, day2, year2, month1, day1, year1 ) * -1;
    47aa:	85 2d       	mov	r24, r5
    47ac:	64 2d       	mov	r22, r4
    47ae:	48 2d       	mov	r20, r8
    47b0:	23 2f       	mov	r18, r19
    47b2:	05 2f       	mov	r16, r21
    47b4:	e9 2c       	mov	r14, r9
    47b6:	0e 94 b9 23 	call	0x4772	; 0x4772 <date_diff>
    47ba:	22 27       	eor	r18, r18
    47bc:	33 27       	eor	r19, r19
    47be:	a9 01       	movw	r20, r18
    47c0:	26 1b       	sub	r18, r22
    47c2:	37 0b       	sbc	r19, r23
    47c4:	48 0b       	sbc	r20, r24
    47c6:	59 0b       	sbc	r21, r25
    47c8:	de c0       	rjmp	.+444    	; 0x4986 <date_diff+0x214>

  if((month1 == month2) && (year1 == year2))
    47ca:	35 15       	cp	r19, r5
    47cc:	69 f4       	brne	.+26     	; 0x47e8 <date_diff+0x76>
    47ce:	98 14       	cp	r9, r8
    47d0:	09 f0       	breq	.+2      	; 0x47d4 <date_diff+0x62>
    47d2:	53 c0       	rjmp	.+166    	; 0x487a <date_diff+0x108>
    return day2 - day1;
    47d4:	84 2d       	mov	r24, r4
    47d6:	90 e0       	ldi	r25, 0x00	; 0
    47d8:	85 1b       	sub	r24, r21
    47da:	91 09       	sbc	r25, r1
    47dc:	9c 01       	movw	r18, r24
    47de:	44 27       	eor	r20, r20
    47e0:	37 fd       	sbrc	r19, 7
    47e2:	40 95       	com	r20
    47e4:	54 2f       	mov	r21, r20
    47e6:	cf c0       	rjmp	.+414    	; 0x4986 <date_diff+0x214>
  if(year1==year2)
    47e8:	98 14       	cp	r9, r8
    47ea:	09 f0       	breq	.+2      	; 0x47ee <date_diff+0x7c>
    47ec:	46 c0       	rjmp	.+140    	; 0x487a <date_diff+0x108>
  {
    diff = pgm_read_byte(&day_in_month[month1-1]) - day1;
    47ee:	c3 2f       	mov	r28, r19
    47f0:	d0 e0       	ldi	r29, 0x00	; 0
    47f2:	fe 01       	movw	r30, r28
    47f4:	ee 5b       	subi	r30, 0xBE	; 190
    47f6:	fb 4f       	sbci	r31, 0xFB	; 251
    47f8:	e4 91       	lpm	r30, Z+
    47fa:	8e 2f       	mov	r24, r30
    47fc:	90 e0       	ldi	r25, 0x00	; 0
    47fe:	85 1b       	sub	r24, r21
    4800:	91 09       	sbc	r25, r1
    4802:	7c 01       	movw	r14, r24
    4804:	00 27       	eor	r16, r16
    4806:	f7 fc       	sbrc	r15, 7
    4808:	00 95       	com	r16
    480a:	10 2f       	mov	r17, r16
    if(month1 == 2)
    480c:	32 30       	cpi	r19, 0x02	; 2
    480e:	41 f4       	brne	.+16     	; 0x4820 <date_diff+0xae>
      diff += is_leap_year(year1);
    4810:	89 2d       	mov	r24, r9
    4812:	90 e0       	ldi	r25, 0x00	; 0
    4814:	0e 94 a0 23 	call	0x4740	; 0x4740 <is_leap_year>
    4818:	e8 0e       	add	r14, r24
    481a:	f1 1c       	adc	r15, r1
    481c:	01 1d       	adc	r16, r1
    481e:	11 1d       	adc	r17, r1
    4820:	93 e4       	ldi	r25, 0x43	; 67
    4822:	a9 2e       	mov	r10, r25
    4824:	94 e0       	ldi	r25, 0x04	; 4
    4826:	b9 2e       	mov	r11, r25
    4828:	ac 0e       	add	r10, r28
    482a:	bd 1e       	adc	r11, r29
    482c:	cc 24       	eor	r12, r12
    482e:	dd 24       	eor	r13, r13
    for(i=month1+1;i<month2;i++)
    {
      diff+=pgm_read_byte(&day_in_month[i-1]);
      if(i==2)
        diff+=is_leap_year(year1);
    4830:	3e 01       	movw	r6, r28
    4832:	08 94       	sec
    4834:	61 1c       	adc	r6, r1
    4836:	71 1c       	adc	r7, r1
  if(year1==year2)
  {
    diff = pgm_read_byte(&day_in_month[month1-1]) - day1;
    if(month1 == 2)
      diff += is_leap_year(year1);
    for(i=month1+1;i<month2;i++)
    4838:	c5 2d       	mov	r28, r5
    483a:	d0 e0       	ldi	r29, 0x00	; 0
    483c:	17 c0       	rjmp	.+46     	; 0x486c <date_diff+0xfa>
    {
      diff+=pgm_read_byte(&day_in_month[i-1]);
    483e:	f5 01       	movw	r30, r10
    4840:	84 91       	lpm	r24, Z+
    4842:	e8 0e       	add	r14, r24
    4844:	f1 1c       	adc	r15, r1
    4846:	01 1d       	adc	r16, r1
    4848:	11 1d       	adc	r17, r1
      if(i==2)
    484a:	22 30       	cpi	r18, 0x02	; 2
    484c:	31 05       	cpc	r19, r1
    484e:	41 f4       	brne	.+16     	; 0x4860 <date_diff+0xee>
        diff+=is_leap_year(year1);
    4850:	89 2d       	mov	r24, r9
    4852:	90 e0       	ldi	r25, 0x00	; 0
    4854:	0e 94 a0 23 	call	0x4740	; 0x4740 <is_leap_year>
    4858:	e8 0e       	add	r14, r24
    485a:	f1 1c       	adc	r15, r1
    485c:	01 1d       	adc	r16, r1
    485e:	11 1d       	adc	r17, r1
    4860:	08 94       	sec
    4862:	c1 1c       	adc	r12, r1
    4864:	d1 1c       	adc	r13, r1
    4866:	08 94       	sec
    4868:	a1 1c       	adc	r10, r1
    486a:	b1 1c       	adc	r11, r1
    486c:	93 01       	movw	r18, r6
    486e:	2c 0d       	add	r18, r12
    4870:	3d 1d       	adc	r19, r13
  if(year1==year2)
  {
    diff = pgm_read_byte(&day_in_month[month1-1]) - day1;
    if(month1 == 2)
      diff += is_leap_year(year1);
    for(i=month1+1;i<month2;i++)
    4872:	2c 17       	cp	r18, r28
    4874:	3d 07       	cpc	r19, r29
    4876:	1c f3       	brlt	.-58     	; 0x483e <date_diff+0xcc>
    4878:	80 c0       	rjmp	.+256    	; 0x497a <date_diff+0x208>
        diff+=is_leap_year(year1);
    }
    diff += day2;
    return diff;
  }
  diff = pgm_read_byte(&day_in_month[month1-1]) - day1;
    487a:	c3 2f       	mov	r28, r19
    487c:	d0 e0       	ldi	r29, 0x00	; 0
    487e:	fe 01       	movw	r30, r28
    4880:	ee 5b       	subi	r30, 0xBE	; 190
    4882:	fb 4f       	sbci	r31, 0xFB	; 251
    4884:	e4 91       	lpm	r30, Z+
    4886:	8e 2f       	mov	r24, r30
    4888:	90 e0       	ldi	r25, 0x00	; 0
    488a:	85 1b       	sub	r24, r21
    488c:	91 09       	sbc	r25, r1
    488e:	7c 01       	movw	r14, r24
    4890:	00 27       	eor	r16, r16
    4892:	f7 fc       	sbrc	r15, 7
    4894:	00 95       	com	r16
    4896:	10 2f       	mov	r17, r16
  if(month1 == 2)
    4898:	32 30       	cpi	r19, 0x02	; 2
    489a:	41 f4       	brne	.+16     	; 0x48ac <date_diff+0x13a>
      diff+=is_leap_year(year1);
    489c:	89 2d       	mov	r24, r9
    489e:	90 e0       	ldi	r25, 0x00	; 0
    48a0:	0e 94 a0 23 	call	0x4740	; 0x4740 <is_leap_year>
    48a4:	e8 0e       	add	r14, r24
    48a6:	f1 1c       	adc	r15, r1
    48a8:	01 1d       	adc	r16, r1
    48aa:	11 1d       	adc	r17, r1
    48ac:	83 e4       	ldi	r24, 0x43	; 67
    48ae:	a8 2e       	mov	r10, r24
    48b0:	84 e0       	ldi	r24, 0x04	; 4
    48b2:	b8 2e       	mov	r11, r24
    48b4:	ac 0e       	add	r10, r28
    48b6:	bd 1e       	adc	r11, r29
    48b8:	cc 24       	eor	r12, r12
    48ba:	dd 24       	eor	r13, r13
  for(i=month1+1;i<=12;i++)
  {
    diff+=pgm_read_byte(&day_in_month[i-1]);
    if(i==2)
      diff+=is_leap_year(year1);
    48bc:	21 96       	adiw	r28, 0x01	; 1
    48be:	17 c0       	rjmp	.+46     	; 0x48ee <date_diff+0x17c>
  diff = pgm_read_byte(&day_in_month[month1-1]) - day1;
  if(month1 == 2)
      diff+=is_leap_year(year1);
  for(i=month1+1;i<=12;i++)
  {
    diff+=pgm_read_byte(&day_in_month[i-1]);
    48c0:	f5 01       	movw	r30, r10
    48c2:	84 91       	lpm	r24, Z+
    48c4:	e8 0e       	add	r14, r24
    48c6:	f1 1c       	adc	r15, r1
    48c8:	01 1d       	adc	r16, r1
    48ca:	11 1d       	adc	r17, r1
    if(i==2)
    48cc:	22 30       	cpi	r18, 0x02	; 2
    48ce:	31 05       	cpc	r19, r1
    48d0:	41 f4       	brne	.+16     	; 0x48e2 <date_diff+0x170>
      diff+=is_leap_year(year1);
    48d2:	89 2d       	mov	r24, r9
    48d4:	90 e0       	ldi	r25, 0x00	; 0
    48d6:	0e 94 a0 23 	call	0x4740	; 0x4740 <is_leap_year>
    48da:	e8 0e       	add	r14, r24
    48dc:	f1 1c       	adc	r15, r1
    48de:	01 1d       	adc	r16, r1
    48e0:	11 1d       	adc	r17, r1
    48e2:	08 94       	sec
    48e4:	c1 1c       	adc	r12, r1
    48e6:	d1 1c       	adc	r13, r1
    48e8:	08 94       	sec
    48ea:	a1 1c       	adc	r10, r1
    48ec:	b1 1c       	adc	r11, r1
    48ee:	9e 01       	movw	r18, r28
    48f0:	2c 0d       	add	r18, r12
    48f2:	3d 1d       	adc	r19, r13
    return diff;
  }
  diff = pgm_read_byte(&day_in_month[month1-1]) - day1;
  if(month1 == 2)
      diff+=is_leap_year(year1);
  for(i=month1+1;i<=12;i++)
    48f4:	2d 30       	cpi	r18, 0x0D	; 13
    48f6:	31 05       	cpc	r19, r1
    48f8:	1c f3       	brlt	.-58     	; 0x48c0 <date_diff+0x14e>
  {
    diff+=pgm_read_byte(&day_in_month[i-1]);
    if(i==2)
      diff+=is_leap_year(year1);
  }
  for(i=year1+1;i<year2;i++)
    48fa:	89 2d       	mov	r24, r9
    48fc:	90 e0       	ldi	r25, 0x00	; 0
    48fe:	6c 01       	movw	r12, r24
    4900:	08 94       	sec
    4902:	c1 1c       	adc	r12, r1
    4904:	d1 1c       	adc	r13, r1
    4906:	c0 e0       	ldi	r28, 0x00	; 0
    4908:	d0 e0       	ldi	r29, 0x00	; 0
    490a:	3c 01       	movw	r6, r24
    490c:	a8 2c       	mov	r10, r8
    490e:	bb 24       	eor	r11, r11
    4910:	11 c0       	rjmp	.+34     	; 0x4934 <date_diff+0x1c2>
    diff+=365+is_leap_year(i);
    4912:	c6 01       	movw	r24, r12
    4914:	0e 94 a0 23 	call	0x4740	; 0x4740 <is_leap_year>
    4918:	90 e0       	ldi	r25, 0x00	; 0
    491a:	83 59       	subi	r24, 0x93	; 147
    491c:	9e 4f       	sbci	r25, 0xFE	; 254
    491e:	aa 27       	eor	r26, r26
    4920:	97 fd       	sbrc	r25, 7
    4922:	a0 95       	com	r26
    4924:	ba 2f       	mov	r27, r26
    4926:	e8 0e       	add	r14, r24
    4928:	f9 1e       	adc	r15, r25
    492a:	0a 1f       	adc	r16, r26
    492c:	1b 1f       	adc	r17, r27
  {
    diff+=pgm_read_byte(&day_in_month[i-1]);
    if(i==2)
      diff+=is_leap_year(year1);
  }
  for(i=year1+1;i<year2;i++)
    492e:	08 94       	sec
    4930:	c1 1c       	adc	r12, r1
    4932:	d1 1c       	adc	r13, r1
    4934:	21 96       	adiw	r28, 0x01	; 1
    4936:	ce 01       	movw	r24, r28
    4938:	86 0d       	add	r24, r6
    493a:	97 1d       	adc	r25, r7
    493c:	8a 15       	cp	r24, r10
    493e:	9b 05       	cpc	r25, r11
    4940:	44 f3       	brlt	.-48     	; 0x4912 <date_diff+0x1a0>
    4942:	c1 e0       	ldi	r28, 0x01	; 1
    4944:	d0 e0       	ldi	r29, 0x00	; 0
    diff+=365+is_leap_year(i);
  for(i=1;i<month2;i++)
    4946:	c5 2c       	mov	r12, r5
    4948:	dd 24       	eor	r13, r13
    494a:	14 c0       	rjmp	.+40     	; 0x4974 <date_diff+0x202>
  {
    diff+=pgm_read_byte(&day_in_month[i-1]);
    494c:	fe 01       	movw	r30, r28
    494e:	ee 5b       	subi	r30, 0xBE	; 190
    4950:	fb 4f       	sbci	r31, 0xFB	; 251
    4952:	e4 91       	lpm	r30, Z+
    4954:	ee 0e       	add	r14, r30
    4956:	f1 1c       	adc	r15, r1
    4958:	01 1d       	adc	r16, r1
    495a:	11 1d       	adc	r17, r1
    if(i==2)
    495c:	c2 30       	cpi	r28, 0x02	; 2
    495e:	d1 05       	cpc	r29, r1
    4960:	41 f4       	brne	.+16     	; 0x4972 <date_diff+0x200>
      diff+=is_leap_year(year2);
    4962:	88 2d       	mov	r24, r8
    4964:	90 e0       	ldi	r25, 0x00	; 0
    4966:	0e 94 a0 23 	call	0x4740	; 0x4740 <is_leap_year>
    496a:	e8 0e       	add	r14, r24
    496c:	f1 1c       	adc	r15, r1
    496e:	01 1d       	adc	r16, r1
    4970:	11 1d       	adc	r17, r1
    if(i==2)
      diff+=is_leap_year(year1);
  }
  for(i=year1+1;i<year2;i++)
    diff+=365+is_leap_year(i);
  for(i=1;i<month2;i++)
    4972:	21 96       	adiw	r28, 0x01	; 1
    4974:	cc 15       	cp	r28, r12
    4976:	dd 05       	cpc	r29, r13
    4978:	4c f3       	brlt	.-46     	; 0x494c <date_diff+0x1da>
  {
    diff+=pgm_read_byte(&day_in_month[i-1]);
    if(i==2)
      diff+=is_leap_year(year2);
  }
  diff += day2;
    497a:	a8 01       	movw	r20, r16
    497c:	97 01       	movw	r18, r14
    497e:	24 0d       	add	r18, r4
    4980:	31 1d       	adc	r19, r1
    4982:	41 1d       	adc	r20, r1
    4984:	51 1d       	adc	r21, r1
  return diff;
}
    4986:	b9 01       	movw	r22, r18
    4988:	ca 01       	movw	r24, r20
    498a:	df 91       	pop	r29
    498c:	cf 91       	pop	r28
    498e:	1f 91       	pop	r17
    4990:	0f 91       	pop	r16
    4992:	ff 90       	pop	r15
    4994:	ef 90       	pop	r14
    4996:	df 90       	pop	r13
    4998:	cf 90       	pop	r12
    499a:	bf 90       	pop	r11
    499c:	af 90       	pop	r10
    499e:	9f 90       	pop	r9
    49a0:	8f 90       	pop	r8
    49a2:	7f 90       	pop	r7
    49a4:	6f 90       	pop	r6
    49a6:	5f 90       	pop	r5
    49a8:	4f 90       	pop	r4
    49aa:	08 95       	ret

000049ac <BodyMassIndex>:

uint8_t BodyMassIndex ( uint8_t unit, uint16_t height, uint16_t weight )
{
    49ac:	ef 92       	push	r14
    49ae:	ff 92       	push	r15
    49b0:	0f 93       	push	r16
    49b2:	1f 93       	push	r17
    49b4:	7b 01       	movw	r14, r22
  uint32_t bmi;
  if ( unit == BMI_Imperial )
    49b6:	88 23       	and	r24, r24
    49b8:	41 f4       	brne	.+16     	; 0x49ca <BodyMassIndex+0x1e>
  {
    //Imperial, Weight in pounds, Height in inches
    //bmi = (weight * 703) / (height * height);
    bmi = weight;
    49ba:	ba 01       	movw	r22, r20
    49bc:	80 e0       	ldi	r24, 0x00	; 0
    49be:	90 e0       	ldi	r25, 0x00	; 0
    bmi *= 703;
    49c0:	2f eb       	ldi	r18, 0xBF	; 191
    49c2:	32 e0       	ldi	r19, 0x02	; 2
    49c4:	40 e0       	ldi	r20, 0x00	; 0
    49c6:	50 e0       	ldi	r21, 0x00	; 0
    49c8:	09 c0       	rjmp	.+18     	; 0x49dc <BodyMassIndex+0x30>
    bmi /= height;
    bmi /= height;
    return (bmi > 255) ? 255 : bmi;
  }
  else if ( unit == BMI_Metric )
    49ca:	81 30       	cpi	r24, 0x01	; 1
    49cc:	11 f5       	brne	.+68     	; 0x4a12 <BodyMassIndex+0x66>
  {
    //Metric, Weight in Kilograms, Height in centimeters
    //bmi = (weight * 10000) / (height * height);
    bmi = weight;
    49ce:	ba 01       	movw	r22, r20
    49d0:	80 e0       	ldi	r24, 0x00	; 0
    49d2:	90 e0       	ldi	r25, 0x00	; 0
    bmi *= 10000;
    49d4:	20 e1       	ldi	r18, 0x10	; 16
    49d6:	37 e2       	ldi	r19, 0x27	; 39
    49d8:	40 e0       	ldi	r20, 0x00	; 0
    49da:	50 e0       	ldi	r21, 0x00	; 0
    49dc:	0e 94 d8 3a 	call	0x75b0	; 0x75b0 <__mulsi3>
    bmi /= height;
    49e0:	00 e0       	ldi	r16, 0x00	; 0
    49e2:	10 e0       	ldi	r17, 0x00	; 0
    49e4:	a8 01       	movw	r20, r16
    49e6:	97 01       	movw	r18, r14
    49e8:	0e 94 2a 3b 	call	0x7654	; 0x7654 <__udivmodsi4>
    49ec:	ca 01       	movw	r24, r20
    bmi /= height;
    return (bmi > 255) ? 255 : bmi;
    49ee:	b9 01       	movw	r22, r18
    49f0:	a8 01       	movw	r20, r16
    49f2:	97 01       	movw	r18, r14
    49f4:	0e 94 2a 3b 	call	0x7654	; 0x7654 <__udivmodsi4>
    49f8:	c9 01       	movw	r24, r18
    49fa:	da 01       	movw	r26, r20
    49fc:	8f 3f       	cpi	r24, 0xFF	; 255
    49fe:	91 05       	cpc	r25, r1
    4a00:	a1 05       	cpc	r26, r1
    4a02:	b1 05       	cpc	r27, r1
    4a04:	39 f0       	breq	.+14     	; 0x4a14 <BodyMassIndex+0x68>
    4a06:	30 f0       	brcs	.+12     	; 0x4a14 <BodyMassIndex+0x68>
    4a08:	8f ef       	ldi	r24, 0xFF	; 255
    4a0a:	90 e0       	ldi	r25, 0x00	; 0
    4a0c:	a0 e0       	ldi	r26, 0x00	; 0
    4a0e:	b0 e0       	ldi	r27, 0x00	; 0
    4a10:	01 c0       	rjmp	.+2      	; 0x4a14 <BodyMassIndex+0x68>
  }
  else
  {
    //User knows their BMI, so it is entered directly.
    return weight & 0xFF;
    4a12:	84 2f       	mov	r24, r20
  }
}
    4a14:	1f 91       	pop	r17
    4a16:	0f 91       	pop	r16
    4a18:	ff 90       	pop	r15
    4a1a:	ef 90       	pop	r14
    4a1c:	08 95       	ret

00004a1e <random_days>:

uint32_t random_days(uint8_t hour, uint8_t min, uint8_t sec, uint32_t base_days)
{
    4a1e:	ef 92       	push	r14
    4a20:	ff 92       	push	r15
    4a22:	0f 93       	push	r16
    4a24:	1f 93       	push	r17
    4a26:	78 01       	movw	r14, r16
    4a28:	89 01       	movw	r16, r18
	init_crand_consistent(hour,min,sec);
    4a2a:	0e 94 a6 38 	call	0x714c	; 0x714c <init_crand_consistent>
	uint32_t random = (crand(0) * 1000) / 0x7FFF;
    4a2e:	80 e0       	ldi	r24, 0x00	; 0
    4a30:	0e 94 14 39 	call	0x7228	; 0x7228 <crand>
    4a34:	28 ee       	ldi	r18, 0xE8	; 232
    4a36:	33 e0       	ldi	r19, 0x03	; 3
    4a38:	ac 01       	movw	r20, r24
    4a3a:	42 9f       	mul	r20, r18
    4a3c:	c0 01       	movw	r24, r0
    4a3e:	43 9f       	mul	r20, r19
    4a40:	90 0d       	add	r25, r0
    4a42:	52 9f       	mul	r21, r18
    4a44:	90 0d       	add	r25, r0
    4a46:	11 24       	eor	r1, r1
    4a48:	6f ef       	ldi	r22, 0xFF	; 255
    4a4a:	7f e7       	ldi	r23, 0x7F	; 127
    4a4c:	0e 94 03 3b 	call	0x7606	; 0x7606 <__udivmodhi4>
    4a50:	9b 01       	movw	r18, r22
    4a52:	40 e0       	ldi	r20, 0x00	; 0
    4a54:	50 e0       	ldi	r21, 0x00	; 0
    4a56:	c8 01       	movw	r24, r16
    4a58:	b7 01       	movw	r22, r14
    4a5a:	0e 94 d8 3a 	call	0x75b0	; 0x75b0 <__mulsi3>
    4a5e:	28 ee       	ldi	r18, 0xE8	; 232
    4a60:	33 e0       	ldi	r19, 0x03	; 3
    4a62:	40 e0       	ldi	r20, 0x00	; 0
    4a64:	50 e0       	ldi	r21, 0x00	; 0
    4a66:	0e 94 2a 3b 	call	0x7654	; 0x7654 <__udivmodsi4>
    4a6a:	ca 01       	movw	r24, r20
	return (uint32_t)((base_days * random) / 1000);
}
    4a6c:	b9 01       	movw	r22, r18
    4a6e:	1f 91       	pop	r17
    4a70:	0f 91       	pop	r16
    4a72:	ff 90       	pop	r15
    4a74:	ef 90       	pop	r14
    4a76:	08 95       	ret

00004a78 <ETD>:
               uint8_t BMI, 
               uint8_t Smoker, 
               uint8_t hour,
               uint8_t min,
               uint8_t sec)
{
    4a78:	2f 92       	push	r2
    4a7a:	3f 92       	push	r3
    4a7c:	4f 92       	push	r4
    4a7e:	5f 92       	push	r5
    4a80:	6f 92       	push	r6
    4a82:	7f 92       	push	r7
    4a84:	8f 92       	push	r8
    4a86:	9f 92       	push	r9
    4a88:	af 92       	push	r10
    4a8a:	bf 92       	push	r11
    4a8c:	cf 92       	push	r12
    4a8e:	df 92       	push	r13
    4a90:	ef 92       	push	r14
    4a92:	ff 92       	push	r15
    4a94:	0f 93       	push	r16
    4a96:	1f 93       	push	r17
    4a98:	df 93       	push	r29
    4a9a:	cf 93       	push	r28
    4a9c:	cd b7       	in	r28, 0x3d	; 61
    4a9e:	de b7       	in	r29, 0x3e	; 62
    4aa0:	9a 2c       	mov	r9, r10
    4aa2:	3e 88       	ldd	r3, Y+22	; 0x16
    4aa4:	2f 88       	ldd	r2, Y+23	; 0x17
  int y,i,bmi;
  uint32_t diff;
  uint32_t random;
  int32_t days;
  
  diff = date_diff(DOB_month,DOB_day,DOB_year,month,day,year);
    4aa6:	0e 94 b9 23 	call	0x4772	; 0x4772 <date_diff>
  y = (diff * 10) / 3653;
    4aaa:	2a e0       	ldi	r18, 0x0A	; 10
    4aac:	30 e0       	ldi	r19, 0x00	; 0
    4aae:	40 e0       	ldi	r20, 0x00	; 0
    4ab0:	50 e0       	ldi	r21, 0x00	; 0
    4ab2:	0e 94 d8 3a 	call	0x75b0	; 0x75b0 <__mulsi3>
    4ab6:	7b 01       	movw	r14, r22
    4ab8:	8c 01       	movw	r16, r24
    4aba:	25 e4       	ldi	r18, 0x45	; 69
    4abc:	3e e0       	ldi	r19, 0x0E	; 14
    4abe:	40 e0       	ldi	r20, 0x00	; 0
    4ac0:	50 e0       	ldi	r21, 0x00	; 0
    4ac2:	0e 94 2a 3b 	call	0x7654	; 0x7654 <__udivmodsi4>
    4ac6:	29 01       	movw	r4, r18
  
  days = days_table[(Mode * 2) + Gender];
    4ac8:	6a 2c       	mov	r6, r10
    4aca:	77 24       	eor	r7, r7
    4acc:	66 0c       	add	r6, r6
    4ace:	77 1c       	adc	r7, r7
    4ad0:	6c 0c       	add	r6, r12
    4ad2:	71 1c       	adc	r7, r1
  days -= diff*10;
    4ad4:	f3 01       	movw	r30, r6
    4ad6:	ee 0f       	add	r30, r30
    4ad8:	ff 1f       	adc	r31, r31
    4ada:	ee 0f       	add	r30, r30
    4adc:	ff 1f       	adc	r31, r31
    4ade:	e0 55       	subi	r30, 0x50	; 80
    4ae0:	fe 4f       	sbci	r31, 0xFE	; 254
    4ae2:	a0 80       	ld	r10, Z
    4ae4:	b1 80       	ldd	r11, Z+1	; 0x01
    4ae6:	c2 80       	ldd	r12, Z+2	; 0x02
    4ae8:	d3 80       	ldd	r13, Z+3	; 0x03
    4aea:	ae 18       	sub	r10, r14
    4aec:	bf 08       	sbc	r11, r15
    4aee:	c0 0a       	sbc	r12, r16
    4af0:	d1 0a       	sbc	r13, r17
  bmi = BMI;
    4af2:	e8 2c       	mov	r14, r8
    4af4:	ff 24       	eor	r15, r15
  if(bmi > 45)
    4af6:	0e e2       	ldi	r16, 0x2E	; 46
    4af8:	e0 16       	cp	r14, r16
    4afa:	f1 04       	cpc	r15, r1
    4afc:	24 f0       	brlt	.+8      	; 0x4b06 <ETD+0x8e>
    4afe:	ad e2       	ldi	r26, 0x2D	; 45
    4b00:	ea 2e       	mov	r14, r26
    4b02:	f1 2c       	mov	r15, r1
    4b04:	07 c0       	rjmp	.+14     	; 0x4b14 <ETD+0x9c>
    bmi = 45;
  if(bmi < 26)
    4b06:	1a e1       	ldi	r17, 0x1A	; 26
    4b08:	e1 16       	cp	r14, r17
    4b0a:	f1 04       	cpc	r15, r1
    4b0c:	1c f4       	brge	.+6      	; 0x4b14 <ETD+0x9c>
    4b0e:	fa e1       	ldi	r31, 0x1A	; 26
    4b10:	ef 2e       	mov	r14, r31
    4b12:	f1 2c       	mov	r15, r1
    bmi = 26;
  bmi -= 26;
  if (Mode == DC_mode_optimistic) {
    4b14:	22 e0       	ldi	r18, 0x02	; 2
    4b16:	92 16       	cp	r9, r18
    4b18:	81 f4       	brne	.+32     	; 0x4b3a <ETD+0xc2>
    days += random_days(hour,min,sec,54790);
    4b1a:	83 2d       	mov	r24, r3
    4b1c:	62 2d       	mov	r22, r2
    4b1e:	48 8d       	ldd	r20, Y+24	; 0x18
    4b20:	06 e0       	ldi	r16, 0x06	; 6
    4b22:	16 ed       	ldi	r17, 0xD6	; 214
    4b24:	20 e0       	ldi	r18, 0x00	; 0
    4b26:	30 e0       	ldi	r19, 0x00	; 0
    4b28:	0e 94 0f 25 	call	0x4a1e	; 0x4a1e <random_days>
    4b2c:	ab 01       	movw	r20, r22
    4b2e:	bc 01       	movw	r22, r24
    4b30:	4a 0d       	add	r20, r10
    4b32:	5b 1d       	adc	r21, r11
    4b34:	6c 1d       	adc	r22, r12
    4b36:	7d 1d       	adc	r23, r13
    4b38:	17 c0       	rjmp	.+46     	; 0x4b68 <ETD+0xf0>
  } else if (Mode == DC_mode_pessimistic) {
    4b3a:	31 e0       	ldi	r19, 0x01	; 1
    4b3c:	93 16       	cp	r9, r19
    4b3e:	19 f0       	breq	.+6      	; 0x4b46 <ETD+0xce>
  
  diff = date_diff(DOB_month,DOB_day,DOB_year,month,day,year);
  y = (diff * 10) / 3653;
  
  days = days_table[(Mode * 2) + Gender];
  days -= diff*10;
    4b40:	b6 01       	movw	r22, r12
    4b42:	a5 01       	movw	r20, r10
    4b44:	11 c0       	rjmp	.+34     	; 0x4b68 <ETD+0xf0>
    bmi = 26;
  bmi -= 26;
  if (Mode == DC_mode_optimistic) {
    days += random_days(hour,min,sec,54790);
  } else if (Mode == DC_mode_pessimistic) {
    days -= random_days(hour,min,sec,36530);
    4b46:	83 2d       	mov	r24, r3
    4b48:	62 2d       	mov	r22, r2
    4b4a:	48 8d       	ldd	r20, Y+24	; 0x18
    4b4c:	02 eb       	ldi	r16, 0xB2	; 178
    4b4e:	1e e8       	ldi	r17, 0x8E	; 142
    4b50:	20 e0       	ldi	r18, 0x00	; 0
    4b52:	30 e0       	ldi	r19, 0x00	; 0
    4b54:	0e 94 0f 25 	call	0x4a1e	; 0x4a1e <random_days>
    4b58:	96 01       	movw	r18, r12
    4b5a:	85 01       	movw	r16, r10
    4b5c:	06 1b       	sub	r16, r22
    4b5e:	17 0b       	sbc	r17, r23
    4b60:	28 0b       	sbc	r18, r24
    4b62:	39 0b       	sbc	r19, r25
    4b64:	b9 01       	movw	r22, r18
    4b66:	a8 01       	movw	r20, r16
  }
  
  if(y>=20)
    4b68:	14 e1       	ldi	r17, 0x14	; 20
    4b6a:	41 16       	cp	r4, r17
    4b6c:	51 04       	cpc	r5, r1
    4b6e:	0c f4       	brge	.+2      	; 0x4b72 <ETD+0xfa>
    4b70:	49 c0       	rjmp	.+146    	; 0x4c04 <ETD+0x18c>
  {
  	  for(i=0;i<bmi_table_count[(Mode * 2) + Gender];i++)
    4b72:	f3 01       	movw	r30, r6
    4b74:	e8 56       	subi	r30, 0x68	; 104
    4b76:	fe 4f       	sbci	r31, 0xFE	; 254
    4b78:	80 81       	ld	r24, Z
    4b7a:	c8 2e       	mov	r12, r24
    4b7c:	dd 24       	eor	r13, r13
    4b7e:	20 e0       	ldi	r18, 0x00	; 0
    4b80:	30 e0       	ldi	r19, 0x00	; 0
  	  {
  	  	  if ( y < pgm_read_byte(&normal_bmi_male[bmi_table_offset[(Mode * 2) + Gender]+i][0]) )
    4b82:	83 01       	movw	r16, r6
    4b84:	00 57       	subi	r16, 0x70	; 112
    4b86:	1e 4f       	sbci	r17, 0xFE	; 254
    4b88:	eb e0       	ldi	r30, 0x0B	; 11
    4b8a:	ae 2e       	mov	r10, r30
    4b8c:	b1 2c       	mov	r11, r1
    4b8e:	36 c0       	rjmp	.+108    	; 0x4bfc <ETD+0x184>
    4b90:	f8 01       	movw	r30, r16
    4b92:	80 81       	ld	r24, Z
    4b94:	f9 01       	movw	r30, r18
    4b96:	e8 0f       	add	r30, r24
    4b98:	f1 1d       	adc	r31, r1
    4b9a:	ea 9d       	mul	r30, r10
    4b9c:	d0 01       	movw	r26, r0
    4b9e:	eb 9d       	mul	r30, r11
    4ba0:	b0 0d       	add	r27, r0
    4ba2:	fa 9d       	mul	r31, r10
    4ba4:	b0 0d       	add	r27, r0
    4ba6:	11 24       	eor	r1, r1
    4ba8:	fd 01       	movw	r30, r26
    4baa:	e3 5b       	subi	r30, 0xB3	; 179
    4bac:	fc 4f       	sbci	r31, 0xFC	; 252
    4bae:	e4 91       	lpm	r30, Z+
    4bb0:	8e 2f       	mov	r24, r30
    4bb2:	90 e0       	ldi	r25, 0x00	; 0
    4bb4:	48 16       	cp	r4, r24
    4bb6:	59 06       	cpc	r5, r25
    4bb8:	fc f4       	brge	.+62     	; 0x4bf8 <ETD+0x180>
  bmi = BMI;
  if(bmi > 45)
    bmi = 45;
  if(bmi < 26)
    bmi = 26;
  bmi -= 26;
    4bba:	c7 01       	movw	r24, r14
    4bbc:	4a 97       	sbiw	r24, 0x1a	; 26
  {
  	  for(i=0;i<bmi_table_count[(Mode * 2) + Gender];i++)
  	  {
  	  	  if ( y < pgm_read_byte(&normal_bmi_male[bmi_table_offset[(Mode * 2) + Gender]+i][0]) )
          {
          	uint8_t temp = pgm_read_byte(&normal_bmi_male[bmi_table_offset[(Mode * 2) + Gender]+i][(bmi/2)+1]);
    4bbe:	fc 01       	movw	r30, r24
    4bc0:	f5 95       	asr	r31
    4bc2:	e7 95       	ror	r30
    4bc4:	ea 0f       	add	r30, r26
    4bc6:	fb 1f       	adc	r31, r27
    4bc8:	e2 5b       	subi	r30, 0xB2	; 178
    4bca:	fc 4f       	sbci	r31, 0xFC	; 252
    4bcc:	24 91       	lpm	r18, Z+
          	if(bmi&1)
    4bce:	80 ff       	sbrs	r24, 0
          		temp &= 0x0F;
          	else
          		temp >>= 4;
    4bd0:	22 95       	swap	r18
    4bd2:	2f 70       	andi	r18, 0x0F	; 15
            days -= (uint16_t)(temp * 3653);
    4bd4:	30 e0       	ldi	r19, 0x00	; 0
    4bd6:	85 e4       	ldi	r24, 0x45	; 69
    4bd8:	9e e0       	ldi	r25, 0x0E	; 14
    4bda:	8c 01       	movw	r16, r24
    4bdc:	20 9f       	mul	r18, r16
    4bde:	c0 01       	movw	r24, r0
    4be0:	21 9f       	mul	r18, r17
    4be2:	90 0d       	add	r25, r0
    4be4:	30 9f       	mul	r19, r16
    4be6:	90 0d       	add	r25, r0
    4be8:	11 24       	eor	r1, r1
    4bea:	a0 e0       	ldi	r26, 0x00	; 0
    4bec:	b0 e0       	ldi	r27, 0x00	; 0
    4bee:	48 1b       	sub	r20, r24
    4bf0:	59 0b       	sbc	r21, r25
    4bf2:	6a 0b       	sbc	r22, r26
    4bf4:	7b 0b       	sbc	r23, r27
    4bf6:	06 c0       	rjmp	.+12     	; 0x4c04 <ETD+0x18c>
    days -= random_days(hour,min,sec,36530);
  }
  
  if(y>=20)
  {
  	  for(i=0;i<bmi_table_count[(Mode * 2) + Gender];i++)
    4bf8:	2f 5f       	subi	r18, 0xFF	; 255
    4bfa:	3f 4f       	sbci	r19, 0xFF	; 255
    4bfc:	2c 15       	cp	r18, r12
    4bfe:	3d 05       	cpc	r19, r13
    4c00:	0c f4       	brge	.+2      	; 0x4c04 <ETD+0x18c>
    4c02:	c6 cf       	rjmp	.-116    	; 0x4b90 <ETD+0x118>
            days -= (uint16_t)(temp * 3653);
            break;
          }
  	  }
  }
  if((y>=25)&&(Smoker == DC_smoker))
    4c04:	19 e1       	ldi	r17, 0x19	; 25
    4c06:	41 16       	cp	r4, r17
    4c08:	51 04       	cpc	r5, r1
    4c0a:	0c f4       	brge	.+2      	; 0x4c0e <ETD+0x196>
    4c0c:	40 c0       	rjmp	.+128    	; 0x4c8e <ETD+0x216>
    4c0e:	8d 89       	ldd	r24, Y+21	; 0x15
    4c10:	81 30       	cpi	r24, 0x01	; 1
    4c12:	09 f0       	breq	.+2      	; 0x4c16 <ETD+0x19e>
    4c14:	3c c0       	rjmp	.+120    	; 0x4c8e <ETD+0x216>
  {
      for(i=0;i<smoking_table_count[(Mode * 2) + Gender];i++)
    4c16:	f3 01       	movw	r30, r6
    4c18:	e8 55       	subi	r30, 0x58	; 88
    4c1a:	fe 4f       	sbci	r31, 0xFE	; 254
    4c1c:	80 81       	ld	r24, Z
    4c1e:	e8 2e       	mov	r14, r24
    4c20:	ff 24       	eor	r15, r15
    4c22:	20 e0       	ldi	r18, 0x00	; 0
    4c24:	30 e0       	ldi	r19, 0x00	; 0
      {
        if( y < pgm_read_word(&normal_smoking_male[smoking_table_offset[(Mode * 2) + Gender]+i][0]) )
    4c26:	83 01       	movw	r16, r6
    4c28:	00 56       	subi	r16, 0x60	; 96
    4c2a:	1e 4f       	sbci	r17, 0xFE	; 254
    4c2c:	2d c0       	rjmp	.+90     	; 0x4c88 <ETD+0x210>
    4c2e:	f8 01       	movw	r30, r16
    4c30:	80 81       	ld	r24, Z
    4c32:	d9 01       	movw	r26, r18
    4c34:	a8 0f       	add	r26, r24
    4c36:	b1 1d       	adc	r27, r1
    4c38:	fd 01       	movw	r30, r26
    4c3a:	ee 0f       	add	r30, r30
    4c3c:	ff 1f       	adc	r31, r31
    4c3e:	ee 0f       	add	r30, r30
    4c40:	ff 1f       	adc	r31, r31
    4c42:	e9 51       	subi	r30, 0x19	; 25
    4c44:	fc 4f       	sbci	r31, 0xFC	; 252
    4c46:	85 91       	lpm	r24, Z+
    4c48:	94 91       	lpm	r25, Z+
    4c4a:	48 16       	cp	r4, r24
    4c4c:	59 06       	cpc	r5, r25
    4c4e:	d0 f4       	brcc	.+52     	; 0x4c84 <ETD+0x20c>
        {
          days -= (uint16_t)(pgm_read_word(&normal_smoking_male[smoking_table_offset[(Mode * 2) + Gender]+i][1])*10);
    4c50:	fd 01       	movw	r30, r26
    4c52:	ee 0f       	add	r30, r30
    4c54:	ff 1f       	adc	r31, r31
    4c56:	ee 0f       	add	r30, r30
    4c58:	ff 1f       	adc	r31, r31
    4c5a:	e7 51       	subi	r30, 0x17	; 23
    4c5c:	fc 4f       	sbci	r31, 0xFC	; 252
    4c5e:	25 91       	lpm	r18, Z+
    4c60:	34 91       	lpm	r19, Z+
    4c62:	c9 01       	movw	r24, r18
    4c64:	f3 e0       	ldi	r31, 0x03	; 3
    4c66:	88 0f       	add	r24, r24
    4c68:	99 1f       	adc	r25, r25
    4c6a:	fa 95       	dec	r31
    4c6c:	e1 f7       	brne	.-8      	; 0x4c66 <ETD+0x1ee>
    4c6e:	22 0f       	add	r18, r18
    4c70:	33 1f       	adc	r19, r19
    4c72:	82 0f       	add	r24, r18
    4c74:	93 1f       	adc	r25, r19
    4c76:	a0 e0       	ldi	r26, 0x00	; 0
    4c78:	b0 e0       	ldi	r27, 0x00	; 0
    4c7a:	48 1b       	sub	r20, r24
    4c7c:	59 0b       	sbc	r21, r25
    4c7e:	6a 0b       	sbc	r22, r26
    4c80:	7b 0b       	sbc	r23, r27
    4c82:	05 c0       	rjmp	.+10     	; 0x4c8e <ETD+0x216>
          }
  	  }
  }
  if((y>=25)&&(Smoker == DC_smoker))
  {
      for(i=0;i<smoking_table_count[(Mode * 2) + Gender];i++)
    4c84:	2f 5f       	subi	r18, 0xFF	; 255
    4c86:	3f 4f       	sbci	r19, 0xFF	; 255
    4c88:	2e 15       	cp	r18, r14
    4c8a:	3f 05       	cpc	r19, r15
    4c8c:	84 f2       	brlt	.-96     	; 0x4c2e <ETD+0x1b6>
          days -= (uint16_t)(pgm_read_word(&normal_smoking_male[smoking_table_offset[(Mode * 2) + Gender]+i][1])*10);
          break;
        }
      }
  }
  if (days < 0) return 0;
    4c8e:	77 ff       	sbrs	r23, 7
    4c90:	05 c0       	rjmp	.+10     	; 0x4c9c <ETD+0x224>
    4c92:	20 e0       	ldi	r18, 0x00	; 0
    4c94:	30 e0       	ldi	r19, 0x00	; 0
    4c96:	40 e0       	ldi	r20, 0x00	; 0
    4c98:	50 e0       	ldi	r21, 0x00	; 0
    4c9a:	0a c0       	rjmp	.+20     	; 0x4cb0 <ETD+0x238>
  days *= 144;	//Convert Days into Minutes left.
  return days;
    4c9c:	cb 01       	movw	r24, r22
    4c9e:	ba 01       	movw	r22, r20
    4ca0:	20 e9       	ldi	r18, 0x90	; 144
    4ca2:	30 e0       	ldi	r19, 0x00	; 0
    4ca4:	40 e0       	ldi	r20, 0x00	; 0
    4ca6:	50 e0       	ldi	r21, 0x00	; 0
    4ca8:	0e 94 d8 3a 	call	0x75b0	; 0x75b0 <__mulsi3>
    4cac:	9b 01       	movw	r18, r22
    4cae:	ac 01       	movw	r20, r24
}
    4cb0:	b9 01       	movw	r22, r18
    4cb2:	ca 01       	movw	r24, r20
    4cb4:	cf 91       	pop	r28
    4cb6:	df 91       	pop	r29
    4cb8:	1f 91       	pop	r17
    4cba:	0f 91       	pop	r16
    4cbc:	ff 90       	pop	r15
    4cbe:	ef 90       	pop	r14
    4cc0:	df 90       	pop	r13
    4cc2:	cf 90       	pop	r12
    4cc4:	bf 90       	pop	r11
    4cc6:	af 90       	pop	r10
    4cc8:	9f 90       	pop	r9
    4cca:	8f 90       	pop	r8
    4ccc:	7f 90       	pop	r7
    4cce:	6f 90       	pop	r6
    4cd0:	5f 90       	pop	r5
    4cd2:	4f 90       	pop	r4
    4cd4:	3f 90       	pop	r3
    4cd6:	2f 90       	pop	r2
    4cd8:	08 95       	ret

00004cda <load_raw_etd>:

uint32_t load_raw_etd(void)
{
    4cda:	6f 92       	push	r6
    4cdc:	7f 92       	push	r7
    4cde:	8f 92       	push	r8
    4ce0:	9f 92       	push	r9
    4ce2:	af 92       	push	r10
    4ce4:	bf 92       	push	r11
    4ce6:	cf 92       	push	r12
    4ce8:	df 92       	push	r13
    4cea:	ef 92       	push	r14
    4cec:	ff 92       	push	r15
    4cee:	0f 93       	push	r16
    4cf0:	1f 93       	push	r17
  dc_mode = eeprom_read_byte(&EE_DC_MODE);
    4cf2:	8f e0       	ldi	r24, 0x0F	; 15
    4cf4:	90 e0       	ldi	r25, 0x00	; 0
    4cf6:	0e 94 70 3b 	call	0x76e0	; 0x76e0 <__eerd_byte_m328p>
    4cfa:	80 93 23 03 	sts	0x0323, r24
  return ETD(  eeprom_read_byte(&EE_DOB_MONTH),
    4cfe:	88 e0       	ldi	r24, 0x08	; 8
    4d00:	90 e0       	ldi	r25, 0x00	; 0
    4d02:	0e 94 70 3b 	call	0x76e0	; 0x76e0 <__eerd_byte_m328p>
    4d06:	68 2e       	mov	r6, r24
    4d08:	89 e0       	ldi	r24, 0x09	; 9
    4d0a:	90 e0       	ldi	r25, 0x00	; 0
    4d0c:	0e 94 70 3b 	call	0x76e0	; 0x76e0 <__eerd_byte_m328p>
    4d10:	78 2e       	mov	r7, r24
    4d12:	8a e0       	ldi	r24, 0x0A	; 10
    4d14:	90 e0       	ldi	r25, 0x00	; 0
    4d16:	0e 94 70 3b 	call	0x76e0	; 0x76e0 <__eerd_byte_m328p>
    4d1a:	b8 2e       	mov	r11, r24
    4d1c:	8b e0       	ldi	r24, 0x0B	; 11
    4d1e:	90 e0       	ldi	r25, 0x00	; 0
    4d20:	0e 94 70 3b 	call	0x76e0	; 0x76e0 <__eerd_byte_m328p>
    4d24:	98 2e       	mov	r9, r24
    4d26:	8c e0       	ldi	r24, 0x0C	; 12
    4d28:	90 e0       	ldi	r25, 0x00	; 0
    4d2a:	0e 94 70 3b 	call	0x76e0	; 0x76e0 <__eerd_byte_m328p>
    4d2e:	08 2f       	mov	r16, r24
    4d30:	8d e0       	ldi	r24, 0x0D	; 13
    4d32:	90 e0       	ldi	r25, 0x00	; 0
    4d34:	0e 94 70 3b 	call	0x76e0	; 0x76e0 <__eerd_byte_m328p>
    4d38:	d8 2e       	mov	r13, r24
    4d3a:	8e e0       	ldi	r24, 0x0E	; 14
    4d3c:	90 e0       	ldi	r25, 0x00	; 0
    4d3e:	0e 94 70 3b 	call	0x76e0	; 0x76e0 <__eerd_byte_m328p>
    4d42:	c8 2e       	mov	r12, r24
    4d44:	a0 90 23 03 	lds	r10, 0x0323
    4d48:	80 e1       	ldi	r24, 0x10	; 16
    4d4a:	90 e0       	ldi	r25, 0x00	; 0
    4d4c:	0e 94 70 3b 	call	0x76e0	; 0x76e0 <__eerd_byte_m328p>
    4d50:	18 2f       	mov	r17, r24
    4d52:	83 e1       	ldi	r24, 0x13	; 19
    4d54:	90 e0       	ldi	r25, 0x00	; 0
    4d56:	0e 94 78 3b 	call	0x76f0	; 0x76f0 <__eerd_word_m328p>
    4d5a:	7c 01       	movw	r14, r24
    4d5c:	81 e1       	ldi	r24, 0x11	; 17
    4d5e:	90 e0       	ldi	r25, 0x00	; 0
    4d60:	0e 94 78 3b 	call	0x76f0	; 0x76f0 <__eerd_word_m328p>
    4d64:	ac 01       	movw	r20, r24
    4d66:	81 2f       	mov	r24, r17
    4d68:	b7 01       	movw	r22, r14
    4d6a:	0e 94 d6 24 	call	0x49ac	; 0x49ac <BodyMassIndex>
    4d6e:	88 2e       	mov	r8, r24
    4d70:	85 e1       	ldi	r24, 0x15	; 21
    4d72:	90 e0       	ldi	r25, 0x00	; 0
    4d74:	0e 94 70 3b 	call	0x76e0	; 0x76e0 <__eerd_byte_m328p>
    4d78:	e8 2e       	mov	r14, r24
    4d7a:	86 e1       	ldi	r24, 0x16	; 22
    4d7c:	90 e0       	ldi	r25, 0x00	; 0
    4d7e:	0e 94 70 3b 	call	0x76e0	; 0x76e0 <__eerd_byte_m328p>
    4d82:	f8 2e       	mov	r15, r24
    4d84:	87 e1       	ldi	r24, 0x17	; 23
    4d86:	90 e0       	ldi	r25, 0x00	; 0
    4d88:	0e 94 70 3b 	call	0x76e0	; 0x76e0 <__eerd_byte_m328p>
    4d8c:	18 2f       	mov	r17, r24
    4d8e:	88 e1       	ldi	r24, 0x18	; 24
    4d90:	90 e0       	ldi	r25, 0x00	; 0
    4d92:	0e 94 70 3b 	call	0x76e0	; 0x76e0 <__eerd_byte_m328p>
    4d96:	00 d0       	rcall	.+0      	; 0x4d98 <load_raw_etd+0xbe>
    4d98:	00 d0       	rcall	.+0      	; 0x4d9a <load_raw_etd+0xc0>
    4d9a:	ed b7       	in	r30, 0x3d	; 61
    4d9c:	fe b7       	in	r31, 0x3e	; 62
    4d9e:	31 96       	adiw	r30, 0x01	; 1
    4da0:	9c e6       	ldi	r25, 0x6C	; 108
    4da2:	b9 0e       	add	r11, r25
    4da4:	d9 0e       	add	r13, r25
    4da6:	ad b7       	in	r26, 0x3d	; 61
    4da8:	be b7       	in	r27, 0x3e	; 62
    4daa:	11 96       	adiw	r26, 0x01	; 1
    4dac:	ec 92       	st	X, r14
    4dae:	f1 82       	std	Z+1, r15	; 0x01
    4db0:	12 83       	std	Z+2, r17	; 0x02
    4db2:	83 83       	std	Z+3, r24	; 0x03
    4db4:	86 2d       	mov	r24, r6
    4db6:	67 2d       	mov	r22, r7
    4db8:	4b 2d       	mov	r20, r11
    4dba:	29 2d       	mov	r18, r9
    4dbc:	ed 2c       	mov	r14, r13
    4dbe:	0e 94 3c 25 	call	0x4a78	; 0x4a78 <ETD>
    4dc2:	0f 90       	pop	r0
    4dc4:	0f 90       	pop	r0
    4dc6:	0f 90       	pop	r0
    4dc8:	0f 90       	pop	r0
                              BodyMassIndex( eeprom_read_byte(&EE_BMI_UNIT), eeprom_read_word(&EE_BMI_HEIGHT), eeprom_read_word(&EE_BMI_WEIGHT)),
                              eeprom_read_byte(&EE_SMOKER),
                              eeprom_read_byte(&EE_SET_HOUR),
                              eeprom_read_byte(&EE_SET_MIN),
                              eeprom_read_byte(&EE_SET_SEC));
}
    4dca:	1f 91       	pop	r17
    4dcc:	0f 91       	pop	r16
    4dce:	ff 90       	pop	r15
    4dd0:	ef 90       	pop	r14
    4dd2:	df 90       	pop	r13
    4dd4:	cf 90       	pop	r12
    4dd6:	bf 90       	pop	r11
    4dd8:	af 90       	pop	r10
    4dda:	9f 90       	pop	r9
    4ddc:	8f 90       	pop	r8
    4dde:	7f 90       	pop	r7
    4de0:	6f 90       	pop	r6
    4de2:	08 95       	ret

00004de4 <calc_death_date>:
  else
  	  reaper_tow_rip=0;
}

void calc_death_date(void)
{
    4de4:	df 92       	push	r13
    4de6:	ef 92       	push	r14
    4de8:	ff 92       	push	r15
    4dea:	0f 93       	push	r16
    4dec:	1f 93       	push	r17
	uint32_t timeleft;
	death_m = eeprom_read_byte(&EE_SET_MONTH);
    4dee:	8b e0       	ldi	r24, 0x0B	; 11
    4df0:	90 e0       	ldi	r25, 0x00	; 0
    4df2:	0e 94 70 3b 	call	0x76e0	; 0x76e0 <__eerd_byte_m328p>
    4df6:	80 93 1e 03 	sts	0x031E, r24
	death_d = eeprom_read_byte(&EE_SET_DAY);
    4dfa:	8c e0       	ldi	r24, 0x0C	; 12
    4dfc:	90 e0       	ldi	r25, 0x00	; 0
    4dfe:	0e 94 70 3b 	call	0x76e0	; 0x76e0 <__eerd_byte_m328p>
    4e02:	80 93 1b 03 	sts	0x031B, r24
	death_y = eeprom_read_byte(&EE_SET_YEAR);
    4e06:	8d e0       	ldi	r24, 0x0D	; 13
    4e08:	90 e0       	ldi	r25, 0x00	; 0
    4e0a:	0e 94 70 3b 	call	0x76e0	; 0x76e0 <__eerd_byte_m328p>
    4e0e:	80 93 1d 03 	sts	0x031D, r24
	timeleft = load_raw_etd();
    4e12:	0e 94 6d 26 	call	0x4cda	; 0x4cda <load_raw_etd>
    4e16:	7b 01       	movw	r14, r22
    4e18:	8c 01       	movw	r16, r24
        death_d++;  
        if ((death_d > 31) ||
               ((death_d == 31) && ((death_m == 4)||(death_m == 6)||(death_m == 9)||(death_m == 11))) ||
               ((death_d == 30) && (death_m == 2)) ||
               ((death_d == 29) && (death_m == 2) && !leapyear(1900+death_y))) {
                 death_d = 1;
    4e1a:	dd 24       	eor	r13, r13
    4e1c:	d3 94       	inc	r13
    4e1e:	50 c0       	rjmp	.+160    	; 0x4ec0 <calc_death_date+0xdc>
	timeleft = load_raw_etd();
	
	while (timeleft >= 1440)
      {
        timeleft -= 1440;
        death_d++;  
    4e20:	80 91 1b 03 	lds	r24, 0x031B
    4e24:	8f 5f       	subi	r24, 0xFF	; 255
    4e26:	80 93 1b 03 	sts	0x031B, r24
        if ((death_d > 31) ||
    4e2a:	80 91 1b 03 	lds	r24, 0x031B
    4e2e:	80 32       	cpi	r24, 0x20	; 32
    4e30:	68 f5       	brcc	.+90     	; 0x4e8c <calc_death_date+0xa8>
    4e32:	80 91 1b 03 	lds	r24, 0x031B
    4e36:	8f 31       	cpi	r24, 0x1F	; 31
    4e38:	81 f4       	brne	.+32     	; 0x4e5a <calc_death_date+0x76>
    4e3a:	80 91 1e 03 	lds	r24, 0x031E
    4e3e:	84 30       	cpi	r24, 0x04	; 4
    4e40:	29 f1       	breq	.+74     	; 0x4e8c <calc_death_date+0xa8>
    4e42:	80 91 1e 03 	lds	r24, 0x031E
    4e46:	86 30       	cpi	r24, 0x06	; 6
    4e48:	09 f1       	breq	.+66     	; 0x4e8c <calc_death_date+0xa8>
    4e4a:	80 91 1e 03 	lds	r24, 0x031E
    4e4e:	89 30       	cpi	r24, 0x09	; 9
    4e50:	e9 f0       	breq	.+58     	; 0x4e8c <calc_death_date+0xa8>
    4e52:	80 91 1e 03 	lds	r24, 0x031E
    4e56:	8b 30       	cpi	r24, 0x0B	; 11
    4e58:	c9 f0       	breq	.+50     	; 0x4e8c <calc_death_date+0xa8>
    4e5a:	80 91 1b 03 	lds	r24, 0x031B
    4e5e:	8e 31       	cpi	r24, 0x1E	; 30
    4e60:	21 f4       	brne	.+8      	; 0x4e6a <calc_death_date+0x86>
    4e62:	80 91 1e 03 	lds	r24, 0x031E
    4e66:	82 30       	cpi	r24, 0x02	; 2
    4e68:	89 f0       	breq	.+34     	; 0x4e8c <calc_death_date+0xa8>
    4e6a:	80 91 1b 03 	lds	r24, 0x031B
    4e6e:	8d 31       	cpi	r24, 0x1D	; 29
    4e70:	a1 f4       	brne	.+40     	; 0x4e9a <calc_death_date+0xb6>
    4e72:	80 91 1e 03 	lds	r24, 0x031E
    4e76:	82 30       	cpi	r24, 0x02	; 2
    4e78:	81 f4       	brne	.+32     	; 0x4e9a <calc_death_date+0xb6>
    4e7a:	80 91 1d 03 	lds	r24, 0x031D
    4e7e:	90 e0       	ldi	r25, 0x00	; 0
    4e80:	84 59       	subi	r24, 0x94	; 148
    4e82:	98 4f       	sbci	r25, 0xF8	; 248
    4e84:	0e 94 c3 2e 	call	0x5d86	; 0x5d86 <leapyear>
    4e88:	88 23       	and	r24, r24
    4e8a:	39 f4       	brne	.+14     	; 0x4e9a <calc_death_date+0xb6>
               ((death_d == 31) && ((death_m == 4)||(death_m == 6)||(death_m == 9)||(death_m == 11))) ||
               ((death_d == 30) && (death_m == 2)) ||
               ((death_d == 29) && (death_m == 2) && !leapyear(1900+death_y))) {
                 death_d = 1;
    4e8c:	d0 92 1b 03 	sts	0x031B, r13
                 death_m++;
    4e90:	80 91 1e 03 	lds	r24, 0x031E
    4e94:	8f 5f       	subi	r24, 0xFF	; 255
    4e96:	80 93 1e 03 	sts	0x031E, r24
            }
            if(death_m > 12)
    4e9a:	80 91 1e 03 	lds	r24, 0x031E
    4e9e:	8d 30       	cpi	r24, 0x0D	; 13
    4ea0:	38 f0       	brcs	.+14     	; 0x4eb0 <calc_death_date+0xcc>
            {
              death_m=1;
    4ea2:	d0 92 1e 03 	sts	0x031E, r13
              death_y++;
    4ea6:	80 91 1d 03 	lds	r24, 0x031D
    4eaa:	8f 5f       	subi	r24, 0xFF	; 255
    4eac:	80 93 1d 03 	sts	0x031D, r24
	death_y = eeprom_read_byte(&EE_SET_YEAR);
	timeleft = load_raw_etd();
	
	while (timeleft >= 1440)
      {
        timeleft -= 1440;
    4eb0:	80 e6       	ldi	r24, 0x60	; 96
    4eb2:	9a ef       	ldi	r25, 0xFA	; 250
    4eb4:	af ef       	ldi	r26, 0xFF	; 255
    4eb6:	bf ef       	ldi	r27, 0xFF	; 255
    4eb8:	e8 0e       	add	r14, r24
    4eba:	f9 1e       	adc	r15, r25
    4ebc:	0a 1f       	adc	r16, r26
    4ebe:	1b 1f       	adc	r17, r27
	death_m = eeprom_read_byte(&EE_SET_MONTH);
	death_d = eeprom_read_byte(&EE_SET_DAY);
	death_y = eeprom_read_byte(&EE_SET_YEAR);
	timeleft = load_raw_etd();
	
	while (timeleft >= 1440)
    4ec0:	90 ea       	ldi	r25, 0xA0	; 160
    4ec2:	e9 16       	cp	r14, r25
    4ec4:	95 e0       	ldi	r25, 0x05	; 5
    4ec6:	f9 06       	cpc	r15, r25
    4ec8:	90 e0       	ldi	r25, 0x00	; 0
    4eca:	09 07       	cpc	r16, r25
    4ecc:	90 e0       	ldi	r25, 0x00	; 0
    4ece:	19 07       	cpc	r17, r25
    4ed0:	08 f0       	brcs	.+2      	; 0x4ed4 <calc_death_date+0xf0>
    4ed2:	a6 cf       	rjmp	.-180    	; 0x4e20 <calc_death_date+0x3c>
            {
              death_m=1;
              death_y++;
            } 
      }
}
    4ed4:	1f 91       	pop	r17
    4ed6:	0f 91       	pop	r16
    4ed8:	ff 90       	pop	r15
    4eda:	ef 90       	pop	r14
    4edc:	df 90       	pop	r13
    4ede:	08 95       	ret

00004ee0 <load_etd>:
                              eeprom_read_byte(&EE_SET_MIN),
                              eeprom_read_byte(&EE_SET_SEC));
}

void load_etd(void)
{
    4ee0:	6f 92       	push	r6
    4ee2:	7f 92       	push	r7
    4ee4:	8f 92       	push	r8
    4ee6:	9f 92       	push	r9
    4ee8:	af 92       	push	r10
    4eea:	bf 92       	push	r11
    4eec:	cf 92       	push	r12
    4eee:	df 92       	push	r13
    4ef0:	ef 92       	push	r14
    4ef2:	ff 92       	push	r15
    4ef4:	0f 93       	push	r16
    4ef6:	1f 93       	push	r17
    4ef8:	cf 93       	push	r28
    4efa:	df 93       	push	r29
  uint32_t result = load_raw_etd();
    4efc:	0e 94 6d 26 	call	0x4cda	; 0x4cda <load_raw_etd>
    4f00:	5b 01       	movw	r10, r22
    4f02:	6c 01       	movw	r12, r24
      result -= date_diff( eeprom_read_byte(&EE_SET_MONTH),
    4f04:	8b e0       	ldi	r24, 0x0B	; 11
    4f06:	90 e0       	ldi	r25, 0x00	; 0
    4f08:	0e 94 70 3b 	call	0x76e0	; 0x76e0 <__eerd_byte_m328p>
    4f0c:	f8 2e       	mov	r15, r24
    4f0e:	8c e0       	ldi	r24, 0x0C	; 12
    4f10:	90 e0       	ldi	r25, 0x00	; 0
    4f12:	0e 94 70 3b 	call	0x76e0	; 0x76e0 <__eerd_byte_m328p>
    4f16:	18 2f       	mov	r17, r24
    4f18:	8d e0       	ldi	r24, 0x0D	; 13
    4f1a:	90 e0       	ldi	r25, 0x00	; 0
    4f1c:	0e 94 70 3b 	call	0x76e0	; 0x76e0 <__eerd_byte_m328p>
    4f20:	20 91 3e 03 	lds	r18, 0x033E
    4f24:	00 91 33 03 	lds	r16, 0x0333
    4f28:	90 91 2d 03 	lds	r25, 0x032D
    4f2c:	48 2f       	mov	r20, r24
    4f2e:	44 59       	subi	r20, 0x94	; 148
    4f30:	90 53       	subi	r25, 0x30	; 48
    4f32:	8f 2d       	mov	r24, r15
    4f34:	61 2f       	mov	r22, r17
    4f36:	e9 2e       	mov	r14, r25
    4f38:	0e 94 b9 23 	call	0x4772	; 0x4772 <date_diff>
    4f3c:	9b 01       	movw	r18, r22
    4f3e:	ac 01       	movw	r20, r24
    4f40:	80 91 23 03 	lds	r24, 0x0323
    4f44:	83 30       	cpi	r24, 0x03	; 3
    4f46:	31 f0       	breq	.+12     	; 0x4f54 <load_etd+0x74>
    4f48:	e1 e0       	ldi	r30, 0x01	; 1
    4f4a:	ee 2e       	mov	r14, r30
    4f4c:	f1 2c       	mov	r15, r1
    4f4e:	01 2d       	mov	r16, r1
    4f50:	11 2d       	mov	r17, r1
    4f52:	05 c0       	rjmp	.+10     	; 0x4f5e <load_etd+0x7e>
    4f54:	74 e0       	ldi	r23, 0x04	; 4
    4f56:	e7 2e       	mov	r14, r23
    4f58:	f1 2c       	mov	r15, r1
    4f5a:	01 2d       	mov	r16, r1
    4f5c:	11 2d       	mov	r17, r1
                           eeprom_read_byte(&EE_SET_DAY),
                           eeprom_read_byte(&EE_SET_YEAR)+1900,
                           date_m,date_d,date_y+2000) * 1440l * ((dc_mode == DC_mode_sadistic)?4:1);
  result -= (time_h * 60) * ((dc_mode == DC_mode_sadistic)?4:1);
    4f5e:	60 90 2a 03 	lds	r6, 0x032A
    4f62:	80 91 23 03 	lds	r24, 0x0323
    4f66:	83 30       	cpi	r24, 0x03	; 3
    4f68:	21 f0       	breq	.+8      	; 0x4f72 <load_etd+0x92>
    4f6a:	61 e0       	ldi	r22, 0x01	; 1
    4f6c:	86 2e       	mov	r8, r22
    4f6e:	91 2c       	mov	r9, r1
    4f70:	03 c0       	rjmp	.+6      	; 0x4f78 <load_etd+0x98>
    4f72:	94 e0       	ldi	r25, 0x04	; 4
    4f74:	89 2e       	mov	r8, r25
    4f76:	91 2c       	mov	r9, r1
  result -= (time_m) * ((dc_mode == DC_mode_sadistic)?4:1);
    4f78:	70 90 34 03 	lds	r7, 0x0334
    4f7c:	80 91 23 03 	lds	r24, 0x0323
    4f80:	83 30       	cpi	r24, 0x03	; 3
    4f82:	19 f0       	breq	.+6      	; 0x4f8a <load_etd+0xaa>
    4f84:	c1 e0       	ldi	r28, 0x01	; 1
    4f86:	d0 e0       	ldi	r29, 0x00	; 0
    4f88:	02 c0       	rjmp	.+4      	; 0x4f8e <load_etd+0xae>
    4f8a:	c4 e0       	ldi	r28, 0x04	; 4
    4f8c:	d0 e0       	ldi	r29, 0x00	; 0
}

void load_etd(void)
{
  uint32_t result = load_raw_etd();
      result -= date_diff( eeprom_read_byte(&EE_SET_MONTH),
    4f8e:	ca 01       	movw	r24, r20
    4f90:	b9 01       	movw	r22, r18
    4f92:	20 ea       	ldi	r18, 0xA0	; 160
    4f94:	35 e0       	ldi	r19, 0x05	; 5
    4f96:	40 e0       	ldi	r20, 0x00	; 0
    4f98:	50 e0       	ldi	r21, 0x00	; 0
    4f9a:	0e 94 d8 3a 	call	0x75b0	; 0x75b0 <__mulsi3>
    4f9e:	a8 01       	movw	r20, r16
    4fa0:	97 01       	movw	r18, r14
    4fa2:	0e 94 d8 3a 	call	0x75b0	; 0x75b0 <__mulsi3>
    4fa6:	a6 1a       	sub	r10, r22
    4fa8:	b7 0a       	sbc	r11, r23
    4faa:	c8 0a       	sbc	r12, r24
    4fac:	d9 0a       	sbc	r13, r25
                           eeprom_read_byte(&EE_SET_DAY),
                           eeprom_read_byte(&EE_SET_YEAR)+1900,
                           date_m,date_d,date_y+2000) * 1440l * ((dc_mode == DC_mode_sadistic)?4:1);
  result -= (time_h * 60) * ((dc_mode == DC_mode_sadistic)?4:1);
    4fae:	8c e3       	ldi	r24, 0x3C	; 60
    4fb0:	68 9e       	mul	r6, r24
    4fb2:	c0 01       	movw	r24, r0
    4fb4:	11 24       	eor	r1, r1
    4fb6:	9c 01       	movw	r18, r24
    4fb8:	28 9d       	mul	r18, r8
    4fba:	c0 01       	movw	r24, r0
    4fbc:	29 9d       	mul	r18, r9
    4fbe:	90 0d       	add	r25, r0
    4fc0:	38 9d       	mul	r19, r8
    4fc2:	90 0d       	add	r25, r0
    4fc4:	11 24       	eor	r1, r1
    4fc6:	aa 27       	eor	r26, r26
    4fc8:	97 fd       	sbrc	r25, 7
    4fca:	a0 95       	com	r26
    4fcc:	ba 2f       	mov	r27, r26
    4fce:	a8 1a       	sub	r10, r24
    4fd0:	b9 0a       	sbc	r11, r25
    4fd2:	ca 0a       	sbc	r12, r26
    4fd4:	db 0a       	sbc	r13, r27
  result -= (time_m) * ((dc_mode == DC_mode_sadistic)?4:1);
  minutes_left = (int32_t)result;
    4fd6:	87 2d       	mov	r24, r7
    4fd8:	90 e0       	ldi	r25, 0x00	; 0
    4fda:	9c 01       	movw	r18, r24
    4fdc:	c2 9f       	mul	r28, r18
    4fde:	c0 01       	movw	r24, r0
    4fe0:	c3 9f       	mul	r28, r19
    4fe2:	90 0d       	add	r25, r0
    4fe4:	d2 9f       	mul	r29, r18
    4fe6:	90 0d       	add	r25, r0
    4fe8:	11 24       	eor	r1, r1
    4fea:	aa 27       	eor	r26, r26
    4fec:	97 fd       	sbrc	r25, 7
    4fee:	a0 95       	com	r26
    4ff0:	ba 2f       	mov	r27, r26
    4ff2:	a8 1a       	sub	r10, r24
    4ff4:	b9 0a       	sbc	r11, r25
    4ff6:	ca 0a       	sbc	r12, r26
    4ff8:	db 0a       	sbc	r13, r27
    4ffa:	a0 92 14 02 	sts	0x0214, r10
    4ffe:	b0 92 15 02 	sts	0x0215, r11
    5002:	c0 92 16 02 	sts	0x0216, r12
    5006:	d0 92 17 02 	sts	0x0217, r13
  calc_death_date();
    500a:	0e 94 f2 26 	call	0x4de4	; 0x4de4 <calc_death_date>
  if(death_y < (date_y + 100))	//Bug fix for the rare cases where Minutes left is inadvertantly positive, when it should not be.
    500e:	80 91 2d 03 	lds	r24, 0x032D
    5012:	20 91 1d 03 	lds	r18, 0x031D
    5016:	90 e0       	ldi	r25, 0x00	; 0
    5018:	8d 59       	subi	r24, 0x9D	; 157
    501a:	9f 4f       	sbci	r25, 0xFF	; 255
    501c:	30 e0       	ldi	r19, 0x00	; 0
    501e:	82 17       	cp	r24, r18
    5020:	93 07       	cpc	r25, r19
    5022:	44 f5       	brge	.+80     	; 0x5074 <load_etd+0x194>
  	  minutes_left = 0;
  else if((death_y == (date_y + 100)) && (death_m < date_m))
    5024:	20 91 1d 03 	lds	r18, 0x031D
    5028:	80 91 2d 03 	lds	r24, 0x032D
    502c:	30 e0       	ldi	r19, 0x00	; 0
    502e:	90 e0       	ldi	r25, 0x00	; 0
    5030:	8c 59       	subi	r24, 0x9C	; 156
    5032:	9f 4f       	sbci	r25, 0xFF	; 255
    5034:	28 17       	cp	r18, r24
    5036:	39 07       	cpc	r19, r25
    5038:	31 f4       	brne	.+12     	; 0x5046 <load_etd+0x166>
    503a:	90 91 1e 03 	lds	r25, 0x031E
    503e:	80 91 3e 03 	lds	r24, 0x033E
    5042:	98 17       	cp	r25, r24
    5044:	b8 f0       	brcs	.+46     	; 0x5074 <load_etd+0x194>
  	  minutes_left = 0;
  else if ((death_y == (date_y + 100)) && (death_m == date_m) && (death_d < date_d))
    5046:	20 91 1d 03 	lds	r18, 0x031D
    504a:	80 91 2d 03 	lds	r24, 0x032D
    504e:	30 e0       	ldi	r19, 0x00	; 0
    5050:	90 e0       	ldi	r25, 0x00	; 0
    5052:	8c 59       	subi	r24, 0x9C	; 156
    5054:	9f 4f       	sbci	r25, 0xFF	; 255
    5056:	28 17       	cp	r18, r24
    5058:	39 07       	cpc	r19, r25
    505a:	a1 f4       	brne	.+40     	; 0x5084 <load_etd+0x1a4>
    505c:	90 91 1e 03 	lds	r25, 0x031E
    5060:	80 91 3e 03 	lds	r24, 0x033E
    5064:	98 17       	cp	r25, r24
    5066:	71 f4       	brne	.+28     	; 0x5084 <load_etd+0x1a4>
    5068:	90 91 1b 03 	lds	r25, 0x031B
    506c:	80 91 33 03 	lds	r24, 0x0333
    5070:	98 17       	cp	r25, r24
    5072:	40 f4       	brcc	.+16     	; 0x5084 <load_etd+0x1a4>
  	  minutes_left = 0;
    5074:	10 92 14 02 	sts	0x0214, r1
    5078:	10 92 15 02 	sts	0x0215, r1
    507c:	10 92 16 02 	sts	0x0216, r1
    5080:	10 92 17 02 	sts	0x0217, r1
  if(minutes_left <= 0)
    5084:	80 91 14 02 	lds	r24, 0x0214
    5088:	90 91 15 02 	lds	r25, 0x0215
    508c:	a0 91 16 02 	lds	r26, 0x0216
    5090:	b0 91 17 02 	lds	r27, 0x0217
    5094:	18 16       	cp	r1, r24
    5096:	19 06       	cpc	r1, r25
    5098:	1a 06       	cpc	r1, r26
    509a:	1b 06       	cpc	r1, r27
    509c:	24 f0       	brlt	.+8      	; 0x50a6 <load_etd+0x1c6>
  	  reaper_tow_rip=1;
    509e:	81 e0       	ldi	r24, 0x01	; 1
    50a0:	80 93 1c 03 	sts	0x031C, r24
    50a4:	02 c0       	rjmp	.+4      	; 0x50aa <load_etd+0x1ca>
  else
  	  reaper_tow_rip=0;
    50a6:	10 92 1c 03 	sts	0x031C, r1
}
    50aa:	df 91       	pop	r29
    50ac:	cf 91       	pop	r28
    50ae:	1f 91       	pop	r17
    50b0:	0f 91       	pop	r16
    50b2:	ff 90       	pop	r15
    50b4:	ef 90       	pop	r14
    50b6:	df 90       	pop	r13
    50b8:	cf 90       	pop	r12
    50ba:	bf 90       	pop	r11
    50bc:	af 90       	pop	r10
    50be:	9f 90       	pop	r9
    50c0:	8f 90       	pop	r8
    50c2:	7f 90       	pop	r7
    50c4:	6f 90       	pop	r6
    50c6:	08 95       	ret

000050c8 <step>:
 }
}


void step(void) {
 switch (displaystyle) {
    50c8:	80 91 31 03 	lds	r24, 0x0331
    50cc:	82 3d       	cpi	r24, 0xD2	; 210
    50ce:	19 f0       	breq	.+6      	; 0x50d6 <step+0xe>
    50d0:	83 3d       	cpi	r24, 0xD3	; 211
    50d2:	31 f4       	brne	.+12     	; 0x50e0 <step+0x18>
    50d4:	03 c0       	rjmp	.+6      	; 0x50dc <step+0x14>
#ifdef RATTCHRON
 case STYLE_RAT: step_rat();
    50d6:	0e 94 85 19 	call	0x330a	; 0x330a <step_rat>
    50da:	08 95       	ret
#ifdef TSCHRON
 case STYLE_TS: step_ts();
                 break;
#endif
#ifdef DEATHCHRON
 case STYLE_DEATH: step_death(); break;
    50dc:	0e 94 d7 0c 	call	0x19ae	; 0x19ae <step_death>
    50e0:	08 95       	ret

000050e2 <initdisplay>:
 }
}


void initdisplay(uint8_t inverted) {
 switch (displaystyle) {
    50e2:	90 91 31 03 	lds	r25, 0x0331
    50e6:	92 3d       	cpi	r25, 0xD2	; 210
    50e8:	19 f0       	breq	.+6      	; 0x50f0 <initdisplay+0xe>
    50ea:	93 3d       	cpi	r25, 0xD3	; 211
    50ec:	31 f4       	brne	.+12     	; 0x50fa <initdisplay+0x18>
    50ee:	03 c0       	rjmp	.+6      	; 0x50f6 <initdisplay+0x14>
#ifdef RATTCHRON
 case STYLE_RAT: initdisplay_rat(inverted);
    50f0:	0e 94 ef 1c 	call	0x39de	; 0x39de <initdisplay_rat>
    50f4:	08 95       	ret
#ifdef TSCHRON
 case STYLE_TS: initdisplay_ts(inverted);
                break;
#endif
#ifdef DEATHCHRON
 case STYLE_DEATH: initdisplay_death(inverted); break;
    50f6:	0e 94 5d 0b 	call	0x16ba	; 0x16ba <initdisplay_death>
    50fa:	08 95       	ret

000050fc <initanim>:

extern volatile uint8_t displaystyle;
extern volatile uint8_t RotateFlag;
extern volatile uint8_t minute_changed, hour_changed;

void initanim(void){
    50fc:	1f 93       	push	r17
                break;
#endif
#ifdef DEATHCHRON
 case STYLE_DEATH: initanim_death(); break;
#endif
 case STYLE_ROTATE: RotateFlag = ROTATEPERIOD;	//And fall into STYLE_RANDOM code next.
    50fe:	1f e0       	ldi	r17, 0x0F	; 15
extern volatile uint8_t displaystyle;
extern volatile uint8_t RotateFlag;
extern volatile uint8_t minute_changed, hour_changed;

void initanim(void){
 switch (displaystyle) {
    5100:	80 91 31 03 	lds	r24, 0x0331
    5104:	85 3d       	cpi	r24, 0xD5	; 213
    5106:	b1 f0       	breq	.+44     	; 0x5134 <initanim+0x38>
    5108:	86 3d       	cpi	r24, 0xD6	; 214
    510a:	38 f4       	brcc	.+14     	; 0x511a <initanim+0x1e>
    510c:	83 3d       	cpi	r24, 0xD3	; 211
    510e:	79 f0       	breq	.+30     	; 0x512e <initanim+0x32>
    5110:	84 3d       	cpi	r24, 0xD4	; 212
    5112:	90 f4       	brcc	.+36     	; 0x5138 <initanim+0x3c>
    5114:	82 3d       	cpi	r24, 0xD2	; 210
    5116:	11 f5       	brne	.+68     	; 0x515c <initanim+0x60>
    5118:	07 c0       	rjmp	.+14     	; 0x5128 <initanim+0x2c>
    511a:	87 3d       	cpi	r24, 0xD7	; 215
    511c:	d1 f0       	breq	.+52     	; 0x5152 <initanim+0x56>
    511e:	87 3d       	cpi	r24, 0xD7	; 215
    5120:	a8 f0       	brcs	.+42     	; 0x514c <initanim+0x50>
    5122:	88 3d       	cpi	r24, 0xD8	; 216
    5124:	d9 f4       	brne	.+54     	; 0x515c <initanim+0x60>
    5126:	18 c0       	rjmp	.+48     	; 0x5158 <initanim+0x5c>
#ifdef RATTCHRON
 case STYLE_RAT: initanim_rat();
    5128:	0e 94 68 1d 	call	0x3ad0	; 0x3ad0 <initanim_rat>
    512c:	17 c0       	rjmp	.+46     	; 0x515c <initanim+0x60>
#ifdef TSCHRON
 case STYLE_TS: initanim_ts();
                break;
#endif
#ifdef DEATHCHRON
 case STYLE_DEATH: initanim_death(); break;
    512e:	0e 94 c4 0d 	call	0x1b88	; 0x1b88 <initanim_death>
    5132:	14 c0       	rjmp	.+40     	; 0x515c <initanim+0x60>
#endif
 case STYLE_ROTATE: RotateFlag = ROTATEPERIOD;	//And fall into STYLE_RANDOM code next.
    5134:	10 93 3d 03 	sts	0x033D, r17
 case STYLE_RANDOM: init_crand(); displaystyle = (STYLE_BASE + 1) + (crand(0) % (STYLE_RANDOM - (STYLE_BASE + 1))); initanim();
    5138:	0e 94 0b 39 	call	0x7216	; 0x7216 <init_crand>
    513c:	80 e0       	ldi	r24, 0x00	; 0
    513e:	0e 94 14 39 	call	0x7228	; 0x7228 <crand>
    5142:	81 70       	andi	r24, 0x01	; 1
    5144:	8e 52       	subi	r24, 0x2E	; 46
    5146:	80 93 31 03 	sts	0x0331, r24
    514a:	da cf       	rjmp	.-76     	; 0x5100 <initanim+0x4>
                break;
#ifdef DEATHCHRON
 case STYLE_DEATHCFG: initanim_deathcfg(); break;
    514c:	0e 94 3e 13 	call	0x267c	; 0x267c <initanim_deathcfg>
    5150:	05 c0       	rjmp	.+10     	; 0x515c <initanim+0x60>
#endif
#ifdef GPSENABLE
 case STYLE_GPS: initanim_GPS();
    5152:	0e 94 9b 13 	call	0x2736	; 0x2736 <initanim_GPS>
    5156:	02 c0       	rjmp	.+4      	; 0x515c <initanim+0x60>
               break;
#endif
 case STYLE_ABOUT: initanim_abo();
    5158:	0e 94 e2 04 	call	0x9c4	; 0x9c4 <initanim_abo>
                break;
 }
}
    515c:	1f 91       	pop	r17
    515e:	08 95       	ret

00005160 <drawdisplay>:
 case STYLE_DEATH: initdisplay_death(inverted); break;
#endif
 }
}

void drawdisplay(uint8_t inverted) {
    5160:	1f 93       	push	r17
    5162:	18 2f       	mov	r17, r24
 if (RotateFlag && ((minute_changed==1)||(hour_changed==1))) {
    5164:	80 91 3d 03 	lds	r24, 0x033D
    5168:	88 23       	and	r24, r24
    516a:	81 f1       	breq	.+96     	; 0x51cc <drawdisplay+0x6c>
    516c:	80 91 1e 02 	lds	r24, 0x021E
    5170:	81 30       	cpi	r24, 0x01	; 1
    5172:	21 f0       	breq	.+8      	; 0x517c <drawdisplay+0x1c>
    5174:	80 91 1f 02 	lds	r24, 0x021F
    5178:	81 30       	cpi	r24, 0x01	; 1
    517a:	41 f5       	brne	.+80     	; 0x51cc <drawdisplay+0x6c>
  if(minute_changed)
    517c:	80 91 1e 02 	lds	r24, 0x021E
    5180:	88 23       	and	r24, r24
    5182:	19 f0       	breq	.+6      	; 0x518a <drawdisplay+0x2a>
    minute_changed = 2;
    5184:	82 e0       	ldi	r24, 0x02	; 2
    5186:	80 93 1e 02 	sts	0x021E, r24
  if(hour_changed)
    518a:	80 91 1f 02 	lds	r24, 0x021F
    518e:	88 23       	and	r24, r24
    5190:	19 f0       	breq	.+6      	; 0x5198 <drawdisplay+0x38>
  	hour_changed = 2;
    5192:	82 e0       	ldi	r24, 0x02	; 2
    5194:	80 93 1f 02 	sts	0x021F, r24
  if (!--RotateFlag) {
    5198:	80 91 3d 03 	lds	r24, 0x033D
    519c:	81 50       	subi	r24, 0x01	; 1
    519e:	80 93 3d 03 	sts	0x033D, r24
    51a2:	80 91 3d 03 	lds	r24, 0x033D
    51a6:	88 23       	and	r24, r24
    51a8:	89 f4       	brne	.+34     	; 0x51cc <drawdisplay+0x6c>
   RotateFlag = ROTATEPERIOD;
    51aa:	8f e0       	ldi	r24, 0x0F	; 15
    51ac:	80 93 3d 03 	sts	0x033D, r24
   if (++displaystyle==STYLE_RANDOM) {displaystyle=STYLE_BASE+1;}
    51b0:	80 91 31 03 	lds	r24, 0x0331
    51b4:	8f 5f       	subi	r24, 0xFF	; 255
    51b6:	80 93 31 03 	sts	0x0331, r24
    51ba:	80 91 31 03 	lds	r24, 0x0331
    51be:	84 3d       	cpi	r24, 0xD4	; 212
    51c0:	19 f4       	brne	.+6      	; 0x51c8 <drawdisplay+0x68>
    51c2:	82 ed       	ldi	r24, 0xD2	; 210
    51c4:	80 93 31 03 	sts	0x0331, r24
   initanim();
    51c8:	0e 94 7e 28 	call	0x50fc	; 0x50fc <initanim>
  }
 }
 switch (displaystyle) {
    51cc:	80 91 31 03 	lds	r24, 0x0331
    51d0:	82 3d       	cpi	r24, 0xD2	; 210
    51d2:	19 f0       	breq	.+6      	; 0x51da <drawdisplay+0x7a>
    51d4:	83 3d       	cpi	r24, 0xD3	; 211
    51d6:	41 f4       	brne	.+16     	; 0x51e8 <drawdisplay+0x88>
    51d8:	04 c0       	rjmp	.+8      	; 0x51e2 <drawdisplay+0x82>
#ifdef RATTCHRON
 case STYLE_RAT: drawdisplay_rat(inverted);
    51da:	81 2f       	mov	r24, r17
    51dc:	0e 94 da 17 	call	0x2fb4	; 0x2fb4 <drawdisplay_rat>
    51e0:	03 c0       	rjmp	.+6      	; 0x51e8 <drawdisplay+0x88>
#ifdef TSCHRON
 case STYLE_TS: drawdisplay_ts(inverted);
                 break;
#endif
#ifdef DEATHCHRON
 case STYLE_DEATH: drawdisplay_death(inverted); break;
    51e2:	81 2f       	mov	r24, r17
    51e4:	0e 94 11 0c 	call	0x1822	; 0x1822 <drawdisplay_death>
#endif
 }
}
    51e8:	1f 91       	pop	r17
    51ea:	08 95       	ret

000051ec <get_font>:
	}
}

uint8_t get_font(uint16_t addr)
{
	return eeprom_read_byte(&Font5x7[addr]);
    51ec:	8e 59       	subi	r24, 0x9E	; 158
    51ee:	9f 4f       	sbci	r25, 0xFF	; 255
    51f0:	0e 94 70 3b 	call	0x76e0	; 0x76e0 <__eerd_byte_m328p>
}
    51f4:	08 95       	ret

000051f6 <glcdWriteCharGr>:
	//cbi(GLCD_Control, GLCD_CS2);
	glcdStartLine(0);
}

void glcdWriteCharGr(u08 grCharIdx, uint8_t inverted)
{
    51f6:	ff 92       	push	r15
    51f8:	0f 93       	push	r16
    51fa:	1f 93       	push	r17
    51fc:	cf 93       	push	r28
    51fe:	df 93       	push	r29
    5200:	48 2f       	mov	r20, r24
    5202:	f6 2e       	mov	r15, r22
    5204:	30 e0       	ldi	r19, 0x00	; 0
    5206:	20 e0       	ldi	r18, 0x00	; 0
    5208:	07 c0       	rjmp	.+14     	; 0x5218 <glcdWriteCharGr+0x22>
	{
		// add this graphic's length to the startIdx
		// to get the startIdx of the next one
		// 2010-03-03 BUG Dataman/CRJONES There's a bug here:  Have to add 1 for the byte-cout.
		// grStartIdx += pgm_read_byte(FontGr+grStartIdx);
		grStartIdx += pgm_read_byte(&FontGr[grStartIdx])+1;
    520a:	80 5b       	subi	r24, 0xB0	; 176
    520c:	9b 4f       	sbci	r25, 0xFB	; 251
    520e:	fc 01       	movw	r30, r24
    5210:	84 91       	lpm	r24, Z+
    5212:	8f 5f       	subi	r24, 0xFF	; 255
    5214:	28 0f       	add	r18, r24
	u08 grLength;
	u08 grStartIdx = 0;
        u08 line;

	// get starting index of graphic bitmap
	for(idx=0; idx<grCharIdx; idx++)
    5216:	3f 5f       	subi	r19, 0xFF	; 255
    5218:	82 2f       	mov	r24, r18
    521a:	90 e0       	ldi	r25, 0x00	; 0
    521c:	34 17       	cp	r19, r20
    521e:	a8 f3       	brcs	.-22     	; 0x520a <glcdWriteCharGr+0x14>
		// 2010-03-03 BUG Dataman/CRJONES There's a bug here:  Have to add 1 for the byte-cout.
		// grStartIdx += pgm_read_byte(FontGr+grStartIdx);
		grStartIdx += pgm_read_byte(&FontGr[grStartIdx])+1;
		
	}
	grLength = pgm_read_byte(&FontGr[grStartIdx]);
    5220:	fc 01       	movw	r30, r24
    5222:	e0 5b       	subi	r30, 0xB0	; 176
    5224:	fb 4f       	sbci	r31, 0xFB	; 251
    5226:	04 91       	lpm	r16, Z+
    5228:	ec 01       	movw	r28, r24
    522a:	cf 5a       	subi	r28, 0xAF	; 175
    522c:	db 4f       	sbci	r29, 0xFB	; 251
    522e:	10 e0       	ldi	r17, 0x00	; 0
    5230:	0a c0       	rjmp	.+20     	; 0x5246 <glcdWriteCharGr+0x50>

	// write the lines of the desired graphic to the display
	for(idx=0; idx<grLength; idx++)
	{
		// write the line
                line = pgm_read_byte(&FontGr[(grStartIdx+1)+idx]);
    5232:	fe 01       	movw	r30, r28
    5234:	84 91       	lpm	r24, Z+
                if (inverted == INVERTED) line = 255-line;
    5236:	f1 e0       	ldi	r31, 0x01	; 1
    5238:	ff 16       	cp	r15, r31
    523a:	09 f4       	brne	.+2      	; 0x523e <glcdWriteCharGr+0x48>
    523c:	80 95       	com	r24
		glcdDataWrite(line);
    523e:	0e 94 f7 2c 	call	0x59ee	; 0x59ee <glcdDataWrite>
		
	}
	grLength = pgm_read_byte(&FontGr[grStartIdx]);

	// write the lines of the desired graphic to the display
	for(idx=0; idx<grLength; idx++)
    5242:	1f 5f       	subi	r17, 0xFF	; 255
    5244:	21 96       	adiw	r28, 0x01	; 1
    5246:	10 17       	cp	r17, r16
    5248:	a0 f3       	brcs	.-24     	; 0x5232 <glcdWriteCharGr+0x3c>
		// write the line
                line = pgm_read_byte(&FontGr[(grStartIdx+1)+idx]);
                if (inverted == INVERTED) line = 255-line;
		glcdDataWrite(line);
	}
}
    524a:	df 91       	pop	r29
    524c:	cf 91       	pop	r28
    524e:	1f 91       	pop	r17
    5250:	0f 91       	pop	r16
    5252:	ff 90       	pop	r15
    5254:	08 95       	ret

00005256 <glcdWriteChar>:

// text routines

// write a character at the current position
void glcdWriteChar(unsigned char c, uint8_t inverted)
{
    5256:	ff 92       	push	r15
    5258:	0f 93       	push	r16
    525a:	1f 93       	push	r17
    525c:	cf 93       	push	r28
    525e:	df 93       	push	r29
    5260:	f6 2e       	mov	r15, r22
	u08 i = 0, j;

	for(i=0; i<5; i++)
	{
	  j = get_font(((c - 0x20) * 5) + i);
    5262:	95 e0       	ldi	r25, 0x05	; 5
    5264:	89 9f       	mul	r24, r25
    5266:	c0 01       	movw	r24, r0
    5268:	11 24       	eor	r1, r1
    526a:	ec 01       	movw	r28, r24
    526c:	ce 53       	subi	r28, 0x3E	; 62
    526e:	d0 40       	sbci	r29, 0x00	; 0
// write a character at the current position
void glcdWriteChar(unsigned char c, uint8_t inverted)
{
	u08 i = 0, j;

	for(i=0; i<5; i++)
    5270:	8c 01       	movw	r16, r24
    5272:	09 53       	subi	r16, 0x39	; 57
    5274:	10 40       	sbci	r17, 0x00	; 0
	}
}

uint8_t get_font(uint16_t addr)
{
	return eeprom_read_byte(&Font5x7[addr]);
    5276:	ce 01       	movw	r24, r28
    5278:	0e 94 70 3b 	call	0x76e0	; 0x76e0 <__eerd_byte_m328p>
	u08 i = 0, j;

	for(i=0; i<5; i++)
	{
	  j = get_font(((c - 0x20) * 5) + i);
	  if (inverted)
    527c:	f1 10       	cpse	r15, r1
	    j = ~j;
    527e:	80 95       	com	r24
	  glcdDataWrite(j);
    5280:	0e 94 f7 2c 	call	0x59ee	; 0x59ee <glcdDataWrite>
    5284:	21 96       	adiw	r28, 0x01	; 1
// write a character at the current position
void glcdWriteChar(unsigned char c, uint8_t inverted)
{
	u08 i = 0, j;

	for(i=0; i<5; i++)
    5286:	c0 17       	cp	r28, r16
    5288:	d1 07       	cpc	r29, r17
    528a:	a9 f7       	brne	.-22     	; 0x5276 <glcdWriteChar+0x20>
	    j = ~j;
	  glcdDataWrite(j);
	}

	// write a spacer line
	if (inverted) 
    528c:	ff 20       	and	r15, r15
    528e:	11 f0       	breq	.+4      	; 0x5294 <glcdWriteChar+0x3e>
	  glcdDataWrite(0xFF);
    5290:	8f ef       	ldi	r24, 0xFF	; 255
    5292:	01 c0       	rjmp	.+2      	; 0x5296 <glcdWriteChar+0x40>
	else 
	  glcdDataWrite(0x00);
    5294:	80 e0       	ldi	r24, 0x00	; 0
    5296:	0e 94 f7 2c 	call	0x59ee	; 0x59ee <glcdDataWrite>
	//else 
	//	glcdWriteData(0x00);

	//cbi(GLCD_Control, GLCD_CS1);
	//cbi(GLCD_Control, GLCD_CS2);
	glcdStartLine(0);
    529a:	80 e0       	ldi	r24, 0x00	; 0
    529c:	0e 94 43 2d 	call	0x5a86	; 0x5a86 <glcdStartLine>
}
    52a0:	df 91       	pop	r29
    52a2:	cf 91       	pop	r28
    52a4:	1f 91       	pop	r17
    52a6:	0f 91       	pop	r16
    52a8:	ff 90       	pop	r15
    52aa:	08 95       	ret

000052ac <glcdPutStr_rom>:
    data++;
  }
}

void glcdPutStr_rom(const char *data, uint8_t inverted)
{
    52ac:	0f 93       	push	r16
    52ae:	1f 93       	push	r17
    52b0:	cf 93       	push	r28
    52b2:	df 93       	push	r29
    52b4:	ec 01       	movw	r28, r24
    52b6:	06 2f       	mov	r16, r22
    52b8:	10 e0       	ldi	r17, 0x00	; 0
    52ba:	04 c0       	rjmp	.+8      	; 0x52c4 <glcdPutStr_rom+0x18>
	uint8_t i,j;

	for (i=0; pgm_read_byte(&data[i]); i++) {
		glcdWriteChar(pgm_read_byte(&data[i]),inverted);
    52bc:	60 2f       	mov	r22, r16
    52be:	0e 94 2b 29 	call	0x5256	; 0x5256 <glcdWriteChar>

void glcdPutStr_rom(const char *data, uint8_t inverted)
{
	uint8_t i,j;

	for (i=0; pgm_read_byte(&data[i]); i++) {
    52c2:	1f 5f       	subi	r17, 0xFF	; 255
    52c4:	fe 01       	movw	r30, r28
    52c6:	e1 0f       	add	r30, r17
    52c8:	f1 1d       	adc	r31, r1
    52ca:	84 91       	lpm	r24, Z+
    52cc:	88 23       	and	r24, r24
    52ce:	b1 f7       	brne	.-20     	; 0x52bc <glcdPutStr_rom+0x10>
		glcdWriteChar(pgm_read_byte(&data[i]),inverted);
	}
}
    52d0:	df 91       	pop	r29
    52d2:	cf 91       	pop	r28
    52d4:	1f 91       	pop	r17
    52d6:	0f 91       	pop	r16
    52d8:	08 95       	ret

000052da <glcdPutStr_ram>:
		glcdDataWrite(line);
	}
}

void glcdPutStr_ram(char *data, uint8_t inverted)
{
    52da:	1f 93       	push	r17
    52dc:	cf 93       	push	r28
    52de:	df 93       	push	r29
    52e0:	ec 01       	movw	r28, r24
    52e2:	16 2f       	mov	r17, r22
    52e4:	04 c0       	rjmp	.+8      	; 0x52ee <glcdPutStr_ram+0x14>
  while (*data) {
    glcdWriteChar(*data, inverted);
    52e6:	61 2f       	mov	r22, r17
    52e8:	0e 94 2b 29 	call	0x5256	; 0x5256 <glcdWriteChar>
    data++;
    52ec:	21 96       	adiw	r28, 0x01	; 1
	}
}

void glcdPutStr_ram(char *data, uint8_t inverted)
{
  while (*data) {
    52ee:	88 81       	ld	r24, Y
    52f0:	88 23       	and	r24, r24
    52f2:	c9 f7       	brne	.-14     	; 0x52e6 <glcdPutStr_ram+0xc>
    glcdWriteChar(*data, inverted);
    data++;
  }
}
    52f4:	df 91       	pop	r29
    52f6:	cf 91       	pop	r28
    52f8:	1f 91       	pop	r17
    52fa:	08 95       	ret

000052fc <glcdFillRectangle>:
}*/


// draw filled rectangle
void glcdFillRectangle(u08 x, u08 y, u08 a, u08 b, u08 color)
{
    52fc:	2f 92       	push	r2
    52fe:	3f 92       	push	r3
    5300:	4f 92       	push	r4
    5302:	5f 92       	push	r5
    5304:	6f 92       	push	r6
    5306:	7f 92       	push	r7
    5308:	8f 92       	push	r8
    530a:	9f 92       	push	r9
    530c:	af 92       	push	r10
    530e:	bf 92       	push	r11
    5310:	cf 92       	push	r12
    5312:	df 92       	push	r13
    5314:	ef 92       	push	r14
    5316:	ff 92       	push	r15
    5318:	0f 93       	push	r16
    531a:	1f 93       	push	r17
    531c:	cf 93       	push	r28
    531e:	df 93       	push	r29
    5320:	28 2e       	mov	r2, r24
    5322:	16 2f       	mov	r17, r22
    5324:	34 2e       	mov	r3, r20
    5326:	f2 2e       	mov	r15, r18
    5328:	40 2e       	mov	r4, r16
    }
  }
  */

  // fastest!
  if (y%8) {
    532a:	c6 2f       	mov	r28, r22
    532c:	d0 e0       	ldi	r29, 0x00	; 0
    532e:	c7 70       	andi	r28, 0x07	; 7
    5330:	d0 70       	andi	r29, 0x00	; 0
    5332:	20 97       	sbiw	r28, 0x00	; 0
    5334:	09 f4       	brne	.+2      	; 0x5338 <glcdFillRectangle+0x3c>
    5336:	5b c0       	rjmp	.+182    	; 0x53ee <glcdFillRectangle+0xf2>
    for (i=0; i<a; i++) {
      glcdSetAddress(x+i, y/8);
    5338:	56 2e       	mov	r5, r22
    533a:	56 94       	lsr	r5
    533c:	56 94       	lsr	r5
    533e:	56 94       	lsr	r5
    5340:	ee 24       	eor	r14, r14
      temp = glcdDataRead();	// dummy read
      temp = glcdDataRead();	// read back current value
      // not on a perfect boundary
      for (k=(y%8); k < (y%8)+b && (k<8); k++) {
    5342:	37 e0       	ldi	r19, 0x07	; 7
    5344:	c3 2e       	mov	r12, r19
    5346:	c6 22       	and	r12, r22
	if (color == ON)
	  temp |= _BV(k);
	else
	  temp &= ~_BV(k);
    5348:	8c 2c       	mov	r8, r12
    534a:	99 24       	eor	r9, r9
    534c:	87 fc       	sbrc	r8, 7
    534e:	90 94       	com	r9
    for (i=0; i<a; i++) {
      glcdSetAddress(x+i, y/8);
      temp = glcdDataRead();	// dummy read
      temp = glcdDataRead();	// read back current value
      // not on a perfect boundary
      for (k=(y%8); k < (y%8)+b && (k<8); k++) {
    5350:	5e 01       	movw	r10, r28
    5352:	a2 0e       	add	r10, r18
    5354:	b1 1c       	adc	r11, r1
	if (color == ON)
	  temp |= _BV(k);
	else
	  temp &= ~_BV(k);
    5356:	21 e0       	ldi	r18, 0x01	; 1
    5358:	62 2e       	mov	r6, r18
    535a:	71 2c       	mov	r7, r1
    535c:	35 c0       	rjmp	.+106    	; 0x53c8 <glcdFillRectangle+0xcc>
  */

  // fastest!
  if (y%8) {
    for (i=0; i<a; i++) {
      glcdSetAddress(x+i, y/8);
    535e:	de 2c       	mov	r13, r14
    5360:	d2 0c       	add	r13, r2
    5362:	8d 2d       	mov	r24, r13
    5364:	65 2d       	mov	r22, r5
    5366:	0e 94 50 2d 	call	0x5aa0	; 0x5aa0 <glcdSetAddress>
      temp = glcdDataRead();	// dummy read
    536a:	0e 94 aa 2c 	call	0x5954	; 0x5954 <glcdDataRead>
      temp = glcdDataRead();	// read back current value
    536e:	0e 94 aa 2c 	call	0x5954	; 0x5954 <glcdDataRead>
    5372:	08 2f       	mov	r16, r24
      // not on a perfect boundary
      for (k=(y%8); k < (y%8)+b && (k<8); k++) {
    5374:	40 e0       	ldi	r20, 0x00	; 0
    5376:	50 e0       	ldi	r21, 0x00	; 0
    5378:	15 c0       	rjmp	.+42     	; 0x53a4 <glcdFillRectangle+0xa8>
	if (color == ON)
    537a:	81 e0       	ldi	r24, 0x01	; 1
    537c:	48 16       	cp	r4, r24
    537e:	41 f4       	brne	.+16     	; 0x5390 <glcdFillRectangle+0x94>
	  temp |= _BV(k);
    5380:	c3 01       	movw	r24, r6
    5382:	02 c0       	rjmp	.+4      	; 0x5388 <glcdFillRectangle+0x8c>
    5384:	88 0f       	add	r24, r24
    5386:	99 1f       	adc	r25, r25
    5388:	2a 95       	dec	r18
    538a:	e2 f7       	brpl	.-8      	; 0x5384 <glcdFillRectangle+0x88>
    538c:	08 2b       	or	r16, r24
    538e:	08 c0       	rjmp	.+16     	; 0x53a0 <glcdFillRectangle+0xa4>
	else
	  temp &= ~_BV(k);
    5390:	c3 01       	movw	r24, r6
    5392:	02 c0       	rjmp	.+4      	; 0x5398 <glcdFillRectangle+0x9c>
    5394:	88 0f       	add	r24, r24
    5396:	99 1f       	adc	r25, r25
    5398:	2a 95       	dec	r18
    539a:	e2 f7       	brpl	.-8      	; 0x5394 <glcdFillRectangle+0x98>
    539c:	80 95       	com	r24
    539e:	08 23       	and	r16, r24
    53a0:	4f 5f       	subi	r20, 0xFF	; 255
    53a2:	5f 4f       	sbci	r21, 0xFF	; 255
    53a4:	9a 01       	movw	r18, r20
    53a6:	28 0d       	add	r18, r8
    53a8:	39 1d       	adc	r19, r9
    for (i=0; i<a; i++) {
      glcdSetAddress(x+i, y/8);
      temp = glcdDataRead();	// dummy read
      temp = glcdDataRead();	// read back current value
      // not on a perfect boundary
      for (k=(y%8); k < (y%8)+b && (k<8); k++) {
    53aa:	2a 15       	cp	r18, r10
    53ac:	3b 05       	cpc	r19, r11
    53ae:	24 f4       	brge	.+8      	; 0x53b8 <glcdFillRectangle+0xbc>
    53b0:	8c 2d       	mov	r24, r12
    53b2:	84 0f       	add	r24, r20
    53b4:	88 30       	cpi	r24, 0x08	; 8
    53b6:	09 f7       	brne	.-62     	; 0x537a <glcdFillRectangle+0x7e>
	if (color == ON)
	  temp |= _BV(k);
	else
	  temp &= ~_BV(k);
      }
      glcdSetAddress(x+i, y/8);
    53b8:	8d 2d       	mov	r24, r13
    53ba:	65 2d       	mov	r22, r5
    53bc:	0e 94 50 2d 	call	0x5aa0	; 0x5aa0 <glcdSetAddress>
      glcdDataWrite(temp);
    53c0:	80 2f       	mov	r24, r16
    53c2:	0e 94 f7 2c 	call	0x59ee	; 0x59ee <glcdDataWrite>
  }
  */

  // fastest!
  if (y%8) {
    for (i=0; i<a; i++) {
    53c6:	e3 94       	inc	r14
    53c8:	e3 14       	cp	r14, r3
    53ca:	48 f2       	brcs	.-110    	; 0x535e <glcdFillRectangle+0x62>
      glcdSetAddress(x+i, y/8);
      glcdDataWrite(temp);
    } 
    // we did top section so remove it

    if (b > 8-(y%8))
    53cc:	2f 2d       	mov	r18, r15
    53ce:	30 e0       	ldi	r19, 0x00	; 0
    53d0:	88 e0       	ldi	r24, 0x08	; 8
    53d2:	90 e0       	ldi	r25, 0x00	; 0
    53d4:	8c 1b       	sub	r24, r28
    53d6:	9d 0b       	sbc	r25, r29
    53d8:	82 17       	cp	r24, r18
    53da:	93 07       	cpc	r25, r19
    53dc:	14 f0       	brlt	.+4      	; 0x53e2 <glcdFillRectangle+0xe6>
    53de:	ff 24       	eor	r15, r15
    53e0:	04 c0       	rjmp	.+8      	; 0x53ea <glcdFillRectangle+0xee>
      b -= 8-(y%8);
    53e2:	81 2f       	mov	r24, r17
    53e4:	87 70       	andi	r24, 0x07	; 7
    53e6:	88 50       	subi	r24, 0x08	; 8
    53e8:	f8 0e       	add	r15, r24
    else 
      b = 0;
    y -= (y%8);
    53ea:	18 7f       	andi	r17, 0xF8	; 248
    y+=8;
    53ec:	18 5f       	subi	r17, 0xF8	; 248
  }
  // skip to next section
  for (j=(y/8); j < (y+b)/8; j++) {
    53ee:	e1 2e       	mov	r14, r17
    53f0:	e6 94       	lsr	r14
    53f2:	e6 94       	lsr	r14
    53f4:	e6 94       	lsr	r14
    53f6:	c1 2f       	mov	r28, r17
    53f8:	d0 e0       	ldi	r29, 0x00	; 0
    53fa:	cf 0d       	add	r28, r15
    53fc:	d1 1d       	adc	r29, r1
    53fe:	93 e0       	ldi	r25, 0x03	; 3
    5400:	d5 95       	asr	r29
    5402:	c7 95       	ror	r28
    5404:	9a 95       	dec	r25
    5406:	e1 f7       	brne	.-8      	; 0x5400 <glcdFillRectangle+0x104>
    5408:	12 c0       	rjmp	.+36     	; 0x542e <glcdFillRectangle+0x132>
    glcdSetAddress(x, j);
    540a:	82 2d       	mov	r24, r2
    540c:	6e 2d       	mov	r22, r14
    540e:	0e 94 50 2d 	call	0x5aa0	; 0x5aa0 <glcdSetAddress>
    5412:	10 e0       	ldi	r17, 0x00	; 0
    5414:	09 c0       	rjmp	.+18     	; 0x5428 <glcdFillRectangle+0x12c>
    for (i=0; i<a; i++) {
      if (color == ON)
    5416:	81 e0       	ldi	r24, 0x01	; 1
    5418:	48 16       	cp	r4, r24
    541a:	11 f4       	brne	.+4      	; 0x5420 <glcdFillRectangle+0x124>
	glcdDataWrite(0xFF);
    541c:	8f ef       	ldi	r24, 0xFF	; 255
    541e:	01 c0       	rjmp	.+2      	; 0x5422 <glcdFillRectangle+0x126>
      else
	glcdDataWrite(0x00);
    5420:	80 e0       	ldi	r24, 0x00	; 0
    5422:	0e 94 f7 2c 	call	0x59ee	; 0x59ee <glcdDataWrite>
    y+=8;
  }
  // skip to next section
  for (j=(y/8); j < (y+b)/8; j++) {
    glcdSetAddress(x, j);
    for (i=0; i<a; i++) {
    5426:	1f 5f       	subi	r17, 0xFF	; 255
    5428:	13 15       	cp	r17, r3
    542a:	a8 f3       	brcs	.-22     	; 0x5416 <glcdFillRectangle+0x11a>
      b = 0;
    y -= (y%8);
    y+=8;
  }
  // skip to next section
  for (j=(y/8); j < (y+b)/8; j++) {
    542c:	e3 94       	inc	r14
    542e:	8e 2d       	mov	r24, r14
    5430:	90 e0       	ldi	r25, 0x00	; 0
    5432:	8c 17       	cp	r24, r28
    5434:	9d 07       	cpc	r25, r29
    5436:	4c f3       	brlt	.-46     	; 0x540a <glcdFillRectangle+0x10e>
	glcdDataWrite(0xFF);
      else
	glcdDataWrite(0x00);
    }
  }
  b = b%8;
    5438:	2f 2d       	mov	r18, r15
    543a:	27 70       	andi	r18, 0x07	; 7
  // do remainder
  if (b) {
    543c:	c9 f1       	breq	.+114    	; 0x54b0 <glcdFillRectangle+0x1b4>
    543e:	00 e0       	ldi	r16, 0x00	; 0
    for (i=0; i<a; i++) {
      glcdSetAddress(x+i, j);
      temp = glcdDataRead();	// dummy read
      temp = glcdDataRead();	// read back current value
      // not on a perfect boundary
      for (k=0; k < b; k++) {
    5440:	c2 2f       	mov	r28, r18
    5442:	d0 e0       	ldi	r29, 0x00	; 0
	if (color == ON)
	  temp |= _BV(k);
	else
	  temp &= ~_BV(k);
    5444:	81 e0       	ldi	r24, 0x01	; 1
    5446:	a8 2e       	mov	r10, r24
    5448:	b1 2c       	mov	r11, r1
    544a:	30 c0       	rjmp	.+96     	; 0x54ac <glcdFillRectangle+0x1b0>
	glcdDataWrite(0x00);
    }
  }
  b = b%8;
  // do remainder
  if (b) {
    544c:	f0 2e       	mov	r15, r16
    544e:	f2 0c       	add	r15, r2
    for (i=0; i<a; i++) {
      glcdSetAddress(x+i, j);
    5450:	8f 2d       	mov	r24, r15
    5452:	6e 2d       	mov	r22, r14
    5454:	0e 94 50 2d 	call	0x5aa0	; 0x5aa0 <glcdSetAddress>
      temp = glcdDataRead();	// dummy read
    5458:	0e 94 aa 2c 	call	0x5954	; 0x5954 <glcdDataRead>
      temp = glcdDataRead();	// read back current value
    545c:	0e 94 aa 2c 	call	0x5954	; 0x5954 <glcdDataRead>
    5460:	18 2f       	mov	r17, r24
    5462:	20 e0       	ldi	r18, 0x00	; 0
    5464:	30 e0       	ldi	r19, 0x00	; 0
    5466:	17 c0       	rjmp	.+46     	; 0x5496 <glcdFillRectangle+0x19a>
      // not on a perfect boundary
      for (k=0; k < b; k++) {
	if (color == ON)
    5468:	81 e0       	ldi	r24, 0x01	; 1
    546a:	48 16       	cp	r4, r24
    546c:	49 f4       	brne	.+18     	; 0x5480 <glcdFillRectangle+0x184>
	  temp |= _BV(k);
    546e:	c5 01       	movw	r24, r10
    5470:	02 2e       	mov	r0, r18
    5472:	02 c0       	rjmp	.+4      	; 0x5478 <glcdFillRectangle+0x17c>
    5474:	88 0f       	add	r24, r24
    5476:	99 1f       	adc	r25, r25
    5478:	0a 94       	dec	r0
    547a:	e2 f7       	brpl	.-8      	; 0x5474 <glcdFillRectangle+0x178>
    547c:	18 2b       	or	r17, r24
    547e:	09 c0       	rjmp	.+18     	; 0x5492 <glcdFillRectangle+0x196>
	else
	  temp &= ~_BV(k);
    5480:	c5 01       	movw	r24, r10
    5482:	02 2e       	mov	r0, r18
    5484:	02 c0       	rjmp	.+4      	; 0x548a <glcdFillRectangle+0x18e>
    5486:	88 0f       	add	r24, r24
    5488:	99 1f       	adc	r25, r25
    548a:	0a 94       	dec	r0
    548c:	e2 f7       	brpl	.-8      	; 0x5486 <glcdFillRectangle+0x18a>
    548e:	80 95       	com	r24
    5490:	18 23       	and	r17, r24
    5492:	2f 5f       	subi	r18, 0xFF	; 255
    5494:	3f 4f       	sbci	r19, 0xFF	; 255
    for (i=0; i<a; i++) {
      glcdSetAddress(x+i, j);
      temp = glcdDataRead();	// dummy read
      temp = glcdDataRead();	// read back current value
      // not on a perfect boundary
      for (k=0; k < b; k++) {
    5496:	2c 17       	cp	r18, r28
    5498:	3d 07       	cpc	r19, r29
    549a:	34 f3       	brlt	.-52     	; 0x5468 <glcdFillRectangle+0x16c>
	if (color == ON)
	  temp |= _BV(k);
	else
	  temp &= ~_BV(k);
      }
      glcdSetAddress(x+i, j);
    549c:	8f 2d       	mov	r24, r15
    549e:	6e 2d       	mov	r22, r14
    54a0:	0e 94 50 2d 	call	0x5aa0	; 0x5aa0 <glcdSetAddress>
      glcdDataWrite(temp);
    54a4:	81 2f       	mov	r24, r17
    54a6:	0e 94 f7 2c 	call	0x59ee	; 0x59ee <glcdDataWrite>
    }
  }
  b = b%8;
  // do remainder
  if (b) {
    for (i=0; i<a; i++) {
    54aa:	0f 5f       	subi	r16, 0xFF	; 255
    54ac:	03 15       	cp	r16, r3
    54ae:	70 f2       	brcs	.-100    	; 0x544c <glcdFillRectangle+0x150>
      }
      glcdSetAddress(x+i, j);
      glcdDataWrite(temp);
    }
  }
  glcdStartLine(0);
    54b0:	80 e0       	ldi	r24, 0x00	; 0
    54b2:	0e 94 43 2d 	call	0x5a86	; 0x5a86 <glcdStartLine>
}
    54b6:	df 91       	pop	r29
    54b8:	cf 91       	pop	r28
    54ba:	1f 91       	pop	r17
    54bc:	0f 91       	pop	r16
    54be:	ff 90       	pop	r15
    54c0:	ef 90       	pop	r14
    54c2:	df 90       	pop	r13
    54c4:	cf 90       	pop	r12
    54c6:	bf 90       	pop	r11
    54c8:	af 90       	pop	r10
    54ca:	9f 90       	pop	r9
    54cc:	8f 90       	pop	r8
    54ce:	7f 90       	pop	r7
    54d0:	6f 90       	pop	r6
    54d2:	5f 90       	pop	r5
    54d4:	4f 90       	pop	r4
    54d6:	3f 90       	pop	r3
    54d8:	2f 90       	pop	r2
    54da:	08 95       	ret

000054dc <glcdFillCircle>:
}*/


// draw circle
void glcdFillCircle(u08 xcenter, u08 ycenter, u08 radius, u08 color)
{
    54dc:	2f 92       	push	r2
    54de:	3f 92       	push	r3
    54e0:	4f 92       	push	r4
    54e2:	5f 92       	push	r5
    54e4:	6f 92       	push	r6
    54e6:	7f 92       	push	r7
    54e8:	8f 92       	push	r8
    54ea:	9f 92       	push	r9
    54ec:	af 92       	push	r10
    54ee:	bf 92       	push	r11
    54f0:	cf 92       	push	r12
    54f2:	df 92       	push	r13
    54f4:	ef 92       	push	r14
    54f6:	ff 92       	push	r15
    54f8:	0f 93       	push	r16
    54fa:	1f 93       	push	r17
    54fc:	df 93       	push	r29
    54fe:	cf 93       	push	r28
    5500:	00 d0       	rcall	.+0      	; 0x5502 <glcdFillCircle+0x26>
    5502:	0f 92       	push	r0
    5504:	cd b7       	in	r28, 0x3d	; 61
    5506:	de b7       	in	r29, 0x3e	; 62
    5508:	38 2e       	mov	r3, r24
    550a:	46 2e       	mov	r4, r22
    550c:	52 2e       	mov	r5, r18
  int tswitch, y, x = 0;
  unsigned char d;

  d = ycenter - xcenter;
    550e:	26 2e       	mov	r2, r22
    5510:	28 1a       	sub	r2, r24
  y = radius;
    5512:	a4 2e       	mov	r10, r20
    5514:	bb 24       	eor	r11, r11
  tswitch = 3 - 2 * radius;
    5516:	c5 01       	movw	r24, r10
    5518:	88 0f       	add	r24, r24
    551a:	99 1f       	adc	r25, r25
    551c:	22 27       	eor	r18, r18
    551e:	33 27       	eor	r19, r19
    5520:	28 1b       	sub	r18, r24
    5522:	39 0b       	sbc	r19, r25
    5524:	2d 5f       	subi	r18, 0xFD	; 253
    5526:	3f 4f       	sbci	r19, 0xFF	; 255
    5528:	3b 83       	std	Y+3, r19	; 0x03
    552a:	2a 83       	std	Y+2, r18	; 0x02
    552c:	88 24       	eor	r8, r8
    552e:	99 24       	eor	r9, r9
    5530:	66 24       	eor	r6, r6
    5532:	77 24       	eor	r7, r7
  while (x <= y) {
    glcdFillRectangle(xcenter + x, ycenter - y, 1, y*2, color);
    glcdFillRectangle(xcenter - x, ycenter - y, 1, y*2, color);
    glcdFillRectangle(ycenter + y - d, ycenter - x, 1, x*2, color);
    5534:	34 2d       	mov	r19, r4
    5536:	32 19       	sub	r19, r2
    5538:	39 83       	std	Y+1, r19	; 0x01
}*/


// draw circle
void glcdFillCircle(u08 xcenter, u08 ycenter, u08 radius, u08 color)
{
    553a:	18 2d       	mov	r17, r8

  d = ycenter - xcenter;
  y = radius;
  tswitch = 3 - 2 * radius;
  while (x <= y) {
    glcdFillRectangle(xcenter + x, ycenter - y, 1, y*2, color);
    553c:	d4 2c       	mov	r13, r4
    553e:	da 18       	sub	r13, r10
    5540:	75 01       	movw	r14, r10
    5542:	ee 0c       	add	r14, r14
    5544:	ff 1c       	adc	r15, r15
    5546:	88 2d       	mov	r24, r8
    5548:	83 0d       	add	r24, r3
    554a:	6d 2d       	mov	r22, r13
    554c:	41 e0       	ldi	r20, 0x01	; 1
    554e:	2e 2d       	mov	r18, r14
    5550:	05 2d       	mov	r16, r5
    5552:	0e 94 7e 29 	call	0x52fc	; 0x52fc <glcdFillRectangle>
    glcdFillRectangle(xcenter - x, ycenter - y, 1, y*2, color);
    5556:	83 2d       	mov	r24, r3
    5558:	88 19       	sub	r24, r8
    555a:	6d 2d       	mov	r22, r13
    555c:	41 e0       	ldi	r20, 0x01	; 1
    555e:	2e 2d       	mov	r18, r14
    5560:	0e 94 7e 29 	call	0x52fc	; 0x52fc <glcdFillRectangle>
    5564:	f4 2c       	mov	r15, r4
    5566:	f8 18       	sub	r15, r8
    5568:	11 0f       	add	r17, r17
    glcdFillRectangle(ycenter + y - d, ycenter - x, 1, x*2, color);
    556a:	89 81       	ldd	r24, Y+1	; 0x01
    556c:	8a 0d       	add	r24, r10
    556e:	6f 2d       	mov	r22, r15
    5570:	41 e0       	ldi	r20, 0x01	; 1
    5572:	21 2f       	mov	r18, r17
    5574:	0e 94 7e 29 	call	0x52fc	; 0x52fc <glcdFillRectangle>
    glcdFillRectangle(ycenter - y - d, ycenter - x, 1, x*2, color);   
    5578:	8d 2d       	mov	r24, r13
    557a:	82 19       	sub	r24, r2
    557c:	6f 2d       	mov	r22, r15
    557e:	41 e0       	ldi	r20, 0x01	; 1
    5580:	21 2f       	mov	r18, r17
    5582:	0e 94 7e 29 	call	0x52fc	; 0x52fc <glcdFillRectangle>
    if (tswitch < 0) tswitch += (4 * x + 6);
    5586:	8a 81       	ldd	r24, Y+2	; 0x02
    5588:	9b 81       	ldd	r25, Y+3	; 0x03
    558a:	97 ff       	sbrs	r25, 7
    558c:	06 c0       	rjmp	.+12     	; 0x559a <glcdFillCircle+0xbe>
    558e:	06 96       	adiw	r24, 0x06	; 6
    5590:	86 0d       	add	r24, r6
    5592:	97 1d       	adc	r25, r7
    5594:	9b 83       	std	Y+3, r25	; 0x03
    5596:	8a 83       	std	Y+2, r24	; 0x02
    5598:	11 c0       	rjmp	.+34     	; 0x55bc <glcdFillCircle+0xe0>
    else {
      tswitch += (4 * (x - y) + 10);
    559a:	ea 81       	ldd	r30, Y+2	; 0x02
    559c:	fb 81       	ldd	r31, Y+3	; 0x03
    559e:	3a 96       	adiw	r30, 0x0a	; 10
    55a0:	c4 01       	movw	r24, r8
    55a2:	8a 19       	sub	r24, r10
    55a4:	9b 09       	sbc	r25, r11
    55a6:	88 0f       	add	r24, r24
    55a8:	99 1f       	adc	r25, r25
    55aa:	88 0f       	add	r24, r24
    55ac:	99 1f       	adc	r25, r25
    55ae:	e8 0f       	add	r30, r24
    55b0:	f9 1f       	adc	r31, r25
    55b2:	fb 83       	std	Y+3, r31	; 0x03
    55b4:	ea 83       	std	Y+2, r30	; 0x02
      y--;
    55b6:	08 94       	sec
    55b8:	a1 08       	sbc	r10, r1
    55ba:	b1 08       	sbc	r11, r1
    }
    x++;
    55bc:	08 94       	sec
    55be:	81 1c       	adc	r8, r1
    55c0:	91 1c       	adc	r9, r1
    55c2:	24 e0       	ldi	r18, 0x04	; 4
    55c4:	30 e0       	ldi	r19, 0x00	; 0
    55c6:	62 0e       	add	r6, r18
    55c8:	73 1e       	adc	r7, r19
  unsigned char d;

  d = ycenter - xcenter;
  y = radius;
  tswitch = 3 - 2 * radius;
  while (x <= y) {
    55ca:	a8 14       	cp	r10, r8
    55cc:	b9 04       	cpc	r11, r9
    55ce:	0c f0       	brlt	.+2      	; 0x55d2 <glcdFillCircle+0xf6>
    55d0:	b4 cf       	rjmp	.-152    	; 0x553a <glcdFillCircle+0x5e>
      tswitch += (4 * (x - y) + 10);
      y--;
    }
    x++;
  }
}
    55d2:	0f 90       	pop	r0
    55d4:	0f 90       	pop	r0
    55d6:	0f 90       	pop	r0
    55d8:	cf 91       	pop	r28
    55da:	df 91       	pop	r29
    55dc:	1f 91       	pop	r17
    55de:	0f 91       	pop	r16
    55e0:	ff 90       	pop	r15
    55e2:	ef 90       	pop	r14
    55e4:	df 90       	pop	r13
    55e6:	cf 90       	pop	r12
    55e8:	bf 90       	pop	r11
    55ea:	af 90       	pop	r10
    55ec:	9f 90       	pop	r9
    55ee:	8f 90       	pop	r8
    55f0:	7f 90       	pop	r7
    55f2:	6f 90       	pop	r6
    55f4:	5f 90       	pop	r5
    55f6:	4f 90       	pop	r4
    55f8:	3f 90       	pop	r3
    55fa:	2f 90       	pop	r2
    55fc:	08 95       	ret

000055fe <glcdSetDot>:

// graphic routines

// set dot
void glcdSetDot(u08 x, u08 y)
{
    55fe:	ef 92       	push	r14
    5600:	ff 92       	push	r15
    5602:	0f 93       	push	r16
    5604:	1f 93       	push	r17
    5606:	f8 2e       	mov	r15, r24
    5608:	16 2f       	mov	r17, r22

	//putstring("->addr "); uart_putw_dec(x);
	//putstring(", "); uart_putw_dec(y/8);
	//putstring_nl(")");

	glcdSetAddress(x, y/8);
    560a:	06 2f       	mov	r16, r22
    560c:	06 95       	lsr	r16
    560e:	06 95       	lsr	r16
    5610:	06 95       	lsr	r16
    5612:	60 2f       	mov	r22, r16
    5614:	0e 94 50 2d 	call	0x5aa0	; 0x5aa0 <glcdSetAddress>
	temp = glcdDataRead();	// dummy read
    5618:	0e 94 aa 2c 	call	0x5954	; 0x5954 <glcdDataRead>
	temp = glcdDataRead();	// read back current value
    561c:	0e 94 aa 2c 	call	0x5954	; 0x5954 <glcdDataRead>
    5620:	e8 2e       	mov	r14, r24
	glcdSetAddress(x, y/8);
    5622:	8f 2d       	mov	r24, r15
    5624:	60 2f       	mov	r22, r16
    5626:	0e 94 50 2d 	call	0x5aa0	; 0x5aa0 <glcdSetAddress>
	glcdDataWrite(temp | (1 << (y % 8)));
    562a:	17 70       	andi	r17, 0x07	; 7
    562c:	81 e0       	ldi	r24, 0x01	; 1
    562e:	90 e0       	ldi	r25, 0x00	; 0
    5630:	02 c0       	rjmp	.+4      	; 0x5636 <glcdSetDot+0x38>
    5632:	88 0f       	add	r24, r24
    5634:	99 1f       	adc	r25, r25
    5636:	1a 95       	dec	r17
    5638:	e2 f7       	brpl	.-8      	; 0x5632 <glcdSetDot+0x34>
    563a:	8e 29       	or	r24, r14
    563c:	0e 94 f7 2c 	call	0x59ee	; 0x59ee <glcdDataWrite>
	glcdStartLine(0);
    5640:	80 e0       	ldi	r24, 0x00	; 0
    5642:	0e 94 43 2d 	call	0x5a86	; 0x5a86 <glcdStartLine>
}
    5646:	1f 91       	pop	r17
    5648:	0f 91       	pop	r16
    564a:	ff 90       	pop	r15
    564c:	ef 90       	pop	r14
    564e:	08 95       	ret

00005650 <i2cInit>:
// functions
void i2cInit(void)
{
	// set pull-up resistors on I2C bus pins
	// TODO: should #ifdef these
	sbi(PORTC, 5);	// i2c SCL on ATmegaxx8
    5650:	45 9a       	sbi	0x08, 5	; 8
	sbi(PORTC, 4);	// i2c SDA on ATmegaxx8
    5652:	44 9a       	sbi	0x08, 4	; 8

	// clear SlaveReceive and SlaveTransmit handler to null
	i2cSlaveReceive = 0;
    5654:	10 92 1a 02 	sts	0x021A, r1
    5658:	10 92 19 02 	sts	0x0219, r1
	i2cSlaveTransmit = 0;
    565c:	10 92 1c 02 	sts	0x021C, r1
    5660:	10 92 1b 02 	sts	0x021B, r1
	*/

	// calculate bitrate division	
	bitrate_div = (F_CPU/32)/bitrate;
	//outb(TWBR, bitrate_div);
	TWBR = 32;
    5664:	80 e2       	ldi	r24, 0x20	; 32
    5666:	80 93 b8 00 	sts	0x00B8, r24
	i2cSlaveReceive = 0;
	i2cSlaveTransmit = 0;
	// set i2c bit rate to 100KHz
	i2cSetBitrate(100);
	// enable TWI (two-wire interface)
	sbi(TWCR, TWEN);
    566a:	ec eb       	ldi	r30, 0xBC	; 188
    566c:	f0 e0       	ldi	r31, 0x00	; 0
    566e:	80 81       	ld	r24, Z
    5670:	84 60       	ori	r24, 0x04	; 4
    5672:	80 83       	st	Z, r24
	// set state
	I2cState = I2C_IDLE;
    5674:	10 92 18 02 	sts	0x0218, r1
	// enable TWI interrupt and slave address ACK
	sbi(TWCR, TWIE);
    5678:	80 81       	ld	r24, Z
    567a:	81 60       	ori	r24, 0x01	; 1
    567c:	80 83       	st	Z, r24
	sbi(TWCR, TWEA);
    567e:	80 81       	ld	r24, Z
    5680:	80 64       	ori	r24, 0x40	; 64
    5682:	80 83       	st	Z, r24
	//outb(TWCR, (inb(TWCR)&TWCR_CMD_MASK)|BV(TWINT)|BV(TWEA));
	// enable interrupts
	sei();
    5684:	78 94       	sei
}
    5686:	08 95       	ret

00005688 <i2cSetBitrate>:
	*/

	// calculate bitrate division	
	bitrate_div = (F_CPU/32)/bitrate;
	//outb(TWBR, bitrate_div);
	TWBR = 32;
    5688:	80 e2       	ldi	r24, 0x20	; 32
    568a:	80 93 b8 00 	sts	0x00B8, r24
}
    568e:	08 95       	ret

00005690 <i2cSendStart>:
}*/

inline void i2cSendStart(void)
{
	// send start condition
	outb(TWCR, (inb(TWCR)&TWCR_CMD_MASK)|BV(TWINT)|BV(TWSTA));
    5690:	ec eb       	ldi	r30, 0xBC	; 188
    5692:	f0 e0       	ldi	r31, 0x00	; 0
    5694:	80 81       	ld	r24, Z
    5696:	8f 70       	andi	r24, 0x0F	; 15
    5698:	80 6a       	ori	r24, 0xA0	; 160
    569a:	80 83       	st	Z, r24
}
    569c:	08 95       	ret

0000569e <i2cSendStop>:

inline void i2cSendStop(void)
{
	// transmit stop condition
	// leave with TWEA on for slave receiving
	outb(TWCR, (inb(TWCR)&TWCR_CMD_MASK)|BV(TWINT)|BV(TWEA)|BV(TWSTO));
    569e:	ec eb       	ldi	r30, 0xBC	; 188
    56a0:	f0 e0       	ldi	r31, 0x00	; 0
    56a2:	80 81       	ld	r24, Z
    56a4:	8f 70       	andi	r24, 0x0F	; 15
    56a6:	80 6d       	ori	r24, 0xD0	; 208
    56a8:	80 83       	st	Z, r24
}
    56aa:	08 95       	ret

000056ac <i2cWaitForComplete>:

inline void i2cWaitForComplete(void)
{
	// wait for i2c interface to complete operation
	while( !(inb(TWCR) & BV(TWINT)) );
    56ac:	80 91 bc 00 	lds	r24, 0x00BC
    56b0:	87 ff       	sbrs	r24, 7
    56b2:	fc cf       	rjmp	.-8      	; 0x56ac <i2cWaitForComplete>
}
    56b4:	08 95       	ret

000056b6 <i2cSendByte>:

inline void i2cSendByte(u08 data)
{
	// save data to the TWDR
	outb(TWDR, data);
    56b6:	80 93 bb 00 	sts	0x00BB, r24
	// begin send
	outb(TWCR, (inb(TWCR)&TWCR_CMD_MASK)|BV(TWINT));
    56ba:	ec eb       	ldi	r30, 0xBC	; 188
    56bc:	f0 e0       	ldi	r31, 0x00	; 0
    56be:	80 81       	ld	r24, Z
    56c0:	8f 70       	andi	r24, 0x0F	; 15
    56c2:	80 68       	ori	r24, 0x80	; 128
    56c4:	80 83       	st	Z, r24
}
    56c6:	08 95       	ret

000056c8 <i2cReceiveByte>:

inline void i2cReceiveByte(u08 ackFlag)
{
	// begin receive over i2c
	if( ackFlag )
    56c8:	88 23       	and	r24, r24
    56ca:	29 f0       	breq	.+10     	; 0x56d6 <i2cReceiveByte+0xe>
	{
		// ackFlag = TRUE: ACK the recevied data
		outb(TWCR, (inb(TWCR)&TWCR_CMD_MASK)|BV(TWINT)|BV(TWEA));
    56cc:	80 91 bc 00 	lds	r24, 0x00BC
    56d0:	8f 70       	andi	r24, 0x0F	; 15
    56d2:	80 6c       	ori	r24, 0xC0	; 192
    56d4:	04 c0       	rjmp	.+8      	; 0x56de <i2cReceiveByte+0x16>
	}
	else
	{
		// ackFlag = FALSE: NACK the recevied data
		outb(TWCR, (inb(TWCR)&TWCR_CMD_MASK)|BV(TWINT));
    56d6:	80 91 bc 00 	lds	r24, 0x00BC
    56da:	8f 70       	andi	r24, 0x0F	; 15
    56dc:	80 68       	ori	r24, 0x80	; 128
    56de:	80 93 bc 00 	sts	0x00BC, r24
    56e2:	08 95       	ret

000056e4 <i2cGetReceivedByte>:
}

inline u08 i2cGetReceivedByte(void)
{
	// retieve received data byte from i2c TWDR
	return( inb(TWDR) );
    56e4:	80 91 bb 00 	lds	r24, 0x00BB
}
    56e8:	08 95       	ret

000056ea <i2cGetStatus>:

inline u08 i2cGetStatus(void)
{
	// retieve current i2c status from i2c TWSR
	return( inb(TWSR) );
    56ea:	80 91 b9 00 	lds	r24, 0x00B9
}
    56ee:	08 95       	ret

000056f0 <i2cMasterSendNI>:
	for(i=0; i<length; i++)
	  *data++ = I2cReceiveData[i];
}*/

u08 i2cMasterSendNI(u08 deviceAddr, u08 length, u08* data)
{
    56f0:	98 2f       	mov	r25, r24
    56f2:	fa 01       	movw	r30, r20
	u08 retval = I2C_OK;

	// disable TWI interrupt
	cbi(TWCR, TWIE);
    56f4:	80 91 bc 00 	lds	r24, 0x00BC
    56f8:	8e 7f       	andi	r24, 0xFE	; 254
    56fa:	80 93 bc 00 	sts	0x00BC, r24
}*/

inline void i2cSendStart(void)
{
	// send start condition
	outb(TWCR, (inb(TWCR)&TWCR_CMD_MASK)|BV(TWINT)|BV(TWSTA));
    56fe:	80 91 bc 00 	lds	r24, 0x00BC
    5702:	8f 70       	andi	r24, 0x0F	; 15
    5704:	80 6a       	ori	r24, 0xA0	; 160
    5706:	80 93 bc 00 	sts	0x00BC, r24
}

inline void i2cWaitForComplete(void)
{
	// wait for i2c interface to complete operation
	while( !(inb(TWCR) & BV(TWINT)) );
    570a:	80 91 bc 00 	lds	r24, 0x00BC
    570e:	87 ff       	sbrs	r24, 7
    5710:	fc cf       	rjmp	.-8      	; 0x570a <i2cMasterSendNI+0x1a>
	// send start condition
	i2cSendStart();
	i2cWaitForComplete();

	// send device address with write
	i2cSendByte( deviceAddr & 0xFE );
    5712:	9e 7f       	andi	r25, 0xFE	; 254
}

inline void i2cSendByte(u08 data)
{
	// save data to the TWDR
	outb(TWDR, data);
    5714:	90 93 bb 00 	sts	0x00BB, r25
	// begin send
	outb(TWCR, (inb(TWCR)&TWCR_CMD_MASK)|BV(TWINT));
    5718:	80 91 bc 00 	lds	r24, 0x00BC
    571c:	8f 70       	andi	r24, 0x0F	; 15
    571e:	80 68       	ori	r24, 0x80	; 128
    5720:	80 93 bc 00 	sts	0x00BC, r24
}

inline void i2cWaitForComplete(void)
{
	// wait for i2c interface to complete operation
	while( !(inb(TWCR) & BV(TWINT)) );
    5724:	80 91 bc 00 	lds	r24, 0x00BC
    5728:	87 ff       	sbrs	r24, 7
    572a:	fc cf       	rjmp	.-8      	; 0x5724 <i2cMasterSendNI+0x34>
	// send device address with write
	i2cSendByte( deviceAddr & 0xFE );
	i2cWaitForComplete();

	// check if device is present and live
	if( inb(TWSR) == TW_MT_SLA_ACK)
    572c:	80 91 b9 00 	lds	r24, 0x00B9
    5730:	88 31       	cpi	r24, 0x18	; 24
    5732:	89 f0       	breq	.+34     	; 0x5756 <i2cMasterSendNI+0x66>
    5734:	91 e0       	ldi	r25, 0x01	; 1
    5736:	12 c0       	rjmp	.+36     	; 0x575c <i2cMasterSendNI+0x6c>
	{
		// send data
		while(length)
		{
			i2cSendByte( *data++ );
    5738:	80 81       	ld	r24, Z
}

inline void i2cSendByte(u08 data)
{
	// save data to the TWDR
	outb(TWDR, data);
    573a:	80 93 bb 00 	sts	0x00BB, r24
	// begin send
	outb(TWCR, (inb(TWCR)&TWCR_CMD_MASK)|BV(TWINT));
    573e:	80 91 bc 00 	lds	r24, 0x00BC
    5742:	8f 70       	andi	r24, 0x0F	; 15
    5744:	80 68       	ori	r24, 0x80	; 128
    5746:	80 93 bc 00 	sts	0x00BC, r24
}

inline void i2cWaitForComplete(void)
{
	// wait for i2c interface to complete operation
	while( !(inb(TWCR) & BV(TWINT)) );
    574a:	80 91 bc 00 	lds	r24, 0x00BC
    574e:	87 ff       	sbrs	r24, 7
    5750:	fc cf       	rjmp	.-8      	; 0x574a <i2cMasterSendNI+0x5a>
	if( inb(TWSR) == TW_MT_SLA_ACK)
	{
		// send data
		while(length)
		{
			i2cSendByte( *data++ );
    5752:	31 96       	adiw	r30, 0x01	; 1
			i2cWaitForComplete();
			length--;
    5754:	61 50       	subi	r22, 0x01	; 1

	// check if device is present and live
	if( inb(TWSR) == TW_MT_SLA_ACK)
	{
		// send data
		while(length)
    5756:	66 23       	and	r22, r22
    5758:	79 f7       	brne	.-34     	; 0x5738 <i2cMasterSendNI+0x48>
    575a:	90 e0       	ldi	r25, 0x00	; 0

inline void i2cSendStop(void)
{
	// transmit stop condition
	// leave with TWEA on for slave receiving
	outb(TWCR, (inb(TWCR)&TWCR_CMD_MASK)|BV(TWINT)|BV(TWEA)|BV(TWSTO));
    575c:	80 91 bc 00 	lds	r24, 0x00BC
    5760:	8f 70       	andi	r24, 0x0F	; 15
    5762:	80 6d       	ori	r24, 0xD0	; 208
    5764:	80 93 bc 00 	sts	0x00BC, r24
	}

	// transmit stop condition
	// leave with TWEA on for slave receiving
	i2cSendStop();
	while( !(inb(TWCR) & BV(TWSTO)) );
    5768:	80 91 bc 00 	lds	r24, 0x00BC
    576c:	84 ff       	sbrs	r24, 4
    576e:	fc cf       	rjmp	.-8      	; 0x5768 <i2cMasterSendNI+0x78>

	// enable TWI interrupt
	sbi(TWCR, TWIE);
    5770:	80 91 bc 00 	lds	r24, 0x00BC
    5774:	81 60       	ori	r24, 0x01	; 1
    5776:	80 93 bc 00 	sts	0x00BC, r24

	return retval;
}
    577a:	89 2f       	mov	r24, r25
    577c:	08 95       	ret

0000577e <i2cMasterReceiveNI>:

u08 i2cMasterReceiveNI(u08 deviceAddr, u08 length, u08 *data)
{
    577e:	1f 93       	push	r17
    5780:	cf 93       	push	r28
    5782:	df 93       	push	r29
    5784:	98 2f       	mov	r25, r24
    5786:	16 2f       	mov	r17, r22
    5788:	ea 01       	movw	r28, r20
	u08 retval = I2C_OK;

	// disable TWI interrupt
	cbi(TWCR, TWIE);
    578a:	80 91 bc 00 	lds	r24, 0x00BC
    578e:	8e 7f       	andi	r24, 0xFE	; 254
    5790:	80 93 bc 00 	sts	0x00BC, r24
}*/

inline void i2cSendStart(void)
{
	// send start condition
	outb(TWCR, (inb(TWCR)&TWCR_CMD_MASK)|BV(TWINT)|BV(TWSTA));
    5794:	80 91 bc 00 	lds	r24, 0x00BC
    5798:	8f 70       	andi	r24, 0x0F	; 15
    579a:	80 6a       	ori	r24, 0xA0	; 160
    579c:	80 93 bc 00 	sts	0x00BC, r24
}

inline void i2cWaitForComplete(void)
{
	// wait for i2c interface to complete operation
	while( !(inb(TWCR) & BV(TWINT)) );
    57a0:	80 91 bc 00 	lds	r24, 0x00BC
    57a4:	87 ff       	sbrs	r24, 7
    57a6:	fc cf       	rjmp	.-8      	; 0x57a0 <i2cMasterReceiveNI+0x22>
	// send start condition
	i2cSendStart();
	i2cWaitForComplete();

	// send device address with read
	i2cSendByte( deviceAddr | 0x01 );
    57a8:	91 60       	ori	r25, 0x01	; 1
}

inline void i2cSendByte(u08 data)
{
	// save data to the TWDR
	outb(TWDR, data);
    57aa:	90 93 bb 00 	sts	0x00BB, r25
	// begin send
	outb(TWCR, (inb(TWCR)&TWCR_CMD_MASK)|BV(TWINT));
    57ae:	80 91 bc 00 	lds	r24, 0x00BC
    57b2:	8f 70       	andi	r24, 0x0F	; 15
    57b4:	80 68       	ori	r24, 0x80	; 128
    57b6:	80 93 bc 00 	sts	0x00BC, r24
}

inline void i2cWaitForComplete(void)
{
	// wait for i2c interface to complete operation
	while( !(inb(TWCR) & BV(TWINT)) );
    57ba:	80 91 bc 00 	lds	r24, 0x00BC
    57be:	87 ff       	sbrs	r24, 7
    57c0:	fc cf       	rjmp	.-8      	; 0x57ba <i2cMasterReceiveNI+0x3c>
	// send device address with read
	i2cSendByte( deviceAddr | 0x01 );
	i2cWaitForComplete();

	// check if device is present and live
	if( inb(TWSR) == TW_MR_SLA_ACK)
    57c2:	80 91 b9 00 	lds	r24, 0x00B9
    57c6:	80 34       	cpi	r24, 0x40	; 64
    57c8:	69 f0       	breq	.+26     	; 0x57e4 <i2cMasterReceiveNI+0x66>
    57ca:	91 e0       	ldi	r25, 0x01	; 1
    57cc:	18 c0       	rjmp	.+48     	; 0x57fe <i2cMasterReceiveNI+0x80>
	{
		// accept receive data and ack it
		while(length > 1)
		{
			i2cReceiveByte(TRUE);
    57ce:	8f ef       	ldi	r24, 0xFF	; 255
    57d0:	0e 94 64 2b 	call	0x56c8	; 0x56c8 <i2cReceiveByte>
}

inline void i2cWaitForComplete(void)
{
	// wait for i2c interface to complete operation
	while( !(inb(TWCR) & BV(TWINT)) );
    57d4:	80 91 bc 00 	lds	r24, 0x00BC
    57d8:	87 ff       	sbrs	r24, 7
    57da:	fc cf       	rjmp	.-8      	; 0x57d4 <i2cMasterReceiveNI+0x56>
}

inline u08 i2cGetReceivedByte(void)
{
	// retieve received data byte from i2c TWDR
	return( inb(TWDR) );
    57dc:	80 91 bb 00 	lds	r24, 0x00BB
		// accept receive data and ack it
		while(length > 1)
		{
			i2cReceiveByte(TRUE);
			i2cWaitForComplete();
			*data++ = i2cGetReceivedByte();
    57e0:	89 93       	st	Y+, r24
			// decrement length
			length--;
    57e2:	11 50       	subi	r17, 0x01	; 1

	// check if device is present and live
	if( inb(TWSR) == TW_MR_SLA_ACK)
	{
		// accept receive data and ack it
		while(length > 1)
    57e4:	12 30       	cpi	r17, 0x02	; 2
    57e6:	98 f7       	brcc	.-26     	; 0x57ce <i2cMasterReceiveNI+0x50>
			// decrement length
			length--;
		}

		// accept receive data and nack it (last-byte signal)
		i2cReceiveByte(FALSE);
    57e8:	80 e0       	ldi	r24, 0x00	; 0
    57ea:	0e 94 64 2b 	call	0x56c8	; 0x56c8 <i2cReceiveByte>
}

inline void i2cWaitForComplete(void)
{
	// wait for i2c interface to complete operation
	while( !(inb(TWCR) & BV(TWINT)) );
    57ee:	80 91 bc 00 	lds	r24, 0x00BC
    57f2:	87 ff       	sbrs	r24, 7
    57f4:	fc cf       	rjmp	.-8      	; 0x57ee <i2cMasterReceiveNI+0x70>
}

inline u08 i2cGetReceivedByte(void)
{
	// retieve received data byte from i2c TWDR
	return( inb(TWDR) );
    57f6:	80 91 bb 00 	lds	r24, 0x00BB
		}

		// accept receive data and nack it (last-byte signal)
		i2cReceiveByte(FALSE);
		i2cWaitForComplete();
		*data++ = i2cGetReceivedByte();
    57fa:	88 83       	st	Y, r24
    57fc:	90 e0       	ldi	r25, 0x00	; 0

inline void i2cSendStop(void)
{
	// transmit stop condition
	// leave with TWEA on for slave receiving
	outb(TWCR, (inb(TWCR)&TWCR_CMD_MASK)|BV(TWINT)|BV(TWEA)|BV(TWSTO));
    57fe:	80 91 bc 00 	lds	r24, 0x00BC
    5802:	8f 70       	andi	r24, 0x0F	; 15
    5804:	80 6d       	ori	r24, 0xD0	; 208
    5806:	80 93 bc 00 	sts	0x00BC, r24
	// transmit stop condition
	// leave with TWEA on for slave receiving
	i2cSendStop();

	// enable TWI interrupt
	sbi(TWCR, TWIE);
    580a:	80 91 bc 00 	lds	r24, 0x00BC
    580e:	81 60       	ori	r24, 0x01	; 1
    5810:	80 93 bc 00 	sts	0x00BC, r24

	return retval;
}
    5814:	89 2f       	mov	r24, r25
    5816:	df 91       	pop	r29
    5818:	cf 91       	pop	r28
    581a:	1f 91       	pop	r17
    581c:	08 95       	ret

0000581e <glcdInitHW>:

	//TODO: make setup of chip select lines contingent on how
	// many controllers are actually in the display
	
	// initialize LCD control lines levels
	cbi(GLCD_CTRL_RS_PORT, GLCD_CTRL_RS);
    581e:	2f 98       	cbi	0x05, 7	; 5
	cbi(GLCD_CTRL_RW_PORT, GLCD_CTRL_RW);
    5820:	2d 98       	cbi	0x05, 5	; 5
	cbi(GLCD_CTRL_E_PORT, GLCD_CTRL_E);
    5822:	2c 98       	cbi	0x05, 4	; 5
	cbi(GLCD_CTRL_CS0_PORT, GLCD_CTRL_CS0);
    5824:	40 98       	cbi	0x08, 0	; 8
#ifdef GLCD_CTRL_CS1
	cbi(GLCD_CTRL_CS1_PORT, GLCD_CTRL_CS1);
    5826:	5a 98       	cbi	0x0b, 2	; 11
#endif
#ifdef GLCD_CTRL_RESET
	cbi(GLCD_CTRL_RESET_PORT, GLCD_CTRL_RESET);
#endif
	// initialize LCD control port to output
	sbi(GLCD_CTRL_RS_DDR, GLCD_CTRL_RS);
    5828:	27 9a       	sbi	0x04, 7	; 4
	sbi(GLCD_CTRL_RW_DDR, GLCD_CTRL_RW);
    582a:	25 9a       	sbi	0x04, 5	; 4
	sbi(GLCD_CTRL_E_DDR, GLCD_CTRL_E);
    582c:	24 9a       	sbi	0x04, 4	; 4
	sbi(GLCD_CTRL_CS0_DDR, GLCD_CTRL_CS0);
    582e:	38 9a       	sbi	0x07, 0	; 7
#ifdef GLCD_CTRL_CS1
	sbi(GLCD_CTRL_CS1_DDR, GLCD_CTRL_CS1);
    5830:	52 9a       	sbi	0x0a, 2	; 10
#endif
#ifdef GLCD_CTRL_RESET
	sbi(GLCD_CTRL_RESET_DDR, GLCD_CTRL_RESET);
#endif
	// initialize LCD data
	GLCD_DATAH_PORT &= ~(0xF0);
    5832:	8b b1       	in	r24, 0x0b	; 11
    5834:	8f 70       	andi	r24, 0x0F	; 15
    5836:	8b b9       	out	0x0b, r24	; 11
	GLCD_DATAL_PORT &= ~(0x0F);
    5838:	85 b1       	in	r24, 0x05	; 5
    583a:	80 7f       	andi	r24, 0xF0	; 240
    583c:	85 b9       	out	0x05, r24	; 5
	//outb(GLCD_DATA_PORT, 0x00);
	// initialize LCD data port to output
	GLCD_DATAH_DDR |= 0xF0;
    583e:	8a b1       	in	r24, 0x0a	; 10
    5840:	80 6f       	ori	r24, 0xF0	; 240
    5842:	8a b9       	out	0x0a, r24	; 10
	GLCD_DATAL_DDR |= 0x0F;
    5844:	84 b1       	in	r24, 0x04	; 4
    5846:	8f 60       	ori	r24, 0x0F	; 15
    5848:	84 b9       	out	0x04, r24	; 4
	//outb(GLCD_DATA_DDR, 0xFF);
#endif
}
    584a:	08 95       	ret

0000584c <glcdControllerSelect>:
#ifdef GLCD_PORT_INTERFACE
	//TODO: make control of chip select lines contingent on how
	// many controllers are actually in the display

	// unselect all controllers
	cbi(GLCD_CTRL_CS0_PORT, GLCD_CTRL_CS0);	
    584c:	40 98       	cbi	0x08, 0	; 8
#ifdef GLCD_CTRL_CS1
	cbi(GLCD_CTRL_CS1_PORT, GLCD_CTRL_CS1);
    584e:	5a 98       	cbi	0x0b, 2	; 11
#ifdef GLCD_CTRL_CS3
	cbi(GLCD_CTRL_CS3_PORT, GLCD_CTRL_CS3);
#endif

	// select requested controller
	switch(controller)
    5850:	88 23       	and	r24, r24
    5852:	19 f0       	breq	.+6      	; 0x585a <glcdControllerSelect+0xe>
    5854:	81 30       	cpi	r24, 0x01	; 1
    5856:	21 f4       	brne	.+8      	; 0x5860 <glcdControllerSelect+0x14>
    5858:	02 c0       	rjmp	.+4      	; 0x585e <glcdControllerSelect+0x12>
	{
	case 0:	sbi(GLCD_CTRL_CS0_PORT, GLCD_CTRL_CS0); break;
    585a:	40 9a       	sbi	0x08, 0	; 8
    585c:	08 95       	ret
#ifdef GLCD_CTRL_CS1
	case 1:	sbi(GLCD_CTRL_CS1_PORT, GLCD_CTRL_CS1); break;
    585e:	5a 9a       	sbi	0x0b, 2	; 11
    5860:	08 95       	ret

00005862 <glcdBusyWait>:
}

void glcdBusyWait(u08 controller)
{
#ifdef GLCD_PORT_INTERFACE
	cli();
    5862:	f8 94       	cli
	// wait until LCD busy bit goes to zero
	// select the controller chip
	glcdControllerSelect(controller);
    5864:	0e 94 26 2c 	call	0x584c	; 0x584c <glcdControllerSelect>
	// do a read from control register
	//outb(GLCD_DATA_PORT, 0xFF);
	GLCD_DATAH_PORT |= 0xF0;
    5868:	8b b1       	in	r24, 0x0b	; 11
    586a:	80 6f       	ori	r24, 0xF0	; 240
    586c:	8b b9       	out	0x0b, r24	; 11
	GLCD_DATAL_PORT |= 0x0F;
    586e:	85 b1       	in	r24, 0x05	; 5
    5870:	8f 60       	ori	r24, 0x0F	; 15
    5872:	85 b9       	out	0x05, r24	; 5

	cbi(GLCD_CTRL_RS_PORT, GLCD_CTRL_RS);
    5874:	2f 98       	cbi	0x05, 7	; 5
	//outb(GLCD_DATA_DDR, 0x00);
	GLCD_DATAH_DDR &= ~(0xF0);
    5876:	8a b1       	in	r24, 0x0a	; 10
    5878:	8f 70       	andi	r24, 0x0F	; 15
    587a:	8a b9       	out	0x0a, r24	; 10
	GLCD_DATAL_DDR &= ~(0x0F);
    587c:	84 b1       	in	r24, 0x04	; 4
    587e:	80 7f       	andi	r24, 0xF0	; 240
    5880:	84 b9       	out	0x04, r24	; 4
	sbi(GLCD_CTRL_RW_PORT, GLCD_CTRL_RW);
    5882:	2d 9a       	sbi	0x05, 5	; 5
	sbi(GLCD_CTRL_E_PORT, GLCD_CTRL_E);
    5884:	2c 9a       	sbi	0x05, 4	; 5
	asm volatile ("nop"); asm volatile ("nop");
    5886:	00 00       	nop
    5888:	00 00       	nop
    588a:	0a c0       	rjmp	.+20     	; 0x58a0 <glcdBusyWait+0x3e>
	//while(inb(GLCD_DATA_PIN) & GLCD_STATUS_BUSY)
	while(((GLCD_DATAH_PIN & 0xF0) | (GLCD_DATAL_PIN & 0x0F)) & GLCD_STATUS_BUSY)
	{
		cbi(GLCD_CTRL_E_PORT, GLCD_CTRL_E);
    588c:	2c 98       	cbi	0x05, 4	; 5
	...
		asm volatile ("nop"); asm volatile ("nop");
		asm volatile ("nop"); asm volatile ("nop");
		sbi(GLCD_CTRL_E_PORT, GLCD_CTRL_E);
    5896:	2c 9a       	sbi	0x05, 4	; 5
	...
	GLCD_DATAL_DDR &= ~(0x0F);
	sbi(GLCD_CTRL_RW_PORT, GLCD_CTRL_RW);
	sbi(GLCD_CTRL_E_PORT, GLCD_CTRL_E);
	asm volatile ("nop"); asm volatile ("nop");
	//while(inb(GLCD_DATA_PIN) & GLCD_STATUS_BUSY)
	while(((GLCD_DATAH_PIN & 0xF0) | (GLCD_DATAL_PIN & 0x0F)) & GLCD_STATUS_BUSY)
    58a0:	89 b1       	in	r24, 0x09	; 9
    58a2:	93 b1       	in	r25, 0x03	; 3
    58a4:	87 fd       	sbrc	r24, 7
    58a6:	f2 cf       	rjmp	.-28     	; 0x588c <glcdBusyWait+0x2a>
		asm volatile ("nop"); asm volatile ("nop");
		sbi(GLCD_CTRL_E_PORT, GLCD_CTRL_E);
		asm volatile ("nop"); asm volatile ("nop");
		asm volatile ("nop"); asm volatile ("nop");
	}
	cbi(GLCD_CTRL_E_PORT, GLCD_CTRL_E);
    58a8:	2c 98       	cbi	0x05, 4	; 5
	cbi(GLCD_CTRL_RW_PORT, GLCD_CTRL_RW);
    58aa:	2d 98       	cbi	0x05, 5	; 5
	//	outb(GLCD_DATA_DDR, 0xFF);
	GLCD_DATAH_DDR |= 0xF0;
    58ac:	8a b1       	in	r24, 0x0a	; 10
    58ae:	80 6f       	ori	r24, 0xF0	; 240
    58b0:	8a b9       	out	0x0a, r24	; 10
	GLCD_DATAL_DDR |= 0x0F;
    58b2:	84 b1       	in	r24, 0x04	; 4
    58b4:	8f 60       	ori	r24, 0x0F	; 15
    58b6:	84 b9       	out	0x04, r24	; 4
	sei();
    58b8:	78 94       	sei
	// wait until LCD busy bit goes to zero
	while(*(volatile unsigned char *)
		(GLCD_CONTROLLER0_CTRL_ADDR + GLCD_CONTROLLER_ADDR_OFFSET*controller) & GLCD_STATUS_BUSY);
	// cbi(MCUCR, SRW);			// disable RAM waitstate
#endif
}
    58ba:	08 95       	ret

000058bc <glcdControlWrite>:

void glcdControlWrite(u08 controller, u08 data)
{
    58bc:	1f 93       	push	r17
    58be:	16 2f       	mov	r17, r22
#ifdef GLCD_PORT_INTERFACE
	cli();
    58c0:	f8 94       	cli
	glcdBusyWait(controller);	// wait until LCD not busy
    58c2:	0e 94 31 2c 	call	0x5862	; 0x5862 <glcdBusyWait>
	cbi(GLCD_CTRL_RS_PORT, GLCD_CTRL_RS);
    58c6:	2f 98       	cbi	0x05, 7	; 5
	cbi(GLCD_CTRL_RW_PORT, GLCD_CTRL_RW);
    58c8:	2d 98       	cbi	0x05, 5	; 5
	sbi(GLCD_CTRL_E_PORT, GLCD_CTRL_E);
    58ca:	2c 9a       	sbi	0x05, 4	; 5
	//outb(GLCD_DATA_DDR, 0xFF);
	GLCD_DATAH_DDR |= 0xF0;
    58cc:	8a b1       	in	r24, 0x0a	; 10
    58ce:	80 6f       	ori	r24, 0xF0	; 240
    58d0:	8a b9       	out	0x0a, r24	; 10
	GLCD_DATAL_DDR |= 0x0F;
    58d2:	84 b1       	in	r24, 0x04	; 4
    58d4:	8f 60       	ori	r24, 0x0F	; 15
    58d6:	84 b9       	out	0x04, r24	; 4
	//outb(GLCD_DATA_PORT, data);
	GLCD_DATAH_PORT &= ~0xF0; // clear top nibble
    58d8:	8b b1       	in	r24, 0x0b	; 11
    58da:	8f 70       	andi	r24, 0x0F	; 15
    58dc:	8b b9       	out	0x0b, r24	; 11
	GLCD_DATAH_PORT |= data & 0xF0; // set top nibble
    58de:	9b b1       	in	r25, 0x0b	; 11
    58e0:	81 2f       	mov	r24, r17
    58e2:	80 7f       	andi	r24, 0xF0	; 240
    58e4:	89 2b       	or	r24, r25
    58e6:	8b b9       	out	0x0b, r24	; 11
	GLCD_DATAL_PORT &= ~0x0F; // clear bottom nibble
    58e8:	85 b1       	in	r24, 0x05	; 5
    58ea:	80 7f       	andi	r24, 0xF0	; 240
    58ec:	85 b9       	out	0x05, r24	; 5
	GLCD_DATAL_PORT |= data & 0x0F; // set bottom nibble
    58ee:	85 b1       	in	r24, 0x05	; 5
    58f0:	1f 70       	andi	r17, 0x0F	; 15
    58f2:	81 2b       	or	r24, r17
    58f4:	85 b9       	out	0x05, r24	; 5
	...
	asm volatile ("nop"); asm volatile ("nop");
	asm volatile ("nop"); asm volatile ("nop");
	asm volatile ("nop"); asm volatile ("nop");
	asm volatile ("nop"); asm volatile ("nop");
	cbi(GLCD_CTRL_E_PORT, GLCD_CTRL_E);
    5906:	2c 98       	cbi	0x05, 4	; 5
	sei();
    5908:	78 94       	sei
	//sbi(MCUCR, SRW);				// enable RAM waitstate
	glcdBusyWait(controller);		// wait until LCD not busy
	*(volatile unsigned char *) (GLCD_CONTROLLER0_CTRL_ADDR + GLCD_CONTROLLER_ADDR_OFFSET*controller) = data;
	//cbi(MCUCR, SRW);				// disable RAM waitstate
#endif
}
    590a:	1f 91       	pop	r17
    590c:	08 95       	ret

0000590e <glcdControlRead>:

u08 glcdControlRead(u08 controller)
{
	register u08 data;
#ifdef GLCD_PORT_INTERFACE
	cli();
    590e:	f8 94       	cli
	glcdBusyWait(controller);		// wait until LCD not busy
    5910:	0e 94 31 2c 	call	0x5862	; 0x5862 <glcdBusyWait>
	cbi(GLCD_CTRL_RS_PORT, GLCD_CTRL_RS);
    5914:	2f 98       	cbi	0x05, 7	; 5
	//outb(GLCD_DATA_DDR, 0x00);
	GLCD_DATAH_DDR &= ~(0xF0);
    5916:	8a b1       	in	r24, 0x0a	; 10
    5918:	8f 70       	andi	r24, 0x0F	; 15
    591a:	8a b9       	out	0x0a, r24	; 10
	GLCD_DATAL_DDR &= ~(0x0F);
    591c:	84 b1       	in	r24, 0x04	; 4
    591e:	80 7f       	andi	r24, 0xF0	; 240
    5920:	84 b9       	out	0x04, r24	; 4
	sbi(GLCD_CTRL_RW_PORT, GLCD_CTRL_RW);
    5922:	2d 9a       	sbi	0x05, 5	; 5
	sbi(GLCD_CTRL_E_PORT, GLCD_CTRL_E);
    5924:	2c 9a       	sbi	0x05, 4	; 5
	...
	asm volatile ("nop"); asm volatile ("nop");
	asm volatile ("nop"); asm volatile ("nop");
	asm volatile ("nop"); asm volatile ("nop");
	asm volatile ("nop"); asm volatile ("nop");
	//data = inb(GLCD_DATA_PIN);
	data = (GLCD_DATAH_PIN & 0xF0) | (GLCD_DATAL_PIN & 0x0F);
    5936:	29 b1       	in	r18, 0x09	; 9
    5938:	83 b1       	in	r24, 0x03	; 3
	cbi(GLCD_CTRL_E_PORT, GLCD_CTRL_E);
    593a:	2c 98       	cbi	0x05, 4	; 5
	cbi(GLCD_CTRL_RW_PORT, GLCD_CTRL_RW);
    593c:	2d 98       	cbi	0x05, 5	; 5
	//outb(GLCD_DATA_DDR, 0xFF);
	GLCD_DATAH_DDR |= 0xF0;
    593e:	9a b1       	in	r25, 0x0a	; 10
    5940:	90 6f       	ori	r25, 0xF0	; 240
    5942:	9a b9       	out	0x0a, r25	; 10
	GLCD_DATAL_DDR |= 0x0F;
    5944:	94 b1       	in	r25, 0x04	; 4
    5946:	9f 60       	ori	r25, 0x0F	; 15
    5948:	94 b9       	out	0x04, r25	; 4
	sei();
    594a:	78 94       	sei
    594c:	8f 70       	andi	r24, 0x0F	; 15
    594e:	20 7f       	andi	r18, 0xF0	; 240
	glcdBusyWait(controller);		// wait until LCD not busy
	data = *(volatile unsigned char *) (GLCD_CONTROLLER0_CTRL_ADDR + GLCD_CONTROLLER_ADDR_OFFSET*controller);
	//cbi(MCUCR, SRW);				// disable RAM waitstate
#endif
	return data;
}
    5950:	82 2b       	or	r24, r18
    5952:	08 95       	ret

00005954 <glcdDataRead>:
u08 glcdDataRead(void)
{
	register u08 data;
	register u08 controller = (GrLcdState.lcdXAddr/GLCD_CONTROLLER_XPIXELS);
#ifdef GLCD_PORT_INTERFACE
	cli();
    5954:	f8 94       	cli
	glcdBusyWait(controller);		// wait until LCD not busy
    5956:	80 91 24 03 	lds	r24, 0x0324
    595a:	82 95       	swap	r24
    595c:	86 95       	lsr	r24
    595e:	86 95       	lsr	r24
    5960:	83 70       	andi	r24, 0x03	; 3
    5962:	0e 94 31 2c 	call	0x5862	; 0x5862 <glcdBusyWait>
	sbi(GLCD_CTRL_RS_PORT, GLCD_CTRL_RS);
    5966:	2f 9a       	sbi	0x05, 7	; 5
	//outb(GLCD_DATA_DDR, 0x00);
	GLCD_DATAH_DDR &= ~(0xF0);
    5968:	8a b1       	in	r24, 0x0a	; 10
    596a:	8f 70       	andi	r24, 0x0F	; 15
    596c:	8a b9       	out	0x0a, r24	; 10
	GLCD_DATAL_DDR &= ~(0x0F);
    596e:	84 b1       	in	r24, 0x04	; 4
    5970:	80 7f       	andi	r24, 0xF0	; 240
    5972:	84 b9       	out	0x04, r24	; 4

	sbi(GLCD_CTRL_RW_PORT, GLCD_CTRL_RW);
    5974:	2d 9a       	sbi	0x05, 5	; 5
	sbi(GLCD_CTRL_E_PORT, GLCD_CTRL_E);
    5976:	2c 9a       	sbi	0x05, 4	; 5
	...
	asm volatile ("nop"); asm volatile ("nop");
	asm volatile ("nop"); asm volatile ("nop");
	asm volatile ("nop"); asm volatile ("nop");
	asm volatile ("nop"); asm volatile ("nop");
	//data = inb(GLCD_DATA_PIN);
	data = (GLCD_DATAH_PIN & 0xF0) | (GLCD_DATAL_PIN & 0x0F);
    5988:	99 b1       	in	r25, 0x09	; 9
    598a:	83 b1       	in	r24, 0x03	; 3

	cbi(GLCD_CTRL_E_PORT, GLCD_CTRL_E);
    598c:	2c 98       	cbi	0x05, 4	; 5
	cbi(GLCD_CTRL_RW_PORT, GLCD_CTRL_RW);
    598e:	2d 98       	cbi	0x05, 5	; 5
	sei();
    5990:	78 94       	sei
    5992:	8f 70       	andi	r24, 0x0F	; 15
    5994:	90 7f       	andi	r25, 0xF0	; 240
		GrLcdState.lcdYAddr++;
		glcdSetYAddress(GrLcdState.lcdYAddr);
		glcdSetXAddress(0);
		}*/
	return data;
}
    5996:	89 2b       	or	r24, r25
    5998:	08 95       	ret

0000599a <glcdReset>:
		cbi(GLCD_CTRL_RESET_PORT, GLCD_CTRL_RESET);
	else
		sbi(GLCD_CTRL_RESET_PORT, GLCD_CTRL_RESET);
#endif
#endif
}
    599a:	08 95       	ret

0000599c <glcdSetXAddress>:

void glcdSetXAddress(u08 xAddr)
{
	u08 i;
	// record address change locally
	GrLcdState.lcdXAddr = xAddr;
    599c:	80 93 24 03 	sts	0x0324, r24
	
	// clear y (col) address on all controllers
	for(i=0; i<GLCD_NUM_CONTROLLERS; i++)
	{
		glcdControlWrite(i, GLCD_SET_Y_ADDR | 0x00);
    59a0:	80 e0       	ldi	r24, 0x00	; 0
    59a2:	60 e4       	ldi	r22, 0x40	; 64
    59a4:	0e 94 5e 2c 	call	0x58bc	; 0x58bc <glcdControlWrite>
		GrLcdState.ctrlr[i].xAddr = 0;
    59a8:	10 92 26 03 	sts	0x0326, r1
	GrLcdState.lcdXAddr = xAddr;
	
	// clear y (col) address on all controllers
	for(i=0; i<GLCD_NUM_CONTROLLERS; i++)
	{
		glcdControlWrite(i, GLCD_SET_Y_ADDR | 0x00);
    59ac:	81 e0       	ldi	r24, 0x01	; 1
    59ae:	60 e4       	ldi	r22, 0x40	; 64
    59b0:	0e 94 5e 2c 	call	0x58bc	; 0x58bc <glcdControlWrite>
		GrLcdState.ctrlr[i].xAddr = 0;
    59b4:	10 92 28 03 	sts	0x0328, r1
	}

	// set y (col) address on destination controller
	glcdControlWrite((GrLcdState.lcdXAddr/GLCD_CONTROLLER_XPIXELS),
    59b8:	80 91 24 03 	lds	r24, 0x0324
    59bc:	68 2f       	mov	r22, r24
    59be:	6f 73       	andi	r22, 0x3F	; 63
    59c0:	60 64       	ori	r22, 0x40	; 64
    59c2:	82 95       	swap	r24
    59c4:	86 95       	lsr	r24
    59c6:	86 95       	lsr	r24
    59c8:	83 70       	andi	r24, 0x03	; 3
    59ca:	0e 94 5e 2c 	call	0x58bc	; 0x58bc <glcdControlWrite>
		GLCD_SET_Y_ADDR | (GrLcdState.lcdXAddr & 0x3F));
}
    59ce:	08 95       	ret

000059d0 <glcdSetYAddress>:

void glcdSetYAddress(u08 yAddr)
{
    59d0:	1f 93       	push	r17
    59d2:	18 2f       	mov	r17, r24
	u08 i;
	// record address change locally
	GrLcdState.lcdYAddr = yAddr;
    59d4:	80 93 25 03 	sts	0x0325, r24
	// set page address for all controllers
	for(i=0; i<GLCD_NUM_CONTROLLERS; i++)
	{
		glcdControlWrite(i, GLCD_SET_PAGE | yAddr);
    59d8:	18 6b       	ori	r17, 0xB8	; 184
    59da:	80 e0       	ldi	r24, 0x00	; 0
    59dc:	61 2f       	mov	r22, r17
    59de:	0e 94 5e 2c 	call	0x58bc	; 0x58bc <glcdControlWrite>
    59e2:	81 e0       	ldi	r24, 0x01	; 1
    59e4:	61 2f       	mov	r22, r17
    59e6:	0e 94 5e 2c 	call	0x58bc	; 0x58bc <glcdControlWrite>
	}
}
    59ea:	1f 91       	pop	r17
    59ec:	08 95       	ret

000059ee <glcdDataWrite>:
#endif
	return data;
}

void glcdDataWrite(u08 data)
{
    59ee:	0f 93       	push	r16
    59f0:	1f 93       	push	r17
    59f2:	18 2f       	mov	r17, r24
	register u08 controller = (GrLcdState.lcdXAddr/GLCD_CONTROLLER_XPIXELS);
    59f4:	00 91 24 03 	lds	r16, 0x0324
    59f8:	02 95       	swap	r16
    59fa:	06 95       	lsr	r16
    59fc:	06 95       	lsr	r16
    59fe:	03 70       	andi	r16, 0x03	; 3
#ifdef GLCD_PORT_INTERFACE
	cli();
    5a00:	f8 94       	cli
	glcdBusyWait(controller);		// wait until LCD not busy
    5a02:	80 2f       	mov	r24, r16
    5a04:	0e 94 31 2c 	call	0x5862	; 0x5862 <glcdBusyWait>
	sbi(GLCD_CTRL_RS_PORT, GLCD_CTRL_RS);
    5a08:	2f 9a       	sbi	0x05, 7	; 5
	cbi(GLCD_CTRL_RW_PORT, GLCD_CTRL_RW);
    5a0a:	2d 98       	cbi	0x05, 5	; 5
	sbi(GLCD_CTRL_E_PORT, GLCD_CTRL_E);
    5a0c:	2c 9a       	sbi	0x05, 4	; 5
	//outb(GLCD_DATA_DDR, 0xFF);
	GLCD_DATAH_DDR |= 0xF0;
    5a0e:	8a b1       	in	r24, 0x0a	; 10
    5a10:	80 6f       	ori	r24, 0xF0	; 240
    5a12:	8a b9       	out	0x0a, r24	; 10
	GLCD_DATAL_DDR |= 0x0F;
    5a14:	84 b1       	in	r24, 0x04	; 4
    5a16:	8f 60       	ori	r24, 0x0F	; 15
    5a18:	84 b9       	out	0x04, r24	; 4

	//outb(GLCD_DATA_PORT, data);
	GLCD_DATAH_PORT &= ~0xF0; // clear top nibble
    5a1a:	8b b1       	in	r24, 0x0b	; 11
    5a1c:	8f 70       	andi	r24, 0x0F	; 15
    5a1e:	8b b9       	out	0x0b, r24	; 11
	GLCD_DATAH_PORT |= data & 0xF0; // set top nibble
    5a20:	9b b1       	in	r25, 0x0b	; 11
    5a22:	81 2f       	mov	r24, r17
    5a24:	80 7f       	andi	r24, 0xF0	; 240
    5a26:	89 2b       	or	r24, r25
    5a28:	8b b9       	out	0x0b, r24	; 11
	GLCD_DATAL_PORT &= ~0x0F; // clear bottom nibble
    5a2a:	85 b1       	in	r24, 0x05	; 5
    5a2c:	80 7f       	andi	r24, 0xF0	; 240
    5a2e:	85 b9       	out	0x05, r24	; 5
	GLCD_DATAL_PORT |= data & 0x0F; // set bottom nibble
    5a30:	85 b1       	in	r24, 0x05	; 5
    5a32:	1f 70       	andi	r17, 0x0F	; 15
    5a34:	81 2b       	or	r24, r17
    5a36:	85 b9       	out	0x05, r24	; 5
	...

	asm volatile ("nop"); asm volatile ("nop");
	asm volatile ("nop"); asm volatile ("nop");
	asm volatile ("nop"); asm volatile ("nop");
	asm volatile ("nop"); asm volatile ("nop");
	cbi(GLCD_CTRL_E_PORT, GLCD_CTRL_E);
    5a48:	2c 98       	cbi	0x05, 4	; 5
	sei();
    5a4a:	78 94       	sei
	*(volatile unsigned char *) (GLCD_CONTROLLER0_CTRL_ADDR + GLCD_CONTROLLER_ADDR_OFFSET*controller) = data;
	//cbi(MCUCR, SRW);				// disable RAM waitstate
#endif
	
	// increment our local address counter
	GrLcdState.ctrlr[controller].xAddr++;
    5a4c:	e0 2f       	mov	r30, r16
    5a4e:	f0 e0       	ldi	r31, 0x00	; 0
    5a50:	ee 0f       	add	r30, r30
    5a52:	ff 1f       	adc	r31, r31
    5a54:	ea 5d       	subi	r30, 0xDA	; 218
    5a56:	fc 4f       	sbci	r31, 0xFC	; 252
    5a58:	80 81       	ld	r24, Z
    5a5a:	8f 5f       	subi	r24, 0xFF	; 255
    5a5c:	80 83       	st	Z, r24
	GrLcdState.lcdXAddr++;
    5a5e:	80 91 24 03 	lds	r24, 0x0324
    5a62:	8f 5f       	subi	r24, 0xFF	; 255
    5a64:	80 93 24 03 	sts	0x0324, r24
	if(GrLcdState.lcdXAddr >= GLCD_XPIXELS)
    5a68:	87 ff       	sbrs	r24, 7
    5a6a:	0a c0       	rjmp	.+20     	; 0x5a80 <glcdDataWrite+0x92>
	{
	  GrLcdState.lcdYAddr++;
    5a6c:	80 91 25 03 	lds	r24, 0x0325
    5a70:	8f 5f       	subi	r24, 0xFF	; 255
    5a72:	80 93 25 03 	sts	0x0325, r24
	  glcdSetYAddress(GrLcdState.lcdYAddr);
    5a76:	0e 94 e8 2c 	call	0x59d0	; 0x59d0 <glcdSetYAddress>
	  glcdSetXAddress(0);
    5a7a:	80 e0       	ldi	r24, 0x00	; 0
    5a7c:	0e 94 ce 2c 	call	0x599c	; 0x599c <glcdSetXAddress>
	}
}
    5a80:	1f 91       	pop	r17
    5a82:	0f 91       	pop	r16
    5a84:	08 95       	ret

00005a86 <glcdStartLine>:
		}
	}
}

void glcdStartLine(u08 start)
{
    5a86:	1f 93       	push	r17
	glcdControlWrite(0, GLCD_START_LINE | start);
    5a88:	18 2f       	mov	r17, r24
    5a8a:	10 6c       	ori	r17, 0xC0	; 192
    5a8c:	80 e0       	ldi	r24, 0x00	; 0
    5a8e:	61 2f       	mov	r22, r17
    5a90:	0e 94 5e 2c 	call	0x58bc	; 0x58bc <glcdControlWrite>
	glcdControlWrite(1, GLCD_START_LINE | start);
    5a94:	81 e0       	ldi	r24, 0x01	; 1
    5a96:	61 2f       	mov	r22, r17
    5a98:	0e 94 5e 2c 	call	0x58bc	; 0x58bc <glcdControlWrite>
}
    5a9c:	1f 91       	pop	r17
    5a9e:	08 95       	ret

00005aa0 <glcdSetAddress>:

void glcdSetAddress(u08 x, u08 yLine)
{
    5aa0:	1f 93       	push	r17
    5aa2:	18 2f       	mov	r17, r24
    5aa4:	86 2f       	mov	r24, r22
	// set addresses
	glcdSetYAddress(yLine);
    5aa6:	0e 94 e8 2c 	call	0x59d0	; 0x59d0 <glcdSetYAddress>
	glcdSetXAddress(x);
    5aaa:	81 2f       	mov	r24, r17
    5aac:	0e 94 ce 2c 	call	0x599c	; 0x599c <glcdSetXAddress>
}
    5ab0:	1f 91       	pop	r17
    5ab2:	08 95       	ret

00005ab4 <glcdClearScreen>:
		GrLcdState.ctrlr[i].yAddr = 0;
	}
}

void glcdClearScreen(void)
{
    5ab4:	0f 93       	push	r16
    5ab6:	1f 93       	push	r17
    5ab8:	00 e0       	ldi	r16, 0x00	; 0
	// clear LCD
	// loop through all pages
	for(pageAddr=0; pageAddr<(GLCD_YPIXELS>>3); pageAddr++)
	{
		// set page address
		glcdSetAddress(0, pageAddr);
    5aba:	80 e0       	ldi	r24, 0x00	; 0
    5abc:	60 2f       	mov	r22, r16
    5abe:	0e 94 50 2d 	call	0x5aa0	; 0x5aa0 <glcdSetAddress>
    5ac2:	10 e0       	ldi	r17, 0x00	; 0
		// clear all lines of this page of display memory
		for(xAddr=0; xAddr<GLCD_XPIXELS; xAddr++)
		{
			glcdDataWrite(0x00);
    5ac4:	80 e0       	ldi	r24, 0x00	; 0
    5ac6:	0e 94 f7 2c 	call	0x59ee	; 0x59ee <glcdDataWrite>
	for(pageAddr=0; pageAddr<(GLCD_YPIXELS>>3); pageAddr++)
	{
		// set page address
		glcdSetAddress(0, pageAddr);
		// clear all lines of this page of display memory
		for(xAddr=0; xAddr<GLCD_XPIXELS; xAddr++)
    5aca:	1f 5f       	subi	r17, 0xFF	; 255
    5acc:	10 38       	cpi	r17, 0x80	; 128
    5ace:	d1 f7       	brne	.-12     	; 0x5ac4 <glcdClearScreen+0x10>
	u08 pageAddr;
	u08 xAddr;

	// clear LCD
	// loop through all pages
	for(pageAddr=0; pageAddr<(GLCD_YPIXELS>>3); pageAddr++)
    5ad0:	0f 5f       	subi	r16, 0xFF	; 255
    5ad2:	08 30       	cpi	r16, 0x08	; 8
    5ad4:	91 f7       	brne	.-28     	; 0x5aba <glcdClearScreen+0x6>
		for(xAddr=0; xAddr<GLCD_XPIXELS; xAddr++)
		{
			glcdDataWrite(0x00);
		}
	}
}
    5ad6:	1f 91       	pop	r17
    5ad8:	0f 91       	pop	r16
    5ada:	08 95       	ret

00005adc <glcdHome>:

void glcdHome(void)
{
	u08 i;
	// initialize addresses/positions
	glcdStartLine(0);
    5adc:	80 e0       	ldi	r24, 0x00	; 0
    5ade:	0e 94 43 2d 	call	0x5a86	; 0x5a86 <glcdStartLine>
	glcdSetAddress(0,0);
    5ae2:	80 e0       	ldi	r24, 0x00	; 0
    5ae4:	60 e0       	ldi	r22, 0x00	; 0
    5ae6:	0e 94 50 2d 	call	0x5aa0	; 0x5aa0 <glcdSetAddress>
	// initialize local data structures
	for(i=0; i<GLCD_NUM_CONTROLLERS; i++)
	{
		GrLcdState.ctrlr[i].xAddr = 0;
    5aea:	10 92 26 03 	sts	0x0326, r1
		GrLcdState.ctrlr[i].yAddr = 0;
    5aee:	10 92 27 03 	sts	0x0327, r1
	glcdStartLine(0);
	glcdSetAddress(0,0);
	// initialize local data structures
	for(i=0; i<GLCD_NUM_CONTROLLERS; i++)
	{
		GrLcdState.ctrlr[i].xAddr = 0;
    5af2:	10 92 28 03 	sts	0x0328, r1
		GrLcdState.ctrlr[i].yAddr = 0;
    5af6:	10 92 29 03 	sts	0x0329, r1
	}
}
    5afa:	08 95       	ret

00005afc <glcdInit>:

void glcdInit()
{
	u08 i;
	// initialize hardware
	glcdInitHW();
    5afc:	0e 94 0f 2c 	call	0x581e	; 0x581e <glcdInitHW>
	// bring lcd out of reset
	glcdReset(FALSE);
	// Turn on LCD
	for(i=0; i<GLCD_NUM_CONTROLLERS; i++)
	{
		glcdControlWrite(i, GLCD_ON_CTRL | GLCD_ON_DISPLAY);
    5b00:	80 e0       	ldi	r24, 0x00	; 0
    5b02:	6f e3       	ldi	r22, 0x3F	; 63
    5b04:	0e 94 5e 2c 	call	0x58bc	; 0x58bc <glcdControlWrite>
    5b08:	81 e0       	ldi	r24, 0x01	; 1
    5b0a:	6f e3       	ldi	r22, 0x3F	; 63
    5b0c:	0e 94 5e 2c 	call	0x58bc	; 0x58bc <glcdControlWrite>
	}
	// clear lcd
	glcdClearScreen();
    5b10:	0e 94 5a 2d 	call	0x5ab4	; 0x5ab4 <glcdClearScreen>
	// initialize positions
	glcdHome();
    5b14:	0e 94 6e 2d 	call	0x5adc	; 0x5adc <glcdHome>
}
    5b18:	08 95       	ret

00005b1a <glcdGotoChar>:
	glcdSetYAddress(yLine);
	glcdSetXAddress(x);
}

void glcdGotoChar(u08 line, u08 col)
{
    5b1a:	98 2f       	mov	r25, r24
	glcdSetAddress(col*6, line);
    5b1c:	86 e0       	ldi	r24, 0x06	; 6
    5b1e:	68 9f       	mul	r22, r24
    5b20:	80 2d       	mov	r24, r0
    5b22:	11 24       	eor	r1, r1
    5b24:	69 2f       	mov	r22, r25
    5b26:	0e 94 50 2d 	call	0x5aa0	; 0x5aa0 <glcdSetAddress>
}
    5b2a:	08 95       	ret

00005b2c <glcdDelay>:
	unsigned char j; 			// 1000-5,8ms ...5000-29ms
								// 10000-56ms ...30000-170ms
								// 50000-295ms...60000-345ms
//	for (i = 0; i < p; i++) for (j = 0; j < 10; j++) asm volatile ("nop");
	for (i = 0; i < p; i++) for (j = 0; j < 10; j++);
}
    5b2c:	08 95       	ret

00005b2e <__vector_18>:
    rx_buffer->head = i;
  }
}

SIGNAL(USART_RX_vect)
{
    5b2e:	1f 92       	push	r1
    5b30:	0f 92       	push	r0
    5b32:	0f b6       	in	r0, 0x3f	; 63
    5b34:	0f 92       	push	r0
    5b36:	11 24       	eor	r1, r1
    5b38:	2f 93       	push	r18
    5b3a:	3f 93       	push	r19
    5b3c:	4f 93       	push	r20
    5b3e:	5f 93       	push	r21
    5b40:	6f 93       	push	r22
    5b42:	7f 93       	push	r23
    5b44:	8f 93       	push	r24
    5b46:	9f 93       	push	r25
    5b48:	af 93       	push	r26
    5b4a:	bf 93       	push	r27
    5b4c:	ef 93       	push	r30
    5b4e:	ff 93       	push	r31
  unsigned char c = UDR0;
    5b50:	40 91 c6 00 	lds	r20, 0x00C6

struct ring_buffer rx_buffer = { { 0 }, 0, 0 };

inline void store_char(unsigned char c, struct ring_buffer *rx_buffer)
{
  int i = (rx_buffer->head + 1) % RX_BUFFER_SIZE;
    5b54:	e0 91 a7 02 	lds	r30, 0x02A7
    5b58:	f0 91 a8 02 	lds	r31, 0x02A8
    5b5c:	cf 01       	movw	r24, r30
    5b5e:	01 96       	adiw	r24, 0x01	; 1
    5b60:	60 e8       	ldi	r22, 0x80	; 128
    5b62:	70 e0       	ldi	r23, 0x00	; 0
    5b64:	0e 94 17 3b 	call	0x762e	; 0x762e <__divmodhi4>
    5b68:	9c 01       	movw	r18, r24

  // if we should be storing the received character into the location
  // just before the tail (meaning that the head would advance to the
  // current location of the tail), we're about to overflow the buffer
  // and so we don't write the character or advance the head.
  if (i != rx_buffer->tail) {
    5b6a:	80 91 a9 02 	lds	r24, 0x02A9
    5b6e:	90 91 aa 02 	lds	r25, 0x02AA
    5b72:	28 17       	cp	r18, r24
    5b74:	39 07       	cpc	r19, r25
    5b76:	39 f0       	breq	.+14     	; 0x5b86 <__vector_18+0x58>
    rx_buffer->buffer[rx_buffer->head] = c;
    5b78:	e9 5d       	subi	r30, 0xD9	; 217
    5b7a:	fd 4f       	sbci	r31, 0xFD	; 253
    5b7c:	40 83       	st	Z, r20
    rx_buffer->head = i;
    5b7e:	30 93 a8 02 	sts	0x02A8, r19
    5b82:	20 93 a7 02 	sts	0x02A7, r18

SIGNAL(USART_RX_vect)
{
  unsigned char c = UDR0;
  store_char(c, &rx_buffer);
}
    5b86:	ff 91       	pop	r31
    5b88:	ef 91       	pop	r30
    5b8a:	bf 91       	pop	r27
    5b8c:	af 91       	pop	r26
    5b8e:	9f 91       	pop	r25
    5b90:	8f 91       	pop	r24
    5b92:	7f 91       	pop	r23
    5b94:	6f 91       	pop	r22
    5b96:	5f 91       	pop	r21
    5b98:	4f 91       	pop	r20
    5b9a:	3f 91       	pop	r19
    5b9c:	2f 91       	pop	r18
    5b9e:	0f 90       	pop	r0
    5ba0:	0f be       	out	0x3f, r0	; 63
    5ba2:	0f 90       	pop	r0
    5ba4:	1f 90       	pop	r1
    5ba6:	18 95       	reti

00005ba8 <char_available>:

uint8_t char_available(void)
{
    5ba8:	80 91 a7 02 	lds	r24, 0x02A7
    5bac:	90 91 a8 02 	lds	r25, 0x02A8
    5bb0:	80 58       	subi	r24, 0x80	; 128
    5bb2:	9f 4f       	sbci	r25, 0xFF	; 255
    5bb4:	20 91 a9 02 	lds	r18, 0x02A9
    5bb8:	30 91 aa 02 	lds	r19, 0x02AA
    5bbc:	82 1b       	sub	r24, r18
    5bbe:	93 0b       	sbc	r25, r19
    5bc0:	60 e8       	ldi	r22, 0x80	; 128
    5bc2:	70 e0       	ldi	r23, 0x00	; 0
    5bc4:	0e 94 17 3b 	call	0x762e	; 0x762e <__divmodhi4>
  return (RX_BUFFER_SIZE + rx_buffer.head - rx_buffer.tail) % RX_BUFFER_SIZE;
}
    5bc8:	08 95       	ret

00005bca <char_read>:

int char_read(void)
{
  // if the head isn't ahead of the tail, we don't have any characters
  if (rx_buffer.head == rx_buffer.tail) {
    5bca:	40 91 a9 02 	lds	r20, 0x02A9
    5bce:	50 91 aa 02 	lds	r21, 0x02AA
    5bd2:	80 91 a7 02 	lds	r24, 0x02A7
    5bd6:	90 91 a8 02 	lds	r25, 0x02A8
    5bda:	84 17       	cp	r24, r20
    5bdc:	95 07       	cpc	r25, r21
    5bde:	19 f4       	brne	.+6      	; 0x5be6 <char_read+0x1c>
    5be0:	2f ef       	ldi	r18, 0xFF	; 255
    5be2:	3f ef       	ldi	r19, 0xFF	; 255
    5be4:	0f c0       	rjmp	.+30     	; 0x5c04 <char_read+0x3a>
    return -1;
  } else {
    unsigned char c = rx_buffer.buffer[rx_buffer.tail];
    5be6:	fa 01       	movw	r30, r20
    5be8:	e9 5d       	subi	r30, 0xD9	; 217
    5bea:	fd 4f       	sbci	r31, 0xFD	; 253
    5bec:	20 81       	ld	r18, Z
    rx_buffer.tail = (rx_buffer.tail + 1) % RX_BUFFER_SIZE;
    5bee:	ca 01       	movw	r24, r20
    5bf0:	01 96       	adiw	r24, 0x01	; 1
    5bf2:	60 e8       	ldi	r22, 0x80	; 128
    5bf4:	70 e0       	ldi	r23, 0x00	; 0
    5bf6:	0e 94 17 3b 	call	0x762e	; 0x762e <__divmodhi4>
    5bfa:	90 93 aa 02 	sts	0x02AA, r25
    5bfe:	80 93 a9 02 	sts	0x02A9, r24
    return c;
    5c02:	30 e0       	ldi	r19, 0x00	; 0
  }
}
    5c04:	c9 01       	movw	r24, r18
    5c06:	08 95       	ret

00005c08 <__vector_13>:
extern volatile uint8_t timeoutcounter;

// How long we have been snoozing
uint16_t snoozetimer = 0;

SIGNAL(TIMER1_OVF_vect) {
    5c08:	1f 92       	push	r1
    5c0a:	0f 92       	push	r0
    5c0c:	0f b6       	in	r0, 0x3f	; 63
    5c0e:	0f 92       	push	r0
    5c10:	11 24       	eor	r1, r1
    5c12:	8f 93       	push	r24
    5c14:	9f 93       	push	r25
  PIEZO_PORT ^= _BV(PIEZO);
    5c16:	88 b1       	in	r24, 0x08	; 8
    5c18:	98 e0       	ldi	r25, 0x08	; 8
    5c1a:	89 27       	eor	r24, r25
    5c1c:	88 b9       	out	0x08, r24	; 8
}
    5c1e:	9f 91       	pop	r25
    5c20:	8f 91       	pop	r24
    5c22:	0f 90       	pop	r0
    5c24:	0f be       	out	0x3f, r0	; 63
    5c26:	0f 90       	pop	r0
    5c28:	1f 90       	pop	r1
    5c2a:	18 95       	reti

00005c2c <__vector_14>:

volatile uint16_t millis = 0;
volatile uint16_t animticker, alarmticker;
SIGNAL(TIMER0_COMPA_vect) {
    5c2c:	1f 92       	push	r1
    5c2e:	0f 92       	push	r0
    5c30:	0f b6       	in	r0, 0x3f	; 63
    5c32:	0f 92       	push	r0
    5c34:	11 24       	eor	r1, r1
    5c36:	8f 93       	push	r24
    5c38:	9f 93       	push	r25
  if (millis)
    5c3a:	80 91 ad 02 	lds	r24, 0x02AD
    5c3e:	90 91 ae 02 	lds	r25, 0x02AE
    5c42:	89 2b       	or	r24, r25
    5c44:	49 f0       	breq	.+18     	; 0x5c58 <__vector_14+0x2c>
    millis--;
    5c46:	80 91 ad 02 	lds	r24, 0x02AD
    5c4a:	90 91 ae 02 	lds	r25, 0x02AE
    5c4e:	01 97       	sbiw	r24, 0x01	; 1
    5c50:	90 93 ae 02 	sts	0x02AE, r25
    5c54:	80 93 ad 02 	sts	0x02AD, r24
  if (animticker)
    5c58:	80 91 3b 03 	lds	r24, 0x033B
    5c5c:	90 91 3c 03 	lds	r25, 0x033C
    5c60:	89 2b       	or	r24, r25
    5c62:	49 f0       	breq	.+18     	; 0x5c76 <__vector_14+0x4a>
    animticker--;
    5c64:	80 91 3b 03 	lds	r24, 0x033B
    5c68:	90 91 3c 03 	lds	r25, 0x033C
    5c6c:	01 97       	sbiw	r24, 0x01	; 1
    5c6e:	90 93 3c 03 	sts	0x033C, r25
    5c72:	80 93 3b 03 	sts	0x033B, r24

  if (alarming && !snoozetimer) {
    5c76:	80 91 39 03 	lds	r24, 0x0339
    5c7a:	88 23       	and	r24, r24
    5c7c:	89 f1       	breq	.+98     	; 0x5ce0 <__vector_14+0xb4>
    5c7e:	80 91 ab 02 	lds	r24, 0x02AB
    5c82:	90 91 ac 02 	lds	r25, 0x02AC
    5c86:	89 2b       	or	r24, r25
    5c88:	59 f5       	brne	.+86     	; 0x5ce0 <__vector_14+0xb4>
    if (alarmticker == 0) {
    5c8a:	80 91 2f 03 	lds	r24, 0x032F
    5c8e:	90 91 30 03 	lds	r25, 0x0330
    5c92:	89 2b       	or	r24, r25
    5c94:	e1 f4       	brne	.+56     	; 0x5cce <__vector_14+0xa2>
      alarmticker = 300;
    5c96:	8c e2       	ldi	r24, 0x2C	; 44
    5c98:	91 e0       	ldi	r25, 0x01	; 1
    5c9a:	90 93 30 03 	sts	0x0330, r25
    5c9e:	80 93 2f 03 	sts	0x032F, r24
      if (TCCR1B == 0) {
    5ca2:	80 91 81 00 	lds	r24, 0x0081
    5ca6:	88 23       	and	r24, r24
    5ca8:	79 f4       	brne	.+30     	; 0x5cc8 <__vector_14+0x9c>
	TCCR1A = 0; 
    5caa:	10 92 80 00 	sts	0x0080, r1
	TCCR1B =  _BV(WGM12) | _BV(CS10); // CTC with fastest timer
    5cae:	89 e0       	ldi	r24, 0x09	; 9
    5cb0:	80 93 81 00 	sts	0x0081, r24
	TIMSK1 = _BV(TOIE1) | _BV(OCIE1A);
    5cb4:	83 e0       	ldi	r24, 0x03	; 3
    5cb6:	80 93 6f 00 	sts	0x006F, r24
	OCR1A = (F_CPU / ALARM_FREQ) / 2;
    5cba:	88 ee       	ldi	r24, 0xE8	; 232
    5cbc:	93 e0       	ldi	r25, 0x03	; 3
    5cbe:	90 93 89 00 	sts	0x0089, r25
    5cc2:	80 93 88 00 	sts	0x0088, r24
    5cc6:	03 c0       	rjmp	.+6      	; 0x5cce <__vector_14+0xa2>
      } else {
	TCCR1B = 0;
    5cc8:	10 92 81 00 	sts	0x0081, r1
	// turn off piezo
	PIEZO_PORT &= ~_BV(PIEZO);
    5ccc:	43 98       	cbi	0x08, 3	; 8
      }
    }
    alarmticker--;    
    5cce:	80 91 2f 03 	lds	r24, 0x032F
    5cd2:	90 91 30 03 	lds	r25, 0x0330
    5cd6:	01 97       	sbiw	r24, 0x01	; 1
    5cd8:	90 93 30 03 	sts	0x0330, r25
    5cdc:	80 93 2f 03 	sts	0x032F, r24
  }
}
    5ce0:	9f 91       	pop	r25
    5ce2:	8f 91       	pop	r24
    5ce4:	0f 90       	pop	r0
    5ce6:	0f be       	out	0x3f, r0	; 63
    5ce8:	0f 90       	pop	r0
    5cea:	1f 90       	pop	r1
    5cec:	18 95       	reti

00005cee <__vector_11>:

  halt();
}


SIGNAL(TIMER1_COMPA_vect) {
    5cee:	1f 92       	push	r1
    5cf0:	0f 92       	push	r0
    5cf2:	0f b6       	in	r0, 0x3f	; 63
    5cf4:	0f 92       	push	r0
    5cf6:	11 24       	eor	r1, r1
    5cf8:	8f 93       	push	r24
    5cfa:	9f 93       	push	r25
  PIEZO_PORT ^= _BV(PIEZO);
    5cfc:	88 b1       	in	r24, 0x08	; 8
    5cfe:	98 e0       	ldi	r25, 0x08	; 8
    5d00:	89 27       	eor	r24, r25
    5d02:	88 b9       	out	0x08, r24	; 8
}
    5d04:	9f 91       	pop	r25
    5d06:	8f 91       	pop	r24
    5d08:	0f 90       	pop	r0
    5d0a:	0f be       	out	0x3f, r0	; 63
    5d0c:	0f 90       	pop	r0
    5d0e:	1f 90       	pop	r1
    5d10:	18 95       	reti

00005d12 <setalarmstate>:

// This turns on/off the alarm when the switch has been
// set. It also displays the alarm time
void setalarmstate(void) {
  DEBUGP("a");
  if (ALARM_PIN & _BV(ALARM)) { 
    5d12:	1e 9b       	sbis	0x03, 6	; 3
    5d14:	16 c0       	rjmp	.+44     	; 0x5d42 <setalarmstate+0x30>
    if (alarm_on) {
    5d16:	80 91 36 03 	lds	r24, 0x0336
    5d1a:	88 23       	and	r24, r24
    5d1c:	99 f1       	breq	.+102    	; 0x5d84 <setalarmstate+0x72>
      // turn off the alarm
      alarm_on = 0;
    5d1e:	10 92 36 03 	sts	0x0336, r1
      alarm_tripped = 0;
    5d22:	10 92 40 03 	sts	0x0340, r1
      snoozetimer = 0;
    5d26:	10 92 ac 02 	sts	0x02AC, r1
    5d2a:	10 92 ab 02 	sts	0x02AB, r1
      if (alarming) {
    5d2e:	80 91 39 03 	lds	r24, 0x0339
    5d32:	88 23       	and	r24, r24
    5d34:	39 f1       	breq	.+78     	; 0x5d84 <setalarmstate+0x72>
	// if the alarm is going off, we should turn it off
	// and quiet the speaker
	DEBUGP("alarm off");
	alarming = 0;
    5d36:	10 92 39 03 	sts	0x0339, r1
	TCCR1B = 0;
    5d3a:	10 92 81 00 	sts	0x0081, r1
	// turn off piezo
	PIEZO_PORT &= ~_BV(PIEZO);
    5d3e:	43 98       	cbi	0x08, 3	; 8
    5d40:	08 95       	ret
      } 
    }
  } else {
    // Don't display the alarm/beep if we already have
    if  (!alarm_on) {
    5d42:	80 91 36 03 	lds	r24, 0x0336
    5d46:	88 23       	and	r24, r24
    5d48:	e9 f4       	brne	.+58     	; 0x5d84 <setalarmstate+0x72>
      // alarm on!
      alarm_on = 1;
    5d4a:	81 e0       	ldi	r24, 0x01	; 1
    5d4c:	80 93 36 03 	sts	0x0336, r24
      // reset snoozing
      snoozetimer = 0;
    5d50:	10 92 ac 02 	sts	0x02AC, r1
    5d54:	10 92 ab 02 	sts	0x02AB, r1
#ifdef DEATHCHRON
	  if (displaystyle == STYLE_DEATH) {
    5d58:	80 91 31 03 	lds	r24, 0x0331
    5d5c:	83 3d       	cpi	r24, 0xD3	; 211
    5d5e:	31 f4       	brne	.+12     	; 0x5d6c <setalarmstate+0x5a>
	    if(score_mode >= SCORE_MODE_DEATH_TIME)
    5d60:	80 91 22 02 	lds	r24, 0x0222
    5d64:	84 30       	cpi	r24, 0x04	; 4
    5d66:	10 f0       	brcs	.+4      	; 0x5d6c <setalarmstate+0x5a>
	      score_mode = SCORE_MODE_DEATH_ALARM;
    5d68:	87 e0       	ldi	r24, 0x07	; 7
    5d6a:	01 c0       	rjmp	.+2      	; 0x5d6e <setalarmstate+0x5c>
	    else
	      score_mode = SCORE_MODE_ALARM;
	  }
	  else
#endif
	    score_mode = SCORE_MODE_ALARM;
    5d6c:	83 e0       	ldi	r24, 0x03	; 3
    5d6e:	80 93 22 02 	sts	0x0222, r24
	  score_mode_timeout = SCORE_MODE_TIMEOUT;
    5d72:	80 91 31 03 	lds	r24, 0x0331
    5d76:	81 30       	cpi	r24, 0x01	; 1
    5d78:	11 f0       	breq	.+4      	; 0x5d7e <setalarmstate+0x6c>
    5d7a:	83 e0       	ldi	r24, 0x03	; 3
    5d7c:	01 c0       	rjmp	.+2      	; 0x5d80 <setalarmstate+0x6e>
    5d7e:	85 e0       	ldi	r24, 0x05	; 5
    5d80:	80 93 21 02 	sts	0x0221, r24
    5d84:	08 95       	ret

00005d86 <leapyear>:
  if (timeoutcounter) {
    timeoutcounter--;
  }
}

uint8_t leapyear(uint16_t y) {
    5d86:	fc 01       	movw	r30, r24
  return ( (!(y % 4) && (y % 100)) || !(y % 400));
    5d88:	83 70       	andi	r24, 0x03	; 3
    5d8a:	90 70       	andi	r25, 0x00	; 0
    5d8c:	89 2b       	or	r24, r25
    5d8e:	39 f4       	brne	.+14     	; 0x5d9e <leapyear+0x18>
    5d90:	cf 01       	movw	r24, r30
    5d92:	64 e6       	ldi	r22, 0x64	; 100
    5d94:	70 e0       	ldi	r23, 0x00	; 0
    5d96:	0e 94 03 3b 	call	0x7606	; 0x7606 <__udivmodhi4>
    5d9a:	89 2b       	or	r24, r25
    5d9c:	49 f4       	brne	.+18     	; 0x5db0 <leapyear+0x2a>
    5d9e:	20 e0       	ldi	r18, 0x00	; 0
    5da0:	30 e0       	ldi	r19, 0x00	; 0
    5da2:	cf 01       	movw	r24, r30
    5da4:	60 e9       	ldi	r22, 0x90	; 144
    5da6:	71 e0       	ldi	r23, 0x01	; 1
    5da8:	0e 94 03 3b 	call	0x7606	; 0x7606 <__udivmodhi4>
    5dac:	89 2b       	or	r24, r25
    5dae:	11 f4       	brne	.+4      	; 0x5db4 <leapyear+0x2e>
    5db0:	21 e0       	ldi	r18, 0x01	; 1
    5db2:	30 e0       	ldi	r19, 0x00	; 0
}
    5db4:	82 2f       	mov	r24, r18
    5db6:	08 95       	ret

00005db8 <tick>:

void tick(void) {


}
    5db8:	08 95       	ret

00005dba <i2bcd>:



inline uint8_t i2bcd(uint8_t x) {
    5dba:	48 2f       	mov	r20, r24
    5dbc:	6a e0       	ldi	r22, 0x0A	; 10
    5dbe:	0e 94 f7 3a 	call	0x75ee	; 0x75ee <__udivmodqi4>
    5dc2:	28 2f       	mov	r18, r24
    5dc4:	30 e0       	ldi	r19, 0x00	; 0
    5dc6:	84 e0       	ldi	r24, 0x04	; 4
    5dc8:	22 0f       	add	r18, r18
    5dca:	33 1f       	adc	r19, r19
    5dcc:	8a 95       	dec	r24
    5dce:	e1 f7       	brne	.-8      	; 0x5dc8 <i2bcd+0xe>
    5dd0:	84 2f       	mov	r24, r20
    5dd2:	0e 94 f7 3a 	call	0x75ee	; 0x75ee <__udivmodqi4>
  return ((x/10)<<4) | (x%10);
}
    5dd6:	89 2f       	mov	r24, r25
    5dd8:	82 2b       	or	r24, r18
    5dda:	08 95       	ret

00005ddc <setsnooze>:
}

void setsnooze(void) {
  //snoozetimer = eeprom_read_byte(&EE_SNOOZE);
  //snoozetimer *= 60; // convert minutes to seconds
  snoozetimer = MAXSNOOZE;
    5ddc:	88 e5       	ldi	r24, 0x58	; 88
    5dde:	92 e0       	ldi	r25, 0x02	; 2
    5de0:	90 93 ac 02 	sts	0x02AC, r25
    5de4:	80 93 ab 02 	sts	0x02AB, r24
  TCCR1B = 0;
    5de8:	10 92 81 00 	sts	0x0081, r1
  // turn off piezo
  PIEZO_PORT &= ~_BV(PIEZO);
    5dec:	43 98       	cbi	0x08, 3	; 8
  DEBUGP("snooze");
  //displaymode = SHOW_SNOOZE;
  //delay_ms(1000);
  displaymode = SHOW_TIME;
    5dee:	10 92 3a 03 	sts	0x033A, r1
}
    5df2:	08 95       	ret

00005df4 <DecodeGPSBuffer>:
 } 
}


// Decodes a 2 char number to uint8
uint8_t DecodeGPSBuffer(char *cBuffer) {
    5df4:	fc 01       	movw	r30, r24
    5df6:	81 81       	ldd	r24, Z+1	; 0x01
    5df8:	80 51       	subi	r24, 0x10	; 16
    5dfa:	20 81       	ld	r18, Z
    5dfc:	9a e0       	ldi	r25, 0x0A	; 10
    5dfe:	29 9f       	mul	r18, r25
    5e00:	90 01       	movw	r18, r0
    5e02:	11 24       	eor	r1, r1
 return ((cBuffer[0]-48)*10) + (cBuffer[1]-48);
}
    5e04:	82 0f       	add	r24, r18
    5e06:	08 95       	ret

00005e08 <printnumber>:
  glcdSetDot(x+l-3,y-2);
  glcdSetDot(x+l-3,y+2);
}


void printnumber(uint8_t n, uint8_t inverted) {
    5e08:	0f 93       	push	r16
    5e0a:	1f 93       	push	r17
    5e0c:	18 2f       	mov	r17, r24
    5e0e:	06 2f       	mov	r16, r22
  glcdWriteChar(n/10+'0', inverted);
    5e10:	6a e0       	ldi	r22, 0x0A	; 10
    5e12:	0e 94 f7 3a 	call	0x75ee	; 0x75ee <__udivmodqi4>
    5e16:	80 5d       	subi	r24, 0xD0	; 208
    5e18:	60 2f       	mov	r22, r16
    5e1a:	0e 94 2b 29 	call	0x5256	; 0x5256 <glcdWriteChar>
  glcdWriteChar(n%10+'0', inverted);
    5e1e:	81 2f       	mov	r24, r17
    5e20:	6a e0       	ldi	r22, 0x0A	; 10
    5e22:	0e 94 f7 3a 	call	0x75ee	; 0x75ee <__udivmodqi4>
    5e26:	89 2f       	mov	r24, r25
    5e28:	80 5d       	subi	r24, 0xD0	; 208
    5e2a:	60 2f       	mov	r22, r16
    5e2c:	0e 94 2b 29 	call	0x5256	; 0x5256 <glcdWriteChar>
}
    5e30:	1f 91       	pop	r17
    5e32:	0f 91       	pop	r16
    5e34:	08 95       	ret

00005e36 <GPSRead>:
  displaymode = SHOW_TIME;
}

#ifdef GPSENABLE

uint8_t GPSRead(uint8_t debugmode) {
    5e36:	bf 92       	push	r11
    5e38:	cf 92       	push	r12
    5e3a:	df 92       	push	r13
    5e3c:	ef 92       	push	r14
    5e3e:	ff 92       	push	r15
    5e40:	0f 93       	push	r16
    5e42:	1f 93       	push	r17
    5e44:	df 93       	push	r29
    5e46:	cf 93       	push	r28
    5e48:	cd b7       	in	r28, 0x3d	; 61
    5e4a:	de b7       	in	r29, 0x3e	; 62
    5e4c:	2c 97       	sbiw	r28, 0x0c	; 12
    5e4e:	0f b6       	in	r0, 0x3f	; 63
    5e50:	f8 94       	cli
    5e52:	de bf       	out	0x3e, r29	; 62
    5e54:	0f be       	out	0x3f, r0	; 63
    5e56:	cd bf       	out	0x3d, r28	; 61
    5e58:	08 2f       	mov	r16, r24
 static uint8_t blen=0;
 static char buffer[11];
 static int8_t dadjflag =0;
 static uint8_t scrpos=0;
 char ch=0;
 timezone=(int8_t)eeprom_read_byte(&EE_TIMEZONE);
    5e5a:	89 e1       	ldi	r24, 0x19	; 25
    5e5c:	90 e0       	ldi	r25, 0x00	; 0
    5e5e:	0e 94 70 3b 	call	0x76e0	; 0x76e0 <__eerd_byte_m328p>
    5e62:	80 93 24 02 	sts	0x0224, r24
 timezonehour=TIMEZONEHOUR;
    5e66:	80 91 24 02 	lds	r24, 0x0224
    5e6a:	99 27       	eor	r25, r25
    5e6c:	87 fd       	sbrc	r24, 7
    5e6e:	90 95       	com	r25
    5e70:	97 ff       	sbrs	r25, 7
    5e72:	03 c0       	rjmp	.+6      	; 0x5e7a <GPSRead+0x44>
    5e74:	90 95       	com	r25
    5e76:	81 95       	neg	r24
    5e78:	9f 4f       	sbci	r25, 0xFF	; 255
    5e7a:	95 95       	asr	r25
    5e7c:	87 95       	ror	r24
    5e7e:	95 95       	asr	r25
    5e80:	87 95       	ror	r24
    5e82:	80 93 25 02 	sts	0x0225, r24
 timezonemin=TIMEZONEMIN;
    5e86:	80 91 24 02 	lds	r24, 0x0224
    5e8a:	99 27       	eor	r25, r25
    5e8c:	87 fd       	sbrc	r24, 7
    5e8e:	90 95       	com	r25
    5e90:	97 ff       	sbrs	r25, 7
    5e92:	03 c0       	rjmp	.+6      	; 0x5e9a <GPSRead+0x64>
    5e94:	90 95       	com	r25
    5e96:	81 95       	neg	r24
    5e98:	9f 4f       	sbci	r25, 0xFF	; 255
    5e9a:	83 70       	andi	r24, 0x03	; 3
    5e9c:	90 70       	andi	r25, 0x00	; 0
    5e9e:	9c 01       	movw	r18, r24
    5ea0:	44 e0       	ldi	r20, 0x04	; 4
    5ea2:	22 0f       	add	r18, r18
    5ea4:	33 1f       	adc	r19, r19
    5ea6:	4a 95       	dec	r20
    5ea8:	e1 f7       	brne	.-8      	; 0x5ea2 <GPSRead+0x6c>
    5eaa:	28 1b       	sub	r18, r24
    5eac:	39 0b       	sbc	r19, r25
    5eae:	20 93 26 02 	sts	0x0226, r18
 if(timezone<0) {
    5eb2:	80 91 24 02 	lds	r24, 0x0224
    5eb6:	87 ff       	sbrs	r24, 7
    5eb8:	0a c0       	rjmp	.+20     	; 0x5ece <GPSRead+0x98>
  timezonehour*=-1;
    5eba:	80 91 25 02 	lds	r24, 0x0225
    5ebe:	81 95       	neg	r24
    5ec0:	80 93 25 02 	sts	0x0225, r24
  timezonemin*=-1;
    5ec4:	80 91 26 02 	lds	r24, 0x0226
    5ec8:	81 95       	neg	r24
    5eca:	80 93 26 02 	sts	0x0226, r24
 }
 
 //                     JA FE MA AP MA JU JL AU SE OC NO DE
 uint8_t monthmath[] = {31,28,31,30,31,30,31,31,30,31,30,31};
    5ece:	de 01       	movw	r26, r28
    5ed0:	11 96       	adiw	r26, 0x01	; 1
    5ed2:	e5 ee       	ldi	r30, 0xE5	; 229
    5ed4:	f1 e0       	ldi	r31, 0x01	; 1
    5ed6:	8c e0       	ldi	r24, 0x0C	; 12
    5ed8:	01 90       	ld	r0, Z+
    5eda:	0d 92       	st	X+, r0
    5edc:	81 50       	subi	r24, 0x01	; 1
    5ede:	e1 f7       	brne	.-8      	; 0x5ed8 <GPSRead+0xa2>
    5ee0:	aa c1       	rjmp	.+852    	; 0x6236 <GPSRead+0x400>
 //if(!uart_getch()) return 0;
 //ch = uart_getchar();
 while(char_available()) {
   ch = char_read();
    5ee2:	0e 94 e5 2d 	call	0x5bca	; 0x5bca <char_read>
    5ee6:	18 2f       	mov	r17, r24
 if (ch<32 || ch>127) continue;
    5ee8:	80 52       	subi	r24, 0x20	; 32
    5eea:	80 36       	cpi	r24, 0x60	; 96
    5eec:	08 f0       	brcs	.+2      	; 0x5ef0 <GPSRead+0xba>
    5eee:	ad c1       	rjmp	.+858    	; 0x624a <GPSRead+0x414>
 if (debugmode) {
    5ef0:	00 23       	and	r16, r16
    5ef2:	d1 f0       	breq	.+52     	; 0x5f28 <GPSRead+0xf2>
  glcdSetAddress(6 * scrpos++, 6); 
    5ef4:	80 91 b1 02 	lds	r24, 0x02B1
    5ef8:	8f 5f       	subi	r24, 0xFF	; 255
    5efa:	80 93 b1 02 	sts	0x02B1, r24
    5efe:	81 50       	subi	r24, 0x01	; 1
    5f00:	8c 9d       	mul	r24, r12
    5f02:	80 2d       	mov	r24, r0
    5f04:	11 24       	eor	r1, r1
    5f06:	66 e0       	ldi	r22, 0x06	; 6
    5f08:	0e 94 50 2d 	call	0x5aa0	; 0x5aa0 <glcdSetAddress>
  glcdWriteChar(ch, NORMAL); 
    5f0c:	81 2f       	mov	r24, r17
    5f0e:	60 e0       	ldi	r22, 0x00	; 0
    5f10:	0e 94 2b 29 	call	0x5256	; 0x5256 <glcdWriteChar>
  glcdWriteChar(32, NORMAL); 
    5f14:	80 e2       	ldi	r24, 0x20	; 32
    5f16:	60 e0       	ldi	r22, 0x00	; 0
    5f18:	0e 94 2b 29 	call	0x5256	; 0x5256 <glcdWriteChar>
  if (scrpos>19) {scrpos=0;}
    5f1c:	80 91 b1 02 	lds	r24, 0x02B1
    5f20:	84 31       	cpi	r24, 0x14	; 20
    5f22:	10 f0       	brcs	.+4      	; 0x5f28 <GPSRead+0xf2>
    5f24:	10 92 b1 02 	sts	0x02B1, r1
 }
 // Check for start of sentence
 if (ch=='$') { 
    5f28:	14 32       	cpi	r17, 0x24	; 36
    5f2a:	29 f4       	brne	.+10     	; 0x5f36 <GPSRead+0x100>
  soh=1; 
    5f2c:	e0 92 bf 02 	sts	0x02BF, r14
  blen=0; 
    5f30:	10 92 be 02 	sts	0x02BE, r1
    5f34:	8a c1       	rjmp	.+788    	; 0x624a <GPSRead+0x414>
  continue;
 }
 // If inside a sentence...
 if (soh>0) {
    5f36:	80 91 bf 02 	lds	r24, 0x02BF
    5f3a:	88 23       	and	r24, r24
    5f3c:	09 f4       	brne	.+2      	; 0x5f40 <GPSRead+0x10a>
    5f3e:	85 c1       	rjmp	.+778    	; 0x624a <GPSRead+0x414>
    5f40:	90 91 be 02 	lds	r25, 0x02BE

  // check for next field
  if (ch == ',') {
    5f44:	1c 32       	cpi	r17, 0x2C	; 44
    5f46:	51 f4       	brne	.+20     	; 0x5f5c <GPSRead+0x126>
   soh++; 
    5f48:	8f 5f       	subi	r24, 0xFF	; 255
    5f4a:	80 93 bf 02 	sts	0x02BF, r24
   if (blen==0) {buffer[0]=0;}  
    5f4e:	99 23       	and	r25, r25
    5f50:	11 f4       	brne	.+4      	; 0x5f56 <GPSRead+0x120>
    5f52:	10 92 b3 02 	sts	0x02B3, r1
   blen=0;
    5f56:	10 92 be 02 	sts	0x02BE, r1
    5f5a:	0f c0       	rjmp	.+30     	; 0x5f7a <GPSRead+0x144>
  }
  // otherwise, add character to buffer
  else { 
   if (blen<10) {
    5f5c:	9a 30       	cpi	r25, 0x0A	; 10
    5f5e:	68 f4       	brcc	.+26     	; 0x5f7a <GPSRead+0x144>
    buffer[blen++]=ch;
    5f60:	e9 2f       	mov	r30, r25
    5f62:	f0 e0       	ldi	r31, 0x00	; 0
    5f64:	ed 54       	subi	r30, 0x4D	; 77
    5f66:	fd 4f       	sbci	r31, 0xFD	; 253
    5f68:	10 83       	st	Z, r17
    5f6a:	e9 2f       	mov	r30, r25
    5f6c:	ef 5f       	subi	r30, 0xFF	; 255
    5f6e:	e0 93 be 02 	sts	0x02BE, r30
    buffer[blen]=0;
    5f72:	f0 e0       	ldi	r31, 0x00	; 0
    5f74:	ed 54       	subi	r30, 0x4D	; 77
    5f76:	fd 4f       	sbci	r31, 0xFD	; 253
    5f78:	10 82       	st	Z, r1
   } 
  }

  // Process: Command
  if (soh==2) {
    5f7a:	80 91 bf 02 	lds	r24, 0x02BF
    5f7e:	82 30       	cpi	r24, 0x02	; 2
    5f80:	99 f4       	brne	.+38     	; 0x5fa8 <GPSRead+0x172>
   if (!strcmp(buffer,"GPRMC")) {soh=3; blen=0; buffer[0]=0;}
    5f82:	83 eb       	ldi	r24, 0xB3	; 179
    5f84:	92 e0       	ldi	r25, 0x02	; 2
    5f86:	60 ed       	ldi	r22, 0xD0	; 208
    5f88:	71 e0       	ldi	r23, 0x01	; 1
    5f8a:	0e 94 67 3b 	call	0x76ce	; 0x76ce <strcmp>
    5f8e:	00 97       	sbiw	r24, 0x00	; 0
    5f90:	41 f4       	brne	.+16     	; 0x5fa2 <GPSRead+0x16c>
    5f92:	83 e0       	ldi	r24, 0x03	; 3
    5f94:	80 93 bf 02 	sts	0x02BF, r24
    5f98:	10 92 be 02 	sts	0x02BE, r1
    5f9c:	10 92 b3 02 	sts	0x02B3, r1
    5fa0:	54 c1       	rjmp	.+680    	; 0x624a <GPSRead+0x414>
   else {soh=0;}
    5fa2:	10 92 bf 02 	sts	0x02BF, r1
    5fa6:	51 c1       	rjmp	.+674    	; 0x624a <GPSRead+0x414>
   continue;
  }
  
  // Process: Time
  if (soh==4) { // Time Word
    5fa8:	84 30       	cpi	r24, 0x04	; 4
    5faa:	09 f0       	breq	.+2      	; 0x5fae <GPSRead+0x178>
    5fac:	a2 c0       	rjmp	.+324    	; 0x60f2 <GPSRead+0x2bc>
   soh++;
    5fae:	b0 92 bf 02 	sts	0x02BF, r11
   if (debugmode) {
    5fb2:	00 23       	and	r16, r16
    5fb4:	61 f0       	breq	.+24     	; 0x5fce <GPSRead+0x198>
    buffer[6]=0; 
    5fb6:	10 92 b9 02 	sts	0x02B9, r1
    glcdSetAddress(MENU_INDENT+60, 5); 
    5fba:	84 e4       	ldi	r24, 0x44	; 68
    5fbc:	65 e0       	ldi	r22, 0x05	; 5
    5fbe:	0e 94 50 2d 	call	0x5aa0	; 0x5aa0 <glcdSetAddress>
    glcdPutStr_ram(buffer, NORMAL); 
    5fc2:	83 eb       	ldi	r24, 0xB3	; 179
    5fc4:	92 e0       	ldi	r25, 0x02	; 2
    5fc6:	60 e0       	ldi	r22, 0x00	; 0
    5fc8:	0e 94 6d 29 	call	0x52da	; 0x52da <glcdPutStr_ram>
    5fcc:	3e c1       	rjmp	.+636    	; 0x624a <GPSRead+0x414>
    continue;
   }
   cli();
    5fce:	f8 94       	cli
}


// Decodes a 2 char number to uint8
uint8_t DecodeGPSBuffer(char *cBuffer) {
 return ((cBuffer[0]-48)*10) + (cBuffer[1]-48);
    5fd0:	20 91 b8 02 	lds	r18, 0x02B8
    5fd4:	20 51       	subi	r18, 0x10	; 16
    5fd6:	80 91 b7 02 	lds	r24, 0x02B7
    5fda:	8f 9d       	mul	r24, r15
    5fdc:	c0 01       	movw	r24, r0
    5fde:	11 24       	eor	r1, r1
    5fe0:	28 0f       	add	r18, r24
    glcdSetAddress(MENU_INDENT+60, 5); 
    glcdPutStr_ram(buffer, NORMAL); 
    continue;
   }
   cli();
   time_s = DecodeGPSBuffer((char *)&buffer[4]); 
    5fe2:	20 93 3f 03 	sts	0x033F, r18
}


// Decodes a 2 char number to uint8
uint8_t DecodeGPSBuffer(char *cBuffer) {
 return ((cBuffer[0]-48)*10) + (cBuffer[1]-48);
    5fe6:	20 91 b6 02 	lds	r18, 0x02B6
    5fea:	20 51       	subi	r18, 0x10	; 16
    5fec:	80 91 b5 02 	lds	r24, 0x02B5
    5ff0:	8f 9d       	mul	r24, r15
    5ff2:	c0 01       	movw	r24, r0
    5ff4:	11 24       	eor	r1, r1
    5ff6:	28 0f       	add	r18, r24
    glcdPutStr_ram(buffer, NORMAL); 
    continue;
   }
   cli();
   time_s = DecodeGPSBuffer((char *)&buffer[4]); 
   time_m = DecodeGPSBuffer((char *)&buffer[2]);
    5ff8:	20 93 34 03 	sts	0x0334, r18
}


// Decodes a 2 char number to uint8
uint8_t DecodeGPSBuffer(char *cBuffer) {
 return ((cBuffer[0]-48)*10) + (cBuffer[1]-48);
    5ffc:	20 91 b4 02 	lds	r18, 0x02B4
    6000:	20 51       	subi	r18, 0x10	; 16
    6002:	80 91 b3 02 	lds	r24, 0x02B3
    6006:	8f 9d       	mul	r24, r15
    6008:	c0 01       	movw	r24, r0
    600a:	11 24       	eor	r1, r1
    600c:	28 0f       	add	r18, r24
    continue;
   }
   cli();
   time_s = DecodeGPSBuffer((char *)&buffer[4]); 
   time_m = DecodeGPSBuffer((char *)&buffer[2]);
   time_h = DecodeGPSBuffer(buffer);
    600e:	20 93 2a 03 	sts	0x032A, r18
   // Adjust hour by time zone offset
   // have to be careful because uint8's underflow back to 255, not -1
   dadjflag =0;
    6012:	10 92 b2 02 	sts	0x02B2, r1
   if (timezonemin<0 && abs(timezonemin) > time_m) {
    6016:	80 91 26 02 	lds	r24, 0x0226
    601a:	87 ff       	sbrs	r24, 7
    601c:	20 c0       	rjmp	.+64     	; 0x605e <GPSRead+0x228>
    601e:	80 91 26 02 	lds	r24, 0x0226
    6022:	90 91 34 03 	lds	r25, 0x0334
    6026:	28 2f       	mov	r18, r24
    6028:	33 27       	eor	r19, r19
    602a:	27 fd       	sbrc	r18, 7
    602c:	30 95       	com	r19
    602e:	37 ff       	sbrs	r19, 7
    6030:	03 c0       	rjmp	.+6      	; 0x6038 <GPSRead+0x202>
    6032:	30 95       	com	r19
    6034:	21 95       	neg	r18
    6036:	3f 4f       	sbci	r19, 0xFF	; 255
    6038:	89 2f       	mov	r24, r25
    603a:	90 e0       	ldi	r25, 0x00	; 0
    603c:	82 17       	cp	r24, r18
    603e:	93 07       	cpc	r25, r19
    6040:	74 f4       	brge	.+28     	; 0x605e <GPSRead+0x228>
    timezonehour--;
    6042:	80 91 25 02 	lds	r24, 0x0225
    6046:	81 50       	subi	r24, 0x01	; 1
    6048:	80 93 25 02 	sts	0x0225, r24
    time_m = 60 + time_m + timezonemin;
    604c:	80 91 34 03 	lds	r24, 0x0334
    6050:	90 91 26 02 	lds	r25, 0x0226
    6054:	84 5c       	subi	r24, 0xC4	; 196
    6056:	89 0f       	add	r24, r25
    6058:	80 93 34 03 	sts	0x0334, r24
    605c:	15 c0       	rjmp	.+42     	; 0x6088 <GPSRead+0x252>
   }
   else {
    time_m+=timezonemin;
    605e:	80 91 34 03 	lds	r24, 0x0334
    6062:	90 91 26 02 	lds	r25, 0x0226
    6066:	98 0f       	add	r25, r24
    6068:	90 93 34 03 	sts	0x0334, r25
    if (time_m>60) { // Remind us to add a day...
    606c:	80 91 34 03 	lds	r24, 0x0334
    6070:	8d 33       	cpi	r24, 0x3D	; 61
    6072:	50 f0       	brcs	.+20     	; 0x6088 <GPSRead+0x252>
     time_m-=60; 
    6074:	80 91 34 03 	lds	r24, 0x0334
    6078:	8c 53       	subi	r24, 0x3C	; 60
    607a:	80 93 34 03 	sts	0x0334, r24
     timezonehour++;
    607e:	80 91 25 02 	lds	r24, 0x0225
    6082:	8f 5f       	subi	r24, 0xFF	; 255
    6084:	80 93 25 02 	sts	0x0225, r24
    }
   }
   if (timezonehour<0 && abs(timezonehour) > time_h) {
    6088:	80 91 25 02 	lds	r24, 0x0225
    608c:	87 ff       	sbrs	r24, 7
    608e:	1d c0       	rjmp	.+58     	; 0x60ca <GPSRead+0x294>
    6090:	80 91 25 02 	lds	r24, 0x0225
    6094:	90 91 2a 03 	lds	r25, 0x032A
    6098:	28 2f       	mov	r18, r24
    609a:	33 27       	eor	r19, r19
    609c:	27 fd       	sbrc	r18, 7
    609e:	30 95       	com	r19
    60a0:	37 ff       	sbrs	r19, 7
    60a2:	03 c0       	rjmp	.+6      	; 0x60aa <GPSRead+0x274>
    60a4:	30 95       	com	r19
    60a6:	21 95       	neg	r18
    60a8:	3f 4f       	sbci	r19, 0xFF	; 255
    60aa:	89 2f       	mov	r24, r25
    60ac:	90 e0       	ldi	r25, 0x00	; 0
    60ae:	82 17       	cp	r24, r18
    60b0:	93 07       	cpc	r25, r19
    60b2:	5c f4       	brge	.+22     	; 0x60ca <GPSRead+0x294>
    dadjflag=-1; // Remind us to subtract a day... 
    60b4:	d0 92 b2 02 	sts	0x02B2, r13
    time_h = 24 + time_h + timezonehour;
    60b8:	80 91 2a 03 	lds	r24, 0x032A
    60bc:	90 91 25 02 	lds	r25, 0x0225
    60c0:	88 5e       	subi	r24, 0xE8	; 232
    60c2:	89 0f       	add	r24, r25
    60c4:	80 93 2a 03 	sts	0x032A, r24
    60c8:	c0 c0       	rjmp	.+384    	; 0x624a <GPSRead+0x414>
   }
   else {
    time_h+=timezonehour;
    60ca:	80 91 2a 03 	lds	r24, 0x032A
    60ce:	90 91 25 02 	lds	r25, 0x0225
    60d2:	98 0f       	add	r25, r24
    60d4:	90 93 2a 03 	sts	0x032A, r25
    if (time_h>24) { // Remind us to add a day...
    60d8:	80 91 2a 03 	lds	r24, 0x032A
    60dc:	89 31       	cpi	r24, 0x19	; 25
    60de:	08 f4       	brcc	.+2      	; 0x60e2 <GPSRead+0x2ac>
    60e0:	b4 c0       	rjmp	.+360    	; 0x624a <GPSRead+0x414>
     time_h-=24; 
    60e2:	80 91 2a 03 	lds	r24, 0x032A
    60e6:	88 51       	subi	r24, 0x18	; 24
    60e8:	80 93 2a 03 	sts	0x032A, r24
     dadjflag=1;
    60ec:	e0 92 b2 02 	sts	0x02B2, r14
    60f0:	ac c0       	rjmp	.+344    	; 0x624a <GPSRead+0x414>
    }
   }
   continue;
  }

  if (soh==6) { // LAT WORD
    60f2:	86 30       	cpi	r24, 0x06	; 6
    60f4:	b9 f4       	brne	.+46     	; 0x6124 <GPSRead+0x2ee>
    if (debugmode) {
    60f6:	00 23       	and	r16, r16
    60f8:	81 f0       	breq	.+32     	; 0x611a <GPSRead+0x2e4>
     glcdSetAddress(MENU_INDENT+60, 3); 
    60fa:	84 e4       	ldi	r24, 0x44	; 68
    60fc:	63 e0       	ldi	r22, 0x03	; 3
    60fe:	0e 94 50 2d 	call	0x5aa0	; 0x5aa0 <glcdSetAddress>
     glcdPutStr_ram((!buffer[0] ? "NOLOCK" : "LOCKED"), NORMAL);
    6102:	80 91 b3 02 	lds	r24, 0x02B3
    6106:	88 23       	and	r24, r24
    6108:	19 f0       	breq	.+6      	; 0x6110 <GPSRead+0x2da>
    610a:	86 ed       	ldi	r24, 0xD6	; 214
    610c:	91 e0       	ldi	r25, 0x01	; 1
    610e:	02 c0       	rjmp	.+4      	; 0x6114 <GPSRead+0x2de>
    6110:	8d ed       	ldi	r24, 0xDD	; 221
    6112:	91 e0       	ldi	r25, 0x01	; 1
    6114:	60 e0       	ldi	r22, 0x00	; 0
    6116:	0e 94 6d 29 	call	0x52da	; 0x52da <glcdPutStr_ram>
    }
    if (!buffer[0]) return 0;
    611a:	80 91 b3 02 	lds	r24, 0x02B3
    611e:	88 23       	and	r24, r24
    6120:	09 f4       	brne	.+2      	; 0x6124 <GPSRead+0x2ee>
    6122:	98 c0       	rjmp	.+304    	; 0x6254 <GPSRead+0x41e>
  }
  
  // Process: Date
  if (soh==13) {// Date Word
    6124:	80 91 bf 02 	lds	r24, 0x02BF
    6128:	8d 30       	cpi	r24, 0x0D	; 13
    612a:	09 f0       	breq	.+2      	; 0x612e <GPSRead+0x2f8>
    612c:	8e c0       	rjmp	.+284    	; 0x624a <GPSRead+0x414>
   if (debugmode) {
    612e:	00 23       	and	r16, r16
    6130:	61 f0       	breq	.+24     	; 0x614a <GPSRead+0x314>
    glcdSetAddress(MENU_INDENT+60, 4); 
    6132:	84 e4       	ldi	r24, 0x44	; 68
    6134:	64 e0       	ldi	r22, 0x04	; 4
    6136:	0e 94 50 2d 	call	0x5aa0	; 0x5aa0 <glcdSetAddress>
    glcdPutStr_ram(buffer, NORMAL); 
    613a:	83 eb       	ldi	r24, 0xB3	; 179
    613c:	92 e0       	ldi	r25, 0x02	; 2
    613e:	60 e0       	ldi	r22, 0x00	; 0
    6140:	0e 94 6d 29 	call	0x52da	; 0x52da <glcdPutStr_ram>
    soh=0; 
    6144:	10 92 bf 02 	sts	0x02BF, r1
    6148:	87 c0       	rjmp	.+270    	; 0x6258 <GPSRead+0x422>
    return 1;
   }
   // Joy, datemath...
   cli();
    614a:	f8 94       	cli
}


// Decodes a 2 char number to uint8
uint8_t DecodeGPSBuffer(char *cBuffer) {
 return ((cBuffer[0]-48)*10) + (cBuffer[1]-48);
    614c:	20 91 b4 02 	lds	r18, 0x02B4
    6150:	20 51       	subi	r18, 0x10	; 16
    6152:	80 91 b3 02 	lds	r24, 0x02B3
    6156:	3a e0       	ldi	r19, 0x0A	; 10
    6158:	83 9f       	mul	r24, r19
    615a:	c0 01       	movw	r24, r0
    615c:	11 24       	eor	r1, r1
    615e:	28 0f       	add	r18, r24
    soh=0; 
    return 1;
   }
   // Joy, datemath...
   cli();
   date_d = DecodeGPSBuffer(buffer);  
    6160:	20 93 33 03 	sts	0x0333, r18
}


// Decodes a 2 char number to uint8
uint8_t DecodeGPSBuffer(char *cBuffer) {
 return ((cBuffer[0]-48)*10) + (cBuffer[1]-48);
    6164:	20 91 b6 02 	lds	r18, 0x02B6
    6168:	20 51       	subi	r18, 0x10	; 16
    616a:	80 91 b5 02 	lds	r24, 0x02B5
    616e:	83 9f       	mul	r24, r19
    6170:	c0 01       	movw	r24, r0
    6172:	11 24       	eor	r1, r1
    6174:	28 0f       	add	r18, r24
    return 1;
   }
   // Joy, datemath...
   cli();
   date_d = DecodeGPSBuffer(buffer);  
   date_m = DecodeGPSBuffer((char *)&buffer[2]); 
    6176:	20 93 3e 03 	sts	0x033E, r18
}


// Decodes a 2 char number to uint8
uint8_t DecodeGPSBuffer(char *cBuffer) {
 return ((cBuffer[0]-48)*10) + (cBuffer[1]-48);
    617a:	20 91 b8 02 	lds	r18, 0x02B8
    617e:	20 51       	subi	r18, 0x10	; 16
    6180:	80 91 b7 02 	lds	r24, 0x02B7
    6184:	83 9f       	mul	r24, r19
    6186:	c0 01       	movw	r24, r0
    6188:	11 24       	eor	r1, r1
    618a:	28 0f       	add	r18, r24
   }
   // Joy, datemath...
   cli();
   date_d = DecodeGPSBuffer(buffer);  
   date_m = DecodeGPSBuffer((char *)&buffer[2]); 
   date_y = DecodeGPSBuffer((char *)&buffer[4]);
    618c:	20 93 2d 03 	sts	0x032D, r18
   monthmath[2-1] = (((date_y%4)==0) ? 29 : 28);	//Account for leap year for month 2. 
    6190:	80 91 2d 03 	lds	r24, 0x032D
    6194:	90 e0       	ldi	r25, 0x00	; 0
    6196:	83 70       	andi	r24, 0x03	; 3
    6198:	90 70       	andi	r25, 0x00	; 0
    619a:	89 2b       	or	r24, r25
    619c:	11 f0       	breq	.+4      	; 0x61a2 <GPSRead+0x36c>
    619e:	8c e1       	ldi	r24, 0x1C	; 28
    61a0:	01 c0       	rjmp	.+2      	; 0x61a4 <GPSRead+0x36e>
    61a2:	8d e1       	ldi	r24, 0x1D	; 29
   // dadjflag is set by the time routine to remember to add or subtract a day...
   if (dadjflag) {
    61a4:	90 91 b2 02 	lds	r25, 0x02B2
    61a8:	99 23       	and	r25, r25
    61aa:	09 f4       	brne	.+2      	; 0x61ae <GPSRead+0x378>
    61ac:	55 c0       	rjmp	.+170    	; 0x6258 <GPSRead+0x422>
   // Joy, datemath...
   cli();
   date_d = DecodeGPSBuffer(buffer);  
   date_m = DecodeGPSBuffer((char *)&buffer[2]); 
   date_y = DecodeGPSBuffer((char *)&buffer[4]);
   monthmath[2-1] = (((date_y%4)==0) ? 29 : 28);	//Account for leap year for month 2. 
    61ae:	8a 83       	std	Y+2, r24	; 0x02
   // dadjflag is set by the time routine to remember to add or subtract a day...
   if (dadjflag) {
    date_d += dadjflag;
    61b0:	80 91 33 03 	lds	r24, 0x0333
    61b4:	98 0f       	add	r25, r24
    61b6:	90 93 33 03 	sts	0x0333, r25
    if (!date_d) { // Subtracted to Day=0
    61ba:	80 91 33 03 	lds	r24, 0x0333
    61be:	88 23       	and	r24, r24
    61c0:	e1 f4       	brne	.+56     	; 0x61fa <GPSRead+0x3c4>
     if (!--date_m) {
    61c2:	80 91 3e 03 	lds	r24, 0x033E
    61c6:	81 50       	subi	r24, 0x01	; 1
    61c8:	80 93 3e 03 	sts	0x033E, r24
    61cc:	80 91 3e 03 	lds	r24, 0x033E
    61d0:	88 23       	and	r24, r24
    61d2:	51 f4       	brne	.+20     	; 0x61e8 <GPSRead+0x3b2>
      date_y--;
    61d4:	80 91 2d 03 	lds	r24, 0x032D
    61d8:	81 50       	subi	r24, 0x01	; 1
    61da:	80 93 2d 03 	sts	0x032D, r24
      date_m = 12;
    61de:	8c e0       	ldi	r24, 0x0C	; 12
    61e0:	80 93 3e 03 	sts	0x033E, r24
      date_d = 31;
    61e4:	8f e1       	ldi	r24, 0x1F	; 31
    61e6:	06 c0       	rjmp	.+12     	; 0x61f4 <GPSRead+0x3be>
     }
     else {
     date_d = monthmath[date_m-1];
    61e8:	80 91 3e 03 	lds	r24, 0x033E
    61ec:	fe 01       	movw	r30, r28
    61ee:	e8 0f       	add	r30, r24
    61f0:	f1 1d       	adc	r31, r1
    61f2:	80 81       	ld	r24, Z
    61f4:	80 93 33 03 	sts	0x0333, r24
    61f8:	2f c0       	rjmp	.+94     	; 0x6258 <GPSRead+0x422>
     }     
    }
    else { // check for date > end of month (including leap year calc)
     if (date_d > monthmath[date_m-1]) {
    61fa:	90 91 33 03 	lds	r25, 0x0333
    61fe:	80 91 3e 03 	lds	r24, 0x033E
    6202:	fe 01       	movw	r30, r28
    6204:	e8 0f       	add	r30, r24
    6206:	f1 1d       	adc	r31, r1
    6208:	80 81       	ld	r24, Z
    620a:	89 17       	cp	r24, r25
    620c:	28 f5       	brcc	.+74     	; 0x6258 <GPSRead+0x422>
      date_d = 1;
    620e:	91 e0       	ldi	r25, 0x01	; 1
    6210:	90 93 33 03 	sts	0x0333, r25
      date_m++;
    6214:	80 91 3e 03 	lds	r24, 0x033E
    6218:	8f 5f       	subi	r24, 0xFF	; 255
    621a:	80 93 3e 03 	sts	0x033E, r24
      if (date_m>12) {
    621e:	80 91 3e 03 	lds	r24, 0x033E
    6222:	8d 30       	cpi	r24, 0x0D	; 13
    6224:	c8 f0       	brcs	.+50     	; 0x6258 <GPSRead+0x422>
       date_y++; 
    6226:	80 91 2d 03 	lds	r24, 0x032D
    622a:	8f 5f       	subi	r24, 0xFF	; 255
    622c:	80 93 2d 03 	sts	0x032D, r24
       date_m=1;
    6230:	90 93 3e 03 	sts	0x033E, r25
    6234:	11 c0       	rjmp	.+34     	; 0x6258 <GPSRead+0x422>
   continue;
  }
  
  // Process: Time
  if (soh==4) { // Time Word
   soh++;
    6236:	35 e0       	ldi	r19, 0x05	; 5
    6238:	b3 2e       	mov	r11, r19
}


// Decodes a 2 char number to uint8
uint8_t DecodeGPSBuffer(char *cBuffer) {
 return ((cBuffer[0]-48)*10) + (cBuffer[1]-48);
    623a:	2a e0       	ldi	r18, 0x0A	; 10
    623c:	f2 2e       	mov	r15, r18
   }
   else {
    time_h+=timezonehour;
    if (time_h>24) { // Remind us to add a day...
     time_h-=24; 
     dadjflag=1;
    623e:	ee 24       	eor	r14, r14
    6240:	e3 94       	inc	r14
     time_m-=60; 
     timezonehour++;
    }
   }
   if (timezonehour<0 && abs(timezonehour) > time_h) {
    dadjflag=-1; // Remind us to subtract a day... 
    6242:	dd 24       	eor	r13, r13
    6244:	da 94       	dec	r13
 //ch = uart_getchar();
 while(char_available()) {
   ch = char_read();
 if (ch<32 || ch>127) continue;
 if (debugmode) {
  glcdSetAddress(6 * scrpos++, 6); 
    6246:	96 e0       	ldi	r25, 0x06	; 6
    6248:	c9 2e       	mov	r12, r25
 
 //                     JA FE MA AP MA JU JL AU SE OC NO DE
 uint8_t monthmath[] = {31,28,31,30,31,30,31,31,30,31,30,31};
 //if(!uart_getch()) return 0;
 //ch = uart_getchar();
 while(char_available()) {
    624a:	0e 94 d4 2d 	call	0x5ba8	; 0x5ba8 <char_available>
    624e:	88 23       	and	r24, r24
    6250:	09 f0       	breq	.+2      	; 0x6254 <GPSRead+0x41e>
    6252:	47 ce       	rjmp	.-882    	; 0x5ee2 <GPSRead+0xac>
    6254:	80 e0       	ldi	r24, 0x00	; 0
    6256:	01 c0       	rjmp	.+2      	; 0x625a <GPSRead+0x424>
    6258:	81 e0       	ldi	r24, 0x01	; 1
  }
  }
 }

 return 0;
}
    625a:	2c 96       	adiw	r28, 0x0c	; 12
    625c:	0f b6       	in	r0, 0x3f	; 63
    625e:	f8 94       	cli
    6260:	de bf       	out	0x3e, r29	; 62
    6262:	0f be       	out	0x3f, r0	; 63
    6264:	cd bf       	out	0x3d, r28	; 61
    6266:	cf 91       	pop	r28
    6268:	df 91       	pop	r29
    626a:	1f 91       	pop	r17
    626c:	0f 91       	pop	r16
    626e:	ff 90       	pop	r15
    6270:	ef 90       	pop	r14
    6272:	df 90       	pop	r13
    6274:	cf 90       	pop	r12
    6276:	bf 90       	pop	r11
    6278:	08 95       	ret

0000627a <beep>:

SIGNAL(TIMER1_COMPA_vect) {
  PIEZO_PORT ^= _BV(PIEZO);
}

void beep(uint16_t freq, uint8_t duration) {
    627a:	ff 92       	push	r15
    627c:	0f 93       	push	r16
    627e:	1f 93       	push	r17
    6280:	f6 2e       	mov	r15, r22
  // use timer 1 for the piezo/buzzer 
  TCCR1A = 0; 
    6282:	10 92 80 00 	sts	0x0080, r1
  TCCR1B =  _BV(WGM12) | _BV(CS10); // CTC with fastest timer
    6286:	01 e8       	ldi	r16, 0x81	; 129
    6288:	10 e0       	ldi	r17, 0x00	; 0
    628a:	29 e0       	ldi	r18, 0x09	; 9
    628c:	f8 01       	movw	r30, r16
    628e:	20 83       	st	Z, r18
  TIMSK1 = _BV(TOIE1) | _BV(OCIE1A);
    6290:	23 e0       	ldi	r18, 0x03	; 3
    6292:	20 93 6f 00 	sts	0x006F, r18
  OCR1A = (F_CPU / freq) / 2;
    6296:	9c 01       	movw	r18, r24
    6298:	40 e0       	ldi	r20, 0x00	; 0
    629a:	50 e0       	ldi	r21, 0x00	; 0
    629c:	60 e0       	ldi	r22, 0x00	; 0
    629e:	79 e0       	ldi	r23, 0x09	; 9
    62a0:	8d e3       	ldi	r24, 0x3D	; 61
    62a2:	90 e0       	ldi	r25, 0x00	; 0
    62a4:	0e 94 4c 3b 	call	0x7698	; 0x7698 <__divmodsi4>
    62a8:	30 93 89 00 	sts	0x0089, r19
    62ac:	20 93 88 00 	sts	0x0088, r18
  delay_ms(duration);
    62b0:	8f 2d       	mov	r24, r15
    62b2:	90 e0       	ldi	r25, 0x00	; 0
    62b4:	0e 94 fd 35 	call	0x6bfa	; 0x6bfa <delay_ms>
  TCCR1B = 0;
    62b8:	f8 01       	movw	r30, r16
    62ba:	10 82       	st	Z, r1
  // turn off piezo
  PIEZO_PORT &= ~_BV(PIEZO);
    62bc:	43 98       	cbi	0x08, 3	; 8
}
    62be:	1f 91       	pop	r17
    62c0:	0f 91       	pop	r16
    62c2:	ff 90       	pop	r15
    62c4:	08 95       	ret

000062c6 <writei2ctime>:
  date_y = ((clockdata[6] >> 4) & 0xF)*10 + (clockdata[6] & 0xF);
  return clockdata[0] & 0x80;
}

void writei2ctime(uint8_t sec, uint8_t min, uint8_t hr, uint8_t day,
		  uint8_t date, uint8_t mon, uint8_t yr) {
    62c6:	cf 92       	push	r12
    62c8:	df 92       	push	r13
    62ca:	ef 92       	push	r14
    62cc:	ff 92       	push	r15
    62ce:	0f 93       	push	r16
    62d0:	1f 93       	push	r17
    62d2:	df 93       	push	r29
    62d4:	cf 93       	push	r28
    62d6:	cd b7       	in	r28, 0x3d	; 61
    62d8:	de b7       	in	r29, 0x3e	; 62
    62da:	28 97       	sbiw	r28, 0x08	; 8
    62dc:	0f b6       	in	r0, 0x3f	; 63
    62de:	f8 94       	cli
    62e0:	de bf       	out	0x3e, r29	; 62
    62e2:	0f be       	out	0x3f, r0	; 63
    62e4:	cd bf       	out	0x3d, r28	; 61
    62e6:	16 2f       	mov	r17, r22
    62e8:	f4 2e       	mov	r15, r20
    62ea:	d2 2e       	mov	r13, r18
  uint8_t clockdata[8] = {0,0,0,0,0,0,0,0};
    62ec:	fe 01       	movw	r30, r28
    62ee:	31 96       	adiw	r30, 0x01	; 1
    62f0:	98 e0       	ldi	r25, 0x08	; 8
    62f2:	df 01       	movw	r26, r30
    62f4:	1d 92       	st	X+, r1
    62f6:	9a 95       	dec	r25
    62f8:	e9 f7       	brne	.-6      	; 0x62f4 <writei2ctime+0x2e>

  clockdata[0] = 0; // address
    62fa:	19 82       	std	Y+1, r1	; 0x01
  clockdata[1] = i2bcd(sec);  // s
    62fc:	0e 94 dd 2e 	call	0x5dba	; 0x5dba <i2bcd>
    6300:	8a 83       	std	Y+2, r24	; 0x02
  clockdata[2] = i2bcd(min);  // m
    6302:	81 2f       	mov	r24, r17
    6304:	0e 94 dd 2e 	call	0x5dba	; 0x5dba <i2bcd>
    6308:	8b 83       	std	Y+3, r24	; 0x03
  clockdata[3] = i2bcd(hr); // h
    630a:	8f 2d       	mov	r24, r15
    630c:	0e 94 dd 2e 	call	0x5dba	; 0x5dba <i2bcd>
    6310:	8c 83       	std	Y+4, r24	; 0x04
  clockdata[4] = i2bcd(day);  // day
    6312:	8d 2d       	mov	r24, r13
    6314:	0e 94 dd 2e 	call	0x5dba	; 0x5dba <i2bcd>
    6318:	8d 83       	std	Y+5, r24	; 0x05
  clockdata[5] = i2bcd(date);  // date
    631a:	80 2f       	mov	r24, r16
    631c:	0e 94 dd 2e 	call	0x5dba	; 0x5dba <i2bcd>
    6320:	8e 83       	std	Y+6, r24	; 0x06
  clockdata[6] = i2bcd(mon);  // month
    6322:	8e 2d       	mov	r24, r14
    6324:	0e 94 dd 2e 	call	0x5dba	; 0x5dba <i2bcd>
    6328:	8f 83       	std	Y+7, r24	; 0x07
  clockdata[7] = i2bcd(yr); // year
    632a:	8c 2d       	mov	r24, r12
    632c:	0e 94 dd 2e 	call	0x5dba	; 0x5dba <i2bcd>
    6330:	88 87       	std	Y+8, r24	; 0x08
  
  cli();
    6332:	f8 94       	cli
  uint8_t r = i2cMasterSendNI(0xD0, 8, &clockdata[0]);
    6334:	80 ed       	ldi	r24, 0xD0	; 208
    6336:	68 e0       	ldi	r22, 0x08	; 8
    6338:	ae 01       	movw	r20, r28
    633a:	4f 5f       	subi	r20, 0xFF	; 255
    633c:	5f 4f       	sbci	r21, 0xFF	; 255
    633e:	0e 94 78 2b 	call	0x56f0	; 0x56f0 <i2cMasterSendNI>
  sei();
    6342:	78 94       	sei

  //DEBUG(putstring("Writing i2c data: ")); DEBUG(uart_putw_dec()); DEBUG(putstring_nl(""));

  if (r != 0) {
    6344:	88 23       	and	r24, r24
    6346:	99 f0       	breq	.+38     	; 0x636e <writei2ctime+0xa8>
    while(1) {
      beep(4000, 100);
    6348:	80 ea       	ldi	r24, 0xA0	; 160
    634a:	9f e0       	ldi	r25, 0x0F	; 15
    634c:	64 e6       	ldi	r22, 0x64	; 100
    634e:	0e 94 3d 31 	call	0x627a	; 0x627a <beep>
      delay_ms(100);
    6352:	84 e6       	ldi	r24, 0x64	; 100
    6354:	90 e0       	ldi	r25, 0x00	; 0
    6356:	0e 94 fd 35 	call	0x6bfa	; 0x6bfa <delay_ms>
      beep(4000, 100);
    635a:	80 ea       	ldi	r24, 0xA0	; 160
    635c:	9f e0       	ldi	r25, 0x0F	; 15
    635e:	64 e6       	ldi	r22, 0x64	; 100
    6360:	0e 94 3d 31 	call	0x627a	; 0x627a <beep>
      delay_ms(1000);
    6364:	88 ee       	ldi	r24, 0xE8	; 232
    6366:	93 e0       	ldi	r25, 0x03	; 3
    6368:	0e 94 fd 35 	call	0x6bfa	; 0x6bfa <delay_ms>
    636c:	ed cf       	rjmp	.-38     	; 0x6348 <writei2ctime+0x82>
    }
  }

}
    636e:	28 96       	adiw	r28, 0x08	; 8
    6370:	0f b6       	in	r0, 0x3f	; 63
    6372:	f8 94       	cli
    6374:	de bf       	out	0x3e, r29	; 62
    6376:	0f be       	out	0x3f, r0	; 63
    6378:	cd bf       	out	0x3d, r28	; 61
    637a:	cf 91       	pop	r28
    637c:	df 91       	pop	r29
    637e:	1f 91       	pop	r17
    6380:	0f 91       	pop	r16
    6382:	ff 90       	pop	r15
    6384:	ef 90       	pop	r14
    6386:	df 90       	pop	r13
    6388:	cf 90       	pop	r12
    638a:	08 95       	ret

0000638c <GPSCheck>:
 }

 return 0;
}

void GPSCheck(uint8_t mode) {
    638c:	cf 92       	push	r12
    638e:	df 92       	push	r13
    6390:	ef 92       	push	r14
    6392:	ff 92       	push	r15
    6394:	0f 93       	push	r16
    6396:	1f 93       	push	r17
    6398:	18 2f       	mov	r17, r24
 if (GPSRead(mode) && !mode) {
    639a:	0e 94 1b 2f 	call	0x5e36	; 0x5e36 <GPSRead>
    639e:	88 23       	and	r24, r24
    63a0:	e9 f0       	breq	.+58     	; 0x63dc <GPSCheck+0x50>
    63a2:	11 23       	and	r17, r17
    63a4:	d9 f4       	brne	.+54     	; 0x63dc <GPSCheck+0x50>
  writei2ctime(time_s, time_m, time_h, dotw(date_m, date_d, date_y), date_d, date_m, date_y);
    63a6:	10 91 3f 03 	lds	r17, 0x033F
    63aa:	f0 90 34 03 	lds	r15, 0x0334
    63ae:	d0 90 2a 03 	lds	r13, 0x032A
    63b2:	80 91 3e 03 	lds	r24, 0x033E
    63b6:	60 91 33 03 	lds	r22, 0x0333
    63ba:	40 91 2d 03 	lds	r20, 0x032D
    63be:	0e 94 8d 37 	call	0x6f1a	; 0x6f1a <dotw>
    63c2:	28 2f       	mov	r18, r24
    63c4:	00 91 33 03 	lds	r16, 0x0333
    63c8:	e0 90 3e 03 	lds	r14, 0x033E
    63cc:	c0 90 2d 03 	lds	r12, 0x032D
    63d0:	81 2f       	mov	r24, r17
    63d2:	6f 2d       	mov	r22, r15
    63d4:	4d 2d       	mov	r20, r13
    63d6:	0e 94 63 31 	call	0x62c6	; 0x62c6 <writei2ctime>
  sei();
    63da:	78 94       	sei
 } 
}
    63dc:	1f 91       	pop	r17
    63de:	0f 91       	pop	r16
    63e0:	ff 90       	pop	r15
    63e2:	ef 90       	pop	r14
    63e4:	df 90       	pop	r13
    63e6:	cf 90       	pop	r12
    63e8:	08 95       	ret

000063ea <init_eeprom>:
extern uint8_t EE_SNOOZE;
extern uint8_t EE_STYLE;


void init_eeprom(void) {	//Set eeprom to a default state.
 if (eeprom_read_byte(&EE_INIT) != pgm_read_byte(&EE_DATA[0])) {
    63ea:	80 e0       	ldi	r24, 0x00	; 0
    63ec:	90 e0       	ldi	r25, 0x00	; 0
    63ee:	0e 94 70 3b 	call	0x76e0	; 0x76e0 <__eerd_byte_m328p>
    63f2:	ef e4       	ldi	r30, 0x4F	; 79
    63f4:	f4 e0       	ldi	r31, 0x04	; 4
    63f6:	e4 91       	lpm	r30, Z+
    63f8:	8e 17       	cp	r24, r30
    63fa:	e1 f0       	breq	.+56     	; 0x6434 <init_eeprom+0x4a>
    DEBUG(putstring("Error with EEPROM data. Clock cannot function without it. Please reprogram.")); 
    DEBUG(uart_putw_dec(eeprom_read_byte(&EE_INIT))); DEBUG(putstring_nl(""));
    while(1) {
      beep(4000, 100);
    63fc:	80 ea       	ldi	r24, 0xA0	; 160
    63fe:	9f e0       	ldi	r25, 0x0F	; 15
    6400:	64 e6       	ldi	r22, 0x64	; 100
    6402:	0e 94 3d 31 	call	0x627a	; 0x627a <beep>
      delay_ms(100);
    6406:	84 e6       	ldi	r24, 0x64	; 100
    6408:	90 e0       	ldi	r25, 0x00	; 0
    640a:	0e 94 fd 35 	call	0x6bfa	; 0x6bfa <delay_ms>
      beep(4000, 100);
    640e:	80 ea       	ldi	r24, 0xA0	; 160
    6410:	9f e0       	ldi	r25, 0x0F	; 15
    6412:	64 e6       	ldi	r22, 0x64	; 100
    6414:	0e 94 3d 31 	call	0x627a	; 0x627a <beep>
      delay_ms(100);
    6418:	84 e6       	ldi	r24, 0x64	; 100
    641a:	90 e0       	ldi	r25, 0x00	; 0
    641c:	0e 94 fd 35 	call	0x6bfa	; 0x6bfa <delay_ms>
      beep(4000, 100);
    6420:	80 ea       	ldi	r24, 0xA0	; 160
    6422:	9f e0       	ldi	r25, 0x0F	; 15
    6424:	64 e6       	ldi	r22, 0x64	; 100
    6426:	0e 94 3d 31 	call	0x627a	; 0x627a <beep>
      delay_ms(1000);
    642a:	88 ee       	ldi	r24, 0xE8	; 232
    642c:	93 e0       	ldi	r25, 0x03	; 3
    642e:	0e 94 fd 35 	call	0x6bfa	; 0x6bfa <delay_ms>
    6432:	e4 cf       	rjmp	.-56     	; 0x63fc <init_eeprom+0x12>
    6434:	08 95       	ret

00006436 <readi2ctime>:
void printnumber(uint8_t n, uint8_t inverted) {
  glcdWriteChar(n/10+'0', inverted);
  glcdWriteChar(n%10+'0', inverted);
}

uint8_t readi2ctime(void) {
    6436:	df 93       	push	r29
    6438:	cf 93       	push	r28
    643a:	cd b7       	in	r28, 0x3d	; 61
    643c:	de b7       	in	r29, 0x3e	; 62
    643e:	29 97       	sbiw	r28, 0x09	; 9
    6440:	0f b6       	in	r0, 0x3f	; 63
    6442:	f8 94       	cli
    6444:	de bf       	out	0x3e, r29	; 62
    6446:	0f be       	out	0x3f, r0	; 63
    6448:	cd bf       	out	0x3d, r28	; 61
  uint8_t regaddr = 0, r;
    644a:	19 82       	std	Y+1, r1	; 0x01
  uint8_t clockdata[8];
  
  // check the time from the RTC
  cli();
    644c:	f8 94       	cli
  r = i2cMasterSendNI(0xD0, 1, &regaddr);
    644e:	80 ed       	ldi	r24, 0xD0	; 208
    6450:	61 e0       	ldi	r22, 0x01	; 1
    6452:	ae 01       	movw	r20, r28
    6454:	4f 5f       	subi	r20, 0xFF	; 255
    6456:	5f 4f       	sbci	r21, 0xFF	; 255
    6458:	0e 94 78 2b 	call	0x56f0	; 0x56f0 <i2cMasterSendNI>

  if (r != 0) {
    645c:	88 23       	and	r24, r24
    645e:	a1 f0       	breq	.+40     	; 0x6488 <readi2ctime+0x52>
    DEBUG(putstring("Reading i2c data: ")); DEBUG(uart_putw_dec(r)); DEBUG(putstring_nl(""));
    while(1) {
      sei();
    6460:	78 94       	sei
      beep(4000, 100);
    6462:	80 ea       	ldi	r24, 0xA0	; 160
    6464:	9f e0       	ldi	r25, 0x0F	; 15
    6466:	64 e6       	ldi	r22, 0x64	; 100
    6468:	0e 94 3d 31 	call	0x627a	; 0x627a <beep>
      delay_ms(100);
    646c:	84 e6       	ldi	r24, 0x64	; 100
    646e:	90 e0       	ldi	r25, 0x00	; 0
    6470:	0e 94 fd 35 	call	0x6bfa	; 0x6bfa <delay_ms>
      beep(4000, 100);
    6474:	80 ea       	ldi	r24, 0xA0	; 160
    6476:	9f e0       	ldi	r25, 0x0F	; 15
    6478:	64 e6       	ldi	r22, 0x64	; 100
    647a:	0e 94 3d 31 	call	0x627a	; 0x627a <beep>
      delay_ms(1000);
    647e:	88 ee       	ldi	r24, 0xE8	; 232
    6480:	93 e0       	ldi	r25, 0x03	; 3
    6482:	0e 94 fd 35 	call	0x6bfa	; 0x6bfa <delay_ms>
    6486:	ec cf       	rjmp	.-40     	; 0x6460 <readi2ctime+0x2a>
    }
  }

  r = i2cMasterReceiveNI(0xD0, 7, &clockdata[0]);
    6488:	80 ed       	ldi	r24, 0xD0	; 208
    648a:	67 e0       	ldi	r22, 0x07	; 7
    648c:	ae 01       	movw	r20, r28
    648e:	4e 5f       	subi	r20, 0xFE	; 254
    6490:	5f 4f       	sbci	r21, 0xFF	; 255
    6492:	0e 94 bf 2b 	call	0x577e	; 0x577e <i2cMasterReceiveNI>
  sei();
    6496:	78 94       	sei

  if (r != 0) {
    6498:	88 23       	and	r24, r24
    649a:	99 f0       	breq	.+38     	; 0x64c2 <readi2ctime+0x8c>
    DEBUG(putstring("Reading i2c data: ")); DEBUG(uart_putw_dec(r)); DEBUG(putstring_nl(""));
    while(1) {
      beep(4000, 100);
    649c:	80 ea       	ldi	r24, 0xA0	; 160
    649e:	9f e0       	ldi	r25, 0x0F	; 15
    64a0:	64 e6       	ldi	r22, 0x64	; 100
    64a2:	0e 94 3d 31 	call	0x627a	; 0x627a <beep>
      delay_ms(100);
    64a6:	84 e6       	ldi	r24, 0x64	; 100
    64a8:	90 e0       	ldi	r25, 0x00	; 0
    64aa:	0e 94 fd 35 	call	0x6bfa	; 0x6bfa <delay_ms>
      beep(4000, 100);
    64ae:	80 ea       	ldi	r24, 0xA0	; 160
    64b0:	9f e0       	ldi	r25, 0x0F	; 15
    64b2:	64 e6       	ldi	r22, 0x64	; 100
    64b4:	0e 94 3d 31 	call	0x627a	; 0x627a <beep>
      delay_ms(1000);
    64b8:	88 ee       	ldi	r24, 0xE8	; 232
    64ba:	93 e0       	ldi	r25, 0x03	; 3
    64bc:	0e 94 fd 35 	call	0x6bfa	; 0x6bfa <delay_ms>
    64c0:	ed cf       	rjmp	.-38     	; 0x649c <readi2ctime+0x66>
    }
  }

  time_s = ((clockdata[0] >> 4) & 0x7)*10 + (clockdata[0] & 0xF);
    64c2:	7a 81       	ldd	r23, Y+2	; 0x02
    64c4:	87 2f       	mov	r24, r23
    64c6:	82 95       	swap	r24
    64c8:	8f 70       	andi	r24, 0x0F	; 15
    64ca:	90 e0       	ldi	r25, 0x00	; 0
    64cc:	87 70       	andi	r24, 0x07	; 7
    64ce:	90 70       	andi	r25, 0x00	; 0
    64d0:	9c 01       	movw	r18, r24
    64d2:	f3 e0       	ldi	r31, 0x03	; 3
    64d4:	22 0f       	add	r18, r18
    64d6:	33 1f       	adc	r19, r19
    64d8:	fa 95       	dec	r31
    64da:	e1 f7       	brne	.-8      	; 0x64d4 <readi2ctime+0x9e>
    64dc:	88 0f       	add	r24, r24
    64de:	99 1f       	adc	r25, r25
    64e0:	28 0f       	add	r18, r24
    64e2:	39 1f       	adc	r19, r25
    64e4:	87 2f       	mov	r24, r23
    64e6:	8f 70       	andi	r24, 0x0F	; 15
    64e8:	82 0f       	add	r24, r18
    64ea:	80 93 3f 03 	sts	0x033F, r24
  time_m = ((clockdata[1] >> 4) & 0x7)*10 + (clockdata[1] & 0xF);
    64ee:	4b 81       	ldd	r20, Y+3	; 0x03
    64f0:	84 2f       	mov	r24, r20
    64f2:	82 95       	swap	r24
    64f4:	8f 70       	andi	r24, 0x0F	; 15
    64f6:	90 e0       	ldi	r25, 0x00	; 0
    64f8:	87 70       	andi	r24, 0x07	; 7
    64fa:	90 70       	andi	r25, 0x00	; 0
    64fc:	9c 01       	movw	r18, r24
    64fe:	63 e0       	ldi	r22, 0x03	; 3
    6500:	22 0f       	add	r18, r18
    6502:	33 1f       	adc	r19, r19
    6504:	6a 95       	dec	r22
    6506:	e1 f7       	brne	.-8      	; 0x6500 <readi2ctime+0xca>
    6508:	88 0f       	add	r24, r24
    650a:	99 1f       	adc	r25, r25
    650c:	28 0f       	add	r18, r24
    650e:	39 1f       	adc	r19, r25
    6510:	4f 70       	andi	r20, 0x0F	; 15
    6512:	42 0f       	add	r20, r18
    6514:	40 93 34 03 	sts	0x0334, r20
  if (clockdata[2] & _BV(6)) {
    6518:	8c 81       	ldd	r24, Y+4	; 0x04
    651a:	48 2f       	mov	r20, r24
    651c:	42 95       	swap	r20
    651e:	4f 70       	andi	r20, 0x0F	; 15
    6520:	68 2f       	mov	r22, r24
    6522:	6f 70       	andi	r22, 0x0F	; 15
    6524:	86 ff       	sbrs	r24, 6
    6526:	22 c0       	rjmp	.+68     	; 0x656c <readi2ctime+0x136>
    // "12 hr" mode
    time_h = ((clockdata[2] >> 5) & 0x1)*12 + 
    6528:	82 95       	swap	r24
    652a:	86 95       	lsr	r24
    652c:	87 70       	andi	r24, 0x07	; 7
    652e:	90 e0       	ldi	r25, 0x00	; 0
    6530:	81 70       	andi	r24, 0x01	; 1
    6532:	90 70       	andi	r25, 0x00	; 0
    6534:	9c 01       	movw	r18, r24
    6536:	22 0f       	add	r18, r18
    6538:	33 1f       	adc	r19, r19
    653a:	28 0f       	add	r18, r24
    653c:	39 1f       	adc	r19, r25
    653e:	22 0f       	add	r18, r18
    6540:	33 1f       	adc	r19, r19
    6542:	22 0f       	add	r18, r18
    6544:	33 1f       	adc	r19, r19
    6546:	84 2f       	mov	r24, r20
    6548:	90 e0       	ldi	r25, 0x00	; 0
    654a:	81 70       	andi	r24, 0x01	; 1
    654c:	90 70       	andi	r25, 0x00	; 0
    654e:	ac 01       	movw	r20, r24
    6550:	f3 e0       	ldi	r31, 0x03	; 3
    6552:	44 0f       	add	r20, r20
    6554:	55 1f       	adc	r21, r21
    6556:	fa 95       	dec	r31
    6558:	e1 f7       	brne	.-8      	; 0x6552 <readi2ctime+0x11c>
    655a:	88 0f       	add	r24, r24
    655c:	99 1f       	adc	r25, r25
    655e:	48 0f       	add	r20, r24
    6560:	59 1f       	adc	r21, r25
    6562:	24 0f       	add	r18, r20
    6564:	26 0f       	add	r18, r22
    6566:	20 93 2a 03 	sts	0x032A, r18
    656a:	11 c0       	rjmp	.+34     	; 0x658e <readi2ctime+0x158>
      ((clockdata[2] >> 4) & 0x1)*10 + (clockdata[2] & 0xF);
  } else {
    time_h = ((clockdata[2] >> 4) & 0x3)*10 + (clockdata[2] & 0xF);
    656c:	84 2f       	mov	r24, r20
    656e:	90 e0       	ldi	r25, 0x00	; 0
    6570:	83 70       	andi	r24, 0x03	; 3
    6572:	90 70       	andi	r25, 0x00	; 0
    6574:	9c 01       	movw	r18, r24
    6576:	43 e0       	ldi	r20, 0x03	; 3
    6578:	22 0f       	add	r18, r18
    657a:	33 1f       	adc	r19, r19
    657c:	4a 95       	dec	r20
    657e:	e1 f7       	brne	.-8      	; 0x6578 <readi2ctime+0x142>
    6580:	88 0f       	add	r24, r24
    6582:	99 1f       	adc	r25, r25
    6584:	28 0f       	add	r18, r24
    6586:	39 1f       	adc	r19, r25
    6588:	62 0f       	add	r22, r18
    658a:	60 93 2a 03 	sts	0x032A, r22
  }
  
  date_d = ((clockdata[4] >> 4) & 0x3)*10 + (clockdata[4] & 0xF);
    658e:	4e 81       	ldd	r20, Y+6	; 0x06
    6590:	84 2f       	mov	r24, r20
    6592:	82 95       	swap	r24
    6594:	8f 70       	andi	r24, 0x0F	; 15
    6596:	90 e0       	ldi	r25, 0x00	; 0
    6598:	83 70       	andi	r24, 0x03	; 3
    659a:	90 70       	andi	r25, 0x00	; 0
    659c:	9c 01       	movw	r18, r24
    659e:	a3 e0       	ldi	r26, 0x03	; 3
    65a0:	22 0f       	add	r18, r18
    65a2:	33 1f       	adc	r19, r19
    65a4:	aa 95       	dec	r26
    65a6:	e1 f7       	brne	.-8      	; 0x65a0 <readi2ctime+0x16a>
    65a8:	88 0f       	add	r24, r24
    65aa:	99 1f       	adc	r25, r25
    65ac:	28 0f       	add	r18, r24
    65ae:	39 1f       	adc	r19, r25
    65b0:	4f 70       	andi	r20, 0x0F	; 15
    65b2:	42 0f       	add	r20, r18
    65b4:	40 93 33 03 	sts	0x0333, r20
  date_m = ((clockdata[5] >> 4) & 0x1)*10 + (clockdata[5] & 0xF);
    65b8:	4f 81       	ldd	r20, Y+7	; 0x07
    65ba:	84 2f       	mov	r24, r20
    65bc:	82 95       	swap	r24
    65be:	8f 70       	andi	r24, 0x0F	; 15
    65c0:	90 e0       	ldi	r25, 0x00	; 0
    65c2:	81 70       	andi	r24, 0x01	; 1
    65c4:	90 70       	andi	r25, 0x00	; 0
    65c6:	9c 01       	movw	r18, r24
    65c8:	e3 e0       	ldi	r30, 0x03	; 3
    65ca:	22 0f       	add	r18, r18
    65cc:	33 1f       	adc	r19, r19
    65ce:	ea 95       	dec	r30
    65d0:	e1 f7       	brne	.-8      	; 0x65ca <readi2ctime+0x194>
    65d2:	88 0f       	add	r24, r24
    65d4:	99 1f       	adc	r25, r25
    65d6:	28 0f       	add	r18, r24
    65d8:	39 1f       	adc	r19, r25
    65da:	4f 70       	andi	r20, 0x0F	; 15
    65dc:	42 0f       	add	r20, r18
    65de:	40 93 3e 03 	sts	0x033E, r20
  date_y = ((clockdata[6] >> 4) & 0xF)*10 + (clockdata[6] & 0xF);
    65e2:	28 85       	ldd	r18, Y+8	; 0x08
    65e4:	82 2f       	mov	r24, r18
    65e6:	82 95       	swap	r24
    65e8:	8f 70       	andi	r24, 0x0F	; 15
    65ea:	3a e0       	ldi	r19, 0x0A	; 10
    65ec:	83 9f       	mul	r24, r19
    65ee:	c0 01       	movw	r24, r0
    65f0:	11 24       	eor	r1, r1
    65f2:	2f 70       	andi	r18, 0x0F	; 15
    65f4:	28 0f       	add	r18, r24
    65f6:	20 93 2d 03 	sts	0x032D, r18
  return clockdata[0] & 0x80;
}
    65fa:	87 2f       	mov	r24, r23
    65fc:	80 78       	andi	r24, 0x80	; 128
    65fe:	29 96       	adiw	r28, 0x09	; 9
    6600:	0f b6       	in	r0, 0x3f	; 63
    6602:	f8 94       	cli
    6604:	de bf       	out	0x3e, r29	; 62
    6606:	0f be       	out	0x3f, r0	; 63
    6608:	cd bf       	out	0x3d, r28	; 61
    660a:	cf 91       	pop	r28
    660c:	df 91       	pop	r29
    660e:	08 95       	ret

00006610 <clock_init>:
inline uint8_t i2bcd(uint8_t x) {
  return ((x/10)<<4) | (x%10);
}


void clock_init(void) {
    6610:	cf 92       	push	r12
    6612:	ef 92       	push	r14
    6614:	0f 93       	push	r16
  // talk to clock
  i2cInit();
    6616:	0e 94 28 2b 	call	0x5650	; 0x5650 <i2cInit>


  if (readi2ctime()) {
    661a:	0e 94 1b 32 	call	0x6436	; 0x6436 <readi2ctime>
    661e:	88 23       	and	r24, r24
    6620:	59 f0       	breq	.+22     	; 0x6638 <clock_init+0x28>
    DEBUGP("uh oh, RTC was off, lets reset it!");
    writei2ctime(0, 0, 12, 0, 1, 1, 9); // noon 1/1/2009
    6622:	80 e0       	ldi	r24, 0x00	; 0
    6624:	60 e0       	ldi	r22, 0x00	; 0
    6626:	4c e0       	ldi	r20, 0x0C	; 12
    6628:	20 e0       	ldi	r18, 0x00	; 0
    662a:	01 e0       	ldi	r16, 0x01	; 1
    662c:	ee 24       	eor	r14, r14
    662e:	e3 94       	inc	r14
    6630:	a9 e0       	ldi	r26, 0x09	; 9
    6632:	ca 2e       	mov	r12, r26
    6634:	0e 94 63 31 	call	0x62c6	; 0x62c6 <writei2ctime>
   }

  readi2ctime();
    6638:	0e 94 1b 32 	call	0x6436	; 0x6436 <readi2ctime>
  DEBUG(uart_putw_dec(date_m));
  DEBUG(uart_putchar('/'));
  DEBUG(uart_putw_dec(date_y));
  DEBUG(putstring_nl(""));

  alarm_m = eeprom_read_byte(&EE_ALARM_MIN) % 60;
    663c:	82 e0       	ldi	r24, 0x02	; 2
    663e:	90 e0       	ldi	r25, 0x00	; 0
    6640:	0e 94 70 3b 	call	0x76e0	; 0x76e0 <__eerd_byte_m328p>
    6644:	6c e3       	ldi	r22, 0x3C	; 60
    6646:	0e 94 f7 3a 	call	0x75ee	; 0x75ee <__udivmodqi4>
    664a:	90 93 2e 03 	sts	0x032E, r25
  alarm_h = eeprom_read_byte(&EE_ALARM_HOUR) % 24;
    664e:	81 e0       	ldi	r24, 0x01	; 1
    6650:	90 e0       	ldi	r25, 0x00	; 0
    6652:	0e 94 70 3b 	call	0x76e0	; 0x76e0 <__eerd_byte_m328p>
    6656:	68 e1       	ldi	r22, 0x18	; 24
    6658:	0e 94 f7 3a 	call	0x75ee	; 0x75ee <__udivmodqi4>
    665c:	90 93 38 03 	sts	0x0338, r25


  //ASSR |= _BV(AS2); // use crystal

  TCCR2B = _BV(CS22) | _BV(CS21) | _BV(CS20); // div by 1024
    6660:	87 e0       	ldi	r24, 0x07	; 7
    6662:	80 93 b1 00 	sts	0x00B1, r24
  // overflow ~30Hz = 8MHz/(255 * 1024)

  // enable interrupt
  TIMSK2 = _BV(TOIE2);
    6666:	81 e0       	ldi	r24, 0x01	; 1
    6668:	80 93 70 00 	sts	0x0070, r24

  sei();
    666c:	78 94       	sei
}
    666e:	0f 91       	pop	r16
    6670:	ef 90       	pop	r14
    6672:	cf 90       	pop	r12
    6674:	08 95       	ret

00006676 <__vector_9>:

}

// runs at about 30 hz
uint8_t t2divider1 = 0, t2divider2 = 0;
SIGNAL (TIMER2_OVF_vect) {
    6676:	1f 92       	push	r1
    6678:	0f 92       	push	r0
    667a:	0f b6       	in	r0, 0x3f	; 63
    667c:	0f 92       	push	r0
    667e:	11 24       	eor	r1, r1
    6680:	ff 92       	push	r15
    6682:	0f 93       	push	r16
    6684:	1f 93       	push	r17
    6686:	2f 93       	push	r18
    6688:	3f 93       	push	r19
    668a:	4f 93       	push	r20
    668c:	5f 93       	push	r21
    668e:	6f 93       	push	r22
    6690:	7f 93       	push	r23
    6692:	8f 93       	push	r24
    6694:	9f 93       	push	r25
    6696:	af 93       	push	r26
    6698:	bf 93       	push	r27
    669a:	ef 93       	push	r30
    669c:	ff 93       	push	r31
  wdt_reset();
    669e:	a8 95       	wdr
#ifdef BACKLIGHT_ADJUST
  if (t2divider1 == TIMER2_RETURN) {
    66a0:	80 91 af 02 	lds	r24, 0x02AF
    66a4:	80 35       	cpi	r24, 0x50	; 80
    66a6:	89 f4       	brne	.+34     	; 0x66ca <__vector_9+0x54>
#else
  if (t2divider1 == 5) {
#endif
    t2divider1 = 0;
    66a8:	10 92 af 02 	sts	0x02AF, r1
    return;
  }

  //This occurs at 6 Hz

  uint8_t last_s = time_s;
    66ac:	10 91 3f 03 	lds	r17, 0x033F
  uint8_t last_m = time_m;
    66b0:	00 91 34 03 	lds	r16, 0x0334
  uint8_t last_h = time_h;
    66b4:	f0 90 2a 03 	lds	r15, 0x032A

  readi2ctime();
    66b8:	0e 94 1b 32 	call	0x6436	; 0x6436 <readi2ctime>
#ifdef GPSENABLE
  //Hooking time reading, and thus time_changed here.
  GPSCheck((displaystyle==STYLE_GPS) && (displaymode == SHOW_TIME));	
    66bc:	80 91 31 03 	lds	r24, 0x0331
    66c0:	87 3d       	cpi	r24, 0xD7	; 215
    66c2:	39 f0       	breq	.+14     	; 0x66d2 <__vector_9+0x5c>
    66c4:	80 e0       	ldi	r24, 0x00	; 0
    66c6:	90 e0       	ldi	r25, 0x00	; 0
    66c8:	0d c0       	rjmp	.+26     	; 0x66e4 <__vector_9+0x6e>
#else
  if (t2divider1 == 5) {
#endif
    t2divider1 = 0;
  } else {
    t2divider1++;
    66ca:	8f 5f       	subi	r24, 0xFF	; 255
    66cc:	80 93 af 02 	sts	0x02AF, r24
    66d0:	c2 c0       	rjmp	.+388    	; 0x6856 <__vector_9+0x1e0>
  uint8_t last_h = time_h;

  readi2ctime();
#ifdef GPSENABLE
  //Hooking time reading, and thus time_changed here.
  GPSCheck((displaystyle==STYLE_GPS) && (displaymode == SHOW_TIME));	
    66d2:	80 91 3a 03 	lds	r24, 0x033A
    66d6:	90 e0       	ldi	r25, 0x00	; 0
    66d8:	81 11       	cpse	r24, r1
    66da:	91 e0       	ldi	r25, 0x01	; 1
    66dc:	81 e0       	ldi	r24, 0x01	; 1
    66de:	98 27       	eor	r25, r24
    66e0:	89 2f       	mov	r24, r25
    66e2:	90 e0       	ldi	r25, 0x00	; 0
    66e4:	0e 94 c6 31 	call	0x638c	; 0x638c <GPSCheck>
#endif
#ifdef DEATHCHRON
  border_tick++;
    66e8:	80 91 f2 01 	lds	r24, 0x01F2
    66ec:	8f 5f       	subi	r24, 0xFF	; 255
    66ee:	80 93 f2 01 	sts	0x01F2, r24
#endif
  
  if (time_h != last_h) {
    66f2:	80 91 2a 03 	lds	r24, 0x032A
    66f6:	8f 15       	cp	r24, r15
    66f8:	31 f0       	breq	.+12     	; 0x6706 <__vector_9+0x90>
    hour_changed = 1; 
    66fa:	81 e0       	ldi	r24, 0x01	; 1
    66fc:	80 93 1f 02 	sts	0x021F, r24
    old_h = last_h;
    6700:	f0 92 35 03 	sts	0x0335, r15
    6704:	07 c0       	rjmp	.+14     	; 0x6714 <__vector_9+0x9e>
    old_m = last_m;
  } else if (time_m != last_m) {
    6706:	80 91 34 03 	lds	r24, 0x0334
    670a:	80 17       	cp	r24, r16
    670c:	31 f0       	breq	.+12     	; 0x671a <__vector_9+0xa4>
    minute_changed = 1;
    670e:	81 e0       	ldi	r24, 0x01	; 1
    6710:	80 93 1e 02 	sts	0x021E, r24
    old_m = last_m;
    6714:	00 93 2b 03 	sts	0x032B, r16
    6718:	09 c0       	rjmp	.+18     	; 0x672c <__vector_9+0xb6>
  } else if (time_s != last_s) {
    671a:	80 91 3f 03 	lds	r24, 0x033F
    671e:	81 17       	cp	r24, r17
    6720:	29 f0       	breq	.+10     	; 0x672c <__vector_9+0xb6>
    second_changed = 1;
    6722:	81 e0       	ldi	r24, 0x01	; 1
    6724:	80 93 20 02 	sts	0x0220, r24
    old_s = last_s;
    6728:	10 93 41 03 	sts	0x0341, r17
  }


  if (time_s != last_s) {
    672c:	80 91 3f 03 	lds	r24, 0x033F
    6730:	81 17       	cp	r24, r17
    6732:	09 f4       	brne	.+2      	; 0x6736 <__vector_9+0xc0>
    6734:	4b c0       	rjmp	.+150    	; 0x67cc <__vector_9+0x156>
    if(alarming && snoozetimer)
    6736:	80 91 39 03 	lds	r24, 0x0339
    673a:	88 23       	and	r24, r24
    673c:	59 f0       	breq	.+22     	; 0x6754 <__vector_9+0xde>
    673e:	80 91 ab 02 	lds	r24, 0x02AB
    6742:	90 91 ac 02 	lds	r25, 0x02AC
    6746:	00 97       	sbiw	r24, 0x00	; 0
    6748:	29 f0       	breq	.+10     	; 0x6754 <__vector_9+0xde>
	  snoozetimer--;
    674a:	01 97       	sbiw	r24, 0x01	; 1
    674c:	90 93 ac 02 	sts	0x02AC, r25
    6750:	80 93 ab 02 	sts	0x02AB, r24

    if(score_mode_timeout) {
    6754:	80 91 21 02 	lds	r24, 0x0221
    6758:	88 23       	and	r24, r24
    675a:	c1 f1       	breq	.+112    	; 0x67cc <__vector_9+0x156>
	  score_mode_timeout--;
    675c:	80 91 21 02 	lds	r24, 0x0221
    6760:	81 50       	subi	r24, 0x01	; 1
    6762:	80 93 21 02 	sts	0x0221, r24
	  if(!score_mode_timeout) {
    6766:	80 91 21 02 	lds	r24, 0x0221
    676a:	88 23       	and	r24, r24
    676c:	79 f5       	brne	.+94     	; 0x67cc <__vector_9+0x156>
	  	last_score_mode = score_mode;
    676e:	80 91 22 02 	lds	r24, 0x0222
    6772:	80 93 f4 01 	sts	0x01F4, r24
#ifdef DEATHCHRON
	  if (displaystyle == STYLE_DEATH) {
    6776:	80 91 31 03 	lds	r24, 0x0331
    677a:	83 3d       	cpi	r24, 0xD3	; 211
    677c:	41 f4       	brne	.+16     	; 0x678e <__vector_9+0x118>
	    if(score_mode >= SCORE_MODE_DEATH_TIME)
    677e:	80 91 22 02 	lds	r24, 0x0222
    6782:	84 30       	cpi	r24, 0x04	; 4
    6784:	20 f0       	brcs	.+8      	; 0x678e <__vector_9+0x118>
	      score_mode = SCORE_MODE_DEATH_TIME;
    6786:	84 e0       	ldi	r24, 0x04	; 4
    6788:	80 93 22 02 	sts	0x0222, r24
    678c:	02 c0       	rjmp	.+4      	; 0x6792 <__vector_9+0x11c>
	    else
	      score_mode = SCORE_MODE_TIME;
	  }
	  else
#endif
	    score_mode = SCORE_MODE_TIME;
    678e:	10 92 22 02 	sts	0x0222, r1
	    if(hour_changed) {
    6792:	80 91 1f 02 	lds	r24, 0x021F
    6796:	88 23       	and	r24, r24
    6798:	29 f0       	breq	.+10     	; 0x67a4 <__vector_9+0x12e>
	      time_h = old_h;
    679a:	80 91 35 03 	lds	r24, 0x0335
    679e:	80 93 2a 03 	sts	0x032A, r24
    67a2:	04 c0       	rjmp	.+8      	; 0x67ac <__vector_9+0x136>
	      time_m = old_m;
	    } else if (minute_changed) {
    67a4:	80 91 1e 02 	lds	r24, 0x021E
    67a8:	88 23       	and	r24, r24
    67aa:	21 f0       	breq	.+8      	; 0x67b4 <__vector_9+0x13e>
	      time_m = old_m;
    67ac:	80 91 2b 03 	lds	r24, 0x032B
    67b0:	80 93 34 03 	sts	0x0334, r24
	    }
	    if(hour_changed || minute_changed) {
    67b4:	80 91 1f 02 	lds	r24, 0x021F
    67b8:	88 23       	and	r24, r24
    67ba:	21 f4       	brne	.+8      	; 0x67c4 <__vector_9+0x14e>
    67bc:	80 91 1e 02 	lds	r24, 0x021E
    67c0:	88 23       	and	r24, r24
    67c2:	21 f0       	breq	.+8      	; 0x67cc <__vector_9+0x156>
	      time_h = last_h;
    67c4:	f0 92 2a 03 	sts	0x032A, r15
	      time_m = last_m;
    67c8:	00 93 34 03 	sts	0x0334, r16
    DEBUG(uart_putw_dec(time_s));
    DEBUG(putstring_nl("****"));*/
  }

  // check if we have an alarm set
  if (alarm_on && (time_s == 0) && (time_m == alarm_m) && (time_h == alarm_h)) {
    67cc:	80 91 36 03 	lds	r24, 0x0336
    67d0:	88 23       	and	r24, r24
    67d2:	99 f0       	breq	.+38     	; 0x67fa <__vector_9+0x184>
    67d4:	80 91 3f 03 	lds	r24, 0x033F
    67d8:	88 23       	and	r24, r24
    67da:	79 f4       	brne	.+30     	; 0x67fa <__vector_9+0x184>
    67dc:	90 91 34 03 	lds	r25, 0x0334
    67e0:	80 91 2e 03 	lds	r24, 0x032E
    67e4:	98 17       	cp	r25, r24
    67e6:	49 f4       	brne	.+18     	; 0x67fa <__vector_9+0x184>
    67e8:	90 91 2a 03 	lds	r25, 0x032A
    67ec:	80 91 38 03 	lds	r24, 0x0338
    67f0:	98 17       	cp	r25, r24
    67f2:	19 f4       	brne	.+6      	; 0x67fa <__vector_9+0x184>
    DEBUG(putstring_nl("ALARM TRIPPED!!!"));
    alarm_tripped = 1;
    67f4:	81 e0       	ldi	r24, 0x01	; 1
    67f6:	80 93 40 03 	sts	0x0340, r24
  }
  
  //And wait till the score changes to actually set the alarm off.
  if(!minute_changed && !hour_changed && alarm_tripped) {
    67fa:	80 91 1e 02 	lds	r24, 0x021E
    67fe:	88 23       	and	r24, r24
    6800:	69 f4       	brne	.+26     	; 0x681c <__vector_9+0x1a6>
    6802:	80 91 1f 02 	lds	r24, 0x021F
    6806:	88 23       	and	r24, r24
    6808:	49 f4       	brne	.+18     	; 0x681c <__vector_9+0x1a6>
    680a:	80 91 40 03 	lds	r24, 0x0340
    680e:	88 23       	and	r24, r24
    6810:	29 f0       	breq	.+10     	; 0x681c <__vector_9+0x1a6>
  	 DEBUG(putstring_nl("ALARM GOING!!!!"));
  	 alarming = 1;
    6812:	81 e0       	ldi	r24, 0x01	; 1
    6814:	80 93 39 03 	sts	0x0339, r24
  	 alarm_tripped = 0;
    6818:	10 92 40 03 	sts	0x0340, r1
  }

  if (t2divider2 == 6) {
    681c:	80 91 b0 02 	lds	r24, 0x02B0
    6820:	86 30       	cpi	r24, 0x06	; 6
    6822:	39 f4       	brne	.+14     	; 0x6832 <__vector_9+0x1bc>
    t2divider2 = 0;
    6824:	10 92 b0 02 	sts	0x02B0, r1
  } else {
    t2divider2++;
    return;
  }

  if (buttonholdcounter) {
    6828:	80 91 11 02 	lds	r24, 0x0211
    682c:	88 23       	and	r24, r24
    682e:	29 f4       	brne	.+10     	; 0x683a <__vector_9+0x1c4>
    6830:	09 c0       	rjmp	.+18     	; 0x6844 <__vector_9+0x1ce>
  }

  if (t2divider2 == 6) {
    t2divider2 = 0;
  } else {
    t2divider2++;
    6832:	8f 5f       	subi	r24, 0xFF	; 255
    6834:	80 93 b0 02 	sts	0x02B0, r24
    6838:	0e c0       	rjmp	.+28     	; 0x6856 <__vector_9+0x1e0>
    return;
  }

  if (buttonholdcounter) {
    buttonholdcounter--;
    683a:	80 91 11 02 	lds	r24, 0x0211
    683e:	81 50       	subi	r24, 0x01	; 1
    6840:	80 93 11 02 	sts	0x0211, r24
  }

  if (timeoutcounter) {
    6844:	80 91 12 02 	lds	r24, 0x0212
    6848:	88 23       	and	r24, r24
    684a:	29 f0       	breq	.+10     	; 0x6856 <__vector_9+0x1e0>
    timeoutcounter--;
    684c:	80 91 12 02 	lds	r24, 0x0212
    6850:	81 50       	subi	r24, 0x01	; 1
    6852:	80 93 12 02 	sts	0x0212, r24
  }
}
    6856:	ff 91       	pop	r31
    6858:	ef 91       	pop	r30
    685a:	bf 91       	pop	r27
    685c:	af 91       	pop	r26
    685e:	9f 91       	pop	r25
    6860:	8f 91       	pop	r24
    6862:	7f 91       	pop	r23
    6864:	6f 91       	pop	r22
    6866:	5f 91       	pop	r21
    6868:	4f 91       	pop	r20
    686a:	3f 91       	pop	r19
    686c:	2f 91       	pop	r18
    686e:	1f 91       	pop	r17
    6870:	0f 91       	pop	r16
    6872:	ff 90       	pop	r15
    6874:	0f 90       	pop	r0
    6876:	0f be       	out	0x3f, r0	; 63
    6878:	0f 90       	pop	r0
    687a:	1f 90       	pop	r1
    687c:	18 95       	reti

0000687e <drawArrow>:
    }   
  }
}


void drawArrow(uint8_t x, uint8_t y, uint8_t l) {
    687e:	ef 92       	push	r14
    6880:	ff 92       	push	r15
    6882:	0f 93       	push	r16
    6884:	1f 93       	push	r17
    6886:	f8 2e       	mov	r15, r24
    6888:	16 2f       	mov	r17, r22
    688a:	e4 2e       	mov	r14, r20
  glcdFillRectangle(x, y, l, 1, ON);
    688c:	21 e0       	ldi	r18, 0x01	; 1
    688e:	01 e0       	ldi	r16, 0x01	; 1
    6890:	0e 94 7e 29 	call	0x52fc	; 0x52fc <glcdFillRectangle>
  glcdSetDot(x+l-2,y-1);
    6894:	fe 0c       	add	r15, r14
    6896:	0f 2d       	mov	r16, r15
    6898:	02 50       	subi	r16, 0x02	; 2
    689a:	11 50       	subi	r17, 0x01	; 1
    689c:	80 2f       	mov	r24, r16
    689e:	61 2f       	mov	r22, r17
    68a0:	0e 94 ff 2a 	call	0x55fe	; 0x55fe <glcdSetDot>
  glcdSetDot(x+l-2,y+1);
    68a4:	1e 5f       	subi	r17, 0xFE	; 254
    68a6:	80 2f       	mov	r24, r16
    68a8:	61 2f       	mov	r22, r17
    68aa:	0e 94 ff 2a 	call	0x55fe	; 0x55fe <glcdSetDot>
  glcdSetDot(x+l-3,y-2);
    68ae:	01 50       	subi	r16, 0x01	; 1
    68b0:	13 50       	subi	r17, 0x03	; 3
    68b2:	80 2f       	mov	r24, r16
    68b4:	61 2f       	mov	r22, r17
    68b6:	0e 94 ff 2a 	call	0x55fe	; 0x55fe <glcdSetDot>
  glcdSetDot(x+l-3,y+2);
    68ba:	1c 5f       	subi	r17, 0xFC	; 252
    68bc:	80 2f       	mov	r24, r16
    68be:	61 2f       	mov	r22, r17
    68c0:	0e 94 ff 2a 	call	0x55fe	; 0x55fe <glcdSetDot>
}
    68c4:	1f 91       	pop	r17
    68c6:	0f 91       	pop	r16
    68c8:	ff 90       	pop	r15
    68ca:	ef 90       	pop	r14
    68cc:	08 95       	ret

000068ce <main>:
  //Because of this, and because we are storing some data there, bad things will happen if the
  //eeprom is NOT initialized. This is why we error out with infinite triple beeps if it is
  //not initialized.
}

int main(void) {
    68ce:	6f 92       	push	r6
    68d0:	7f 92       	push	r7
    68d2:	8f 92       	push	r8
    68d4:	9f 92       	push	r9
    68d6:	af 92       	push	r10
    68d8:	bf 92       	push	r11
    68da:	cf 92       	push	r12
    68dc:	df 92       	push	r13
    68de:	ef 92       	push	r14
    68e0:	ff 92       	push	r15
    68e2:	0f 93       	push	r16
    68e4:	1f 93       	push	r17
    68e6:	cf 93       	push	r28
    68e8:	df 93       	push	r29
  uint8_t inverted = 0;
  uint8_t mcustate;
  uint8_t display_date = 0;

  // check if we were reset
  mcustate = MCUSR;
    68ea:	84 b7       	in	r24, 0x34	; 52
  MCUSR = 0;
    68ec:	14 be       	out	0x34, r1	; 52
  
  //Just in case we were reset inside of the glcd init function
  //which would happen if the lcd is not plugged in. The end result
  //of that, is it will beep, pause, for as long as there is no lcd
  //plugged in.
  wdt_disable();
    68ee:	88 e1       	ldi	r24, 0x18	; 24
    68f0:	0f b6       	in	r0, 0x3f	; 63
    68f2:	f8 94       	cli
    68f4:	80 93 60 00 	sts	0x0060, r24
    68f8:	10 92 60 00 	sts	0x0060, r1
    68fc:	0f be       	out	0x3f, r0	; 63

  // setup uart
  uart_init(BRRL_4800);
    68fe:	87 e6       	ldi	r24, 0x67	; 103
    6900:	90 e0       	ldi	r25, 0x00	; 0
    6902:	0e 94 e6 35 	call	0x6bcc	; 0x6bcc <uart_init>
#ifdef GPSENABLE
  UCSR0B |= _BV(TXEN0) | _BV(RXEN0) | _BV(RXCIE0);
    6906:	80 91 c1 00 	lds	r24, 0x00C1
    690a:	88 69       	ori	r24, 0x98	; 152
    690c:	80 93 c1 00 	sts	0x00C1, r24
  //HardwareSerial Serial(&rx_buffer, &UBRR0H, &UBRR0L, &UCSR0A, &UCSR0B, &UDR0, RXEN0, TXEN0, RXCIE0, UDRE0, U2X0);
#endif
  DEBUGP("RATT Clock");

  // set up piezo
  PIEZO_DDR |= _BV(PIEZO);
    6910:	3b 9a       	sbi	0x07, 3	; 7

  DEBUGP("clock!");
  clock_init();
    6912:	0e 94 08 33 	call	0x6610	; 0x6610 <clock_init>
  //beep(4000, 100);
  

  init_eeprom();
    6916:	0e 94 f5 31 	call	0x63ea	; 0x63ea <init_eeprom>
  
  region = eeprom_read_byte(&EE_REGION);
    691a:	84 e0       	ldi	r24, 0x04	; 4
    691c:	90 e0       	ldi	r25, 0x00	; 0
    691e:	0e 94 70 3b 	call	0x76e0	; 0x76e0 <__eerd_byte_m328p>
    6922:	80 93 37 03 	sts	0x0337, r24
  time_format = eeprom_read_byte(&EE_TIME_FORMAT);
    6926:	85 e0       	ldi	r24, 0x05	; 5
    6928:	90 e0       	ldi	r25, 0x00	; 0
    692a:	0e 94 70 3b 	call	0x76e0	; 0x76e0 <__eerd_byte_m328p>
    692e:	80 93 2c 03 	sts	0x032C, r24
  DEBUGP("buttons!");
  initbuttons();
    6932:	0e 94 c2 1d 	call	0x3b84	; 0x3b84 <initbuttons>

  setalarmstate();
    6936:	0e 94 89 2e 	call	0x5d12	; 0x5d12 <setalarmstate>

  // setup 1ms timer on timer0
  TCCR0A = _BV(WGM01);
    693a:	82 e0       	ldi	r24, 0x02	; 2
    693c:	84 bd       	out	0x24, r24	; 36
  TCCR0B = _BV(CS01) | _BV(CS00);
    693e:	83 e0       	ldi	r24, 0x03	; 3
    6940:	85 bd       	out	0x25, r24	; 37
  OCR0A = 125;
    6942:	8d e7       	ldi	r24, 0x7D	; 125
    6944:	87 bd       	out	0x27, r24	; 39
  TIMSK0 |= _BV(OCIE0A);
    6946:	80 91 6e 00 	lds	r24, 0x006E
    694a:	82 60       	ori	r24, 0x02	; 2
    694c:	80 93 6e 00 	sts	0x006E, r24

  // turn backlight on
  DDRD |= _BV(3);
    6950:	53 9a       	sbi	0x0a, 3	; 10
#ifndef BACKLIGHT_ADJUST
  PORTD |= _BV(3);
#else
  TCCR2A = _BV(COM2B1); // PWM output on pin D3
    6952:	80 e2       	ldi	r24, 0x20	; 32
    6954:	80 93 b0 00 	sts	0x00B0, r24
  TCCR2A |= _BV(WGM21) | _BV(WGM20); // fast PWM
    6958:	80 91 b0 00 	lds	r24, 0x00B0
    695c:	83 60       	ori	r24, 0x03	; 3
    695e:	80 93 b0 00 	sts	0x00B0, r24
  TCCR2B |= _BV(WGM22);
    6962:	80 91 b1 00 	lds	r24, 0x00B1
    6966:	88 60       	ori	r24, 0x08	; 8
    6968:	80 93 b1 00 	sts	0x00B1, r24
  OCR2A = OCR2A_VALUE;
    696c:	80 e1       	ldi	r24, 0x10	; 16
    696e:	80 93 b3 00 	sts	0x00B3, r24
  OCR2B = eeprom_read_byte(&EE_BRIGHT);
    6972:	83 e0       	ldi	r24, 0x03	; 3
    6974:	90 e0       	ldi	r25, 0x00	; 0
    6976:	0e 94 70 3b 	call	0x76e0	; 0x76e0 <__eerd_byte_m328p>
    697a:	80 93 b4 00 	sts	0x00B4, r24
#endif

  DDRB |= _BV(5);
    697e:	25 9a       	sbi	0x04, 5	; 4
  beep(4000, 100);
    6980:	80 ea       	ldi	r24, 0xA0	; 160
    6982:	9f e0       	ldi	r25, 0x0F	; 15
    6984:	64 e6       	ldi	r22, 0x64	; 100
    6986:	0e 94 3d 31 	call	0x627a	; 0x627a <beep>
  
  //glcdInit locks and disables interrupts in one of its functions.  If the LCD is not
  //plugged in, glcd will run forever.  For good reason, it would be desirable to know
  //that the LCD is plugged in and working correctly as a result.  This is why we are
  //using a watch dog timer.  The lcd should initialized in way less than 500 ms.
  wdt_enable(WDTO_2S);
    698a:	2f e0       	ldi	r18, 0x0F	; 15
    698c:	88 e1       	ldi	r24, 0x18	; 24
    698e:	90 e0       	ldi	r25, 0x00	; 0
    6990:	0f b6       	in	r0, 0x3f	; 63
    6992:	f8 94       	cli
    6994:	a8 95       	wdr
    6996:	80 93 60 00 	sts	0x0060, r24
    699a:	0f be       	out	0x3f, r0	; 63
    699c:	20 93 60 00 	sts	0x0060, r18
  glcdInit();
    69a0:	0e 94 7e 2d 	call	0x5afc	; 0x5afc <glcdInit>
  glcdClearScreen();
    69a4:	0e 94 5a 2d 	call	0x5ab4	; 0x5ab4 <glcdClearScreen>

  
  //Dataman - InitiAmin now init displays(0) as well.
  //initdisplay(0);
  displaystyle = eeprom_read_byte(&EE_STYLE);
    69a8:	87 e0       	ldi	r24, 0x07	; 7
    69aa:	90 e0       	ldi	r25, 0x00	; 0
    69ac:	0e 94 70 3b 	call	0x76e0	; 0x76e0 <__eerd_byte_m328p>
    69b0:	80 93 31 03 	sts	0x0331, r24
  if(displaystyle >= STYLE_ABOUT) {
    69b4:	80 91 31 03 	lds	r24, 0x0331
    69b8:	88 3d       	cpi	r24, 0xD8	; 216
    69ba:	48 f0       	brcs	.+18     	; 0x69ce <main+0x100>
    displaystyle = STYLE_ROTATE;
    69bc:	85 ed       	ldi	r24, 0xD5	; 213
    69be:	80 93 31 03 	sts	0x0331, r24
    eeprom_write_byte(&EE_STYLE,displaystyle);
    69c2:	60 91 31 03 	lds	r22, 0x0331
    69c6:	87 e0       	ldi	r24, 0x07	; 7
    69c8:	90 e0       	ldi	r25, 0x00	; 0
    69ca:	0e 94 7e 3b 	call	0x76fc	; 0x76fc <__eewr_byte_m328p>
  }
  RotateFlag = 0;
    69ce:	10 92 3d 03 	sts	0x033D, r1
  initanim();
    69d2:	0e 94 7e 28 	call	0x50fc	; 0x50fc <initanim>
    69d6:	00 e0       	ldi	r16, 0x00	; 0
    69d8:	10 e0       	ldi	r17, 0x00	; 0
  
  while (1) {
    animticker = ANIMTICK_MS;
    69da:	6b e4       	ldi	r22, 0x4B	; 75
    69dc:	c6 2e       	mov	r12, r22
    69de:	d1 2c       	mov	r13, r1
}

void setsnooze(void) {
  //snoozetimer = eeprom_read_byte(&EE_SNOOZE);
  //snoozetimer *= 60; // convert minutes to seconds
  snoozetimer = MAXSNOOZE;
    69e0:	c8 e5       	ldi	r28, 0x58	; 88
    69e2:	d2 e0       	ldi	r29, 0x02	; 2
	      score_mode = SCORE_MODE_YEAR;
	  }
	  else
#endif
		   score_mode = SCORE_MODE_YEAR;
	    score_mode_timeout = SCORE_MODE_TIMEOUT;
    69e4:	55 e0       	ldi	r21, 0x05	; 5
    69e6:	95 2e       	mov	r9, r21
    69e8:	43 e0       	ldi	r20, 0x03	; 3
    69ea:	64 2e       	mov	r6, r20
	    else
	      score_mode = SCORE_MODE_YEAR;
	  }
	  else
#endif
		   score_mode = SCORE_MODE_YEAR;
    69ec:	32 e0       	ldi	r19, 0x02	; 2
    69ee:	f3 2e       	mov	r15, r19
	{
		display_date=0;
#ifdef DEATHCHRON
	  if (displaystyle == STYLE_DEATH) {
	    if(score_mode >= SCORE_MODE_DEATH_TIME)
	      score_mode = SCORE_MODE_DEATH_YEAR;
    69f0:	26 e0       	ldi	r18, 0x06	; 6
    69f2:	b2 2e       	mov	r11, r18
    if(just_pressed & 0x4) {
#ifdef DEATHCHRON
	  if (displaystyle == STYLE_DEATH) {
	    just_pressed = 0;
	    if(score_mode < SCORE_MODE_DEATH_TIME)
	      score_mode = SCORE_MODE_DEATH_TIME;
    69f4:	94 e0       	ldi	r25, 0x04	; 4
    69f6:	a9 2e       	mov	r10, r25
	    else
	      score_mode = SCORE_MODE_DATE;
	  }
	  else
#endif
	  	score_mode = SCORE_MODE_DATE;
    69f8:	ee 24       	eor	r14, r14
    69fa:	e3 94       	inc	r14
      case SET_TIME:
	displaymode = SET_DATE;
	set_date();
	break;
      case SET_DATE:
	displaymode = SET_REGION;
    69fc:	88 e0       	ldi	r24, 0x08	; 8
    69fe:	88 2e       	mov	r8, r24
      //drawdisplay();
      switch(displaymode) {
      case (SHOW_TIME):
      case (CFG_MENU):	//Returning from a configuration menu module.
	// DATAMAN - ADD STYLE MENU
	displaymode = SET_STYLE;
    6a00:	b8 ec       	ldi	r27, 0xC8	; 200
    6a02:	7b 2e       	mov	r7, r27
  }
  RotateFlag = 0;
  initanim();
  
  while (1) {
    animticker = ANIMTICK_MS;
    6a04:	d0 92 3c 03 	sts	0x033C, r13
    6a08:	c0 92 3b 03 	sts	0x033B, r12

    // check buttons to see if we have interaction stuff to deal with
	if(just_pressed && alarming)
    6a0c:	80 91 0f 02 	lds	r24, 0x020F
    6a10:	88 23       	and	r24, r24
    6a12:	79 f0       	breq	.+30     	; 0x6a32 <main+0x164>
    6a14:	80 91 39 03 	lds	r24, 0x0339
    6a18:	88 23       	and	r24, r24
    6a1a:	59 f0       	breq	.+22     	; 0x6a32 <main+0x164>
	{
	  just_pressed = 0;
    6a1c:	10 92 0f 02 	sts	0x020F, r1
}

void setsnooze(void) {
  //snoozetimer = eeprom_read_byte(&EE_SNOOZE);
  //snoozetimer *= 60; // convert minutes to seconds
  snoozetimer = MAXSNOOZE;
    6a20:	d0 93 ac 02 	sts	0x02AC, r29
    6a24:	c0 93 ab 02 	sts	0x02AB, r28
  TCCR1B = 0;
    6a28:	10 92 81 00 	sts	0x0081, r1
  // turn off piezo
  PIEZO_PORT &= ~_BV(PIEZO);
    6a2c:	43 98       	cbi	0x08, 3	; 8
  DEBUGP("snooze");
  //displaymode = SHOW_SNOOZE;
  //delay_ms(1000);
  displaymode = SHOW_TIME;
    6a2e:	10 92 3a 03 	sts	0x033A, r1
	{
	  just_pressed = 0;
	  setsnooze();
	}
	
	if(display_date==3 && !score_mode_timeout)
    6a32:	13 30       	cpi	r17, 0x03	; 3
    6a34:	d9 f4       	brne	.+54     	; 0x6a6c <main+0x19e>
    6a36:	80 91 21 02 	lds	r24, 0x0221
    6a3a:	88 23       	and	r24, r24
    6a3c:	b9 f4       	brne	.+46     	; 0x6a6c <main+0x19e>
	{
		display_date=0;
#ifdef DEATHCHRON
	  if (displaystyle == STYLE_DEATH) {
    6a3e:	80 91 31 03 	lds	r24, 0x0331
    6a42:	83 3d       	cpi	r24, 0xD3	; 211
    6a44:	39 f4       	brne	.+14     	; 0x6a54 <main+0x186>
	    if(score_mode >= SCORE_MODE_DEATH_TIME)
    6a46:	80 91 22 02 	lds	r24, 0x0222
    6a4a:	84 30       	cpi	r24, 0x04	; 4
    6a4c:	18 f0       	brcs	.+6      	; 0x6a54 <main+0x186>
	      score_mode = SCORE_MODE_DEATH_YEAR;
    6a4e:	b0 92 22 02 	sts	0x0222, r11
    6a52:	02 c0       	rjmp	.+4      	; 0x6a58 <main+0x18a>
	    else
	      score_mode = SCORE_MODE_YEAR;
	  }
	  else
#endif
		   score_mode = SCORE_MODE_YEAR;
    6a54:	f0 92 22 02 	sts	0x0222, r15
	    score_mode_timeout = SCORE_MODE_TIMEOUT;
    6a58:	80 91 31 03 	lds	r24, 0x0331
    6a5c:	81 30       	cpi	r24, 0x01	; 1
    6a5e:	11 f0       	breq	.+4      	; 0x6a64 <main+0x196>
    6a60:	83 e0       	ldi	r24, 0x03	; 3
    6a62:	01 c0       	rjmp	.+2      	; 0x6a66 <main+0x198>
    6a64:	85 e0       	ldi	r24, 0x05	; 5
    6a66:	80 93 21 02 	sts	0x0221, r24
    6a6a:	10 e0       	ldi	r17, 0x00	; 0
    //Was formally set for just the + button.  However, because the Set button was never
    //accounted for, If the alarm was turned on, and ONLY the set button was pushed since then,
    //the alarm would not sound at alarm time, but go into a snooze immediately after going off.
    //This could potentially make you late for work, and had to be fixed.

    if(just_pressed & 0x4) {
    6a6c:	80 91 0f 02 	lds	r24, 0x020F
    6a70:	82 ff       	sbrs	r24, 2
    6a72:	12 c0       	rjmp	.+36     	; 0x6a98 <main+0x1ca>
#ifdef DEATHCHRON
	  if (displaystyle == STYLE_DEATH) {
    6a74:	80 91 31 03 	lds	r24, 0x0331
    6a78:	83 3d       	cpi	r24, 0xD3	; 211
    6a7a:	61 f4       	brne	.+24     	; 0x6a94 <main+0x1c6>
	    just_pressed = 0;
    6a7c:	10 92 0f 02 	sts	0x020F, r1
	    if(score_mode < SCORE_MODE_DEATH_TIME)
    6a80:	80 91 22 02 	lds	r24, 0x0222
    6a84:	84 30       	cpi	r24, 0x04	; 4
    6a86:	18 f4       	brcc	.+6      	; 0x6a8e <main+0x1c0>
	      score_mode = SCORE_MODE_DEATH_TIME;
    6a88:	a0 92 22 02 	sts	0x0222, r10
    6a8c:	05 c0       	rjmp	.+10     	; 0x6a98 <main+0x1ca>
	    else
	      score_mode = SCORE_MODE_TIME;
    6a8e:	10 92 22 02 	sts	0x0222, r1
    6a92:	02 c0       	rjmp	.+4      	; 0x6a98 <main+0x1ca>
	  }
	  else
#endif
	    just_pressed = 2;
    6a94:	f0 92 0f 02 	sts	0x020F, r15
	}
    
	if (just_pressed & 0x2) {
    6a98:	80 91 0f 02 	lds	r24, 0x020F
    6a9c:	81 ff       	sbrs	r24, 1
    6a9e:	19 c0       	rjmp	.+50     	; 0x6ad2 <main+0x204>
	  just_pressed = 0;
    6aa0:	10 92 0f 02 	sts	0x020F, r1
#ifdef OPTION_DOW_DATELONG
	  if((region == REGION_US) || (region == REGION_EU)) {
#endif
	  	display_date = 3;
#ifdef DEATHCHRON
	  if (displaystyle == STYLE_DEATH) {
    6aa4:	80 91 31 03 	lds	r24, 0x0331
    6aa8:	83 3d       	cpi	r24, 0xD3	; 211
    6aaa:	39 f4       	brne	.+14     	; 0x6aba <main+0x1ec>
	    if(score_mode >= SCORE_MODE_DEATH_TIME)
    6aac:	80 91 22 02 	lds	r24, 0x0222
    6ab0:	84 30       	cpi	r24, 0x04	; 4
    6ab2:	18 f0       	brcs	.+6      	; 0x6aba <main+0x1ec>
	      score_mode = SCORE_MODE_DEATH_DATE;
    6ab4:	90 92 22 02 	sts	0x0222, r9
    6ab8:	02 c0       	rjmp	.+4      	; 0x6abe <main+0x1f0>
	    else
	      score_mode = SCORE_MODE_DATE;
	  }
	  else
#endif
	  	score_mode = SCORE_MODE_DATE;
    6aba:	e0 92 22 02 	sts	0x0222, r14
	  else {
	  	display_date = 1;
	  	score_mode = SCORE_MODE_DOW;
	  }
#endif
	  score_mode_timeout = SCORE_MODE_TIMEOUT;
    6abe:	80 91 31 03 	lds	r24, 0x0331
    6ac2:	81 30       	cpi	r24, 0x01	; 1
    6ac4:	11 f0       	breq	.+4      	; 0x6aca <main+0x1fc>
    6ac6:	83 e0       	ldi	r24, 0x03	; 3
    6ac8:	01 c0       	rjmp	.+2      	; 0x6acc <main+0x1fe>
    6aca:	85 e0       	ldi	r24, 0x05	; 5
    6acc:	80 93 21 02 	sts	0x0221, r24
    6ad0:	13 e0       	ldi	r17, 0x03	; 3
	  //drawdisplay();
	}

    if (just_pressed & 0x1) {
    6ad2:	80 91 0f 02 	lds	r24, 0x020F
    6ad6:	80 ff       	sbrs	r24, 0
    6ad8:	45 c0       	rjmp	.+138    	; 0x6b64 <main+0x296>
      just_pressed = 0;
    6ada:	10 92 0f 02 	sts	0x020F, r1
      display_date = 0;
      score_mode = SCORE_MODE_TIME;
    6ade:	10 92 22 02 	sts	0x0222, r1
      score_mode_timeout = 0;
    6ae2:	10 92 21 02 	sts	0x0221, r1
      //drawdisplay();
      switch(displaymode) {
    6ae6:	80 91 3a 03 	lds	r24, 0x033A
    6aea:	85 30       	cpi	r24, 0x05	; 5
    6aec:	31 f1       	breq	.+76     	; 0x6b3a <main+0x26c>
    6aee:	86 30       	cpi	r24, 0x06	; 6
    6af0:	38 f4       	brcc	.+14     	; 0x6b00 <main+0x232>
    6af2:	83 30       	cpi	r24, 0x03	; 3
    6af4:	e9 f0       	breq	.+58     	; 0x6b30 <main+0x262>
    6af6:	84 30       	cpi	r24, 0x04	; 4
    6af8:	a0 f4       	brcc	.+40     	; 0x6b22 <main+0x254>
    6afa:	88 23       	and	r24, r24
    6afc:	41 f0       	breq	.+16     	; 0x6b0e <main+0x240>
    6afe:	27 c0       	rjmp	.+78     	; 0x6b4e <main+0x280>
    6b00:	82 36       	cpi	r24, 0x62	; 98
    6b02:	29 f0       	breq	.+10     	; 0x6b0e <main+0x240>
    6b04:	88 3c       	cpi	r24, 0xC8	; 200
    6b06:	41 f0       	breq	.+16     	; 0x6b18 <main+0x24a>
    6b08:	88 30       	cpi	r24, 0x08	; 8
    6b0a:	09 f5       	brne	.+66     	; 0x6b4e <main+0x280>
    6b0c:	1b c0       	rjmp	.+54     	; 0x6b44 <main+0x276>
      case (SHOW_TIME):
      case (CFG_MENU):	//Returning from a configuration menu module.
	// DATAMAN - ADD STYLE MENU
	displaymode = SET_STYLE;
    6b0e:	70 92 3a 03 	sts	0x033A, r7
	set_style();
    6b12:	0e 94 2c 23 	call	0x4658	; 0x4658 <set_style>
    6b16:	1d c0       	rjmp	.+58     	; 0x6b52 <main+0x284>
	break; 
	case SET_STYLE:
	// END ADD STYLE MENU
	displaymode = SET_ALARM;
    6b18:	a0 92 3a 03 	sts	0x033A, r10
	set_alarm();
    6b1c:	0e 94 39 21 	call	0x4272	; 0x4272 <set_alarm>
    6b20:	18 c0       	rjmp	.+48     	; 0x6b52 <main+0x284>
	break;
      case (SET_ALARM):
	displaymode = SET_TIME;
    6b22:	60 92 3a 03 	sts	0x033A, r6
	set_time();
    6b26:	0e 94 8f 20 	call	0x411e	; 0x411e <set_time>
	timeunknown = 0;
    6b2a:	10 92 e4 01 	sts	0x01E4, r1
    6b2e:	11 c0       	rjmp	.+34     	; 0x6b52 <main+0x284>
	break;
      case SET_TIME:
	displaymode = SET_DATE;
    6b30:	90 92 3a 03 	sts	0x033A, r9
	set_date();
    6b34:	0e 94 05 22 	call	0x440a	; 0x440a <set_date>
    6b38:	0c c0       	rjmp	.+24     	; 0x6b52 <main+0x284>
	break;
      case SET_DATE:
	displaymode = SET_REGION;
    6b3a:	80 92 3a 03 	sts	0x033A, r8
	set_region();
    6b3e:	0e 94 bf 22 	call	0x457e	; 0x457e <set_region>
    6b42:	07 c0       	rjmp	.+14     	; 0x6b52 <main+0x284>
	break;
#ifdef BACKLIGHT_ADJUST
	  case SET_REGION:
	displaymode = SET_BRIGHTNESS;
    6b44:	b0 92 3a 03 	sts	0x033A, r11
	set_backlight();
    6b48:	0e 94 b2 21 	call	0x4364	; 0x4364 <set_backlight>
    6b4c:	02 c0       	rjmp	.+4      	; 0x6b52 <main+0x284>
	break;
#endif
      default:
	displaymode = SHOW_TIME;
    6b4e:	10 92 3a 03 	sts	0x033A, r1
	//Dataman - Changing initdisplays to initanims, need to make sure as animation may have changed.
	//initdisplay(0);
	//initanim();
      }

      if (displaymode == SHOW_TIME) {
    6b52:	80 91 3a 03 	lds	r24, 0x033A
    6b56:	88 23       	and	r24, r24
    6b58:	21 f4       	brne	.+8      	; 0x6b62 <main+0x294>
	glcdClearScreen();
    6b5a:	0e 94 5a 2d 	call	0x5ab4	; 0x5ab4 <glcdClearScreen>
	//Dataman - Changing initdisplays to initanims, need to make sure as animation may have changed.
	//initdisplay(0);
	initanim();
    6b5e:	0e 94 7e 28 	call	0x50fc	; 0x50fc <initanim>
    6b62:	10 e0       	ldi	r17, 0x00	; 0
      }
    }

    step();
    6b64:	0e 94 64 28 	call	0x50c8	; 0x50c8 <step>
    if (displaymode == SHOW_TIME) {
    6b68:	80 91 3a 03 	lds	r24, 0x033A
    6b6c:	88 23       	and	r24, r24
    6b6e:	39 f5       	brne	.+78     	; 0x6bbe <main+0x2f0>
      if (! inverted && alarming && (time_s & 0x1)) {
    6b70:	00 23       	and	r16, r16
    6b72:	69 f4       	brne	.+26     	; 0x6b8e <main+0x2c0>
    6b74:	80 91 39 03 	lds	r24, 0x0339
    6b78:	88 23       	and	r24, r24
    6b7a:	69 f0       	breq	.+26     	; 0x6b96 <main+0x2c8>
    6b7c:	80 91 3f 03 	lds	r24, 0x033F
    6b80:	80 ff       	sbrs	r24, 0
    6b82:	09 c0       	rjmp	.+18     	; 0x6b96 <main+0x2c8>
	inverted = 1;
	initdisplay(inverted);
    6b84:	81 e0       	ldi	r24, 0x01	; 1
    6b86:	0e 94 71 28 	call	0x50e2	; 0x50e2 <initdisplay>
    6b8a:	01 e0       	ldi	r16, 0x01	; 1
    6b8c:	18 c0       	rjmp	.+48     	; 0x6bbe <main+0x2f0>
      }
      else if ((inverted && ! alarming) || (alarming && inverted && !(time_s & 0x1))) {
    6b8e:	80 91 39 03 	lds	r24, 0x0339
    6b92:	88 23       	and	r24, r24
    6b94:	51 f0       	breq	.+20     	; 0x6baa <main+0x2dc>
    6b96:	80 91 39 03 	lds	r24, 0x0339
    6b9a:	88 23       	and	r24, r24
    6b9c:	59 f0       	breq	.+22     	; 0x6bb4 <main+0x2e6>
    6b9e:	00 23       	and	r16, r16
    6ba0:	49 f0       	breq	.+18     	; 0x6bb4 <main+0x2e6>
    6ba2:	80 91 3f 03 	lds	r24, 0x033F
    6ba6:	80 fd       	sbrc	r24, 0
    6ba8:	05 c0       	rjmp	.+10     	; 0x6bb4 <main+0x2e6>
	inverted = 0;
	initdisplay(0);
    6baa:	80 e0       	ldi	r24, 0x00	; 0
    6bac:	0e 94 71 28 	call	0x50e2	; 0x50e2 <initdisplay>
    6bb0:	00 e0       	ldi	r16, 0x00	; 0
    6bb2:	05 c0       	rjmp	.+10     	; 0x6bbe <main+0x2f0>
      } else {
	PORTB |= _BV(5);
    6bb4:	2d 9a       	sbi	0x05, 5	; 5
	drawdisplay(inverted);
    6bb6:	80 2f       	mov	r24, r16
    6bb8:	0e 94 b0 28 	call	0x5160	; 0x5160 <drawdisplay>
	PORTB &= ~_BV(5);
    6bbc:	2d 98       	cbi	0x05, 5	; 5
      }
    }
  
    while (animticker);
    6bbe:	80 91 3b 03 	lds	r24, 0x033B
    6bc2:	90 91 3c 03 	lds	r25, 0x033C
    6bc6:	89 2b       	or	r24, r25
    6bc8:	d1 f7       	brne	.-12     	; 0x6bbe <main+0x2f0>
    6bca:	1c cf       	rjmp	.-456    	; 0x6a04 <main+0x136>

00006bcc <uart_init>:


// Creates a 8N1 UART connect
// remember that the BBR is #defined for each F_CPU in util.h
void uart_init(uint16_t BRR) {
  UBRR0 = BRR;               // set baudrate counter
    6bcc:	90 93 c5 00 	sts	0x00C5, r25
    6bd0:	80 93 c4 00 	sts	0x00C4, r24

  UCSR0B = _BV(RXEN0) | _BV(TXEN0);
    6bd4:	88 e1       	ldi	r24, 0x18	; 24
    6bd6:	80 93 c1 00 	sts	0x00C1, r24
  UCSR0C = _BV(USBS0) | (3<<UCSZ00);
    6bda:	8e e0       	ldi	r24, 0x0E	; 14
    6bdc:	80 93 c2 00 	sts	0x00C2, r24
  DDRD |= _BV(1);
    6be0:	51 9a       	sbi	0x0a, 1	; 10
  DDRD &= ~_BV(0);
    6be2:	50 98       	cbi	0x0a, 0	; 10
}
    6be4:	08 95       	ret

00006be6 <delay_10us>:

// Some basic delays...
void delay_10us(uint8_t ns)
{
    6be6:	06 c0       	rjmp	.+12     	; 0x6bf4 <delay_10us+0xe>
  uint8_t i;

  while (ns != 0) {
    6be8:	90 e0       	ldi	r25, 0x00	; 0
    ns--;
    for (i=0; i< 30; i++) {
      nop;
    6bea:	00 00       	nop
{
  uint8_t i;

  while (ns != 0) {
    ns--;
    for (i=0; i< 30; i++) {
    6bec:	9f 5f       	subi	r25, 0xFF	; 255
    6bee:	9e 31       	cpi	r25, 0x1E	; 30
    6bf0:	e1 f7       	brne	.-8      	; 0x6bea <delay_10us+0x4>
void delay_10us(uint8_t ns)
{
  uint8_t i;

  while (ns != 0) {
    ns--;
    6bf2:	81 50       	subi	r24, 0x01	; 1
// Some basic delays...
void delay_10us(uint8_t ns)
{
  uint8_t i;

  while (ns != 0) {
    6bf4:	88 23       	and	r24, r24
    6bf6:	c1 f7       	brne	.-16     	; 0x6be8 <delay_10us+0x2>
    ns--;
    for (i=0; i< 30; i++) {
      nop;
    }
  }
}
    6bf8:	08 95       	ret

00006bfa <delay_ms>:
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    6bfa:	20 e2       	ldi	r18, 0x20	; 32
    6bfc:	3e e4       	ldi	r19, 0x4E	; 78
    6bfe:	07 c0       	rjmp	.+14     	; 0x6c0e <delay_ms+0x14>
    6c00:	f9 01       	movw	r30, r18
    6c02:	31 97       	sbiw	r30, 0x01	; 1
    6c04:	f1 f7       	brne	.-4      	; 0x6c02 <delay_ms+0x8>
{
	uint16_t temp = ms;
	while(temp)
	{
		_delay_ms(10);
		if(temp >= 10)
    6c06:	8a 30       	cpi	r24, 0x0A	; 10
    6c08:	91 05       	cpc	r25, r1
    6c0a:	18 f0       	brcs	.+6      	; 0x6c12 <delay_ms+0x18>
			temp-=10;
    6c0c:	0a 97       	sbiw	r24, 0x0a	; 10
}

void delay_ms(uint16_t ms)
{
	uint16_t temp = ms;
	while(temp)
    6c0e:	00 97       	sbiw	r24, 0x00	; 0
    6c10:	b9 f7       	brne	.-18     	; 0x6c00 <delay_ms+0x6>
    6c12:	08 95       	ret

00006c14 <delay_s>:
    6c14:	40 e2       	ldi	r20, 0x20	; 32
    6c16:	5e e4       	ldi	r21, 0x4E	; 78
    6c18:	0c c0       	rjmp	.+24     	; 0x6c32 <delay_s+0x1e>
			temp=0;
	}
}

void delay_s(uint8_t s) {
  while (s--) {
    6c1a:	28 ee       	ldi	r18, 0xE8	; 232
    6c1c:	33 e0       	ldi	r19, 0x03	; 3
    6c1e:	fa 01       	movw	r30, r20
    6c20:	31 97       	sbiw	r30, 0x01	; 1
    6c22:	f1 f7       	brne	.-4      	; 0x6c20 <delay_s+0xc>
{
	uint16_t temp = ms;
	while(temp)
	{
		_delay_ms(10);
		if(temp >= 10)
    6c24:	2a 30       	cpi	r18, 0x0A	; 10
    6c26:	31 05       	cpc	r19, r1
    6c28:	18 f0       	brcs	.+6      	; 0x6c30 <delay_s+0x1c>
			temp-=10;
    6c2a:	2a 50       	subi	r18, 0x0A	; 10
    6c2c:	30 40       	sbci	r19, 0x00	; 0
}

void delay_ms(uint16_t ms)
{
	uint16_t temp = ms;
	while(temp)
    6c2e:	b9 f7       	brne	.-18     	; 0x6c1e <delay_s+0xa>
    6c30:	81 50       	subi	r24, 0x01	; 1
			temp=0;
	}
}

void delay_s(uint8_t s) {
  while (s--) {
    6c32:	88 23       	and	r24, r24
    6c34:	91 f7       	brne	.-28     	; 0x6c1a <delay_s+0x6>
    delay_ms(1000);
  }
}
    6c36:	08 95       	ret

00006c38 <uart_putchar>:

// Some uart functions for debugging help
int uart_putchar(char c)
{
    6c38:	98 2f       	mov	r25, r24
  loop_until_bit_is_set(UCSR0A, UDRE0);
    6c3a:	80 91 c0 00 	lds	r24, 0x00C0
    6c3e:	85 ff       	sbrs	r24, 5
    6c40:	fc cf       	rjmp	.-8      	; 0x6c3a <uart_putchar+0x2>
  UDR0 = c;
    6c42:	90 93 c6 00 	sts	0x00C6, r25
  return 0;
}
    6c46:	80 e0       	ldi	r24, 0x00	; 0
    6c48:	90 e0       	ldi	r25, 0x00	; 0
    6c4a:	08 95       	ret

00006c4c <uart_getchar>:

char uart_getchar(void) {
  while (!(UCSR0A & _BV(RXC0)));
    6c4c:	80 91 c0 00 	lds	r24, 0x00C0
    6c50:	87 ff       	sbrs	r24, 7
    6c52:	fc cf       	rjmp	.-8      	; 0x6c4c <uart_getchar>
  return UDR0;
    6c54:	80 91 c6 00 	lds	r24, 0x00C6
}
    6c58:	08 95       	ret

00006c5a <uart_getch>:

char uart_getch(void) {
  return (UCSR0A & _BV(RXC0));
    6c5a:	80 91 c0 00 	lds	r24, 0x00C0
}
    6c5e:	80 78       	andi	r24, 0x80	; 128
    6c60:	08 95       	ret

00006c62 <ROM_putstring>:

void ROM_putstring(const char *str, uint8_t nl) {
    6c62:	ac 01       	movw	r20, r24
    6c64:	20 e0       	ldi	r18, 0x00	; 0
    6c66:	07 c0       	rjmp	.+14     	; 0x6c76 <ROM_putstring+0x14>
}

// Some uart functions for debugging help
int uart_putchar(char c)
{
  loop_until_bit_is_set(UCSR0A, UDRE0);
    6c68:	80 91 c0 00 	lds	r24, 0x00C0
    6c6c:	85 ff       	sbrs	r24, 5
    6c6e:	fc cf       	rjmp	.-8      	; 0x6c68 <ROM_putstring+0x6>
  UDR0 = c;
    6c70:	30 93 c6 00 	sts	0x00C6, r19
}

void ROM_putstring(const char *str, uint8_t nl) {
  uint8_t i;

  for (i=0; pgm_read_byte(&str[i]); i++) {
    6c74:	2f 5f       	subi	r18, 0xFF	; 255
    6c76:	fa 01       	movw	r30, r20
    6c78:	e2 0f       	add	r30, r18
    6c7a:	f1 1d       	adc	r31, r1
    6c7c:	34 91       	lpm	r19, Z+
    6c7e:	33 23       	and	r19, r19
    6c80:	99 f7       	brne	.-26     	; 0x6c68 <ROM_putstring+0x6>
    uart_putchar(pgm_read_byte(&str[i]));
  }
  if (nl) {
    6c82:	66 23       	and	r22, r22
    6c84:	71 f0       	breq	.+28     	; 0x6ca2 <ROM_putstring+0x40>
}

// Some uart functions for debugging help
int uart_putchar(char c)
{
  loop_until_bit_is_set(UCSR0A, UDRE0);
    6c86:	80 91 c0 00 	lds	r24, 0x00C0
    6c8a:	85 ff       	sbrs	r24, 5
    6c8c:	fc cf       	rjmp	.-8      	; 0x6c86 <ROM_putstring+0x24>
  UDR0 = c;
    6c8e:	8a e0       	ldi	r24, 0x0A	; 10
    6c90:	80 93 c6 00 	sts	0x00C6, r24
}

// Some uart functions for debugging help
int uart_putchar(char c)
{
  loop_until_bit_is_set(UCSR0A, UDRE0);
    6c94:	80 91 c0 00 	lds	r24, 0x00C0
    6c98:	85 ff       	sbrs	r24, 5
    6c9a:	fc cf       	rjmp	.-8      	; 0x6c94 <ROM_putstring+0x32>
  UDR0 = c;
    6c9c:	8d e0       	ldi	r24, 0x0D	; 13
    6c9e:	80 93 c6 00 	sts	0x00C6, r24
    6ca2:	08 95       	ret

00006ca4 <uart_puts>:
    uart_putchar('\n'); uart_putchar('\r');
  }
}

void uart_puts(const char* str)
{
    6ca4:	fc 01       	movw	r30, r24
    6ca6:	07 c0       	rjmp	.+14     	; 0x6cb6 <uart_puts+0x12>
}

// Some uart functions for debugging help
int uart_putchar(char c)
{
  loop_until_bit_is_set(UCSR0A, UDRE0);
    6ca8:	80 91 c0 00 	lds	r24, 0x00C0
    6cac:	85 ff       	sbrs	r24, 5
    6cae:	fc cf       	rjmp	.-8      	; 0x6ca8 <uart_puts+0x4>
}

void uart_puts(const char* str)
{
  while(*str)
    uart_putc(*str++);
    6cb0:	31 96       	adiw	r30, 0x01	; 1

// Some uart functions for debugging help
int uart_putchar(char c)
{
  loop_until_bit_is_set(UCSR0A, UDRE0);
  UDR0 = c;
    6cb2:	90 93 c6 00 	sts	0x00C6, r25
  }
}

void uart_puts(const char* str)
{
  while(*str)
    6cb6:	90 81       	ld	r25, Z
    6cb8:	99 23       	and	r25, r25
    6cba:	b1 f7       	brne	.-20     	; 0x6ca8 <uart_puts+0x4>
    uart_putc(*str++);
}
    6cbc:	08 95       	ret

00006cbe <uart_putc_hex>:


void uart_putc_hex(uint8_t b)
{
    6cbe:	28 2f       	mov	r18, r24
  /* upper nibble */
  if((b >> 4) < 0x0a)
    6cc0:	98 2f       	mov	r25, r24
    6cc2:	92 95       	swap	r25
    6cc4:	9f 70       	andi	r25, 0x0F	; 15
    6cc6:	9a 30       	cpi	r25, 0x0A	; 10
    6cc8:	30 f4       	brcc	.+12     	; 0x6cd6 <uart_putc_hex+0x18>
}

// Some uart functions for debugging help
int uart_putchar(char c)
{
  loop_until_bit_is_set(UCSR0A, UDRE0);
    6cca:	80 91 c0 00 	lds	r24, 0x00C0
    6cce:	85 ff       	sbrs	r24, 5
    6cd0:	fc cf       	rjmp	.-8      	; 0x6cca <uart_putc_hex+0xc>

void uart_putc_hex(uint8_t b)
{
  /* upper nibble */
  if((b >> 4) < 0x0a)
    uart_putc((b >> 4) + '0');
    6cd2:	90 5d       	subi	r25, 0xD0	; 208
    6cd4:	05 c0       	rjmp	.+10     	; 0x6ce0 <uart_putc_hex+0x22>
}

// Some uart functions for debugging help
int uart_putchar(char c)
{
  loop_until_bit_is_set(UCSR0A, UDRE0);
    6cd6:	80 91 c0 00 	lds	r24, 0x00C0
    6cda:	85 ff       	sbrs	r24, 5
    6cdc:	fc cf       	rjmp	.-8      	; 0x6cd6 <uart_putc_hex+0x18>
{
  /* upper nibble */
  if((b >> 4) < 0x0a)
    uart_putc((b >> 4) + '0');
  else
    uart_putc((b >> 4) - 0x0a + 'a');
    6cde:	99 5a       	subi	r25, 0xA9	; 169

// Some uart functions for debugging help
int uart_putchar(char c)
{
  loop_until_bit_is_set(UCSR0A, UDRE0);
  UDR0 = c;
    6ce0:	90 93 c6 00 	sts	0x00C6, r25
    uart_putc((b >> 4) + '0');
  else
    uart_putc((b >> 4) - 0x0a + 'a');

  /* lower nibble */
  if((b & 0x0f) < 0x0a)
    6ce4:	82 2f       	mov	r24, r18
    6ce6:	90 e0       	ldi	r25, 0x00	; 0
    6ce8:	8f 70       	andi	r24, 0x0F	; 15
    6cea:	90 70       	andi	r25, 0x00	; 0
    6cec:	0a 97       	sbiw	r24, 0x0a	; 10
    6cee:	3c f4       	brge	.+14     	; 0x6cfe <uart_putc_hex+0x40>
}

// Some uart functions for debugging help
int uart_putchar(char c)
{
  loop_until_bit_is_set(UCSR0A, UDRE0);
    6cf0:	80 91 c0 00 	lds	r24, 0x00C0
    6cf4:	85 ff       	sbrs	r24, 5
    6cf6:	fc cf       	rjmp	.-8      	; 0x6cf0 <uart_putc_hex+0x32>
  else
    uart_putc((b >> 4) - 0x0a + 'a');

  /* lower nibble */
  if((b & 0x0f) < 0x0a)
    uart_putc((b & 0x0f) + '0');
    6cf8:	2f 70       	andi	r18, 0x0F	; 15
    6cfa:	20 5d       	subi	r18, 0xD0	; 208
    6cfc:	06 c0       	rjmp	.+12     	; 0x6d0a <uart_putc_hex+0x4c>
}

// Some uart functions for debugging help
int uart_putchar(char c)
{
  loop_until_bit_is_set(UCSR0A, UDRE0);
    6cfe:	80 91 c0 00 	lds	r24, 0x00C0
    6d02:	85 ff       	sbrs	r24, 5
    6d04:	fc cf       	rjmp	.-8      	; 0x6cfe <uart_putc_hex+0x40>

  /* lower nibble */
  if((b & 0x0f) < 0x0a)
    uart_putc((b & 0x0f) + '0');
  else
    uart_putc((b & 0x0f) - 0x0a + 'a');
    6d06:	2f 70       	andi	r18, 0x0F	; 15
    6d08:	29 5a       	subi	r18, 0xA9	; 169

// Some uart functions for debugging help
int uart_putchar(char c)
{
  loop_until_bit_is_set(UCSR0A, UDRE0);
  UDR0 = c;
    6d0a:	20 93 c6 00 	sts	0x00C6, r18
    6d0e:	08 95       	ret

00006d10 <uart_putw_hex>:
  else
    uart_putc((b & 0x0f) - 0x0a + 'a');
}

void uart_putw_hex(uint16_t w)
{
    6d10:	1f 93       	push	r17
    6d12:	18 2f       	mov	r17, r24
  uart_putc_hex((uint8_t) (w >> 8));
    6d14:	89 2f       	mov	r24, r25
    6d16:	0e 94 5f 36 	call	0x6cbe	; 0x6cbe <uart_putc_hex>
  uart_putc_hex((uint8_t) (w & 0xff));
    6d1a:	81 2f       	mov	r24, r17
    6d1c:	0e 94 5f 36 	call	0x6cbe	; 0x6cbe <uart_putc_hex>
}
    6d20:	1f 91       	pop	r17
    6d22:	08 95       	ret

00006d24 <uart_putdw_hex>:

void uart_putdw_hex(uint32_t dw)
{
    6d24:	ef 92       	push	r14
    6d26:	ff 92       	push	r15
    6d28:	0f 93       	push	r16
    6d2a:	1f 93       	push	r17
    6d2c:	7b 01       	movw	r14, r22
    6d2e:	8c 01       	movw	r16, r24
  uart_putw_hex((uint16_t) (dw >> 16));
    6d30:	c8 01       	movw	r24, r16
    6d32:	aa 27       	eor	r26, r26
    6d34:	bb 27       	eor	r27, r27
    6d36:	0e 94 88 36 	call	0x6d10	; 0x6d10 <uart_putw_hex>
  uart_putw_hex((uint16_t) (dw & 0xffff));
    6d3a:	c7 01       	movw	r24, r14
    6d3c:	0e 94 88 36 	call	0x6d10	; 0x6d10 <uart_putw_hex>
}
    6d40:	1f 91       	pop	r17
    6d42:	0f 91       	pop	r16
    6d44:	ff 90       	pop	r15
    6d46:	ef 90       	pop	r14
    6d48:	08 95       	ret

00006d4a <uart_putw_dec>:

void uart_putw_dec(uint16_t w)
{
    6d4a:	0f 93       	push	r16
    6d4c:	1f 93       	push	r17
    6d4e:	cf 93       	push	r28
    6d50:	df 93       	push	r29
    6d52:	8c 01       	movw	r16, r24
    6d54:	e0 e1       	ldi	r30, 0x10	; 16
    6d56:	f7 e2       	ldi	r31, 0x27	; 39
    6d58:	40 e0       	ldi	r20, 0x00	; 0
    6d5a:	c0 e0       	ldi	r28, 0x00	; 0
    6d5c:	d0 e0       	ldi	r29, 0x00	; 0
  uint16_t num = 10000;
  uint8_t started = 0;

  while(num > 0)
    {
      uint8_t b = w / num;
    6d5e:	c8 01       	movw	r24, r16
    6d60:	bf 01       	movw	r22, r30
    6d62:	0e 94 03 3b 	call	0x7606	; 0x7606 <__udivmodhi4>
    6d66:	26 2f       	mov	r18, r22
      if(b > 0 || started || num == 1)
    6d68:	66 23       	and	r22, r22
    6d6a:	29 f4       	brne	.+10     	; 0x6d76 <uart_putw_dec+0x2c>
    6d6c:	44 23       	and	r20, r20
    6d6e:	19 f4       	brne	.+6      	; 0x6d76 <uart_putw_dec+0x2c>
    6d70:	e1 30       	cpi	r30, 0x01	; 1
    6d72:	f1 05       	cpc	r31, r1
    6d74:	49 f4       	brne	.+18     	; 0x6d88 <uart_putw_dec+0x3e>
}

// Some uart functions for debugging help
int uart_putchar(char c)
{
  loop_until_bit_is_set(UCSR0A, UDRE0);
    6d76:	80 91 c0 00 	lds	r24, 0x00C0
    6d7a:	85 ff       	sbrs	r24, 5
    6d7c:	fc cf       	rjmp	.-8      	; 0x6d76 <uart_putw_dec+0x2c>
  while(num > 0)
    {
      uint8_t b = w / num;
      if(b > 0 || started || num == 1)
	{
	  uart_putc('0' + b);
    6d7e:	20 5d       	subi	r18, 0xD0	; 208

// Some uart functions for debugging help
int uart_putchar(char c)
{
  loop_until_bit_is_set(UCSR0A, UDRE0);
  UDR0 = c;
    6d80:	20 93 c6 00 	sts	0x00C6, r18
    6d84:	20 53       	subi	r18, 0x30	; 48
    6d86:	41 e0       	ldi	r20, 0x01	; 1
	  uart_putc('0' + b);
	  started = 1;
	}
      w -= b * num;

      num /= 10;
    6d88:	cf 01       	movw	r24, r30
    6d8a:	6a e0       	ldi	r22, 0x0A	; 10
    6d8c:	70 e0       	ldi	r23, 0x00	; 0
    6d8e:	0e 94 03 3b 	call	0x7606	; 0x7606 <__udivmodhi4>
    6d92:	21 96       	adiw	r28, 0x01	; 1
void uart_putw_dec(uint16_t w)
{
  uint16_t num = 10000;
  uint8_t started = 0;

  while(num > 0)
    6d94:	c5 30       	cpi	r28, 0x05	; 5
    6d96:	d1 05       	cpc	r29, r1
    6d98:	71 f0       	breq	.+28     	; 0x6db6 <uart_putw_dec+0x6c>
      if(b > 0 || started || num == 1)
	{
	  uart_putc('0' + b);
	  started = 1;
	}
      w -= b * num;
    6d9a:	82 2f       	mov	r24, r18
    6d9c:	90 e0       	ldi	r25, 0x00	; 0
    6d9e:	9c 01       	movw	r18, r24
    6da0:	2e 9f       	mul	r18, r30
    6da2:	c0 01       	movw	r24, r0
    6da4:	2f 9f       	mul	r18, r31
    6da6:	90 0d       	add	r25, r0
    6da8:	3e 9f       	mul	r19, r30
    6daa:	90 0d       	add	r25, r0
    6dac:	11 24       	eor	r1, r1
    6dae:	08 1b       	sub	r16, r24
    6db0:	19 0b       	sbc	r17, r25
    6db2:	fb 01       	movw	r30, r22
    6db4:	d4 cf       	rjmp	.-88     	; 0x6d5e <uart_putw_dec+0x14>

      num /= 10;
    }
}
    6db6:	df 91       	pop	r29
    6db8:	cf 91       	pop	r28
    6dba:	1f 91       	pop	r17
    6dbc:	0f 91       	pop	r16
    6dbe:	08 95       	ret

00006dc0 <uart_put_dec>:

void uart_put_dec(int8_t w)
{
    6dc0:	1f 93       	push	r17
    6dc2:	cf 93       	push	r28
    6dc4:	df 93       	push	r29
    6dc6:	48 2f       	mov	r20, r24
  uint16_t num = 100;
  uint8_t started = 0;

  if (w <0 ) {
    6dc8:	87 ff       	sbrs	r24, 7
    6dca:	08 c0       	rjmp	.+16     	; 0x6ddc <uart_put_dec+0x1c>
}

// Some uart functions for debugging help
int uart_putchar(char c)
{
  loop_until_bit_is_set(UCSR0A, UDRE0);
    6dcc:	80 91 c0 00 	lds	r24, 0x00C0
    6dd0:	85 ff       	sbrs	r24, 5
    6dd2:	fc cf       	rjmp	.-8      	; 0x6dcc <uart_put_dec+0xc>
  UDR0 = c;
    6dd4:	8d e2       	ldi	r24, 0x2D	; 45
    6dd6:	80 93 c6 00 	sts	0x00C6, r24
  uint16_t num = 100;
  uint8_t started = 0;

  if (w <0 ) {
    uart_putc('-');
    w *= -1;
    6dda:	41 95       	neg	r20
    6ddc:	e4 e6       	ldi	r30, 0x64	; 100
    6dde:	f0 e0       	ldi	r31, 0x00	; 0
    6de0:	10 e0       	ldi	r17, 0x00	; 0
    6de2:	c0 e0       	ldi	r28, 0x00	; 0
    6de4:	d0 e0       	ldi	r29, 0x00	; 0
  }
  while(num > 0)
    {
      int8_t b = w / num;
    6de6:	84 2f       	mov	r24, r20
    6de8:	99 27       	eor	r25, r25
    6dea:	87 fd       	sbrc	r24, 7
    6dec:	90 95       	com	r25
    6dee:	bf 01       	movw	r22, r30
    6df0:	0e 94 03 3b 	call	0x7606	; 0x7606 <__udivmodhi4>
    6df4:	26 2f       	mov	r18, r22
      if(b > 0 || started || num == 1)
    6df6:	16 16       	cp	r1, r22
    6df8:	2c f0       	brlt	.+10     	; 0x6e04 <uart_put_dec+0x44>
    6dfa:	11 23       	and	r17, r17
    6dfc:	19 f4       	brne	.+6      	; 0x6e04 <uart_put_dec+0x44>
    6dfe:	e1 30       	cpi	r30, 0x01	; 1
    6e00:	f1 05       	cpc	r31, r1
    6e02:	49 f4       	brne	.+18     	; 0x6e16 <uart_put_dec+0x56>
}

// Some uart functions for debugging help
int uart_putchar(char c)
{
  loop_until_bit_is_set(UCSR0A, UDRE0);
    6e04:	80 91 c0 00 	lds	r24, 0x00C0
    6e08:	85 ff       	sbrs	r24, 5
    6e0a:	fc cf       	rjmp	.-8      	; 0x6e04 <uart_put_dec+0x44>
  while(num > 0)
    {
      int8_t b = w / num;
      if(b > 0 || started || num == 1)
	{
	  uart_putc('0' + b);
    6e0c:	20 5d       	subi	r18, 0xD0	; 208

// Some uart functions for debugging help
int uart_putchar(char c)
{
  loop_until_bit_is_set(UCSR0A, UDRE0);
  UDR0 = c;
    6e0e:	20 93 c6 00 	sts	0x00C6, r18
    6e12:	20 53       	subi	r18, 0x30	; 48
    6e14:	11 e0       	ldi	r17, 0x01	; 1
	  uart_putc('0' + b);
	  started = 1;
	}
      w -= b * num;

      num /= 10;
    6e16:	cf 01       	movw	r24, r30
    6e18:	6a e0       	ldi	r22, 0x0A	; 10
    6e1a:	70 e0       	ldi	r23, 0x00	; 0
    6e1c:	0e 94 03 3b 	call	0x7606	; 0x7606 <__udivmodhi4>
    6e20:	21 96       	adiw	r28, 0x01	; 1

  if (w <0 ) {
    uart_putc('-');
    w *= -1;
  }
  while(num > 0)
    6e22:	c3 30       	cpi	r28, 0x03	; 3
    6e24:	d1 05       	cpc	r29, r1
    6e26:	31 f0       	breq	.+12     	; 0x6e34 <uart_put_dec+0x74>
      if(b > 0 || started || num == 1)
	{
	  uart_putc('0' + b);
	  started = 1;
	}
      w -= b * num;
    6e28:	2e 9f       	mul	r18, r30
    6e2a:	80 2d       	mov	r24, r0
    6e2c:	11 24       	eor	r1, r1
    6e2e:	48 1b       	sub	r20, r24
    6e30:	fb 01       	movw	r30, r22
    6e32:	d9 cf       	rjmp	.-78     	; 0x6de6 <uart_put_dec+0x26>

      num /= 10;
    }
}
    6e34:	df 91       	pop	r29
    6e36:	cf 91       	pop	r28
    6e38:	1f 91       	pop	r17
    6e3a:	08 95       	ret

00006e3c <uart_putdw_dec>:

void uart_putdw_dec(uint32_t dw)
{
    6e3c:	4f 92       	push	r4
    6e3e:	5f 92       	push	r5
    6e40:	6f 92       	push	r6
    6e42:	7f 92       	push	r7
    6e44:	8f 92       	push	r8
    6e46:	9f 92       	push	r9
    6e48:	af 92       	push	r10
    6e4a:	bf 92       	push	r11
    6e4c:	cf 92       	push	r12
    6e4e:	df 92       	push	r13
    6e50:	ef 92       	push	r14
    6e52:	ff 92       	push	r15
    6e54:	0f 93       	push	r16
    6e56:	1f 93       	push	r17
    6e58:	cf 93       	push	r28
    6e5a:	df 93       	push	r29
    6e5c:	4b 01       	movw	r8, r22
    6e5e:	5c 01       	movw	r10, r24
    6e60:	e1 2c       	mov	r14, r1
    6e62:	9a ec       	ldi	r25, 0xCA	; 202
    6e64:	f9 2e       	mov	r15, r25
    6e66:	9a e9       	ldi	r25, 0x9A	; 154
    6e68:	09 2f       	mov	r16, r25
    6e6a:	9b e3       	ldi	r25, 0x3B	; 59
    6e6c:	19 2f       	mov	r17, r25
    6e6e:	44 24       	eor	r4, r4
    6e70:	c0 e0       	ldi	r28, 0x00	; 0
    6e72:	d0 e0       	ldi	r29, 0x00	; 0
  uint32_t num = 1000000000;
  uint8_t started = 0;

  while(num > 0)
    {
      uint8_t b = dw / num;
    6e74:	c5 01       	movw	r24, r10
    6e76:	b4 01       	movw	r22, r8
    6e78:	a8 01       	movw	r20, r16
    6e7a:	97 01       	movw	r18, r14
    6e7c:	0e 94 2a 3b 	call	0x7654	; 0x7654 <__udivmodsi4>
    6e80:	d2 2e       	mov	r13, r18
      if(b > 0 || started || num == 1)
    6e82:	22 23       	and	r18, r18
    6e84:	41 f4       	brne	.+16     	; 0x6e96 <uart_putdw_dec+0x5a>
    6e86:	44 20       	and	r4, r4
    6e88:	31 f4       	brne	.+12     	; 0x6e96 <uart_putdw_dec+0x5a>
    6e8a:	81 e0       	ldi	r24, 0x01	; 1
    6e8c:	e8 16       	cp	r14, r24
    6e8e:	f1 04       	cpc	r15, r1
    6e90:	01 05       	cpc	r16, r1
    6e92:	11 05       	cpc	r17, r1
    6e94:	61 f4       	brne	.+24     	; 0x6eae <uart_putdw_dec+0x72>
}

// Some uart functions for debugging help
int uart_putchar(char c)
{
  loop_until_bit_is_set(UCSR0A, UDRE0);
    6e96:	80 91 c0 00 	lds	r24, 0x00C0
    6e9a:	85 ff       	sbrs	r24, 5
    6e9c:	fc cf       	rjmp	.-8      	; 0x6e96 <uart_putdw_dec+0x5a>
  while(num > 0)
    {
      uint8_t b = dw / num;
      if(b > 0 || started || num == 1)
	{
	  uart_putc('0' + b);
    6e9e:	80 e3       	ldi	r24, 0x30	; 48
    6ea0:	d8 0e       	add	r13, r24

// Some uart functions for debugging help
int uart_putchar(char c)
{
  loop_until_bit_is_set(UCSR0A, UDRE0);
  UDR0 = c;
    6ea2:	d0 92 c6 00 	sts	0x00C6, r13
    6ea6:	80 ed       	ldi	r24, 0xD0	; 208
    6ea8:	d8 0e       	add	r13, r24
    6eaa:	44 24       	eor	r4, r4
    6eac:	43 94       	inc	r4
	  uart_putc('0' + b);
	  started = 1;
	}
      dw -= b * num;

      num /= 10;
    6eae:	c8 01       	movw	r24, r16
    6eb0:	b7 01       	movw	r22, r14
    6eb2:	2a e0       	ldi	r18, 0x0A	; 10
    6eb4:	30 e0       	ldi	r19, 0x00	; 0
    6eb6:	40 e0       	ldi	r20, 0x00	; 0
    6eb8:	50 e0       	ldi	r21, 0x00	; 0
    6eba:	0e 94 2a 3b 	call	0x7654	; 0x7654 <__udivmodsi4>
    6ebe:	c2 2e       	mov	r12, r18
    6ec0:	73 2e       	mov	r7, r19
    6ec2:	64 2e       	mov	r6, r20
    6ec4:	55 2e       	mov	r5, r21
    6ec6:	21 96       	adiw	r28, 0x01	; 1
void uart_putdw_dec(uint32_t dw)
{
  uint32_t num = 1000000000;
  uint8_t started = 0;

  while(num > 0)
    6ec8:	ca 30       	cpi	r28, 0x0A	; 10
    6eca:	d1 05       	cpc	r29, r1
    6ecc:	a9 f0       	breq	.+42     	; 0x6ef8 <uart_putdw_dec+0xbc>
      if(b > 0 || started || num == 1)
	{
	  uart_putc('0' + b);
	  started = 1;
	}
      dw -= b * num;
    6ece:	6d 2d       	mov	r22, r13
    6ed0:	70 e0       	ldi	r23, 0x00	; 0
    6ed2:	80 e0       	ldi	r24, 0x00	; 0
    6ed4:	90 e0       	ldi	r25, 0x00	; 0
    6ed6:	a8 01       	movw	r20, r16
    6ed8:	97 01       	movw	r18, r14
    6eda:	0e 94 d8 3a 	call	0x75b0	; 0x75b0 <__mulsi3>
    6ede:	86 1a       	sub	r8, r22
    6ee0:	97 0a       	sbc	r9, r23
    6ee2:	a8 0a       	sbc	r10, r24
    6ee4:	b9 0a       	sbc	r11, r25
    6ee6:	2c 2d       	mov	r18, r12
    6ee8:	37 2d       	mov	r19, r7
    6eea:	46 2d       	mov	r20, r6
    6eec:	55 2d       	mov	r21, r5
    6eee:	c9 01       	movw	r24, r18
    6ef0:	da 01       	movw	r26, r20
    6ef2:	7c 01       	movw	r14, r24
    6ef4:	8d 01       	movw	r16, r26
    6ef6:	be cf       	rjmp	.-132    	; 0x6e74 <uart_putdw_dec+0x38>

      num /= 10;
    }
}
    6ef8:	df 91       	pop	r29
    6efa:	cf 91       	pop	r28
    6efc:	1f 91       	pop	r17
    6efe:	0f 91       	pop	r16
    6f00:	ff 90       	pop	r15
    6f02:	ef 90       	pop	r14
    6f04:	df 90       	pop	r13
    6f06:	cf 90       	pop	r12
    6f08:	bf 90       	pop	r11
    6f0a:	af 90       	pop	r10
    6f0c:	9f 90       	pop	r9
    6f0e:	8f 90       	pop	r8
    6f10:	7f 90       	pop	r7
    6f12:	6f 90       	pop	r6
    6f14:	5f 90       	pop	r5
    6f16:	4f 90       	pop	r4
    6f18:	08 95       	ret

00006f1a <dotw>:
#else
 // GPS Needs the DOTW function
 // This includes DOTW for GPS if DateLong disabled
 #ifdef GPSENABLE
 uint8_t dotw(uint8_t mon, uint8_t day, uint8_t yr)
  {
    6f1a:	cf 93       	push	r28
    6f1c:	df 93       	push	r29
   uint16_t month, year; 

    // Calculate day of the week
    
    month = mon;
    6f1e:	c8 2f       	mov	r28, r24
    6f20:	d0 e0       	ldi	r29, 0x00	; 0
    year = 2000 + yr;
    6f22:	e4 2f       	mov	r30, r20
    6f24:	f0 e0       	ldi	r31, 0x00	; 0
    6f26:	e0 53       	subi	r30, 0x30	; 48
    6f28:	f8 4f       	sbci	r31, 0xF8	; 248
    if (mon < 3)  {
    6f2a:	83 30       	cpi	r24, 0x03	; 3
    6f2c:	10 f4       	brcc	.+4      	; 0x6f32 <dotw+0x18>
      month += 12;
    6f2e:	2c 96       	adiw	r28, 0x0c	; 12
      year -= 1;
    6f30:	31 97       	sbiw	r30, 0x01	; 1
    6f32:	26 2f       	mov	r18, r22
    6f34:	30 e0       	ldi	r19, 0x00	; 0
    6f36:	2f 5f       	subi	r18, 0xFF	; 255
    6f38:	3f 4f       	sbci	r19, 0xFF	; 255
    6f3a:	2e 0f       	add	r18, r30
    6f3c:	3f 1f       	adc	r19, r31
    6f3e:	ce 01       	movw	r24, r28
    6f40:	88 0f       	add	r24, r24
    6f42:	99 1f       	adc	r25, r25
    6f44:	28 0f       	add	r18, r24
    6f46:	39 1f       	adc	r19, r25
    6f48:	cf 01       	movw	r24, r30
    6f4a:	96 95       	lsr	r25
    6f4c:	87 95       	ror	r24
    6f4e:	96 95       	lsr	r25
    6f50:	87 95       	ror	r24
    6f52:	28 0f       	add	r18, r24
    6f54:	39 1f       	adc	r19, r25
    6f56:	cf 01       	movw	r24, r30
    6f58:	60 e9       	ldi	r22, 0x90	; 144
    6f5a:	71 e0       	ldi	r23, 0x01	; 1
    6f5c:	0e 94 03 3b 	call	0x7606	; 0x7606 <__udivmodhi4>
    6f60:	26 0f       	add	r18, r22
    6f62:	37 1f       	adc	r19, r23
    6f64:	cf 01       	movw	r24, r30
    6f66:	64 e6       	ldi	r22, 0x64	; 100
    6f68:	70 e0       	ldi	r23, 0x00	; 0
    6f6a:	0e 94 03 3b 	call	0x7606	; 0x7606 <__udivmodhi4>
    6f6e:	26 1b       	sub	r18, r22
    6f70:	37 0b       	sbc	r19, r23
    6f72:	ae 01       	movw	r20, r28
    6f74:	4f 5f       	subi	r20, 0xFF	; 255
    6f76:	5f 4f       	sbci	r21, 0xFF	; 255
    6f78:	ca 01       	movw	r24, r20
    6f7a:	88 0f       	add	r24, r24
    6f7c:	99 1f       	adc	r25, r25
    6f7e:	84 0f       	add	r24, r20
    6f80:	95 1f       	adc	r25, r21
    6f82:	88 0f       	add	r24, r24
    6f84:	99 1f       	adc	r25, r25
    6f86:	6a e0       	ldi	r22, 0x0A	; 10
    6f88:	70 e0       	ldi	r23, 0x00	; 0
    6f8a:	0e 94 03 3b 	call	0x7606	; 0x7606 <__udivmodhi4>
    6f8e:	c9 01       	movw	r24, r18
    6f90:	86 0f       	add	r24, r22
    6f92:	97 1f       	adc	r25, r23
    6f94:	67 e0       	ldi	r22, 0x07	; 7
    6f96:	70 e0       	ldi	r23, 0x00	; 0
    6f98:	0e 94 03 3b 	call	0x7606	; 0x7606 <__udivmodhi4>
    }
    return (day + (2 * month) + (6 * (month+1)/10) + year + (year/4) - (year/100) + (year/400) + 1) % 7;
 }
    6f9c:	df 91       	pop	r29
    6f9e:	cf 91       	pop	r28
    6fa0:	08 95       	ret

00006fa2 <hours>:
 #endif
#endif


uint8_t hours(uint8_t h)
{
    6fa2:	98 2f       	mov	r25, r24
	return (time_format == TIME_12H ? ((h + 23) % 12 + 1) : h);
    6fa4:	80 91 2c 03 	lds	r24, 0x032C
    6fa8:	88 23       	and	r24, r24
    6faa:	49 f4       	brne	.+18     	; 0x6fbe <hours+0x1c>
    6fac:	89 2f       	mov	r24, r25
    6fae:	90 e0       	ldi	r25, 0x00	; 0
    6fb0:	47 96       	adiw	r24, 0x17	; 23
    6fb2:	6c e0       	ldi	r22, 0x0C	; 12
    6fb4:	70 e0       	ldi	r23, 0x00	; 0
    6fb6:	0e 94 17 3b 	call	0x762e	; 0x762e <__divmodhi4>
    6fba:	98 2f       	mov	r25, r24
    6fbc:	9f 5f       	subi	r25, 0xFF	; 255
}
    6fbe:	89 2f       	mov	r24, r25
    6fc0:	08 95       	ret

00006fc2 <encipher>:

extern volatile uint8_t time_s, time_m, time_h;
uint32_t rval[2]={0,0};
uint32_t key[4];

void encipher(void) {  // Using 32 rounds of XTea encryption as a PRNG.
    6fc2:	2f 92       	push	r2
    6fc4:	3f 92       	push	r3
    6fc6:	4f 92       	push	r4
    6fc8:	5f 92       	push	r5
    6fca:	6f 92       	push	r6
    6fcc:	7f 92       	push	r7
    6fce:	8f 92       	push	r8
    6fd0:	9f 92       	push	r9
    6fd2:	af 92       	push	r10
    6fd4:	bf 92       	push	r11
    6fd6:	cf 92       	push	r12
    6fd8:	df 92       	push	r13
    6fda:	ef 92       	push	r14
    6fdc:	ff 92       	push	r15
    6fde:	0f 93       	push	r16
    6fe0:	1f 93       	push	r17
  uint32_t v0=rval[0], v1=rval[1], sum=0, delta=0x9E3779B9;
    6fe2:	20 90 c0 02 	lds	r2, 0x02C0
    6fe6:	30 90 c1 02 	lds	r3, 0x02C1
    6fea:	40 90 c2 02 	lds	r4, 0x02C2
    6fee:	50 90 c3 02 	lds	r5, 0x02C3
    6ff2:	60 90 c4 02 	lds	r6, 0x02C4
    6ff6:	70 90 c5 02 	lds	r7, 0x02C5
    6ffa:	80 90 c6 02 	lds	r8, 0x02C6
    6ffe:	90 90 c7 02 	lds	r9, 0x02C7
    7002:	aa 24       	eor	r10, r10
    7004:	bb 24       	eor	r11, r11
    7006:	65 01       	movw	r12, r10
  for (unsigned int i=0; i < 32; i++) {
    v0 += (((v1 << 4) ^ (v1 >> 5)) + v1) ^ (sum + key[sum & 3]);
    7008:	f5 01       	movw	r30, r10
    700a:	e3 70       	andi	r30, 0x03	; 3
    700c:	f0 70       	andi	r31, 0x00	; 0
    700e:	ee 0f       	add	r30, r30
    7010:	ff 1f       	adc	r31, r31
    7012:	ee 0f       	add	r30, r30
    7014:	ff 1f       	adc	r31, r31
    7016:	ee 5b       	subi	r30, 0xBE	; 190
    7018:	fc 4f       	sbci	r31, 0xFC	; 252
    701a:	e0 80       	ld	r14, Z
    701c:	f1 80       	ldd	r15, Z+1	; 0x01
    701e:	02 81       	ldd	r16, Z+2	; 0x02
    7020:	13 81       	ldd	r17, Z+3	; 0x03
    7022:	ea 0c       	add	r14, r10
    7024:	fb 1c       	adc	r15, r11
    7026:	0c 1d       	adc	r16, r12
    7028:	1d 1d       	adc	r17, r13
    702a:	d4 01       	movw	r26, r8
    702c:	c3 01       	movw	r24, r6
    702e:	75 e0       	ldi	r23, 0x05	; 5
    7030:	b6 95       	lsr	r27
    7032:	a7 95       	ror	r26
    7034:	97 95       	ror	r25
    7036:	87 95       	ror	r24
    7038:	7a 95       	dec	r23
    703a:	d1 f7       	brne	.-12     	; 0x7030 <encipher+0x6e>
    703c:	a4 01       	movw	r20, r8
    703e:	93 01       	movw	r18, r6
    7040:	64 e0       	ldi	r22, 0x04	; 4
    7042:	22 0f       	add	r18, r18
    7044:	33 1f       	adc	r19, r19
    7046:	44 1f       	adc	r20, r20
    7048:	55 1f       	adc	r21, r21
    704a:	6a 95       	dec	r22
    704c:	d1 f7       	brne	.-12     	; 0x7042 <encipher+0x80>
    704e:	82 27       	eor	r24, r18
    7050:	93 27       	eor	r25, r19
    7052:	a4 27       	eor	r26, r20
    7054:	b5 27       	eor	r27, r21
    7056:	86 0d       	add	r24, r6
    7058:	97 1d       	adc	r25, r7
    705a:	a8 1d       	adc	r26, r8
    705c:	b9 1d       	adc	r27, r9
    705e:	e8 26       	eor	r14, r24
    7060:	f9 26       	eor	r15, r25
    7062:	0a 27       	eor	r16, r26
    7064:	1b 27       	eor	r17, r27
    7066:	2e 0c       	add	r2, r14
    7068:	3f 1c       	adc	r3, r15
    706a:	40 1e       	adc	r4, r16
    706c:	51 1e       	adc	r5, r17
    sum += delta;
    706e:	89 eb       	ldi	r24, 0xB9	; 185
    7070:	99 e7       	ldi	r25, 0x79	; 121
    7072:	a7 e3       	ldi	r26, 0x37	; 55
    7074:	be e9       	ldi	r27, 0x9E	; 158
    7076:	a8 0e       	add	r10, r24
    7078:	b9 1e       	adc	r11, r25
    707a:	ca 1e       	adc	r12, r26
    707c:	db 1e       	adc	r13, r27
    v1 += (((v0 << 4) ^ (v0 >> 5)) + v0) ^ (sum + key[(sum>>11) & 3]);
    707e:	a2 01       	movw	r20, r4
    7080:	91 01       	movw	r18, r2
    7082:	85 e0       	ldi	r24, 0x05	; 5
    7084:	56 95       	lsr	r21
    7086:	47 95       	ror	r20
    7088:	37 95       	ror	r19
    708a:	27 95       	ror	r18
    708c:	8a 95       	dec	r24
    708e:	d1 f7       	brne	.-12     	; 0x7084 <encipher+0xc2>
    7090:	d2 01       	movw	r26, r4
    7092:	c1 01       	movw	r24, r2
    7094:	04 e0       	ldi	r16, 0x04	; 4
    7096:	88 0f       	add	r24, r24
    7098:	99 1f       	adc	r25, r25
    709a:	aa 1f       	adc	r26, r26
    709c:	bb 1f       	adc	r27, r27
    709e:	0a 95       	dec	r16
    70a0:	d1 f7       	brne	.-12     	; 0x7096 <encipher+0xd4>
    70a2:	28 27       	eor	r18, r24
    70a4:	39 27       	eor	r19, r25
    70a6:	4a 27       	eor	r20, r26
    70a8:	5b 27       	eor	r21, r27
    70aa:	22 0d       	add	r18, r2
    70ac:	33 1d       	adc	r19, r3
    70ae:	44 1d       	adc	r20, r4
    70b0:	55 1d       	adc	r21, r5
    70b2:	d6 01       	movw	r26, r12
    70b4:	c5 01       	movw	r24, r10
    70b6:	1b e0       	ldi	r17, 0x0B	; 11
    70b8:	b6 95       	lsr	r27
    70ba:	a7 95       	ror	r26
    70bc:	97 95       	ror	r25
    70be:	87 95       	ror	r24
    70c0:	1a 95       	dec	r17
    70c2:	d1 f7       	brne	.-12     	; 0x70b8 <encipher+0xf6>
    70c4:	83 70       	andi	r24, 0x03	; 3
    70c6:	90 70       	andi	r25, 0x00	; 0
    70c8:	88 0f       	add	r24, r24
    70ca:	99 1f       	adc	r25, r25
    70cc:	88 0f       	add	r24, r24
    70ce:	99 1f       	adc	r25, r25
    70d0:	8e 5b       	subi	r24, 0xBE	; 190
    70d2:	9c 4f       	sbci	r25, 0xFC	; 252
    70d4:	fc 01       	movw	r30, r24
    70d6:	80 81       	ld	r24, Z
    70d8:	91 81       	ldd	r25, Z+1	; 0x01
    70da:	a2 81       	ldd	r26, Z+2	; 0x02
    70dc:	b3 81       	ldd	r27, Z+3	; 0x03
    70de:	8a 0d       	add	r24, r10
    70e0:	9b 1d       	adc	r25, r11
    70e2:	ac 1d       	adc	r26, r12
    70e4:	bd 1d       	adc	r27, r13
    70e6:	28 27       	eor	r18, r24
    70e8:	39 27       	eor	r19, r25
    70ea:	4a 27       	eor	r20, r26
    70ec:	5b 27       	eor	r21, r27
    70ee:	62 0e       	add	r6, r18
    70f0:	73 1e       	adc	r7, r19
    70f2:	84 1e       	adc	r8, r20
    70f4:	95 1e       	adc	r9, r21
uint32_t rval[2]={0,0};
uint32_t key[4];

void encipher(void) {  // Using 32 rounds of XTea encryption as a PRNG.
  uint32_t v0=rval[0], v1=rval[1], sum=0, delta=0x9E3779B9;
  for (unsigned int i=0; i < 32; i++) {
    70f6:	f0 e2       	ldi	r31, 0x20	; 32
    70f8:	af 16       	cp	r10, r31
    70fa:	f7 e3       	ldi	r31, 0x37	; 55
    70fc:	bf 06       	cpc	r11, r31
    70fe:	ff ee       	ldi	r31, 0xEF	; 239
    7100:	cf 06       	cpc	r12, r31
    7102:	f6 ec       	ldi	r31, 0xC6	; 198
    7104:	df 06       	cpc	r13, r31
    7106:	09 f0       	breq	.+2      	; 0x710a <encipher+0x148>
    7108:	7f cf       	rjmp	.-258    	; 0x7008 <encipher+0x46>
    v0 += (((v1 << 4) ^ (v1 >> 5)) + v1) ^ (sum + key[sum & 3]);
    sum += delta;
    v1 += (((v0 << 4) ^ (v0 >> 5)) + v0) ^ (sum + key[(sum>>11) & 3]);
  }
  rval[0]=v0; rval[1]=v1;
    710a:	20 92 c0 02 	sts	0x02C0, r2
    710e:	30 92 c1 02 	sts	0x02C1, r3
    7112:	40 92 c2 02 	sts	0x02C2, r4
    7116:	50 92 c3 02 	sts	0x02C3, r5
    711a:	60 92 c4 02 	sts	0x02C4, r6
    711e:	70 92 c5 02 	sts	0x02C5, r7
    7122:	80 92 c6 02 	sts	0x02C6, r8
    7126:	90 92 c7 02 	sts	0x02C7, r9
}
    712a:	1f 91       	pop	r17
    712c:	0f 91       	pop	r16
    712e:	ff 90       	pop	r15
    7130:	ef 90       	pop	r14
    7132:	df 90       	pop	r13
    7134:	cf 90       	pop	r12
    7136:	bf 90       	pop	r11
    7138:	af 90       	pop	r10
    713a:	9f 90       	pop	r9
    713c:	8f 90       	pop	r8
    713e:	7f 90       	pop	r7
    7140:	6f 90       	pop	r6
    7142:	5f 90       	pop	r5
    7144:	4f 90       	pop	r4
    7146:	3f 90       	pop	r3
    7148:	2f 90       	pop	r2
    714a:	08 95       	ret

0000714c <init_crand_consistent>:

void init_crand_consistent(uint8_t h, uint8_t m, uint8_t s)
{
    714c:	cf 92       	push	r12
    714e:	df 92       	push	r13
    7150:	ef 92       	push	r14
    7152:	ff 92       	push	r15
    7154:	0f 93       	push	r16
    7156:	1f 93       	push	r17
    7158:	c6 2e       	mov	r12, r22
  key[0]=0x2DE9716E;  //Initial XTEA key. Grabbed from the first 16 bytes
  key[1]=0x993FDDD1;  //of grc.com/password.  1 in 2^128 chance of seeing
  key[2]=0x2A77FB57;  //that key again there.
  key[3]=0xB172E6B0;
    715a:	00 eb       	ldi	r16, 0xB0	; 176
    715c:	16 ee       	ldi	r17, 0xE6	; 230
    715e:	22 e7       	ldi	r18, 0x72	; 114
    7160:	31 eb       	ldi	r19, 0xB1	; 177
    7162:	00 93 4e 03 	sts	0x034E, r16
    7166:	10 93 4f 03 	sts	0x034F, r17
    716a:	20 93 50 03 	sts	0x0350, r18
    716e:	30 93 51 03 	sts	0x0351, r19
  key[0]^=s;
    7172:	50 e0       	ldi	r21, 0x00	; 0
    7174:	60 e0       	ldi	r22, 0x00	; 0
    7176:	70 e0       	ldi	r23, 0x00	; 0
    7178:	0e e6       	ldi	r16, 0x6E	; 110
    717a:	11 e7       	ldi	r17, 0x71	; 113
    717c:	29 ee       	ldi	r18, 0xE9	; 233
    717e:	3d e2       	ldi	r19, 0x2D	; 45
    7180:	40 27       	eor	r20, r16
    7182:	51 27       	eor	r21, r17
    7184:	62 27       	eor	r22, r18
    7186:	73 27       	eor	r23, r19
    7188:	40 93 42 03 	sts	0x0342, r20
    718c:	50 93 43 03 	sts	0x0343, r21
    7190:	60 93 44 03 	sts	0x0344, r22
    7194:	70 93 45 03 	sts	0x0345, r23
  key[1]^=m;
    7198:	dd 24       	eor	r13, r13
    719a:	ee 24       	eor	r14, r14
    719c:	ff 24       	eor	r15, r15
    719e:	21 ed       	ldi	r18, 0xD1	; 209
    71a0:	3d ed       	ldi	r19, 0xDD	; 221
    71a2:	4f e3       	ldi	r20, 0x3F	; 63
    71a4:	59 e9       	ldi	r21, 0x99	; 153
    71a6:	c2 26       	eor	r12, r18
    71a8:	d3 26       	eor	r13, r19
    71aa:	e4 26       	eor	r14, r20
    71ac:	f5 26       	eor	r15, r21
    71ae:	c0 92 46 03 	sts	0x0346, r12
    71b2:	d0 92 47 03 	sts	0x0347, r13
    71b6:	e0 92 48 03 	sts	0x0348, r14
    71ba:	f0 92 49 03 	sts	0x0349, r15
  key[2]^=h;
    71be:	90 e0       	ldi	r25, 0x00	; 0
    71c0:	a0 e0       	ldi	r26, 0x00	; 0
    71c2:	b0 e0       	ldi	r27, 0x00	; 0
    71c4:	27 e5       	ldi	r18, 0x57	; 87
    71c6:	3b ef       	ldi	r19, 0xFB	; 251
    71c8:	47 e7       	ldi	r20, 0x77	; 119
    71ca:	5a e2       	ldi	r21, 0x2A	; 42
    71cc:	82 27       	eor	r24, r18
    71ce:	93 27       	eor	r25, r19
    71d0:	a4 27       	eor	r26, r20
    71d2:	b5 27       	eor	r27, r21
    71d4:	80 93 4a 03 	sts	0x034A, r24
    71d8:	90 93 4b 03 	sts	0x034B, r25
    71dc:	a0 93 4c 03 	sts	0x034C, r26
    71e0:	b0 93 4d 03 	sts	0x034D, r27
  rval[0]=0;
    71e4:	10 92 c0 02 	sts	0x02C0, r1
    71e8:	10 92 c1 02 	sts	0x02C1, r1
    71ec:	10 92 c2 02 	sts	0x02C2, r1
    71f0:	10 92 c3 02 	sts	0x02C3, r1
  rval[1]=0;
    71f4:	10 92 c4 02 	sts	0x02C4, r1
    71f8:	10 92 c5 02 	sts	0x02C5, r1
    71fc:	10 92 c6 02 	sts	0x02C6, r1
    7200:	10 92 c7 02 	sts	0x02C7, r1
  encipher();
    7204:	0e 94 e1 37 	call	0x6fc2	; 0x6fc2 <encipher>
}
    7208:	1f 91       	pop	r17
    720a:	0f 91       	pop	r16
    720c:	ff 90       	pop	r15
    720e:	ef 90       	pop	r14
    7210:	df 90       	pop	r13
    7212:	cf 90       	pop	r12
    7214:	08 95       	ret

00007216 <init_crand>:

void init_crand(void) {
  //uint32_t temp;
  init_crand_consistent(time_h,time_m,time_s);
    7216:	80 91 2a 03 	lds	r24, 0x032A
    721a:	60 91 34 03 	lds	r22, 0x0334
    721e:	40 91 3f 03 	lds	r20, 0x033F
    7222:	0e 94 a6 38 	call	0x714c	; 0x714c <init_crand_consistent>
}
    7226:	08 95       	ret

00007228 <crand>:
//    wdt_reset();
//    encipher();
//    return (rval[0]^rval[1])&RAND_MAX;
//  } 
//   else
 if (type==1) {
    7228:	81 30       	cpi	r24, 0x01	; 1
    722a:	f9 f4       	brne	.+62     	; 0x726a <crand+0x42>
  	return ((rval[0]^rval[1])>>15)&3;
    722c:	80 91 c4 02 	lds	r24, 0x02C4
    7230:	90 91 c5 02 	lds	r25, 0x02C5
    7234:	a0 91 c6 02 	lds	r26, 0x02C6
    7238:	b0 91 c7 02 	lds	r27, 0x02C7
    723c:	20 91 c0 02 	lds	r18, 0x02C0
    7240:	30 91 c1 02 	lds	r19, 0x02C1
    7244:	40 91 c2 02 	lds	r20, 0x02C2
    7248:	50 91 c3 02 	lds	r21, 0x02C3
    724c:	82 27       	eor	r24, r18
    724e:	93 27       	eor	r25, r19
    7250:	a4 27       	eor	r26, r20
    7252:	b5 27       	eor	r27, r21
    7254:	3f e0       	ldi	r19, 0x0F	; 15
    7256:	b6 95       	lsr	r27
    7258:	a7 95       	ror	r26
    725a:	97 95       	ror	r25
    725c:	87 95       	ror	r24
    725e:	3a 95       	dec	r19
    7260:	d1 f7       	brne	.-12     	; 0x7256 <crand+0x2e>
    7262:	9c 01       	movw	r18, r24
    7264:	23 70       	andi	r18, 0x03	; 3
    7266:	30 70       	andi	r19, 0x00	; 0
    7268:	2f c0       	rjmp	.+94     	; 0x72c8 <crand+0xa0>
  } 
    else if (type==2) {
    726a:	82 30       	cpi	r24, 0x02	; 2
    726c:	f9 f4       	brne	.+62     	; 0x72ac <crand+0x84>
   return ((rval[0]^rval[1])>>17)&1;
    726e:	80 91 c4 02 	lds	r24, 0x02C4
    7272:	90 91 c5 02 	lds	r25, 0x02C5
    7276:	a0 91 c6 02 	lds	r26, 0x02C6
    727a:	b0 91 c7 02 	lds	r27, 0x02C7
    727e:	20 91 c0 02 	lds	r18, 0x02C0
    7282:	30 91 c1 02 	lds	r19, 0x02C1
    7286:	40 91 c2 02 	lds	r20, 0x02C2
    728a:	50 91 c3 02 	lds	r21, 0x02C3
    728e:	82 27       	eor	r24, r18
    7290:	93 27       	eor	r25, r19
    7292:	a4 27       	eor	r26, r20
    7294:	b5 27       	eor	r27, r21
    7296:	21 e1       	ldi	r18, 0x11	; 17
    7298:	b6 95       	lsr	r27
    729a:	a7 95       	ror	r26
    729c:	97 95       	ror	r25
    729e:	87 95       	ror	r24
    72a0:	2a 95       	dec	r18
    72a2:	d1 f7       	brne	.-12     	; 0x7298 <crand+0x70>
    72a4:	9c 01       	movw	r18, r24
    72a6:	21 70       	andi	r18, 0x01	; 1
    72a8:	30 70       	andi	r19, 0x00	; 0
    72aa:	0e c0       	rjmp	.+28     	; 0x72c8 <crand+0xa0>
  }
  wdt_reset();
    72ac:	a8 95       	wdr
  encipher();
    72ae:	0e 94 e1 37 	call	0x6fc2	; 0x6fc2 <encipher>
  return (rval[0]^rval[1])&RAND_MAX; 
    72b2:	20 91 c4 02 	lds	r18, 0x02C4
    72b6:	30 91 c5 02 	lds	r19, 0x02C5
    72ba:	80 91 c0 02 	lds	r24, 0x02C0
    72be:	90 91 c1 02 	lds	r25, 0x02C1
    72c2:	28 27       	eor	r18, r24
    72c4:	39 27       	eor	r19, r25
    72c6:	3f 77       	andi	r19, 0x7F	; 127
}
    72c8:	c9 01       	movw	r24, r18
    72ca:	08 95       	ret

000072cc <intersectrect>:
    }
  }
}

uint8_t intersectrect(uint8_t x1, uint8_t y1, uint8_t w1, uint8_t h1,
		      uint8_t x2, uint8_t y2, uint8_t w2, uint8_t h2) {
    72cc:	af 92       	push	r10
    72ce:	cf 92       	push	r12
    72d0:	ef 92       	push	r14
    72d2:	0f 93       	push	r16
  // yer everyday intersection tester
  // check x coord first
  if (x1+w1 < x2)
    72d4:	a8 2f       	mov	r26, r24
    72d6:	b0 e0       	ldi	r27, 0x00	; 0
    72d8:	e0 2f       	mov	r30, r16
    72da:	f0 e0       	ldi	r31, 0x00	; 0
    72dc:	cd 01       	movw	r24, r26
    72de:	84 0f       	add	r24, r20
    72e0:	91 1d       	adc	r25, r1
    72e2:	8e 17       	cp	r24, r30
    72e4:	9f 07       	cpc	r25, r31
    72e6:	b4 f0       	brlt	.+44     	; 0x7314 <intersectrect+0x48>
    return 0;
  if (x2+w2 < x1)
    72e8:	ec 0d       	add	r30, r12
    72ea:	f1 1d       	adc	r31, r1
    72ec:	ea 17       	cp	r30, r26
    72ee:	fb 07       	cpc	r31, r27
    72f0:	8c f0       	brlt	.+34     	; 0x7314 <intersectrect+0x48>
    return 0;

  // check the y coord second
  if (y1+h1 < y2)
    72f2:	70 e0       	ldi	r23, 0x00	; 0
    72f4:	4e 2d       	mov	r20, r14
    72f6:	50 e0       	ldi	r21, 0x00	; 0
    72f8:	cb 01       	movw	r24, r22
    72fa:	82 0f       	add	r24, r18
    72fc:	91 1d       	adc	r25, r1
    72fe:	84 17       	cp	r24, r20
    7300:	95 07       	cpc	r25, r21
    7302:	44 f0       	brlt	.+16     	; 0x7314 <intersectrect+0x48>
    7304:	80 e0       	ldi	r24, 0x00	; 0
    7306:	4a 0d       	add	r20, r10
    7308:	51 1d       	adc	r21, r1
    730a:	46 17       	cp	r20, r22
    730c:	57 07       	cpc	r21, r23
    730e:	1c f0       	brlt	.+6      	; 0x7316 <intersectrect+0x4a>
    7310:	81 e0       	ldi	r24, 0x01	; 1
    7312:	01 c0       	rjmp	.+2      	; 0x7316 <intersectrect+0x4a>
    7314:	80 e0       	ldi	r24, 0x00	; 0
    return 0;
  if (y2+h2 < y1)
    return 0;

  return 1;
}
    7316:	0f 91       	pop	r16
    7318:	ef 90       	pop	r14
    731a:	cf 90       	pop	r12
    731c:	af 90       	pop	r10
    731e:	08 95       	ret

00007320 <add_month>:
    }
    return 0;
}

void add_month(volatile uint8_t *month, volatile uint8_t *day, uint16_t year)
{
    7320:	0f 93       	push	r16
    7322:	1f 93       	push	r17
    7324:	cf 93       	push	r28
    7326:	df 93       	push	r29
    7328:	fc 01       	movw	r30, r24
    732a:	eb 01       	movw	r28, r22
    732c:	8a 01       	movw	r16, r20
	if (*month >= 13)
    732e:	80 81       	ld	r24, Z
    7330:	8d 30       	cpi	r24, 0x0D	; 13
    7332:	10 f0       	brcs	.+4      	; 0x7338 <add_month+0x18>
	  *month = 1;
    7334:	81 e0       	ldi	r24, 0x01	; 1
    7336:	80 83       	st	Z, r24
	if(*month == 2) {
    7338:	80 81       	ld	r24, Z
    733a:	82 30       	cpi	r24, 0x02	; 2
    733c:	a1 f4       	brne	.+40     	; 0x7366 <add_month+0x46>
	  if(leapyear(year) && (*day > 29))
    733e:	c8 01       	movw	r24, r16
    7340:	0e 94 c3 2e 	call	0x5d86	; 0x5d86 <leapyear>
    7344:	88 23       	and	r24, r24
    7346:	29 f0       	breq	.+10     	; 0x7352 <add_month+0x32>
    7348:	88 81       	ld	r24, Y
    734a:	8e 31       	cpi	r24, 0x1E	; 30
    734c:	10 f0       	brcs	.+4      	; 0x7352 <add_month+0x32>
	  	*day = 29;
    734e:	8d e1       	ldi	r24, 0x1D	; 29
    7350:	1a c0       	rjmp	.+52     	; 0x7386 <add_month+0x66>
	  else if (!leapyear(year) && (*day > 28))
    7352:	c8 01       	movw	r24, r16
    7354:	0e 94 c3 2e 	call	0x5d86	; 0x5d86 <leapyear>
    7358:	88 23       	and	r24, r24
    735a:	b1 f4       	brne	.+44     	; 0x7388 <add_month+0x68>
    735c:	88 81       	ld	r24, Y
    735e:	8d 31       	cpi	r24, 0x1D	; 29
    7360:	98 f0       	brcs	.+38     	; 0x7388 <add_month+0x68>
	    *day = 28;
    7362:	8c e1       	ldi	r24, 0x1C	; 28
    7364:	10 c0       	rjmp	.+32     	; 0x7386 <add_month+0x66>
	} else if ((*month == 4) || (*month == 6) || (*month == 9) || (*month == 11)) {
    7366:	80 81       	ld	r24, Z
    7368:	84 30       	cpi	r24, 0x04	; 4
    736a:	49 f0       	breq	.+18     	; 0x737e <add_month+0x5e>
    736c:	80 81       	ld	r24, Z
    736e:	86 30       	cpi	r24, 0x06	; 6
    7370:	31 f0       	breq	.+12     	; 0x737e <add_month+0x5e>
    7372:	80 81       	ld	r24, Z
    7374:	89 30       	cpi	r24, 0x09	; 9
    7376:	19 f0       	breq	.+6      	; 0x737e <add_month+0x5e>
    7378:	80 81       	ld	r24, Z
    737a:	8b 30       	cpi	r24, 0x0B	; 11
    737c:	29 f4       	brne	.+10     	; 0x7388 <add_month+0x68>
      if(*day > 30)
    737e:	88 81       	ld	r24, Y
    7380:	8f 31       	cpi	r24, 0x1F	; 31
    7382:	10 f0       	brcs	.+4      	; 0x7388 <add_month+0x68>
      	*day = 30;
    7384:	8e e1       	ldi	r24, 0x1E	; 30
    7386:	88 83       	st	Y, r24
  }
}
    7388:	df 91       	pop	r29
    738a:	cf 91       	pop	r28
    738c:	1f 91       	pop	r17
    738e:	0f 91       	pop	r16
    7390:	08 95       	ret

00007392 <check_timeout>:
  glcdPutStr_rom(Action,NORMAL);
}

uint8_t check_timeout(void)
{
	if((displaymode != SET_TIME)&&(displaystyle<=STYLE_ROTATE))
    7392:	80 91 3a 03 	lds	r24, 0x033A
    7396:	83 30       	cpi	r24, 0x03	; 3
    7398:	b9 f0       	breq	.+46     	; 0x73c8 <check_timeout+0x36>
    739a:	80 91 31 03 	lds	r24, 0x0331
    739e:	86 3d       	cpi	r24, 0xD6	; 214
    73a0:	98 f4       	brcc	.+38     	; 0x73c8 <check_timeout+0x36>
	{
		screenmutex++;
    73a2:	80 91 13 02 	lds	r24, 0x0213
    73a6:	8f 5f       	subi	r24, 0xFF	; 255
    73a8:	80 93 13 02 	sts	0x0213, r24
		print_time(time_h, time_m, time_s, SET_TIME);
    73ac:	80 91 2a 03 	lds	r24, 0x032A
    73b0:	60 91 34 03 	lds	r22, 0x0334
    73b4:	40 91 3f 03 	lds	r20, 0x033F
    73b8:	23 e0       	ldi	r18, 0x03	; 3
    73ba:	0e 94 bc 1f 	call	0x3f78	; 0x3f78 <print_time>
		screenmutex--;
    73be:	80 91 13 02 	lds	r24, 0x0213
    73c2:	81 50       	subi	r24, 0x01	; 1
    73c4:	80 93 13 02 	sts	0x0213, r24
	}
	if (just_pressed & 0x1) { // mode change
    73c8:	80 91 0f 02 	lds	r24, 0x020F
    73cc:	80 ff       	sbrs	r24, 0
    73ce:	02 c0       	rjmp	.+4      	; 0x73d4 <check_timeout+0x42>
    73d0:	81 e0       	ldi	r24, 0x01	; 1
    73d2:	08 95       	ret
      return 1;
    }
    if (just_pressed || pressed) {
    73d4:	80 91 0f 02 	lds	r24, 0x020F
    73d8:	88 23       	and	r24, r24
    73da:	21 f4       	brne	.+8      	; 0x73e4 <check_timeout+0x52>
    73dc:	80 91 10 02 	lds	r24, 0x0210
    73e0:	88 23       	and	r24, r24
    73e2:	21 f0       	breq	.+8      	; 0x73ec <check_timeout+0x5a>
      timeoutcounter = INACTIVITYTIMEOUT;  
    73e4:	8a e0       	ldi	r24, 0x0A	; 10
    73e6:	80 93 12 02 	sts	0x0212, r24
    73ea:	04 c0       	rjmp	.+8      	; 0x73f4 <check_timeout+0x62>
      // timeout w/no buttons pressed after 3 seconds?
    } else if (!timeoutcounter) {
    73ec:	80 91 12 02 	lds	r24, 0x0212
    73f0:	88 23       	and	r24, r24
    73f2:	11 f0       	breq	.+4      	; 0x73f8 <check_timeout+0x66>
    73f4:	80 e0       	ldi	r24, 0x00	; 0
    73f6:	08 95       	ret
      //timed out!
      displaymode = SHOW_TIME;     
    73f8:	10 92 3a 03 	sts	0x033A, r1
    73fc:	82 e0       	ldi	r24, 0x02	; 2
      return 2;
    }
    return 0;
}
    73fe:	08 95       	ret

00007400 <PRINT_MENU_LINE>:
 glcdFillRectangle(0, 48, GLCD_XPIXELS, 16, NORMAL);
 PRINT_MENU_LINE(6,Button1,Opt1);
 PRINT_MENU_LINE(7,Button2,Opt2);
}

void PRINT_MENU_LINE(uint8_t line, const char *Button, const char *Action){
    7400:	ef 92       	push	r14
    7402:	ff 92       	push	r15
    7404:	0f 93       	push	r16
    7406:	1f 93       	push	r17
    7408:	98 2f       	mov	r25, r24
    740a:	8b 01       	movw	r16, r22
    740c:	7a 01       	movw	r14, r20
  glcdSetAddress(0, line);
    740e:	80 e0       	ldi	r24, 0x00	; 0
    7410:	69 2f       	mov	r22, r25
    7412:	0e 94 50 2d 	call	0x5aa0	; 0x5aa0 <glcdSetAddress>
  glcdPutStr("Press ",NORMAL);
    7416:	85 e4       	ldi	r24, 0x45	; 69
    7418:	99 e0       	ldi	r25, 0x09	; 9
    741a:	60 e0       	ldi	r22, 0x00	; 0
    741c:	0e 94 56 29 	call	0x52ac	; 0x52ac <glcdPutStr_rom>
  glcdPutStr_rom(Button,NORMAL);
    7420:	c8 01       	movw	r24, r16
    7422:	60 e0       	ldi	r22, 0x00	; 0
    7424:	0e 94 56 29 	call	0x52ac	; 0x52ac <glcdPutStr_rom>
  glcdPutStr(" to ",NORMAL);
    7428:	80 e4       	ldi	r24, 0x40	; 64
    742a:	99 e0       	ldi	r25, 0x09	; 9
    742c:	60 e0       	ldi	r22, 0x00	; 0
    742e:	0e 94 56 29 	call	0x52ac	; 0x52ac <glcdPutStr_rom>
  glcdPutStr_rom(Action,NORMAL);
    7432:	c7 01       	movw	r24, r14
    7434:	60 e0       	ldi	r22, 0x00	; 0
    7436:	0e 94 56 29 	call	0x52ac	; 0x52ac <glcdPutStr_rom>
}
    743a:	1f 91       	pop	r17
    743c:	0f 91       	pop	r16
    743e:	ff 90       	pop	r15
    7440:	ef 90       	pop	r14
    7442:	08 95       	ret

00007444 <PRINT_MENU>:
 PRINT_MENU(PSTR("+"),Opt1,PSTR("SET"),Opt2);
 // Press + to X
 // Press SET to X
}

void PRINT_MENU(const char *Button1, const char *Opt1, const char *Button2, const char *Opt2){
    7444:	8f 92       	push	r8
    7446:	9f 92       	push	r9
    7448:	af 92       	push	r10
    744a:	bf 92       	push	r11
    744c:	cf 92       	push	r12
    744e:	df 92       	push	r13
    7450:	ef 92       	push	r14
    7452:	ff 92       	push	r15
    7454:	0f 93       	push	r16
    7456:	7c 01       	movw	r14, r24
    7458:	6b 01       	movw	r12, r22
    745a:	5a 01       	movw	r10, r20
    745c:	49 01       	movw	r8, r18
 glcdFillRectangle(0, 48, GLCD_XPIXELS, 16, NORMAL);
    745e:	80 e0       	ldi	r24, 0x00	; 0
    7460:	60 e3       	ldi	r22, 0x30	; 48
    7462:	40 e8       	ldi	r20, 0x80	; 128
    7464:	20 e1       	ldi	r18, 0x10	; 16
    7466:	00 e0       	ldi	r16, 0x00	; 0
    7468:	0e 94 7e 29 	call	0x52fc	; 0x52fc <glcdFillRectangle>
 PRINT_MENU_LINE(6,Button1,Opt1);
    746c:	86 e0       	ldi	r24, 0x06	; 6
    746e:	b7 01       	movw	r22, r14
    7470:	a6 01       	movw	r20, r12
    7472:	0e 94 00 3a 	call	0x7400	; 0x7400 <PRINT_MENU_LINE>
 PRINT_MENU_LINE(7,Button2,Opt2);
    7476:	87 e0       	ldi	r24, 0x07	; 7
    7478:	b5 01       	movw	r22, r10
    747a:	a4 01       	movw	r20, r8
    747c:	0e 94 00 3a 	call	0x7400	; 0x7400 <PRINT_MENU_LINE>
}
    7480:	0f 91       	pop	r16
    7482:	ff 90       	pop	r15
    7484:	ef 90       	pop	r14
    7486:	df 90       	pop	r13
    7488:	cf 90       	pop	r12
    748a:	bf 90       	pop	r11
    748c:	af 90       	pop	r10
    748e:	9f 90       	pop	r9
    7490:	8f 90       	pop	r8
    7492:	08 95       	ret

00007494 <PRINT_MENU_OPTS>:
 print_menu_opts("change","save");
 // Press + to change
 // Press SET to save
}

void PRINT_MENU_OPTS(const char *Opt1, const char *Opt2){
    7494:	ac 01       	movw	r20, r24
    7496:	9b 01       	movw	r18, r22
 PRINT_MENU(PSTR("+"),Opt1,PSTR("SET"),Opt2);
    7498:	80 e5       	ldi	r24, 0x50	; 80
    749a:	99 e0       	ldi	r25, 0x09	; 9
    749c:	ba 01       	movw	r22, r20
    749e:	4c e4       	ldi	r20, 0x4C	; 76
    74a0:	59 e0       	ldi	r21, 0x09	; 9
    74a2:	0e 94 22 3a 	call	0x7444	; 0x7444 <PRINT_MENU>
 // Press + to X
 // Press SET to X
}
    74a6:	08 95       	ret

000074a8 <print_menu_change>:
  //Press MENU to exit
  //Press SET to set
}

void print_menu_change(){
 print_menu_opts("change","save");
    74a8:	87 e5       	ldi	r24, 0x57	; 87
    74aa:	99 e0       	ldi	r25, 0x09	; 9
    74ac:	62 e5       	ldi	r22, 0x52	; 82
    74ae:	79 e0       	ldi	r23, 0x09	; 9
    74b0:	0e 94 4a 3a 	call	0x7494	; 0x7494 <PRINT_MENU_OPTS>
 // Press + to change
 // Press SET to save
}
    74b4:	08 95       	ret

000074b6 <print_menu_exit>:
  // Press MENU to avance
  // Press SET to set
}

void print_menu_exit(){
  print_menu("MENU","exit","SET","save");
    74b6:	8c e6       	ldi	r24, 0x6C	; 108
    74b8:	99 e0       	ldi	r25, 0x09	; 9
    74ba:	67 e6       	ldi	r22, 0x67	; 103
    74bc:	79 e0       	ldi	r23, 0x09	; 9
    74be:	43 e6       	ldi	r20, 0x63	; 99
    74c0:	59 e0       	ldi	r21, 0x09	; 9
    74c2:	2e e5       	ldi	r18, 0x5E	; 94
    74c4:	39 e0       	ldi	r19, 0x09	; 9
    74c6:	0e 94 22 3a 	call	0x7444	; 0x7444 <PRINT_MENU>
  //Press MENU to exit
  //Press SET to set
}
    74ca:	08 95       	ret

000074cc <print_menu_advance>:
}
#endif

//Config menu related functions
void print_menu_advance(){
  print_menu("MENU","advance","SET","set");
    74cc:	81 e8       	ldi	r24, 0x81	; 129
    74ce:	99 e0       	ldi	r25, 0x09	; 9
    74d0:	69 e7       	ldi	r22, 0x79	; 121
    74d2:	79 e0       	ldi	r23, 0x09	; 9
    74d4:	45 e7       	ldi	r20, 0x75	; 117
    74d6:	59 e0       	ldi	r21, 0x09	; 9
    74d8:	21 e7       	ldi	r18, 0x71	; 113
    74da:	39 e0       	ldi	r19, 0x09	; 9
    74dc:	0e 94 22 3a 	call	0x7444	; 0x7444 <PRINT_MENU>
  // Press MENU to avance
  // Press SET to set
}
    74e0:	08 95       	ret

000074e2 <drawbigdigit>:
  return (rval[0]^rval[1])&RAND_MAX; 
}

#ifdef RATTDEATH
extern unsigned char BigFont[];
void drawbigdigit(uint8_t x, uint8_t y, uint8_t n, uint8_t inverted) {
    74e2:	6f 92       	push	r6
    74e4:	7f 92       	push	r7
    74e6:	8f 92       	push	r8
    74e8:	9f 92       	push	r9
    74ea:	af 92       	push	r10
    74ec:	bf 92       	push	r11
    74ee:	cf 92       	push	r12
    74f0:	df 92       	push	r13
    74f2:	ef 92       	push	r14
    74f4:	ff 92       	push	r15
    74f6:	0f 93       	push	r16
    74f8:	1f 93       	push	r17
    74fa:	cf 93       	push	r28
    74fc:	df 93       	push	r29
    74fe:	a8 2e       	mov	r10, r24
    7500:	66 2e       	mov	r6, r22
    7502:	72 2e       	mov	r7, r18
  uint8_t i, j;
  uint8_t sizex=2, sizey=2;
  
#ifdef DEATHCHRON
  if(displaystyle == STYLE_DEATH)
    7504:	80 91 31 03 	lds	r24, 0x0331
    7508:	83 3d       	cpi	r24, 0xD3	; 211
    750a:	29 f4       	brne	.+10     	; 0x7516 <drawbigdigit+0x34>
    750c:	f3 e0       	ldi	r31, 0x03	; 3
    750e:	cf 2e       	mov	r12, r31
    7510:	e5 e0       	ldi	r30, 0x05	; 5
    7512:	de 2e       	mov	r13, r30
    7514:	04 c0       	rjmp	.+8      	; 0x751e <drawbigdigit+0x3c>
    7516:	72 e0       	ldi	r23, 0x02	; 2
    7518:	c7 2e       	mov	r12, r23
    751a:	62 e0       	ldi	r22, 0x02	; 2
    751c:	d6 2e       	mov	r13, r22
    751e:	c4 2f       	mov	r28, r20
    7520:	d0 e0       	ldi	r29, 0x00	; 0
    7522:	cc 0f       	add	r28, r28
    7524:	dd 1f       	adc	r29, r29
    7526:	cc 0f       	add	r28, r28
    7528:	dd 1f       	adc	r29, r29
    752a:	c6 5e       	subi	r28, 0xE6	; 230
    752c:	df 4f       	sbci	r29, 0xFF	; 255
    752e:	bb 24       	eor	r11, r11
  	  sizex = 3; sizey = 5;
  }
#endif
  
  for (i = 0; i < 4; i++) {
    uint8_t d = eeprom_read_byte(&BigFont[(n*4)+i]);
    7530:	ce 01       	movw	r24, r28
    7532:	0e 94 70 3b 	call	0x76e0	; 0x76e0 <__eerd_byte_m328p>
    7536:	16 2d       	mov	r17, r6
    7538:	47 e0       	ldi	r20, 0x07	; 7
    753a:	e4 2e       	mov	r14, r20
    753c:	f1 2c       	mov	r15, r1
    for (j=0; j<8; j++) {
      if (d & _BV(7-j)) {
    753e:	88 2e       	mov	r8, r24
    7540:	99 24       	eor	r9, r9
    7542:	c4 01       	movw	r24, r8
    7544:	0e 2c       	mov	r0, r14
    7546:	02 c0       	rjmp	.+4      	; 0x754c <drawbigdigit+0x6a>
    7548:	95 95       	asr	r25
    754a:	87 95       	ror	r24
    754c:	0a 94       	dec	r0
    754e:	e2 f7       	brpl	.-8      	; 0x7548 <drawbigdigit+0x66>
    7550:	80 ff       	sbrs	r24, 0
    7552:	09 c0       	rjmp	.+18     	; 0x7566 <drawbigdigit+0x84>
	glcdFillRectangle(x+i*sizex, y+j*sizey, sizex, sizey, !inverted);
    7554:	00 e0       	ldi	r16, 0x00	; 0
    7556:	77 20       	and	r7, r7
    7558:	09 f4       	brne	.+2      	; 0x755c <drawbigdigit+0x7a>
    755a:	01 e0       	ldi	r16, 0x01	; 1
    755c:	8a 2d       	mov	r24, r10
    755e:	61 2f       	mov	r22, r17
    7560:	4c 2d       	mov	r20, r12
    7562:	2d 2d       	mov	r18, r13
    7564:	05 c0       	rjmp	.+10     	; 0x7570 <drawbigdigit+0x8e>
      } else {
	glcdFillRectangle(x+i*sizex, y+j*sizey, sizex, sizey, inverted);
    7566:	8a 2d       	mov	r24, r10
    7568:	61 2f       	mov	r22, r17
    756a:	4c 2d       	mov	r20, r12
    756c:	2d 2d       	mov	r18, r13
    756e:	07 2d       	mov	r16, r7
    7570:	0e 94 7e 29 	call	0x52fc	; 0x52fc <glcdFillRectangle>
    7574:	08 94       	sec
    7576:	e1 08       	sbc	r14, r1
    7578:	f1 08       	sbc	r15, r1
    757a:	1d 0d       	add	r17, r13
  }
#endif
  
  for (i = 0; i < 4; i++) {
    uint8_t d = eeprom_read_byte(&BigFont[(n*4)+i]);
    for (j=0; j<8; j++) {
    757c:	8f ef       	ldi	r24, 0xFF	; 255
    757e:	e8 16       	cp	r14, r24
    7580:	8f ef       	ldi	r24, 0xFF	; 255
    7582:	f8 06       	cpc	r15, r24
    7584:	f1 f6       	brne	.-68     	; 0x7542 <drawbigdigit+0x60>
  {
  	  sizex = 3; sizey = 5;
  }
#endif
  
  for (i = 0; i < 4; i++) {
    7586:	b3 94       	inc	r11
    7588:	21 96       	adiw	r28, 0x01	; 1
    758a:	ac 0c       	add	r10, r12
    758c:	84 e0       	ldi	r24, 0x04	; 4
    758e:	b8 16       	cp	r11, r24
    7590:	79 f6       	brne	.-98     	; 0x7530 <drawbigdigit+0x4e>
      } else {
	glcdFillRectangle(x+i*sizex, y+j*sizey, sizex, sizey, inverted);
      }
    }
  }
}
    7592:	df 91       	pop	r29
    7594:	cf 91       	pop	r28
    7596:	1f 91       	pop	r17
    7598:	0f 91       	pop	r16
    759a:	ff 90       	pop	r15
    759c:	ef 90       	pop	r14
    759e:	df 90       	pop	r13
    75a0:	cf 90       	pop	r12
    75a2:	bf 90       	pop	r11
    75a4:	af 90       	pop	r10
    75a6:	9f 90       	pop	r9
    75a8:	8f 90       	pop	r8
    75aa:	7f 90       	pop	r7
    75ac:	6f 90       	pop	r6
    75ae:	08 95       	ret

000075b0 <__mulsi3>:
    75b0:	62 9f       	mul	r22, r18
    75b2:	d0 01       	movw	r26, r0
    75b4:	73 9f       	mul	r23, r19
    75b6:	f0 01       	movw	r30, r0
    75b8:	82 9f       	mul	r24, r18
    75ba:	e0 0d       	add	r30, r0
    75bc:	f1 1d       	adc	r31, r1
    75be:	64 9f       	mul	r22, r20
    75c0:	e0 0d       	add	r30, r0
    75c2:	f1 1d       	adc	r31, r1
    75c4:	92 9f       	mul	r25, r18
    75c6:	f0 0d       	add	r31, r0
    75c8:	83 9f       	mul	r24, r19
    75ca:	f0 0d       	add	r31, r0
    75cc:	74 9f       	mul	r23, r20
    75ce:	f0 0d       	add	r31, r0
    75d0:	65 9f       	mul	r22, r21
    75d2:	f0 0d       	add	r31, r0
    75d4:	99 27       	eor	r25, r25
    75d6:	72 9f       	mul	r23, r18
    75d8:	b0 0d       	add	r27, r0
    75da:	e1 1d       	adc	r30, r1
    75dc:	f9 1f       	adc	r31, r25
    75de:	63 9f       	mul	r22, r19
    75e0:	b0 0d       	add	r27, r0
    75e2:	e1 1d       	adc	r30, r1
    75e4:	f9 1f       	adc	r31, r25
    75e6:	bd 01       	movw	r22, r26
    75e8:	cf 01       	movw	r24, r30
    75ea:	11 24       	eor	r1, r1
    75ec:	08 95       	ret

000075ee <__udivmodqi4>:
    75ee:	99 1b       	sub	r25, r25
    75f0:	79 e0       	ldi	r23, 0x09	; 9
    75f2:	04 c0       	rjmp	.+8      	; 0x75fc <__udivmodqi4_ep>

000075f4 <__udivmodqi4_loop>:
    75f4:	99 1f       	adc	r25, r25
    75f6:	96 17       	cp	r25, r22
    75f8:	08 f0       	brcs	.+2      	; 0x75fc <__udivmodqi4_ep>
    75fa:	96 1b       	sub	r25, r22

000075fc <__udivmodqi4_ep>:
    75fc:	88 1f       	adc	r24, r24
    75fe:	7a 95       	dec	r23
    7600:	c9 f7       	brne	.-14     	; 0x75f4 <__udivmodqi4_loop>
    7602:	80 95       	com	r24
    7604:	08 95       	ret

00007606 <__udivmodhi4>:
    7606:	aa 1b       	sub	r26, r26
    7608:	bb 1b       	sub	r27, r27
    760a:	51 e1       	ldi	r21, 0x11	; 17
    760c:	07 c0       	rjmp	.+14     	; 0x761c <__udivmodhi4_ep>

0000760e <__udivmodhi4_loop>:
    760e:	aa 1f       	adc	r26, r26
    7610:	bb 1f       	adc	r27, r27
    7612:	a6 17       	cp	r26, r22
    7614:	b7 07       	cpc	r27, r23
    7616:	10 f0       	brcs	.+4      	; 0x761c <__udivmodhi4_ep>
    7618:	a6 1b       	sub	r26, r22
    761a:	b7 0b       	sbc	r27, r23

0000761c <__udivmodhi4_ep>:
    761c:	88 1f       	adc	r24, r24
    761e:	99 1f       	adc	r25, r25
    7620:	5a 95       	dec	r21
    7622:	a9 f7       	brne	.-22     	; 0x760e <__udivmodhi4_loop>
    7624:	80 95       	com	r24
    7626:	90 95       	com	r25
    7628:	bc 01       	movw	r22, r24
    762a:	cd 01       	movw	r24, r26
    762c:	08 95       	ret

0000762e <__divmodhi4>:
    762e:	97 fb       	bst	r25, 7
    7630:	09 2e       	mov	r0, r25
    7632:	07 26       	eor	r0, r23
    7634:	0a d0       	rcall	.+20     	; 0x764a <__divmodhi4_neg1>
    7636:	77 fd       	sbrc	r23, 7
    7638:	04 d0       	rcall	.+8      	; 0x7642 <__divmodhi4_neg2>
    763a:	e5 df       	rcall	.-54     	; 0x7606 <__udivmodhi4>
    763c:	06 d0       	rcall	.+12     	; 0x764a <__divmodhi4_neg1>
    763e:	00 20       	and	r0, r0
    7640:	1a f4       	brpl	.+6      	; 0x7648 <__divmodhi4_exit>

00007642 <__divmodhi4_neg2>:
    7642:	70 95       	com	r23
    7644:	61 95       	neg	r22
    7646:	7f 4f       	sbci	r23, 0xFF	; 255

00007648 <__divmodhi4_exit>:
    7648:	08 95       	ret

0000764a <__divmodhi4_neg1>:
    764a:	f6 f7       	brtc	.-4      	; 0x7648 <__divmodhi4_exit>
    764c:	90 95       	com	r25
    764e:	81 95       	neg	r24
    7650:	9f 4f       	sbci	r25, 0xFF	; 255
    7652:	08 95       	ret

00007654 <__udivmodsi4>:
    7654:	a1 e2       	ldi	r26, 0x21	; 33
    7656:	1a 2e       	mov	r1, r26
    7658:	aa 1b       	sub	r26, r26
    765a:	bb 1b       	sub	r27, r27
    765c:	fd 01       	movw	r30, r26
    765e:	0d c0       	rjmp	.+26     	; 0x767a <__udivmodsi4_ep>

00007660 <__udivmodsi4_loop>:
    7660:	aa 1f       	adc	r26, r26
    7662:	bb 1f       	adc	r27, r27
    7664:	ee 1f       	adc	r30, r30
    7666:	ff 1f       	adc	r31, r31
    7668:	a2 17       	cp	r26, r18
    766a:	b3 07       	cpc	r27, r19
    766c:	e4 07       	cpc	r30, r20
    766e:	f5 07       	cpc	r31, r21
    7670:	20 f0       	brcs	.+8      	; 0x767a <__udivmodsi4_ep>
    7672:	a2 1b       	sub	r26, r18
    7674:	b3 0b       	sbc	r27, r19
    7676:	e4 0b       	sbc	r30, r20
    7678:	f5 0b       	sbc	r31, r21

0000767a <__udivmodsi4_ep>:
    767a:	66 1f       	adc	r22, r22
    767c:	77 1f       	adc	r23, r23
    767e:	88 1f       	adc	r24, r24
    7680:	99 1f       	adc	r25, r25
    7682:	1a 94       	dec	r1
    7684:	69 f7       	brne	.-38     	; 0x7660 <__udivmodsi4_loop>
    7686:	60 95       	com	r22
    7688:	70 95       	com	r23
    768a:	80 95       	com	r24
    768c:	90 95       	com	r25
    768e:	9b 01       	movw	r18, r22
    7690:	ac 01       	movw	r20, r24
    7692:	bd 01       	movw	r22, r26
    7694:	cf 01       	movw	r24, r30
    7696:	08 95       	ret

00007698 <__divmodsi4>:
    7698:	97 fb       	bst	r25, 7
    769a:	09 2e       	mov	r0, r25
    769c:	05 26       	eor	r0, r21
    769e:	0e d0       	rcall	.+28     	; 0x76bc <__divmodsi4_neg1>
    76a0:	57 fd       	sbrc	r21, 7
    76a2:	04 d0       	rcall	.+8      	; 0x76ac <__divmodsi4_neg2>
    76a4:	d7 df       	rcall	.-82     	; 0x7654 <__udivmodsi4>
    76a6:	0a d0       	rcall	.+20     	; 0x76bc <__divmodsi4_neg1>
    76a8:	00 1c       	adc	r0, r0
    76aa:	38 f4       	brcc	.+14     	; 0x76ba <__divmodsi4_exit>

000076ac <__divmodsi4_neg2>:
    76ac:	50 95       	com	r21
    76ae:	40 95       	com	r20
    76b0:	30 95       	com	r19
    76b2:	21 95       	neg	r18
    76b4:	3f 4f       	sbci	r19, 0xFF	; 255
    76b6:	4f 4f       	sbci	r20, 0xFF	; 255
    76b8:	5f 4f       	sbci	r21, 0xFF	; 255

000076ba <__divmodsi4_exit>:
    76ba:	08 95       	ret

000076bc <__divmodsi4_neg1>:
    76bc:	f6 f7       	brtc	.-4      	; 0x76ba <__divmodsi4_exit>
    76be:	90 95       	com	r25
    76c0:	80 95       	com	r24
    76c2:	70 95       	com	r23
    76c4:	61 95       	neg	r22
    76c6:	7f 4f       	sbci	r23, 0xFF	; 255
    76c8:	8f 4f       	sbci	r24, 0xFF	; 255
    76ca:	9f 4f       	sbci	r25, 0xFF	; 255
    76cc:	08 95       	ret

000076ce <strcmp>:
    76ce:	fb 01       	movw	r30, r22
    76d0:	dc 01       	movw	r26, r24
    76d2:	8d 91       	ld	r24, X+
    76d4:	01 90       	ld	r0, Z+
    76d6:	80 19       	sub	r24, r0
    76d8:	01 10       	cpse	r0, r1
    76da:	d9 f3       	breq	.-10     	; 0x76d2 <strcmp+0x4>
    76dc:	99 0b       	sbc	r25, r25
    76de:	08 95       	ret

000076e0 <__eerd_byte_m328p>:
    76e0:	f9 99       	sbic	0x1f, 1	; 31
    76e2:	fe cf       	rjmp	.-4      	; 0x76e0 <__eerd_byte_m328p>
    76e4:	92 bd       	out	0x22, r25	; 34
    76e6:	81 bd       	out	0x21, r24	; 33
    76e8:	f8 9a       	sbi	0x1f, 0	; 31
    76ea:	99 27       	eor	r25, r25
    76ec:	80 b5       	in	r24, 0x20	; 32
    76ee:	08 95       	ret

000076f0 <__eerd_word_m328p>:
    76f0:	a8 e1       	ldi	r26, 0x18	; 24
    76f2:	b0 e0       	ldi	r27, 0x00	; 0
    76f4:	42 e0       	ldi	r20, 0x02	; 2
    76f6:	50 e0       	ldi	r21, 0x00	; 0
    76f8:	0c 94 93 3b 	jmp	0x7726	; 0x7726 <__eerd_blraw_m328p>

000076fc <__eewr_byte_m328p>:
    76fc:	26 2f       	mov	r18, r22

000076fe <__eewr_r18_m328p>:
    76fe:	f9 99       	sbic	0x1f, 1	; 31
    7700:	fe cf       	rjmp	.-4      	; 0x76fe <__eewr_r18_m328p>
    7702:	1f ba       	out	0x1f, r1	; 31
    7704:	92 bd       	out	0x22, r25	; 34
    7706:	81 bd       	out	0x21, r24	; 33
    7708:	20 bd       	out	0x20, r18	; 32
    770a:	0f b6       	in	r0, 0x3f	; 63
    770c:	f8 94       	cli
    770e:	fa 9a       	sbi	0x1f, 2	; 31
    7710:	f9 9a       	sbi	0x1f, 1	; 31
    7712:	0f be       	out	0x3f, r0	; 63
    7714:	01 96       	adiw	r24, 0x01	; 1
    7716:	08 95       	ret

00007718 <__eewr_word_m328p>:
    7718:	0e 94 7e 3b 	call	0x76fc	; 0x76fc <__eewr_byte_m328p>
    771c:	27 2f       	mov	r18, r23
    771e:	0c 94 7f 3b 	jmp	0x76fe	; 0x76fe <__eewr_r18_m328p>

00007722 <__eerd_block_m328p>:
    7722:	dc 01       	movw	r26, r24
    7724:	cb 01       	movw	r24, r22

00007726 <__eerd_blraw_m328p>:
    7726:	fc 01       	movw	r30, r24
    7728:	f9 99       	sbic	0x1f, 1	; 31
    772a:	fe cf       	rjmp	.-4      	; 0x7728 <__eerd_blraw_m328p+0x2>
    772c:	06 c0       	rjmp	.+12     	; 0x773a <__eerd_blraw_m328p+0x14>
    772e:	f2 bd       	out	0x22, r31	; 34
    7730:	e1 bd       	out	0x21, r30	; 33
    7732:	f8 9a       	sbi	0x1f, 0	; 31
    7734:	31 96       	adiw	r30, 0x01	; 1
    7736:	00 b4       	in	r0, 0x20	; 32
    7738:	0d 92       	st	X+, r0
    773a:	41 50       	subi	r20, 0x01	; 1
    773c:	50 40       	sbci	r21, 0x00	; 0
    773e:	b8 f7       	brcc	.-18     	; 0x772e <__eerd_blraw_m328p+0x8>
    7740:	08 95       	ret

00007742 <_exit>:
    7742:	f8 94       	cli

00007744 <__stop_program>:
    7744:	ff cf       	rjmp	.-2      	; 0x7744 <__stop_program>
