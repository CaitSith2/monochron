
MultiChronB.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000132  00800100  0000758e  00007642  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         0000758e  00000000  00000000  000000b4  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000158  00800232  00800232  00007774  2**0
                  ALLOC
  3 .eeprom       000003ee  00810000  00810000  00007774  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  4 .debug_aranges 00000220  00000000  00000000  00007b62  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_pubnames 00001911  00000000  00000000  00007d82  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00006e97  00000000  00000000  00009693  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00001ca4  00000000  00000000  0001052a  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00005d78  00000000  00000000  000121ce  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000d30  00000000  00000000  00017f48  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00001b3b  00000000  00000000  00018c78  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    0000391f  00000000  00000000  0001a7b3  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000001b0  00000000  00000000  0001e0d2  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 0c 05 	jmp	0xa18	; 0xa18 <__ctors_end>
       4:	0c 94 29 05 	jmp	0xa52	; 0xa52 <__bad_interrupt>
       8:	0c 94 29 05 	jmp	0xa52	; 0xa52 <__bad_interrupt>
       c:	0c 94 b8 1d 	jmp	0x3b70	; 0x3b70 <__vector_3>
      10:	0c 94 29 05 	jmp	0xa52	; 0xa52 <__bad_interrupt>
      14:	0c 94 29 05 	jmp	0xa52	; 0xa52 <__bad_interrupt>
      18:	0c 94 29 05 	jmp	0xa52	; 0xa52 <__bad_interrupt>
      1c:	0c 94 29 05 	jmp	0xa52	; 0xa52 <__bad_interrupt>
      20:	0c 94 29 05 	jmp	0xa52	; 0xa52 <__bad_interrupt>
      24:	0c 94 52 32 	jmp	0x64a4	; 0x64a4 <__vector_9>
      28:	0c 94 29 05 	jmp	0xa52	; 0xa52 <__bad_interrupt>
      2c:	0c 94 c3 2d 	jmp	0x5b86	; 0x5b86 <__vector_11>
      30:	0c 94 29 05 	jmp	0xa52	; 0xa52 <__bad_interrupt>
      34:	0c 94 50 2d 	jmp	0x5aa0	; 0x5aa0 <__vector_13>
      38:	0c 94 62 2d 	jmp	0x5ac4	; 0x5ac4 <__vector_14>
      3c:	0c 94 29 05 	jmp	0xa52	; 0xa52 <__bad_interrupt>
      40:	0c 94 29 05 	jmp	0xa52	; 0xa52 <__bad_interrupt>
      44:	0c 94 29 05 	jmp	0xa52	; 0xa52 <__bad_interrupt>
      48:	0c 94 e3 2c 	jmp	0x59c6	; 0x59c6 <__vector_18>
      4c:	0c 94 29 05 	jmp	0xa52	; 0xa52 <__bad_interrupt>
      50:	0c 94 29 05 	jmp	0xa52	; 0xa52 <__bad_interrupt>
      54:	0c 94 dd 1d 	jmp	0x3bba	; 0x3bba <__vector_21>
      58:	0c 94 29 05 	jmp	0xa52	; 0xa52 <__bad_interrupt>
      5c:	0c 94 29 05 	jmp	0xa52	; 0xa52 <__bad_interrupt>
      60:	0c 94 29 05 	jmp	0xa52	; 0xa52 <__bad_interrupt>
      64:	0c 94 29 05 	jmp	0xa52	; 0xa52 <__bad_interrupt>
      68:	c2 05       	cpc	r28, r2
      6a:	e6 05       	cpc	r30, r6
      6c:	fc 05       	cpc	r31, r12
      6e:	b9 06       	cpc	r11, r25
      70:	05 06       	cpc	r0, r21
      72:	91 06       	cpc	r9, r17
      74:	a7 06       	cpc	r10, r23
      76:	c6 06       	cpc	r12, r22
      78:	fe 27       	eor	r31, r30
      7a:	01 28       	or	r0, r1
      7c:	fb 27       	eor	r31, r27
      7e:	04 28       	or	r0, r4
      80:	07 28       	or	r0, r7
      82:	0c 28       	or	r0, r12
      84:	0a 28       	or	r0, r10
      86:	19 28       	or	r1, r9
      88:	1c 28       	or	r1, r12
      8a:	1f 28       	or	r1, r15

0000008c <logo_p>:
      8c:	b0 08                                               ..

0000008e <skull0_p>:
      8e:	e2 04                                               ..

00000090 <reaper0_p>:
      90:	44 06                                               D.

00000092 <rip0_p>:
      92:	22 07                                               ".

00000094 <__c.2313>:
      94:	73 65 74 20 68 74 2e 00                             set ht..

0000009c <__c.2311>:
      9c:	63 68 61 6e 67 65 20 68 74 2e 00                    change ht..

000000a7 <__c.2309>:
      a7:	73 65 74 20 62 6d 69 00                             set bmi.

000000af <__c.2307>:
      af:	63 68 61 6e 67 65 20 62 6d 69 00                    change bmi.

000000ba <__c.2305>:
      ba:	20 73 65 74 20 77 74 2e 00                           set wt..

000000c3 <__c.2303>:
      c3:	63 68 61 6e 67 65 20 77 74 2e 00                    change wt..

000000ce <__c.2299>:
      ce:	73 65 74 20 75 6e 69 74 00                          set unit.

000000d7 <__c.2297>:
      d7:	63 68 61 6e 67 65 20 75 74 2e 00                    change ut..

000000e2 <__c.2133>:
      e2:	4d 65 6e 75 00                                      Menu.

000000e7 <__c.2131>:
      e7:	43 6f 6e 66 69 67 00                                Config.

000000ee <__c.2129>:
      ee:	44 65 61 74 68 43 68 72 6f 6e 00                    DeathChron.

000000f9 <__c.2123>:
      f9:	20 4e 6f 00                                          No.

000000fd <__c.2121>:
      fd:	59 65 73 00                                         Yes.

00000101 <__c.2119>:
     101:	53 6d 6f 6b 65 72 3f 3a 20 20 20 20 20 20 20 20     Smoker?:        
     111:	20 00                                                .

00000113 <__c.2099>:
     113:	20 20 20 20 20 20 20 20 20 00                                .

0000011d <__c.2097>:
     11d:	42 4d 49 3a 00                                      BMI:.

00000122 <__c.2095>:
     122:	63 6d 00                                            cm.

00000125 <__c.2093>:
     125:	6b 67 20 00                                         kg .

00000129 <__c.2091>:
     129:	4d 65 74 3a 00                                      Met:.

0000012e <__c.2089>:
     12e:	66 74 00                                            ft.

00000131 <__c.2087>:
     131:	6c 62 20 00                                         lb .

00000135 <__c.2085>:
     135:	49 6d 70 3a 00                                      Imp:.

0000013a <__c.2083>:
     13a:	53 65 74 20 00                                      Set .

0000013f <__c.2075>:
     13f:	20 20 20 53 61 64 69 73 74 69 63 00                    Sadistic.

0000014b <__c.2073>:
     14b:	20 4f 70 74 69 6d 69 73 74 69 63 00                  Optimistic.

00000157 <__c.2071>:
     157:	50 65 73 73 69 6d 69 73 74 69 63 00                 Pessimistic.

00000163 <__c.2069>:
     163:	20 20 20 20 20 4e 6f 72 6d 61 6c 00                      Normal.

0000016f <__c.2067>:
     16f:	53 65 74 20 4d 6f 64 65 3a 00                       Set Mode:.

00000179 <__c.2061>:
     179:	46 65 6d 61 6c 65 00                                Female.

00000180 <__c.2059>:
     180:	20 20 4d 61 6c 65 00                                  Male.

00000187 <__c.2057>:
     187:	53 65 74 20 47 65 6e 64 65 72 3a 20 20 20 00        Set Gender:   .

00000196 <__c.2034>:
     196:	53 65 74 20 44 4f 42 3a 20 20 00                    Set DOB:  .

000001a1 <GPS_Text>:
     1a1:	0a 47 50 53 20 53 65 74 75 70 00 01 00 0b 4f 66     .GPS Setup....Of
     1b1:	66 73 65 74 20 20 3a 20 00 11 53 74 61 74 75 73     fset  : ..Status
     1c1:	20 20 3a 20 4e 4f 4c 4f 43 4b 00 0b 47 50 53 20       : NOLOCK..GPS 
     1d1:	44 61 74 65 3a 20 00 15 47 50 53 20 54 69 6d 65     Date: ..GPS Time
     1e1:	3a 20 20 20 20 20 20 20 20 55 54 43 00 01 00 14     :        UTC....
     1f1:	4d 65 6e 75 3d 45 78 69 74 2c 20 53 65 74 3d 2d     Menu=Exit, Set=-
     201:	2c 20 2b 00                                         , +.

00000205 <__c.2162>:
     205:	3a 00                                               :.

00000207 <__c.2160>:
     207:	2b 00                                               +.

00000209 <__c.2158>:
     209:	2d 00                                               -.

0000020b <region_setting_table>:
     20b:	20 20 20 20 20 55 53 20 31 32 68 72 00 20 20 20          US 12hr.   
     21b:	20 20 55 53 20 32 34 68 72 00 20 20 20 20 20 45       US 24hr.     E
     22b:	55 20 31 32 68 72 00 20 20 20 20 20 45 55 20 32     U 12hr.     EU 2
     23b:	34 68 72 00                                         4hr.

0000023f <style_setting_str>:
     23f:	d4 52 41 54 54 43 68 72 6f 6e 00 d2 49 6e 74 72     .RATTChron..Intr
     24f:	75 64 65 72 43 68 72 6f 6e 00 d3 53 65 76 65 6e     uderChron..Seven
     25f:	43 68 72 6f 6e 00 d5 54 69 6d 65 73 53 71 43 68     Chron..TimesSqCh
     26f:	72 6f 6e 00 d6 44 65 61 74 68 43 68 72 6f 6e 00     ron..DeathChron.
     27f:	d7 52 61 6e 64 6f 6d 00 d8 52 6f 74 61 74 65 00     .Random..Rotate.
     28f:	d9 44 65 61 74 68 43 68 72 6f 6e 20 43 66 67 00     .DeathChron Cfg.
     29f:	da 47 50 53 20 53 65 74 75 70 00 db 41 62 6f 75     .GPS Setup..Abou
     2af:	74 00 ff                                            t..

000002b2 <__c.2320>:
     2b2:	73 65 74 20 73 65 63 73 00                          set secs.

000002bb <__c.2318>:
     2bb:	63 68 61 6e 67 65 20 73 65 63 00                    change sec.

000002c6 <__c.2314>:
     2c6:	73 65 74 20 6d 69 6e 73 00                          set mins.

000002cf <__c.2312>:
     2cf:	63 68 61 6e 67 65 20 6d 69 6e 00                    change min.

000002da <__c.2308>:
     2da:	73 65 74 20 68 6f 75 72 00                          set hour.

000002e3 <__c.2306>:
     2e3:	63 68 61 6e 67 65 20 68 72 00                       change hr.

000002ed <__c.2256>:
     2ed:	73 65 74 20 6d 69 6e 73 00                          set mins.

000002f6 <__c.2254>:
     2f6:	63 68 61 6e 67 65 20 6d 69 6e 00                    change min.

00000301 <__c.2250>:
     301:	73 65 74 20 68 6f 75 72 00                          set hour.

0000030a <__c.2248>:
     30a:	63 68 61 6e 67 65 20 68 72 2e 00                    change hr..

00000315 <__c.2192>:
     315:	52 65 67 69 6f 6e 3a 20 00                          Region: .

0000031e <__c.2085>:
     31e:	73 65 74 20 79 65 61 72 00                          set year.

00000327 <__c.2083>:
     327:	63 68 61 6e 67 65 20 79 72 2e 00                    change yr..

00000332 <__c.2081>:
     332:	73 65 74 20 64 61 74 65 00                          set date.

0000033b <__c.2079>:
     33b:	63 68 61 6e 67 65 20 64 61 79 00                    change day.

00000346 <__c.2077>:
     346:	73 65 74 20 6d 6f 6e 2e 00                          set mon..

0000034f <__c.2075>:
     34f:	63 68 61 6e 67 65 20 6d 6f 6e 00                    change mon.

0000035a <__c.2065>:
     35a:	20 20 20 20 20 00                                        .

00000360 <__c.2063>:
     360:	20 20 20 20 20 00                                        .

00000366 <__c.2061>:
     366:	44 61 74 65 3a 00                                   Date:.

0000036c <__c.1991>:
     36c:	4d 6f 64 65 3a 00                                   Mode:.

00000372 <__c.1981>:
     372:	53 65 74 20 42 61 63 6b 6c 69 67 68 74 3a 20 00     Set Backlight: .

00000382 <__c.1972>:
     382:	53 65 74 20 54 69 6d 65 3a 20 00                    Set Time: .

0000038d <__c.1960>:
     38d:	53 65 74 20 41 6c 61 72 6d 3a 20 20 00              Set Alarm:  .

0000039a <normal_bmi_male>:
     39a:	28 00 11 11 22 23 33 44 45 56 68 32 00 01 11 12     (..."#3DEVh2....
     3aa:	22 23 34 44 55 57 3c 00 00 11 11 22 23 33 44 45     "#4DUW<...."#3DE
     3ba:	56 46 00 11 11 12 22 23 33 44 44 00 c8 00 00 00     VF...."#3DD.....
     3ca:	00 00 00 00 00 00 05                                .......

000003d1 <normal_bmi_female>:
     3d1:	1e 01 11 12 23 33 44 55 66 77 8d 28 01 11 12 22     ....#3DUfw.(..."
     3e1:	33 34 45 56 66 7b 32 00 01 11 22 23 33 44 45 56     34EVf{2..."#3DEV
     3f1:	6a 3c 00 00 01 11 12 22 33 34 44 57 46 00 00 00     j<....."34DWF...
     401:	11 11 22 22 23 33 35 c8 00 00 00 00 00 11 11 11     ..""#35.........
     411:	11 22                                               ."

00000413 <sadistic_bmi_male>:
     413:	c8 00 00 00 11 11 11 22 22 23 34                    .......""#4

0000041e <sadistic_bmi_female>:
     41e:	1e 00 00 01 11 11 22 22 33 33 46 c8 00 00 01 11     ......""33F.....
     42e:	11 12 22 23 33 35                                   .."#35

00000434 <normal_smoking_male>:
     434:	1e ab 23 a9 28 a0 2d 9e 32 97 37 8e 3c 80 41 70     ..#.(.-.2.7.<.Ap
     444:	46 64 c8 4b                                         Fd.K

00000448 <normal_smoking_female>:
     448:	1e 94 2d 92 32 8f 37 8d 3c 89 41 6f 46 72 4b 56     ..-.2.7.<.AoFrKV
     458:	c8 45                                               .E

0000045a <sadistic_smoking_male>:
     45a:	1e 50 c8 4e                                         .P.N

0000045e <sadistic_smoking_female>:
     45e:	1e 59 c8 57                                         .Y.W

00000462 <day_in_month>:
     462:	1f 1c 1f 1e 1f 1e 1f 1f 1e 1f 1e 1f                 ............

0000046e <EE_DATA>:
     46e:	a0                                                  .

0000046f <FontGr>:
     46f:	10 58 bc 1c 16 16 3f 3f 16 16 1c bc 58 00 00 00     .X....??....X...
     47f:	00 10 1e b8 7d 36 3c 3c 3c 3c 36 7d b8 1e 00 00     ....}6<<<<6}....
     48f:	00 00 10 9c 9e 5e 76 37 5f 5f 37 76 5e 9e 9c 00     .....^v7__7v^...
     49f:	00 00 00 10 18 1c 9c 56 b6 5f 5f b6 56 9c 1c 18     .......V.__.V...
     4af:	00 00 00 00 10 70 18 7d b6 bc 3c 3c bc b6 7d 18     .....p.}..<<..}.
     4bf:	70 00 00 00 00 10 1c 5e fe b6 37 5f 5f 37 b6 fe     p......^..7__7..
     4cf:	5e 1c 00 00 00 00 0c f8 fc fe fe 3f 1f 1f 3f fe     ^..........?..?.
     4df:	fe fc f8                                            ...

000004e2 <skull_on_white>:
     4e2:	00 00 01 22 26 01 1c 2b 01 1a 2d 01 18 2e 01 17     ..."&..+..-.....
     4f2:	30 01 16 31 01 15 32 01 14 33 01 13 34 01 12 35     0..1..2..3..4..5
     502:	01 12 35 01 11 36 01 11 36 01 11 37 01 10 37 01     ..5..6..6..7..7.
     512:	10 37 01 10 38 01 10 38 01 10 38 01 10 38 03 06     .7..8..8..8..8..
     522:	08 10 38 41 43 03 04 09 10 38 3f 44 04 03 0a 10     ..8AC....8?D....
     532:	18 1e 37 3e 45 05 03 0a 11 18 20 29 2e 37 3e 46     ..7>E..... ).7>F
     542:	05 03 0c 11 17 21 28 30 37 3d 46 05 02 0e 11 17     .....!(07=F.....
     552:	22 28 30 37 3b 46 05 02 0f 12 18 21 29 31 36 39     "(07;F.....!)169
     562:	47 05 01 10 13 1a 1f 29 30 36 38 47 04 01 10 13     G......)068G....
     572:	29 2f 35 38 47 04 02 10 13 29 2d 35 38 47 04 03     )/58G....)-58G..
     582:	11 13 24 27 35 37 46 06 05 06 0c 11 13 22 27 35     ..$'57F......"'5
     592:	37 3c 42 45 04 0f 11 13 21 26 35 37 3a 02 14 20     7<BE....!&57:.. 
     5a2:	27 35 02 14 20 28 35 02 15 20 28 35 02 16 25 27     '5.. (5.. (5..%'
     5b2:	34 01 1b 31 01 1c 2e 01 1d 2d 01 1d 2c 03 18 19     4..1.....-..,...
     5c2:	24 2b 30 32 05 18 1a 25 26 2b 2b 30 32 35 35 04     $+02...%&++0255.
     5d2:	14 16 18 1a 30 31 34 37 07 11 16 19 1a 1d 1f 21     ....0147.......!
     5e2:	24 26 2d 30 31 34 3a 03 0e 16 19 31 34 3c 05 04     $&-014:....14<..
     5f2:	06 0b 16 19 31 34 3f 44 48 03 02 17 19 30 33 49     ....14?DH....03I
     602:	03 01 17 1a 2f 33 49 03 01 15 1b 2f 36 4a 03 01     ..../3I..../6J..
     612:	13 1c 2e 38 49 03 01 10 1d 2d 3a 49 03 01 0d 1e     ...8I....-:I....
     622:	2b 3d 49 03 02 0b 21 29 40 48 02 02 0a 40 48 02     +=I...!)@H...@H.
     632:	02 0a 41 48 02 03 09 41 47 02 04 08 42 46 00 00     ..AH...AG...BF..
	...

00000644 <reaper_on_white>:
     644:	00 00 00 00 00 01 17 1b 01 12 1f 01 10 22 01 0f     ............."..
     654:	24 01 0e 25 01 0d 27 02 0c 10 1d 27 02 0b 0e 20     $..%..'....'... 
     664:	28 02 0a 0c 22 27 03 0a 0b 14 1c 22 26 03 09 0a     (..."'....."&...
     674:	10 1d 21 23 03 08 09 0f 1c 21 23 02 0f 1c 21 22     ..!#.....!#...!"
     684:	02 10 1c 20 22 02 11 1c 20 22 02 12 1b 1f 21 02     ... "... "....!.
     694:	12 1b 1f 21 02 11 1b 1f 20 02 10 1b 1e 20 02 0f     ...!.... .... ..
     6a4:	1a 1e 20 02 0e 1a 1d 1f 02 0e 1a 1d 1f 02 0d 1a     .. .............
     6b4:	1d 1e 02 0d 19 1c 1e 02 0c 19 1c 1e 01 0c 1d 01     ................
     6c4:	0b 1d 01 0b 1e 01 0b 1d 01 0b 1d 01 0a 1c 01 0a     ................
     6d4:	1b 01 0a 1a 01 0a 1a 01 0a 1a 01 0a 1a 01 0a 19     ................
     6e4:	01 09 19 01 09 19 01 09 19 01 09 1a 01 09 1a 01     ................
     6f4:	09 1a 01 08 1a 01 08 1b 01 07 1b 01 06 1b 01 04     ................
     704:	1b 01 02 1b 01 01 1c 01 02 1d 01 03 1e 01 04 20     ............... 
     714:	01 05 1f 01 08 1d 01 0d 1a 01 11 15 00 00           ..............

00000722 <rip_on_white>:
     722:	00 00 00 01 12 19 01 0e 1e 01 0c 21 01 0a 23 03     ...........!..#.
     732:	09 0c 12 14 19 25 03 08 0a 14 14 1c 26 02 07 09     .....%......&...
     742:	1e 28 02 06 08 20 29 02 06 07 22 2a 02 05 07 23     .(... )..."*...#
     752:	2b 02 05 06 24 2c 02 05 06 26 2d 02 05 06 27 2e     +...$,...&-...'.
     762:	02 05 06 27 2e 03 04 05 09 0a 28 2f 03 04 06 08     ...'......(/....
     772:	0e 29 2f 03 04 06 08 11 29 30 04 04 06 08 13 17     .)/.....)0......
     782:	19 2a 30 06 04 06 08 0b 0f 13 17 1a 1e 20 2a 31     .*0.......... *1
     792:	06 04 06 08 0b 11 14 17 19 1e 25 2b 31 05 04 06     ..........%+1...
     7a2:	08 14 16 19 1e 27 2b 31 05 04 05 08 13 16 19 1e     .....'+1........
     7b2:	28 2b 31 07 04 06 08 0b 0d 12 16 19 1e 21 25 29     (+1..........!%)
     7c2:	2b 32 07 04 05 08 0a 0e 11 16 19 1e 21 26 29 2c     +2..........!&),
     7d2:	32 06 04 05 07 0a 0f 12 16 19 1d 29 2c 32 06 04     2..........),2..
     7e2:	05 07 0a 0f 12 16 19 1d 28 2c 32 06 04 06 09 0a     ........(,2.....
     7f2:	10 13 16 19 1d 27 2c 32 05 04 06 11 14 16 18 1d     .....',2........
     802:	20 2b 32 05 04 06 13 13 16 18 1d 20 2a 32 03 04      +2........ *2..
     812:	06 1d 20 2c 32 02 04 06 2c 32 02 04 06 2c 32 02     .. ,2...,2...,2.
     822:	04 06 2c 32 02 04 06 2c 32 02 04 06 2c 32 02 04     ..,2...,2...,2..
     832:	06 2c 32 02 05 06 2c 32 02 04 05 2c 32 02 04 05     .,2...,2...,2...
     842:	2c 32 02 04 05 2b 32 02 04 05 2b 32 02 04 05 2c     ,2...+2...+2...,
     852:	32 02 04 07 2c 32 02 05 07 2c 32 02 05 07 2c 32     2...,2...,2...,2
     862:	02 05 06 2c 32 02 04 06 2c 32 02 03 08 2c 32 02     ...,2...,2...,2.
     872:	03 09 2c 32 02 01 09 2c 34 04 03 08 0d 10 14 15     ..,2...,4.......
     882:	2c 34 02 0f 15 2c 33 03 12 1a 2c 32 34 36 02 14     ,4...,3...,246..
     892:	1d 2c 35 02 15 20 2c 34 03 15 18 1d 24 2c 33 02     .,5.. ,4....$,3.
     8a2:	20 27 2c 32 01 23 32 01 27 31 01 2b 2d 00            ',2.#2.'1.+-.

000008b0 <adafruit>:
     8b0:	00 00 00 00 01 21 21 01 20 21 01 1e 22 01 1d 22     .....!!. !..".."
     8c0:	01 1c 22 01 1b 23 01 1a 23 01 1a 23 01 19 24 01     .."..#..#..#..$.
     8d0:	18 24 01 18 24 01 18 24 02 03 09 17 24 02 01 0e     .$..$..$....$...
     8e0:	17 24 02 01 10 17 24 02 01 11 16 24 03 01 13 16     .$....$....$....
     8f0:	1c 20 24 03 01 14 16 1b 20 24 02 01 1b 20 24 02     . $..... $... $.
     900:	02 1a 20 24 04 02 0f 11 1a 20 25 2a 2d 03 02 0e     .. $..... %*-...
     910:	14 1a 20 30 03 03 0e 16 1a 1f 31 03 03 0e 17 1a     .. 0......1.....
     920:	1f 33 03 04 0f 18 1a 1e 34 03 05 11 18 1a 1d 35     .3......4......5
     930:	02 07 12 18 36 02 09 1e 27 37 02 0a 1d 28 36 02     ....6...'7...(6.
     940:	0b 1d 28 36 02 0b 1d 28 35 03 0b 13 18 20 26 34     ..(6...(5.... &4
     950:	03 0a 12 18 1b 1d 34 03 09 11 18 1a 1e 33 03 07     ......4......3..
     960:	10 17 1a 1f 33 04 07 10 16 1a 1f 23 26 32 04 06     ....3......#&2..
     970:	0f 16 1a 1f 23 28 31 04 05 0f 14 1a 20 24 2a 2f     ....#(1..... $*/
     980:	03 05 0f 13 1a 20 24 02 04 1b 20 25 02 04 1b 20     ..... $... %... 
     990:	25 03 04 15 18 1b 20 26 03 03 14 18 1c 20 26 02     %..... &..... &.
     9a0:	03 13 18 27 02 03 12 18 27 02 03 11 19 27 02 03     ...'....'....'..
     9b0:	0f 19 27 02 03 0c 19 27 01 1a 27 01 1a 27 01 1b     ..'....'..'..'..
     9c0:	27 01 1c 26 01 1d 26 01 1e 25 01 20 24 00 00 00     '..&..&..%. $...
	...

000009d2 <__c.2293>:
     9d2:	20 74 6f 20 00                                       to .

000009d7 <__c.2291>:
     9d7:	50 72 65 73 73 20 00                                Press .

000009de <__c.2278>:
     9de:	53 45 54 00                                         SET.

000009e2 <__c.2276>:
     9e2:	2b 00                                               +.

000009e4 <__c.2270>:
     9e4:	73 61 76 65 00                                      save.

000009e9 <__c.2268>:
     9e9:	63 68 61 6e 67 65 00                                change.

000009f0 <__c.2264>:
     9f0:	73 61 76 65 00                                      save.

000009f5 <__c.2262>:
     9f5:	53 45 54 00                                         SET.

000009f9 <__c.2260>:
     9f9:	65 78 69 74 00                                      exit.

000009fe <__c.2258>:
     9fe:	4d 45 4e 55 00                                      MENU.

00000a03 <__c.2254>:
     a03:	73 65 74 00                                         set.

00000a07 <__c.2252>:
     a07:	53 45 54 00                                         SET.

00000a0b <__c.2250>:
     a0b:	61 64 76 61 6e 63 65 00                             advance.

00000a13 <__c.2248>:
     a13:	4d 45 4e 55 00                                      MENU.

00000a18 <__ctors_end>:
     a18:	11 24       	eor	r1, r1
     a1a:	1f be       	out	0x3f, r1	; 63
     a1c:	cf ef       	ldi	r28, 0xFF	; 255
     a1e:	d8 e0       	ldi	r29, 0x08	; 8
     a20:	de bf       	out	0x3e, r29	; 62
     a22:	cd bf       	out	0x3d, r28	; 61

00000a24 <__do_copy_data>:
     a24:	12 e0       	ldi	r17, 0x02	; 2
     a26:	a0 e0       	ldi	r26, 0x00	; 0
     a28:	b1 e0       	ldi	r27, 0x01	; 1
     a2a:	ee e8       	ldi	r30, 0x8E	; 142
     a2c:	f5 e7       	ldi	r31, 0x75	; 117
     a2e:	02 c0       	rjmp	.+4      	; 0xa34 <.do_copy_data_start>

00000a30 <.do_copy_data_loop>:
     a30:	05 90       	lpm	r0, Z+
     a32:	0d 92       	st	X+, r0

00000a34 <.do_copy_data_start>:
     a34:	a2 33       	cpi	r26, 0x32	; 50
     a36:	b1 07       	cpc	r27, r17
     a38:	d9 f7       	brne	.-10     	; 0xa30 <.do_copy_data_loop>

00000a3a <__do_clear_bss>:
     a3a:	13 e0       	ldi	r17, 0x03	; 3
     a3c:	a2 e3       	ldi	r26, 0x32	; 50
     a3e:	b2 e0       	ldi	r27, 0x02	; 2
     a40:	01 c0       	rjmp	.+2      	; 0xa44 <.do_clear_bss_start>

00000a42 <.do_clear_bss_loop>:
     a42:	1d 92       	st	X+, r1

00000a44 <.do_clear_bss_start>:
     a44:	aa 38       	cpi	r26, 0x8A	; 138
     a46:	b1 07       	cpc	r27, r17
     a48:	e1 f7       	brne	.-8      	; 0xa42 <.do_clear_bss_loop>
     a4a:	0e 94 7e 33 	call	0x66fc	; 0x66fc <main>
     a4e:	0c 94 c5 3a 	jmp	0x758a	; 0x758a <_exit>

00000a52 <__bad_interrupt>:
     a52:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000a56 <initanim_abo>:
#endif
                                  
extern uint8_t about[];
//Definition of about[] is in eeprom.c.  Change it there.

void initanim_abo(void){
     a56:	a0 e0       	ldi	r26, 0x00	; 0
     a58:	b0 e0       	ldi	r27, 0x00	; 0
     a5a:	e1 e3       	ldi	r30, 0x31	; 49
     a5c:	f5 e0       	ldi	r31, 0x05	; 5
     a5e:	0c 94 56 3a 	jmp	0x74ac	; 0x74ac <__prologue_saves__+0x10>
 uint8_t k, b, line, eof;
 uint16_t ix, lineix;
 ix=0;
#ifdef DEATHCHRON
 glcdFillRectangle(0, 0, GLCD_XPIXELS, GLCD_YPIXELS, 1);
     a62:	80 e0       	ldi	r24, 0x00	; 0
     a64:	60 e0       	ldi	r22, 0x00	; 0
     a66:	40 e8       	ldi	r20, 0x80	; 128
     a68:	20 e4       	ldi	r18, 0x40	; 64
     a6a:	01 e0       	ldi	r16, 0x01	; 1
     a6c:	0e 94 05 29 	call	0x520a	; 0x520a <glcdFillRectangle>
 death_blitsegs_rom(36,0,logo_p, 57, 64, 1);
     a70:	84 e2       	ldi	r24, 0x24	; 36
     a72:	90 e0       	ldi	r25, 0x00	; 0
     a74:	60 e0       	ldi	r22, 0x00	; 0
     a76:	40 eb       	ldi	r20, 0xB0	; 176
     a78:	58 e0       	ldi	r21, 0x08	; 8
     a7a:	29 e3       	ldi	r18, 0x39	; 57
     a7c:	00 e4       	ldi	r16, 0x40	; 64
     a7e:	ee 24       	eor	r14, r14
     a80:	e3 94       	inc	r14
     a82:	0e 94 fa 08 	call	0x11f4	; 0x11f4 <death_blitsegs_rom>
 uint8_t i = (time_s + 5) % 60;
     a86:	80 91 77 03 	lds	r24, 0x0377
     a8a:	90 e0       	ldi	r25, 0x00	; 0
     a8c:	05 96       	adiw	r24, 0x05	; 5
     a8e:	6c e3       	ldi	r22, 0x3C	; 60
     a90:	70 e0       	ldi	r23, 0x00	; 0
     a92:	0e 94 fe 39 	call	0x73fc	; 0x73fc <__divmodhi4>
     a96:	98 2f       	mov	r25, r24
 while(i != time_s);
     a98:	80 91 77 03 	lds	r24, 0x0377
     a9c:	98 17       	cp	r25, r24
     a9e:	e1 f7       	brne	.-8      	; 0xa98 <initanim_abo+0x42>
     aa0:	00 e0       	ldi	r16, 0x00	; 0
     aa2:	10 e0       	ldi	r17, 0x00	; 0
#endif
 while (1) {
  glcdClearScreen();
     aa4:	0e 94 a6 2c 	call	0x594c	; 0x594c <glcdClearScreen>
     aa8:	dd 24       	eor	r13, r13
     aaa:	cc 24       	eor	r12, r12
     aac:	aa 24       	eor	r10, r10
     aae:	bb 24       	eor	r11, r11
  for (eof=0, lineix=0, line=0; line<8; line++) {
   if (!eof) {
     ab0:	cc 20       	and	r12, r12
     ab2:	09 f0       	breq	.+2      	; 0xab6 <initanim_abo+0x60>
     ab4:	3f c0       	rjmp	.+126    	; 0xb34 <initanim_abo+0xde>
    b = eeprom_read_byte(&about[ix++]);
     ab6:	e8 01       	movw	r28, r16
     ab8:	ca 59       	subi	r28, 0x9A	; 154
     aba:	dd 4f       	sbci	r29, 0xFD	; 253
     abc:	0f 5f       	subi	r16, 0xFF	; 255
     abe:	1f 4f       	sbci	r17, 0xFF	; 255
     ac0:	ce 01       	movw	r24, r28
     ac2:	0e 94 94 3a 	call	0x7528	; 0x7528 <__eerd_byte_m328p>
     ac6:	f8 2e       	mov	r15, r24
    if (b==255) {
     ac8:	8f ef       	ldi	r24, 0xFF	; 255
     aca:	f8 16       	cp	r15, r24
     acc:	91 f4       	brne	.+36     	; 0xaf2 <initanim_abo+0x9c>
     eof = 1;
     if (!line) {displaystyle = eeprom_read_byte(&EE_STYLE); initanim(); return;}
     ace:	dd 20       	and	r13, r13
     ad0:	19 f0       	breq	.+6      	; 0xad8 <initanim_abo+0x82>
     ad2:	cc 24       	eor	r12, r12
     ad4:	c3 94       	inc	r12
     ad6:	2e c0       	rjmp	.+92     	; 0xb34 <initanim_abo+0xde>
     ad8:	87 e0       	ldi	r24, 0x07	; 7
     ada:	90 e0       	ldi	r25, 0x00	; 0
     adc:	0e 94 94 3a 	call	0x7528	; 0x7528 <__eerd_byte_m328p>
     ae0:	80 93 69 03 	sts	0x0369, r24
     ae4:	0e 94 ec 27 	call	0x4fd8	; 0x4fd8 <initanim>
   }
  }
  ix = lineix;
  delay_ms(500);
 }
}
     ae8:	cd b7       	in	r28, 0x3d	; 61
     aea:	de b7       	in	r29, 0x3e	; 62
     aec:	ea e0       	ldi	r30, 0x0A	; 10
     aee:	0c 94 72 3a 	jmp	0x74e4	; 0x74e4 <__epilogue_restores__+0x10>
    if (b==255) {
     eof = 1;
     if (!line) {displaystyle = eeprom_read_byte(&EE_STYLE); initanim(); return;}
     continue;
    } 
    if (!line) {lineix = ix + b;}
     af2:	dd 20       	and	r13, r13
     af4:	19 f4       	brne	.+6      	; 0xafc <initanim_abo+0xa6>
     af6:	58 01       	movw	r10, r16
     af8:	af 0c       	add	r10, r15
     afa:	b1 1c       	adc	r11, r1
    k = ((128 - (b * 6))/2)-1;
    if (k<0) {k=0;}
    glcdSetAddress(k,line);
     afc:	2f 2d       	mov	r18, r15
     afe:	30 e0       	ldi	r19, 0x00	; 0
     b00:	c9 01       	movw	r24, r18
     b02:	88 0f       	add	r24, r24
     b04:	99 1f       	adc	r25, r25
     b06:	82 0f       	add	r24, r18
     b08:	93 1f       	adc	r25, r19
     b0a:	90 95       	com	r25
     b0c:	81 95       	neg	r24
     b0e:	9f 4f       	sbci	r25, 0xFF	; 255
     b10:	81 5c       	subi	r24, 0xC1	; 193
     b12:	6d 2d       	mov	r22, r13
     b14:	0e 94 9c 2c 	call	0x5938	; 0x5938 <glcdSetAddress>
     b18:	ef 2c       	mov	r14, r15
     b1a:	07 c0       	rjmp	.+14     	; 0xb2a <initanim_abo+0xd4>
    for(;b>0;b--) {
     glcdWriteChar(eeprom_read_byte(&about[ix++]),0);
     b1c:	ce 01       	movw	r24, r28
     b1e:	0e 94 94 3a 	call	0x7528	; 0x7528 <__eerd_byte_m328p>
     b22:	60 e0       	ldi	r22, 0x00	; 0
     b24:	0e 94 b3 28 	call	0x5166	; 0x5166 <glcdWriteChar>
    } 
    if (!line) {lineix = ix + b;}
    k = ((128 - (b * 6))/2)-1;
    if (k<0) {k=0;}
    glcdSetAddress(k,line);
    for(;b>0;b--) {
     b28:	ea 94       	dec	r14
     b2a:	21 96       	adiw	r28, 0x01	; 1
     b2c:	ee 20       	and	r14, r14
     b2e:	b1 f7       	brne	.-20     	; 0xb1c <initanim_abo+0xc6>
     b30:	0f 0d       	add	r16, r15
     b32:	11 1d       	adc	r17, r1
 uint8_t i = (time_s + 5) % 60;
 while(i != time_s);
#endif
 while (1) {
  glcdClearScreen();
  for (eof=0, lineix=0, line=0; line<8; line++) {
     b34:	d3 94       	inc	r13
     b36:	88 e0       	ldi	r24, 0x08	; 8
     b38:	d8 16       	cp	r13, r24
     b3a:	09 f0       	breq	.+2      	; 0xb3e <initanim_abo+0xe8>
     b3c:	b9 cf       	rjmp	.-142    	; 0xab0 <initanim_abo+0x5a>
     glcdWriteChar(eeprom_read_byte(&about[ix++]),0);
    }
   }
  }
  ix = lineix;
  delay_ms(500);
     b3e:	84 ef       	ldi	r24, 0xF4	; 244
     b40:	91 e0       	ldi	r25, 0x01	; 1
     b42:	0e 94 0c 35 	call	0x6a18	; 0x6a18 <delay_ms>
     b46:	85 01       	movw	r16, r10
     b48:	ad cf       	rjmp	.-166    	; 0xaa4 <initanim_abo+0x4e>

00000b4a <death_setscore>:
  }
}


void death_setscore(void)
{
     b4a:	ef 92       	push	r14
     b4c:	ff 92       	push	r15
     b4e:	0f 93       	push	r16
     b50:	1f 93       	push	r17
  if(score_mode != last_score_mode) {
     b52:	90 91 67 02 	lds	r25, 0x0267
     b56:	80 91 34 02 	lds	r24, 0x0234
     b5a:	98 17       	cp	r25, r24
     b5c:	39 f0       	breq	.+14     	; 0xb6c <death_setscore+0x22>
    //if(((score_mode == SCORE_MODE_DEATH_TIME) || (score_mode == SCORE_MODE_DEATH_ALARM)) && ((last_score_mode != SCORE_MODE_DEATH_TIME) && (last_score_mode != SCORE_MODE_DEATH_ALARM)))
    //  redraw_time = 2;
    //else if(((last_score_mode == SCORE_MODE_DEATH_TIME) || (last_score_mode == SCORE_MODE_DEATH_ALARM)) && ((score_mode != SCORE_MODE_DEATH_TIME) && (score_mode != SCORE_MODE_DEATH_ALARM)))
    //  redraw_time = 2;
    //else
      redraw_time = 1;
     b5e:	81 e0       	ldi	r24, 0x01	; 1
     b60:	80 93 33 02 	sts	0x0233, r24
    last_score_mode = score_mode;
     b64:	80 91 67 02 	lds	r24, 0x0267
     b68:	80 93 34 02 	sts	0x0234, r24
  }
  switch(score_mode) {
     b6c:	80 91 67 02 	lds	r24, 0x0267
     b70:	e8 2f       	mov	r30, r24
     b72:	f0 e0       	ldi	r31, 0x00	; 0
     b74:	e8 30       	cpi	r30, 0x08	; 8
     b76:	f1 05       	cpc	r31, r1
     b78:	08 f0       	brcs	.+2      	; 0xb7c <death_setscore+0x32>
     b7a:	cc c1       	rjmp	.+920    	; 0xf14 <death_setscore+0x3ca>
     b7c:	ec 5c       	subi	r30, 0xCC	; 204
     b7e:	ff 4f       	sbci	r31, 0xFF	; 255
     b80:	0c 94 85 3a 	jmp	0x750a	; 0x750a <__tablejump2__>
    case SCORE_MODE_TIME:
      if((minute_changed || hour_changed)) {
     b84:	80 91 63 02 	lds	r24, 0x0263
     b88:	88 23       	and	r24, r24
     b8a:	21 f4       	brne	.+8      	; 0xb94 <death_setscore+0x4a>
     b8c:	80 91 64 02 	lds	r24, 0x0264
     b90:	88 23       	and	r24, r24
     b92:	99 f0       	breq	.+38     	; 0xbba <death_setscore+0x70>
        if(hour_changed) {
     b94:	80 91 64 02 	lds	r24, 0x0264
     b98:	88 23       	and	r24, r24
     b9a:	39 f0       	breq	.+14     	; 0xbaa <death_setscore+0x60>
          left_score = old_h;
     b9c:	80 91 6d 03 	lds	r24, 0x036D
     ba0:	80 93 1b 03 	sts	0x031B, r24
     ba4:	10 92 1c 03 	sts	0x031C, r1
     ba8:	05 c0       	rjmp	.+10     	; 0xbb4 <death_setscore+0x6a>
          right_score = old_m;
        } else if (minute_changed) {
     baa:	80 91 63 02 	lds	r24, 0x0263
     bae:	88 23       	and	r24, r24
     bb0:	09 f4       	brne	.+2      	; 0xbb4 <death_setscore+0x6a>
     bb2:	b0 c1       	rjmp	.+864    	; 0xf14 <death_setscore+0x3ca>
          right_score = old_m;
     bb4:	80 91 63 03 	lds	r24, 0x0363
     bb8:	e4 c0       	rjmp	.+456    	; 0xd82 <death_setscore+0x238>
        }
      } else {
        left_score = time_h;
     bba:	80 91 62 03 	lds	r24, 0x0362
     bbe:	80 93 1b 03 	sts	0x031B, r24
     bc2:	10 92 1c 03 	sts	0x031C, r1
        right_score = time_m;
     bc6:	80 91 6c 03 	lds	r24, 0x036C
     bca:	db c0       	rjmp	.+438    	; 0xd82 <death_setscore+0x238>
      }
      break;
    case SCORE_MODE_DATE:
      if(region == REGION_US) {
     bcc:	80 91 6f 03 	lds	r24, 0x036F
     bd0:	88 23       	and	r24, r24
     bd2:	49 f4       	brne	.+18     	; 0xbe6 <death_setscore+0x9c>
        left_score = date_m;
     bd4:	80 91 76 03 	lds	r24, 0x0376
     bd8:	80 93 1b 03 	sts	0x031B, r24
     bdc:	10 92 1c 03 	sts	0x031C, r1
        right_score = date_d;
     be0:	80 91 6b 03 	lds	r24, 0x036B
     be4:	ce c0       	rjmp	.+412    	; 0xd82 <death_setscore+0x238>
      } else {
        left_score = date_d;
     be6:	80 91 6b 03 	lds	r24, 0x036B
     bea:	80 93 1b 03 	sts	0x031B, r24
     bee:	10 92 1c 03 	sts	0x031C, r1
        right_score = date_m;
     bf2:	80 91 76 03 	lds	r24, 0x0376
     bf6:	c5 c0       	rjmp	.+394    	; 0xd82 <death_setscore+0x238>
      }
      break;
    case SCORE_MODE_YEAR:
      left_score = 20;
     bf8:	84 e1       	ldi	r24, 0x14	; 20
     bfa:	90 e0       	ldi	r25, 0x00	; 0
     bfc:	90 93 1c 03 	sts	0x031C, r25
     c00:	80 93 1b 03 	sts	0x031B, r24
      right_score = date_y;
     c04:	80 91 65 03 	lds	r24, 0x0365
     c08:	bc c0       	rjmp	.+376    	; 0xd82 <death_setscore+0x238>
      break;
    case SCORE_MODE_DEATH_TIME:
      if((minute_changed || hour_changed)) {
     c0a:	80 91 63 02 	lds	r24, 0x0263
     c0e:	88 23       	and	r24, r24
     c10:	21 f4       	brne	.+8      	; 0xc1a <death_setscore+0xd0>
     c12:	80 91 64 02 	lds	r24, 0x0264
     c16:	88 23       	and	r24, r24
     c18:	d9 f0       	breq	.+54     	; 0xc50 <death_setscore+0x106>
          left_score = old_minutes_left/10000;
     c1a:	60 91 57 03 	lds	r22, 0x0357
     c1e:	70 91 58 03 	lds	r23, 0x0358
     c22:	80 91 59 03 	lds	r24, 0x0359
     c26:	90 91 5a 03 	lds	r25, 0x035A
     c2a:	20 e1       	ldi	r18, 0x10	; 16
     c2c:	37 e2       	ldi	r19, 0x27	; 39
     c2e:	40 e0       	ldi	r20, 0x00	; 0
     c30:	50 e0       	ldi	r21, 0x00	; 0
     c32:	0e 94 33 3a 	call	0x7466	; 0x7466 <__divmodsi4>
     c36:	30 93 1c 03 	sts	0x031C, r19
     c3a:	20 93 1b 03 	sts	0x031B, r18
          right_score = old_minutes_left%10000;
     c3e:	60 91 57 03 	lds	r22, 0x0357
     c42:	70 91 58 03 	lds	r23, 0x0358
     c46:	80 91 59 03 	lds	r24, 0x0359
     c4a:	90 91 5a 03 	lds	r25, 0x035A
     c4e:	48 c0       	rjmp	.+144    	; 0xce0 <death_setscore+0x196>
      } else {
          //if((minutes_left - ((dc_mode == DC_mode_sadistic)?(time_s/15):0)) > 0)
        left_score = (minutes_left - ((dc_mode == DC_mode_sadistic)?(time_s/15):0))/10000;
     c50:	20 91 59 02 	lds	r18, 0x0259
     c54:	30 91 5a 02 	lds	r19, 0x025A
     c58:	40 91 5b 02 	lds	r20, 0x025B
     c5c:	50 91 5c 02 	lds	r21, 0x025C
     c60:	80 91 5b 03 	lds	r24, 0x035B
     c64:	83 30       	cpi	r24, 0x03	; 3
     c66:	29 f0       	breq	.+10     	; 0xc72 <death_setscore+0x128>
     c68:	80 e0       	ldi	r24, 0x00	; 0
     c6a:	90 e0       	ldi	r25, 0x00	; 0
     c6c:	a0 e0       	ldi	r26, 0x00	; 0
     c6e:	b0 e0       	ldi	r27, 0x00	; 0
     c70:	08 c0       	rjmp	.+16     	; 0xc82 <death_setscore+0x138>
     c72:	80 91 77 03 	lds	r24, 0x0377
     c76:	6f e0       	ldi	r22, 0x0F	; 15
     c78:	0e 94 de 39 	call	0x73bc	; 0x73bc <__udivmodqi4>
     c7c:	90 e0       	ldi	r25, 0x00	; 0
     c7e:	a0 e0       	ldi	r26, 0x00	; 0
     c80:	b0 e0       	ldi	r27, 0x00	; 0
     c82:	28 1b       	sub	r18, r24
     c84:	39 0b       	sbc	r19, r25
     c86:	4a 0b       	sbc	r20, r26
     c88:	5b 0b       	sbc	r21, r27
     c8a:	ca 01       	movw	r24, r20
     c8c:	b9 01       	movw	r22, r18
     c8e:	20 e1       	ldi	r18, 0x10	; 16
     c90:	37 e2       	ldi	r19, 0x27	; 39
     c92:	40 e0       	ldi	r20, 0x00	; 0
     c94:	50 e0       	ldi	r21, 0x00	; 0
     c96:	0e 94 33 3a 	call	0x7466	; 0x7466 <__divmodsi4>
     c9a:	30 93 1c 03 	sts	0x031C, r19
     c9e:	20 93 1b 03 	sts	0x031B, r18
        right_score = (minutes_left - ((dc_mode == DC_mode_sadistic)?(time_s/15):0))%10000;
     ca2:	20 91 59 02 	lds	r18, 0x0259
     ca6:	30 91 5a 02 	lds	r19, 0x025A
     caa:	40 91 5b 02 	lds	r20, 0x025B
     cae:	50 91 5c 02 	lds	r21, 0x025C
     cb2:	80 91 5b 03 	lds	r24, 0x035B
     cb6:	83 30       	cpi	r24, 0x03	; 3
     cb8:	29 f0       	breq	.+10     	; 0xcc4 <death_setscore+0x17a>
     cba:	80 e0       	ldi	r24, 0x00	; 0
     cbc:	90 e0       	ldi	r25, 0x00	; 0
     cbe:	a0 e0       	ldi	r26, 0x00	; 0
     cc0:	b0 e0       	ldi	r27, 0x00	; 0
     cc2:	08 c0       	rjmp	.+16     	; 0xcd4 <death_setscore+0x18a>
     cc4:	80 91 77 03 	lds	r24, 0x0377
     cc8:	6f e0       	ldi	r22, 0x0F	; 15
     cca:	0e 94 de 39 	call	0x73bc	; 0x73bc <__udivmodqi4>
     cce:	90 e0       	ldi	r25, 0x00	; 0
     cd0:	a0 e0       	ldi	r26, 0x00	; 0
     cd2:	b0 e0       	ldi	r27, 0x00	; 0
     cd4:	28 1b       	sub	r18, r24
     cd6:	39 0b       	sbc	r19, r25
     cd8:	4a 0b       	sbc	r20, r26
     cda:	5b 0b       	sbc	r21, r27
     cdc:	ca 01       	movw	r24, r20
     cde:	b9 01       	movw	r22, r18
     ce0:	20 e1       	ldi	r18, 0x10	; 16
     ce2:	37 e2       	ldi	r19, 0x27	; 39
     ce4:	40 e0       	ldi	r20, 0x00	; 0
     ce6:	50 e0       	ldi	r21, 0x00	; 0
     ce8:	0e 94 33 3a 	call	0x7466	; 0x7466 <__divmodsi4>
     cec:	70 93 1e 03 	sts	0x031E, r23
     cf0:	60 93 1d 03 	sts	0x031D, r22
      }
      if(minutes_left <= 0)
     cf4:	80 91 59 02 	lds	r24, 0x0259
     cf8:	90 91 5a 02 	lds	r25, 0x025A
     cfc:	a0 91 5b 02 	lds	r26, 0x025B
     d00:	b0 91 5c 02 	lds	r27, 0x025C
     d04:	18 16       	cp	r1, r24
     d06:	19 06       	cpc	r1, r25
     d08:	1a 06       	cpc	r1, r26
     d0a:	1b 06       	cpc	r1, r27
     d0c:	0c f4       	brge	.+2      	; 0xd10 <death_setscore+0x1c6>
     d0e:	02 c1       	rjmp	.+516    	; 0xf14 <death_setscore+0x3ca>
          left_score = right_score = 0;
     d10:	10 92 1e 03 	sts	0x031E, r1
     d14:	10 92 1d 03 	sts	0x031D, r1
     d18:	10 92 1c 03 	sts	0x031C, r1
     d1c:	10 92 1b 03 	sts	0x031B, r1
     d20:	f9 c0       	rjmp	.+498    	; 0xf14 <death_setscore+0x3ca>
      break;
    case SCORE_MODE_DEATH_DATE:
      if(region == REGION_US) {
     d22:	80 91 6f 03 	lds	r24, 0x036F
     d26:	88 23       	and	r24, r24
     d28:	49 f4       	brne	.+18     	; 0xd3c <death_setscore+0x1f2>
        left_score = death_m;
     d2a:	80 91 56 03 	lds	r24, 0x0356
     d2e:	80 93 1b 03 	sts	0x031B, r24
     d32:	10 92 1c 03 	sts	0x031C, r1
        right_score = death_d;
     d36:	80 91 42 03 	lds	r24, 0x0342
     d3a:	23 c0       	rjmp	.+70     	; 0xd82 <death_setscore+0x238>
      } else {
        left_score = death_d;
     d3c:	80 91 42 03 	lds	r24, 0x0342
     d40:	80 93 1b 03 	sts	0x031B, r24
     d44:	10 92 1c 03 	sts	0x031C, r1
        right_score = death_m;
     d48:	80 91 56 03 	lds	r24, 0x0356
     d4c:	1a c0       	rjmp	.+52     	; 0xd82 <death_setscore+0x238>
      }
      break;
    case SCORE_MODE_DEATH_YEAR:
      left_score = 19 + (death_y / 100);
     d4e:	80 91 55 03 	lds	r24, 0x0355
     d52:	64 e6       	ldi	r22, 0x64	; 100
     d54:	0e 94 de 39 	call	0x73bc	; 0x73bc <__udivmodqi4>
     d58:	90 e0       	ldi	r25, 0x00	; 0
     d5a:	43 96       	adiw	r24, 0x13	; 19
     d5c:	90 93 1c 03 	sts	0x031C, r25
     d60:	80 93 1b 03 	sts	0x031B, r24
      right_score = death_y % 100;
     d64:	80 91 55 03 	lds	r24, 0x0355
     d68:	0e 94 de 39 	call	0x73bc	; 0x73bc <__udivmodqi4>
     d6c:	90 93 1d 03 	sts	0x031D, r25
     d70:	0a c0       	rjmp	.+20     	; 0xd86 <death_setscore+0x23c>
      break;
    case SCORE_MODE_ALARM:
      left_score = alarm_h;
     d72:	80 91 70 03 	lds	r24, 0x0370
     d76:	80 93 1b 03 	sts	0x031B, r24
     d7a:	10 92 1c 03 	sts	0x031C, r1
      right_score = alarm_m;
     d7e:	80 91 66 03 	lds	r24, 0x0366
     d82:	80 93 1d 03 	sts	0x031D, r24
     d86:	10 92 1e 03 	sts	0x031E, r1
     d8a:	c4 c0       	rjmp	.+392    	; 0xf14 <death_setscore+0x3ca>
      break;
    case SCORE_MODE_DEATH_ALARM:
      results = minutes_left;
     d8c:	e0 90 59 02 	lds	r14, 0x0259
     d90:	f0 90 5a 02 	lds	r15, 0x025A
     d94:	00 91 5b 02 	lds	r16, 0x025B
     d98:	10 91 5c 02 	lds	r17, 0x025C
     d9c:	e0 92 0f 03 	sts	0x030F, r14
     da0:	f0 92 10 03 	sts	0x0310, r15
     da4:	00 93 11 03 	sts	0x0311, r16
     da8:	10 93 12 03 	sts	0x0312, r17
      if((time_h > alarm_h) || ((time_h == alarm_h) && (time_m > alarm_m)) || ((time_h == alarm_h) && (time_m == alarm_m) && (time_s > 0)))
     dac:	90 91 62 03 	lds	r25, 0x0362
     db0:	80 91 70 03 	lds	r24, 0x0370
     db4:	89 17       	cp	r24, r25
     db6:	e0 f0       	brcs	.+56     	; 0xdf0 <death_setscore+0x2a6>
     db8:	90 91 62 03 	lds	r25, 0x0362
     dbc:	80 91 70 03 	lds	r24, 0x0370
     dc0:	98 17       	cp	r25, r24
     dc2:	31 f4       	brne	.+12     	; 0xdd0 <death_setscore+0x286>
     dc4:	90 91 6c 03 	lds	r25, 0x036C
     dc8:	80 91 66 03 	lds	r24, 0x0366
     dcc:	89 17       	cp	r24, r25
     dce:	80 f0       	brcs	.+32     	; 0xdf0 <death_setscore+0x2a6>
     dd0:	90 91 62 03 	lds	r25, 0x0362
     dd4:	80 91 70 03 	lds	r24, 0x0370
     dd8:	98 17       	cp	r25, r24
     dda:	a1 f5       	brne	.+104    	; 0xe44 <death_setscore+0x2fa>
     ddc:	90 91 6c 03 	lds	r25, 0x036C
     de0:	80 91 66 03 	lds	r24, 0x0366
     de4:	98 17       	cp	r25, r24
     de6:	71 f5       	brne	.+92     	; 0xe44 <death_setscore+0x2fa>
     de8:	80 91 77 03 	lds	r24, 0x0377
     dec:	88 23       	and	r24, r24
     dee:	51 f1       	breq	.+84     	; 0xe44 <death_setscore+0x2fa>
        results -= (((((alarm_h * 60) + alarm_m) + 1440) - ((time_h * 60) + time_m)) * ((dc_mode == DC_mode_sadistic)?4:1));
     df0:	90 91 70 03 	lds	r25, 0x0370
     df4:	20 91 66 03 	lds	r18, 0x0366
     df8:	40 91 62 03 	lds	r20, 0x0362
     dfc:	e0 91 6c 03 	lds	r30, 0x036C
     e00:	80 91 5b 03 	lds	r24, 0x035B
     e04:	83 30       	cpi	r24, 0x03	; 3
     e06:	19 f0       	breq	.+6      	; 0xe0e <death_setscore+0x2c4>
     e08:	61 e0       	ldi	r22, 0x01	; 1
     e0a:	70 e0       	ldi	r23, 0x00	; 0
     e0c:	02 c0       	rjmp	.+4      	; 0xe12 <death_setscore+0x2c8>
     e0e:	64 e0       	ldi	r22, 0x04	; 4
     e10:	70 e0       	ldi	r23, 0x00	; 0
     e12:	30 e0       	ldi	r19, 0x00	; 0
     e14:	20 56       	subi	r18, 0x60	; 96
     e16:	3a 4f       	sbci	r19, 0xFA	; 250
     e18:	8c e3       	ldi	r24, 0x3C	; 60
     e1a:	98 9f       	mul	r25, r24
     e1c:	c0 01       	movw	r24, r0
     e1e:	11 24       	eor	r1, r1
     e20:	28 0f       	add	r18, r24
     e22:	39 1f       	adc	r19, r25
     e24:	50 e0       	ldi	r21, 0x00	; 0
     e26:	84 ec       	ldi	r24, 0xC4	; 196
     e28:	9f ef       	ldi	r25, 0xFF	; 255
     e2a:	dc 01       	movw	r26, r24
     e2c:	4a 9f       	mul	r20, r26
     e2e:	c0 01       	movw	r24, r0
     e30:	4b 9f       	mul	r20, r27
     e32:	90 0d       	add	r25, r0
     e34:	5a 9f       	mul	r21, r26
     e36:	90 0d       	add	r25, r0
     e38:	11 24       	eor	r1, r1
     e3a:	28 0f       	add	r18, r24
     e3c:	39 1f       	adc	r19, r25
     e3e:	2e 1b       	sub	r18, r30
     e40:	31 09       	sbc	r19, r1
     e42:	27 c0       	rjmp	.+78     	; 0xe92 <death_setscore+0x348>
      else
        results -= ((((alarm_h * 60) + alarm_m) - ((time_h * 60) + time_m)) * ((dc_mode == DC_mode_sadistic)?4:1));
     e44:	90 91 70 03 	lds	r25, 0x0370
     e48:	f0 91 66 03 	lds	r31, 0x0366
     e4c:	40 91 62 03 	lds	r20, 0x0362
     e50:	e0 91 6c 03 	lds	r30, 0x036C
     e54:	80 91 5b 03 	lds	r24, 0x035B
     e58:	83 30       	cpi	r24, 0x03	; 3
     e5a:	19 f0       	breq	.+6      	; 0xe62 <death_setscore+0x318>
     e5c:	61 e0       	ldi	r22, 0x01	; 1
     e5e:	70 e0       	ldi	r23, 0x00	; 0
     e60:	02 c0       	rjmp	.+4      	; 0xe66 <death_setscore+0x31c>
     e62:	64 e0       	ldi	r22, 0x04	; 4
     e64:	70 e0       	ldi	r23, 0x00	; 0
     e66:	8c e3       	ldi	r24, 0x3C	; 60
     e68:	98 9f       	mul	r25, r24
     e6a:	c0 01       	movw	r24, r0
     e6c:	11 24       	eor	r1, r1
     e6e:	50 e0       	ldi	r21, 0x00	; 0
     e70:	24 ec       	ldi	r18, 0xC4	; 196
     e72:	3f ef       	ldi	r19, 0xFF	; 255
     e74:	d9 01       	movw	r26, r18
     e76:	4a 9f       	mul	r20, r26
     e78:	90 01       	movw	r18, r0
     e7a:	4b 9f       	mul	r20, r27
     e7c:	30 0d       	add	r19, r0
     e7e:	5a 9f       	mul	r21, r26
     e80:	30 0d       	add	r19, r0
     e82:	11 24       	eor	r1, r1
     e84:	82 0f       	add	r24, r18
     e86:	93 1f       	adc	r25, r19
     e88:	8f 0f       	add	r24, r31
     e8a:	91 1d       	adc	r25, r1
     e8c:	8e 1b       	sub	r24, r30
     e8e:	91 09       	sbc	r25, r1
     e90:	9c 01       	movw	r18, r24
     e92:	62 9f       	mul	r22, r18
     e94:	c0 01       	movw	r24, r0
     e96:	63 9f       	mul	r22, r19
     e98:	90 0d       	add	r25, r0
     e9a:	72 9f       	mul	r23, r18
     e9c:	90 0d       	add	r25, r0
     e9e:	11 24       	eor	r1, r1
     ea0:	aa 27       	eor	r26, r26
     ea2:	97 fd       	sbrc	r25, 7
     ea4:	a0 95       	com	r26
     ea6:	ba 2f       	mov	r27, r26
     ea8:	e8 1a       	sub	r14, r24
     eaa:	f9 0a       	sbc	r15, r25
     eac:	0a 0b       	sbc	r16, r26
     eae:	1b 0b       	sbc	r17, r27
     eb0:	e0 92 0f 03 	sts	0x030F, r14
     eb4:	f0 92 10 03 	sts	0x0310, r15
     eb8:	00 93 11 03 	sts	0x0311, r16
     ebc:	10 93 12 03 	sts	0x0312, r17
      left_score = results / 10000;
     ec0:	e0 90 0f 03 	lds	r14, 0x030F
     ec4:	f0 90 10 03 	lds	r15, 0x0310
     ec8:	00 91 11 03 	lds	r16, 0x0311
     ecc:	10 91 12 03 	lds	r17, 0x0312
     ed0:	c8 01       	movw	r24, r16
     ed2:	b7 01       	movw	r22, r14
     ed4:	20 e1       	ldi	r18, 0x10	; 16
     ed6:	37 e2       	ldi	r19, 0x27	; 39
     ed8:	40 e0       	ldi	r20, 0x00	; 0
     eda:	50 e0       	ldi	r21, 0x00	; 0
     edc:	0e 94 33 3a 	call	0x7466	; 0x7466 <__divmodsi4>
     ee0:	30 93 1c 03 	sts	0x031C, r19
     ee4:	20 93 1b 03 	sts	0x031B, r18
      right_score = results % 10000;
     ee8:	c8 01       	movw	r24, r16
     eea:	b7 01       	movw	r22, r14
     eec:	20 e1       	ldi	r18, 0x10	; 16
     eee:	37 e2       	ldi	r19, 0x27	; 39
     ef0:	40 e0       	ldi	r20, 0x00	; 0
     ef2:	50 e0       	ldi	r21, 0x00	; 0
     ef4:	0e 94 33 3a 	call	0x7466	; 0x7466 <__divmodsi4>
     ef8:	70 93 1e 03 	sts	0x031E, r23
     efc:	60 93 1d 03 	sts	0x031D, r22
      if(results < 0) {
     f00:	17 ff       	sbrs	r17, 7
     f02:	08 c0       	rjmp	.+16     	; 0xf14 <death_setscore+0x3ca>
        left_score = 0;
     f04:	10 92 1c 03 	sts	0x031C, r1
     f08:	10 92 1b 03 	sts	0x031B, r1
        right_score = 0;
     f0c:	10 92 1e 03 	sts	0x031E, r1
     f10:	10 92 1d 03 	sts	0x031D, r1
      }
      break;
  }
}
     f14:	1f 91       	pop	r17
     f16:	0f 91       	pop	r16
     f18:	ff 90       	pop	r15
     f1a:	ef 90       	pop	r14
     f1c:	08 95       	ret

00000f1e <prep_digits>:
}

uint8_t display_digits[8];

void prep_digits(void)
{
     f1e:	0f 93       	push	r16
     f20:	1f 93       	push	r17
     f22:	cf 93       	push	r28
     f24:	df 93       	push	r29
	uint8_t i;
	uint16_t temp1=left_score, temp2=right_score;
     f26:	e0 91 1b 03 	lds	r30, 0x031B
     f2a:	f0 91 1c 03 	lds	r31, 0x031C
     f2e:	00 91 1d 03 	lds	r16, 0x031D
     f32:	10 91 1e 03 	lds	r17, 0x031E
	if((score_mode != SCORE_MODE_DEATH_TIME) && (score_mode != SCORE_MODE_DEATH_ALARM))
     f36:	80 91 67 02 	lds	r24, 0x0267
     f3a:	84 30       	cpi	r24, 0x04	; 4
     f3c:	09 f4       	brne	.+2      	; 0xf40 <prep_digits+0x22>
     f3e:	d9 c0       	rjmp	.+434    	; 0x10f2 <prep_digits+0x1d4>
     f40:	80 91 67 02 	lds	r24, 0x0267
     f44:	87 30       	cpi	r24, 0x07	; 7
     f46:	09 f4       	brne	.+2      	; 0xf4a <prep_digits+0x2c>
     f48:	d4 c0       	rjmp	.+424    	; 0x10f2 <prep_digits+0x1d4>
    {
		if ((time_format == TIME_12H) && ((score_mode == SCORE_MODE_TIME) || (score_mode == SCORE_MODE_ALARM)))
     f4a:	80 91 64 03 	lds	r24, 0x0364
     f4e:	88 23       	and	r24, r24
     f50:	81 f4       	brne	.+32     	; 0xf72 <prep_digits+0x54>
     f52:	80 91 67 02 	lds	r24, 0x0267
     f56:	88 23       	and	r24, r24
     f58:	21 f0       	breq	.+8      	; 0xf62 <prep_digits+0x44>
     f5a:	80 91 67 02 	lds	r24, 0x0267
     f5e:	83 30       	cpi	r24, 0x03	; 3
     f60:	41 f4       	brne	.+16     	; 0xf72 <prep_digits+0x54>
	      display_digits[0] = ((left_score + 23)%12 + 1)/10;
     f62:	cf 01       	movw	r24, r30
     f64:	47 96       	adiw	r24, 0x17	; 23
     f66:	6c e0       	ldi	r22, 0x0C	; 12
     f68:	70 e0       	ldi	r23, 0x00	; 0
     f6a:	0e 94 ea 39 	call	0x73d4	; 0x73d4 <__udivmodhi4>
     f6e:	01 96       	adiw	r24, 0x01	; 1
     f70:	01 c0       	rjmp	.+2      	; 0xf74 <prep_digits+0x56>
	    else 
	      display_digits[0] = left_score/10;
     f72:	cf 01       	movw	r24, r30
     f74:	6a e0       	ldi	r22, 0x0A	; 10
     f76:	70 e0       	ldi	r23, 0x00	; 0
     f78:	0e 94 ea 39 	call	0x73d4	; 0x73d4 <__udivmodhi4>
     f7c:	60 93 13 03 	sts	0x0313, r22
	    
	    if ((time_format == TIME_12H) && ((score_mode == SCORE_MODE_TIME) || (score_mode == SCORE_MODE_ALARM)))
     f80:	80 91 64 03 	lds	r24, 0x0364
     f84:	88 23       	and	r24, r24
     f86:	81 f4       	brne	.+32     	; 0xfa8 <prep_digits+0x8a>
     f88:	80 91 67 02 	lds	r24, 0x0267
     f8c:	88 23       	and	r24, r24
     f8e:	21 f0       	breq	.+8      	; 0xf98 <prep_digits+0x7a>
     f90:	80 91 67 02 	lds	r24, 0x0267
     f94:	83 30       	cpi	r24, 0x03	; 3
     f96:	41 f4       	brne	.+16     	; 0xfa8 <prep_digits+0x8a>
	      display_digits[1] = ((left_score + 23)%12 + 1)%10;
     f98:	cf 01       	movw	r24, r30
     f9a:	47 96       	adiw	r24, 0x17	; 23
     f9c:	6c e0       	ldi	r22, 0x0C	; 12
     f9e:	70 e0       	ldi	r23, 0x00	; 0
     fa0:	0e 94 ea 39 	call	0x73d4	; 0x73d4 <__udivmodhi4>
     fa4:	01 96       	adiw	r24, 0x01	; 1
     fa6:	01 c0       	rjmp	.+2      	; 0xfaa <prep_digits+0x8c>
	    else
	      display_digits[1] = left_score%10;
     fa8:	cf 01       	movw	r24, r30
     faa:	6a e0       	ldi	r22, 0x0A	; 10
     fac:	70 e0       	ldi	r23, 0x00	; 0
     fae:	0e 94 ea 39 	call	0x73d4	; 0x73d4 <__udivmodhi4>
     fb2:	80 93 14 03 	sts	0x0314, r24
	    
	    display_digits[3] = right_score/10;
     fb6:	c8 01       	movw	r24, r16
     fb8:	6a e0       	ldi	r22, 0x0A	; 10
     fba:	70 e0       	ldi	r23, 0x00	; 0
     fbc:	0e 94 ea 39 	call	0x73d4	; 0x73d4 <__udivmodhi4>
     fc0:	60 93 16 03 	sts	0x0316, r22
	    display_digits[4] = right_score%10;
     fc4:	c8 01       	movw	r24, r16
     fc6:	6a e0       	ldi	r22, 0x0A	; 10
     fc8:	70 e0       	ldi	r23, 0x00	; 0
     fca:	0e 94 ea 39 	call	0x73d4	; 0x73d4 <__udivmodhi4>
     fce:	98 2f       	mov	r25, r24
     fd0:	80 93 17 03 	sts	0x0317, r24
	    
	    if(score_mode == SCORE_MODE_TIME)
     fd4:	80 91 67 02 	lds	r24, 0x0267
     fd8:	88 23       	and	r24, r24
     fda:	71 f5       	brne	.+92     	; 0x1038 <prep_digits+0x11a>
	    {
	      if(time_format == TIME_12H)
     fdc:	80 91 64 03 	lds	r24, 0x0364
     fe0:	88 23       	and	r24, r24
     fe2:	a9 f4       	brne	.+42     	; 0x100e <prep_digits+0xf0>
	      {
	      	  display_digits[2] = ((time_s & 1)?((time_s < 30)?17:16):10) | 0x80;
     fe4:	80 91 77 03 	lds	r24, 0x0377
     fe8:	80 fd       	sbrc	r24, 0
     fea:	02 c0       	rjmp	.+4      	; 0xff0 <prep_digits+0xd2>
     fec:	8a e8       	ldi	r24, 0x8A	; 138
     fee:	07 c0       	rjmp	.+14     	; 0xffe <prep_digits+0xe0>
     ff0:	80 91 77 03 	lds	r24, 0x0377
     ff4:	8e 31       	cpi	r24, 0x1E	; 30
     ff6:	10 f0       	brcs	.+4      	; 0xffc <prep_digits+0xde>
     ff8:	80 e9       	ldi	r24, 0x90	; 144
     ffa:	01 c0       	rjmp	.+2      	; 0xffe <prep_digits+0xe0>
     ffc:	81 e9       	ldi	r24, 0x91	; 145
     ffe:	80 93 15 03 	sts	0x0315, r24
	      	  display_digits[5] = 12;
    1002:	8c e0       	ldi	r24, 0x0C	; 12
    1004:	80 93 18 03 	sts	0x0318, r24
	      	  if(time_h < 12)
    1008:	80 91 62 03 	lds	r24, 0x0362
    100c:	25 c0       	rjmp	.+74     	; 0x1058 <prep_digits+0x13a>
		      	display_digits[6] = 14;
		      display_digits[7] = 15;
	      }
	      else
	      {
		      display_digits[2] = display_digits[5] = 10;
    100e:	8a e0       	ldi	r24, 0x0A	; 10
    1010:	80 93 18 03 	sts	0x0318, r24
    1014:	80 93 15 03 	sts	0x0315, r24
		      display_digits[6] = (time_s/10) | 0x80;
    1018:	80 91 77 03 	lds	r24, 0x0377
    101c:	6a e0       	ldi	r22, 0x0A	; 10
    101e:	0e 94 de 39 	call	0x73bc	; 0x73bc <__udivmodqi4>
    1022:	80 68       	ori	r24, 0x80	; 128
    1024:	80 93 19 03 	sts	0x0319, r24
		      display_digits[7] = (time_s%10) | 0x80;
    1028:	80 91 77 03 	lds	r24, 0x0377
    102c:	0e 94 de 39 	call	0x73bc	; 0x73bc <__udivmodqi4>
    1030:	90 68       	ori	r25, 0x80	; 128
    1032:	90 93 1a 03 	sts	0x031A, r25
    1036:	83 c0       	rjmp	.+262    	; 0x113e <prep_digits+0x220>
		  }
	    }
	    else if (score_mode == SCORE_MODE_ALARM)
    1038:	80 91 67 02 	lds	r24, 0x0267
    103c:	83 30       	cpi	r24, 0x03	; 3
    103e:	e1 f4       	brne	.+56     	; 0x1078 <prep_digits+0x15a>
	    {
	      display_digits[2] = 10;
    1040:	8a e0       	ldi	r24, 0x0A	; 10
    1042:	80 93 15 03 	sts	0x0315, r24
	      display_digits[5] = 12;
    1046:	9c e0       	ldi	r25, 0x0C	; 12
    1048:	90 93 18 03 	sts	0x0318, r25
	      if(time_format == TIME_12H)
    104c:	80 91 64 03 	lds	r24, 0x0364
    1050:	88 23       	and	r24, r24
    1052:	69 f4       	brne	.+26     	; 0x106e <prep_digits+0x150>
	      {
	      	  if(alarm_h < 12)
    1054:	80 91 70 03 	lds	r24, 0x0370
    1058:	8c 30       	cpi	r24, 0x0C	; 12
    105a:	10 f4       	brcc	.+4      	; 0x1060 <prep_digits+0x142>
		      	display_digits[6] = 13;
    105c:	8d e0       	ldi	r24, 0x0D	; 13
    105e:	01 c0       	rjmp	.+2      	; 0x1062 <prep_digits+0x144>
		      else
		      	display_digits[6] = 14;
    1060:	8e e0       	ldi	r24, 0x0E	; 14
    1062:	80 93 19 03 	sts	0x0319, r24
		      display_digits[7] = 15;
    1066:	8f e0       	ldi	r24, 0x0F	; 15
    1068:	80 93 1a 03 	sts	0x031A, r24
    106c:	68 c0       	rjmp	.+208    	; 0x113e <prep_digits+0x220>
		  }
		  else
		  {
		  	  display_digits[6] = display_digits[7] = 12;
    106e:	90 93 1a 03 	sts	0x031A, r25
    1072:	90 93 19 03 	sts	0x0319, r25
    1076:	63 c0       	rjmp	.+198    	; 0x113e <prep_digits+0x220>
		  }
	    }
	    else if ((score_mode == SCORE_MODE_DATE) || (score_mode == SCORE_MODE_DEATH_DATE))
    1078:	80 91 67 02 	lds	r24, 0x0267
    107c:	81 30       	cpi	r24, 0x01	; 1
    107e:	21 f0       	breq	.+8      	; 0x1088 <prep_digits+0x16a>
    1080:	80 91 67 02 	lds	r24, 0x0267
    1084:	85 30       	cpi	r24, 0x05	; 5
    1086:	a9 f4       	brne	.+42     	; 0x10b2 <prep_digits+0x194>
	    {
	    	display_digits[6] = display_digits[4];
    1088:	90 93 19 03 	sts	0x0319, r25
	    	display_digits[5] = display_digits[3];
    108c:	80 91 16 03 	lds	r24, 0x0316
    1090:	80 93 18 03 	sts	0x0318, r24
	    	display_digits[4] = 11;
    1094:	8b e0       	ldi	r24, 0x0B	; 11
    1096:	80 93 17 03 	sts	0x0317, r24
	    	display_digits[3] = display_digits[1];
    109a:	80 91 14 03 	lds	r24, 0x0314
    109e:	80 93 16 03 	sts	0x0316, r24
	    	display_digits[2] = display_digits[0];
    10a2:	80 91 13 03 	lds	r24, 0x0313
    10a6:	80 93 15 03 	sts	0x0315, r24
	    	display_digits[0] = display_digits[1] = display_digits[7] = 12;
    10aa:	8c e0       	ldi	r24, 0x0C	; 12
    10ac:	80 93 1a 03 	sts	0x031A, r24
    10b0:	1b c0       	rjmp	.+54     	; 0x10e8 <prep_digits+0x1ca>
	    }
	    else if ((score_mode == SCORE_MODE_YEAR) || (score_mode == SCORE_MODE_DEATH_YEAR))
    10b2:	80 91 67 02 	lds	r24, 0x0267
    10b6:	82 30       	cpi	r24, 0x02	; 2
    10b8:	21 f0       	breq	.+8      	; 0x10c2 <prep_digits+0x1a4>
    10ba:	80 91 67 02 	lds	r24, 0x0267
    10be:	86 30       	cpi	r24, 0x06	; 6
    10c0:	f1 f5       	brne	.+124    	; 0x113e <prep_digits+0x220>
	    {
	    	display_digits[6] = display_digits[4];
    10c2:	90 93 19 03 	sts	0x0319, r25
	    	display_digits[5] = display_digits[3];
    10c6:	80 91 16 03 	lds	r24, 0x0316
    10ca:	80 93 18 03 	sts	0x0318, r24
	    	display_digits[4] = display_digits[1];
    10ce:	80 91 14 03 	lds	r24, 0x0314
    10d2:	80 93 17 03 	sts	0x0317, r24
	    	display_digits[3] = display_digits[0];
    10d6:	80 91 13 03 	lds	r24, 0x0313
    10da:	80 93 16 03 	sts	0x0316, r24
	    	display_digits[0] = display_digits[1] = display_digits[2] = display_digits[7] = 12;
    10de:	8c e0       	ldi	r24, 0x0C	; 12
    10e0:	80 93 1a 03 	sts	0x031A, r24
    10e4:	80 93 15 03 	sts	0x0315, r24
    10e8:	80 93 14 03 	sts	0x0314, r24
    10ec:	80 93 13 03 	sts	0x0313, r24
    10f0:	26 c0       	rjmp	.+76     	; 0x113e <prep_digits+0x220>
	    }
	}
	else
    {
	    if((left_score != 0) || (right_score != 0))
    10f2:	30 97       	sbiw	r30, 0x00	; 0
    10f4:	19 f0       	breq	.+6      	; 0x10fc <prep_digits+0x1de>
    10f6:	c6 e1       	ldi	r28, 0x16	; 22
    10f8:	d3 e0       	ldi	r29, 0x03	; 3
    10fa:	04 c0       	rjmp	.+8      	; 0x1104 <prep_digits+0x1e6>
    10fc:	01 15       	cp	r16, r1
    10fe:	11 05       	cpc	r17, r1
    1100:	d1 f7       	brne	.-12     	; 0x10f6 <prep_digits+0x1d8>
    1102:	1d c0       	rjmp	.+58     	; 0x113e <prep_digits+0x220>
	    {
	    	for(i=0;i<4;i++,temp1/=10,temp2/=10)
	    	{
	    		//drawbigdigit(DISPLAY_DL4_X_DEATH - i, DISPLAY_TIME_Y_DEATH, temp1 % 10, inverted);
	    		//drawbigdigit(DISPLAY_DR4_X_DEATH - i, DISPLAY_TIME_Y_DEATH, temp2 % 10, inverted);
	    		display_digits[3-i] = temp1 % 10;
    1104:	cf 01       	movw	r24, r30
    1106:	6a e0       	ldi	r22, 0x0A	; 10
    1108:	70 e0       	ldi	r23, 0x00	; 0
    110a:	0e 94 ea 39 	call	0x73d4	; 0x73d4 <__udivmodhi4>
    110e:	88 83       	st	Y, r24
	    		display_digits[7-i] = temp2 % 10;
    1110:	c8 01       	movw	r24, r16
    1112:	6a e0       	ldi	r22, 0x0A	; 10
    1114:	70 e0       	ldi	r23, 0x00	; 0
    1116:	0e 94 ea 39 	call	0x73d4	; 0x73d4 <__udivmodhi4>
    111a:	8c 83       	std	Y+4, r24	; 0x04
	}
	else
    {
	    if((left_score != 0) || (right_score != 0))
	    {
	    	for(i=0;i<4;i++,temp1/=10,temp2/=10)
    111c:	cf 01       	movw	r24, r30
    111e:	6a e0       	ldi	r22, 0x0A	; 10
    1120:	70 e0       	ldi	r23, 0x00	; 0
    1122:	0e 94 ea 39 	call	0x73d4	; 0x73d4 <__udivmodhi4>
    1126:	fb 01       	movw	r30, r22
    1128:	c8 01       	movw	r24, r16
    112a:	6a e0       	ldi	r22, 0x0A	; 10
    112c:	70 e0       	ldi	r23, 0x00	; 0
    112e:	0e 94 ea 39 	call	0x73d4	; 0x73d4 <__udivmodhi4>
    1132:	8b 01       	movw	r16, r22
    1134:	21 97       	sbiw	r28, 0x01	; 1
    1136:	83 e0       	ldi	r24, 0x03	; 3
    1138:	c2 31       	cpi	r28, 0x12	; 18
    113a:	d8 07       	cpc	r29, r24
    113c:	19 f7       	brne	.-58     	; 0x1104 <prep_digits+0x1e6>
	    		display_digits[3-i] = temp1 % 10;
	    		display_digits[7-i] = temp2 % 10;
	    	}
	    }
    }
}
    113e:	df 91       	pop	r29
    1140:	cf 91       	pop	r28
    1142:	1f 91       	pop	r17
    1144:	0f 91       	pop	r16
    1146:	08 95       	ret

00001148 <death_bitblit_ram>:
}

#define DIGIT_WIDTH_DEATH 76
#define DIGIT_HEIGHT_DEATH 64

void death_bitblit_ram(int16_t x_origin, uint8_t y_origin, uint8_t width, uint8_t *bitmap_p, uint16_t size, uint8_t inverted) {
    1148:	a0 e0       	ldi	r26, 0x00	; 0
    114a:	b0 e0       	ldi	r27, 0x00	; 0
    114c:	ea ea       	ldi	r30, 0xAA	; 170
    114e:	f8 e0       	ldi	r31, 0x08	; 8
    1150:	0c 94 52 3a 	jmp	0x74a4	; 0x74a4 <__prologue_saves__+0x8>
    1154:	6c 01       	movw	r12, r24
    1156:	b4 2e       	mov	r11, r20
    1158:	39 01       	movw	r6, r18
    115a:	48 01       	movw	r8, r16
    115c:	ae 2c       	mov	r10, r14
  uint8_t xx,y, p;
  int16_t x;

  if((x_origin+width+1)<0)
    115e:	84 0f       	add	r24, r20
    1160:	91 1d       	adc	r25, r1
    1162:	8f 5f       	subi	r24, 0xFF	; 255
    1164:	9f 4f       	sbci	r25, 0xFF	; 255
    1166:	0c f4       	brge	.+2      	; 0x116a <death_bitblit_ram+0x22>
    1168:	40 c0       	rjmp	.+128    	; 0x11ea <death_bitblit_ram+0xa2>
        x = i % width;
      }
      xx = x+x_origin;
      y = i / width;
      //if(((x+x_origin)>=0) && ((x+x_origin)<128))
      glcdSetAddress(xx, (y_origin/8)+y);
    116a:	e6 2e       	mov	r14, r22
    116c:	e6 94       	lsr	r14
    116e:	e6 94       	lsr	r14
    1170:	e6 94       	lsr	r14
    1172:	00 e0       	ldi	r16, 0x00	; 0
    1174:	10 e0       	ldi	r17, 0x00	; 0
    1176:	36 c0       	rjmp	.+108    	; 0x11e4 <death_bitblit_ram+0x9c>
  int16_t x;

  if((x_origin+width+1)<0)
    return;
  for (uint16_t i = 0; i<size; i++) {
    p = bitmap_p[i];
    1178:	f3 01       	movw	r30, r6
    117a:	e0 0f       	add	r30, r16
    117c:	f1 1f       	adc	r31, r17
    117e:	f0 80       	ld	r15, Z
    
    x = i % width;
    1180:	c8 01       	movw	r24, r16
    1182:	6b 2d       	mov	r22, r11
    1184:	70 e0       	ldi	r23, 0x00	; 0
    1186:	0e 94 ea 39 	call	0x73d4	; 0x73d4 <__udivmodhi4>
    118a:	ec 01       	movw	r28, r24
    if (x == 0) {
    118c:	00 97       	sbiw	r24, 0x00	; 0
    118e:	d9 f4       	brne	.+54     	; 0x11c6 <death_bitblit_ram+0x7e>
    1190:	09 c0       	rjmp	.+18     	; 0x11a4 <death_bitblit_ram+0x5c>
      while((x+x_origin)<0)
      {
        i++;
    1192:	0f 5f       	subi	r16, 0xFF	; 255
    1194:	1f 4f       	sbci	r17, 0xFF	; 255
        p = bitmap_p[i];
    1196:	f0 80       	ld	r15, Z
        x = i % width;
    1198:	c8 01       	movw	r24, r16
    119a:	6b 2d       	mov	r22, r11
    119c:	70 e0       	ldi	r23, 0x00	; 0
    119e:	0e 94 ea 39 	call	0x73d4	; 0x73d4 <__udivmodhi4>
    11a2:	ec 01       	movw	r28, r24
    11a4:	31 96       	adiw	r30, 0x01	; 1
  for (uint16_t i = 0; i<size; i++) {
    p = bitmap_p[i];
    
    x = i % width;
    if (x == 0) {
      while((x+x_origin)<0)
    11a6:	ce 01       	movw	r24, r28
    11a8:	8c 0d       	add	r24, r12
    11aa:	9d 1d       	adc	r25, r13
    11ac:	97 fd       	sbrc	r25, 7
    11ae:	f1 cf       	rjmp	.-30     	; 0x1192 <death_bitblit_ram+0x4a>
        x = i % width;
      }
      xx = x+x_origin;
      y = i / width;
      //if(((x+x_origin)>=0) && ((x+x_origin)<128))
      glcdSetAddress(xx, (y_origin/8)+y);
    11b0:	c8 01       	movw	r24, r16
    11b2:	6b 2d       	mov	r22, r11
    11b4:	70 e0       	ldi	r23, 0x00	; 0
    11b6:	0e 94 ea 39 	call	0x73d4	; 0x73d4 <__udivmodhi4>
    11ba:	6e 0d       	add	r22, r14
    11bc:	9e 01       	movw	r18, r28
    11be:	2c 0d       	add	r18, r12
    11c0:	82 2f       	mov	r24, r18
    11c2:	0e 94 9c 2c 	call	0x5938	; 0x5938 <glcdSetAddress>
      //else
      //   continue;
    }
    if((x+x_origin)<128)
    11c6:	cc 0d       	add	r28, r12
    11c8:	dd 1d       	adc	r29, r13
    11ca:	c0 38       	cpi	r28, 0x80	; 128
    11cc:	d1 05       	cpc	r29, r1
    11ce:	44 f4       	brge	.+16     	; 0x11e0 <death_bitblit_ram+0x98>
    {
      if (inverted) 
    11d0:	aa 20       	and	r10, r10
    11d2:	19 f0       	breq	.+6      	; 0x11da <death_bitblit_ram+0x92>
        glcdDataWrite(~p);  
    11d4:	8f 2d       	mov	r24, r15
    11d6:	80 95       	com	r24
    11d8:	01 c0       	rjmp	.+2      	; 0x11dc <death_bitblit_ram+0x94>
      else 
        glcdDataWrite(p);  
    11da:	8f 2d       	mov	r24, r15
    11dc:	0e 94 43 2c 	call	0x5886	; 0x5886 <glcdDataWrite>
  uint8_t xx,y, p;
  int16_t x;

  if((x_origin+width+1)<0)
    return;
  for (uint16_t i = 0; i<size; i++) {
    11e0:	0f 5f       	subi	r16, 0xFF	; 255
    11e2:	1f 4f       	sbci	r17, 0xFF	; 255
    11e4:	08 15       	cp	r16, r8
    11e6:	19 05       	cpc	r17, r9
    11e8:	38 f2       	brcs	.-114    	; 0x1178 <death_bitblit_ram+0x30>
        glcdDataWrite(~p);  
      else 
        glcdDataWrite(p);  
    }
  }
}
    11ea:	cd b7       	in	r28, 0x3d	; 61
    11ec:	de b7       	in	r29, 0x3e	; 62
    11ee:	ee e0       	ldi	r30, 0x0E	; 14
    11f0:	0c 94 6e 3a 	jmp	0x74dc	; 0x74dc <__epilogue_restores__+0x8>

000011f4 <death_blitsegs_rom>:

// number of segments to expect
#define SEGMENTS 2

void death_blitsegs_rom(int16_t x_origin, uint8_t y_origin, PGM_P bitmap_p, uint8_t width, uint8_t height, uint8_t inverted) {
    11f4:	a1 e6       	ldi	r26, 0x61	; 97
    11f6:	b2 e0       	ldi	r27, 0x02	; 2
    11f8:	e0 e0       	ldi	r30, 0x00	; 0
    11fa:	f9 e0       	ldi	r31, 0x09	; 9
    11fc:	0c 94 4e 3a 	jmp	0x749c	; 0x749c <__prologue_saves__>
    1200:	6c 01       	movw	r12, r24
    1202:	36 2e       	mov	r3, r22
    1204:	4a 01       	movw	r8, r20
    1206:	b2 2e       	mov	r11, r18
    1208:	20 2e       	mov	r2, r16
    120a:	cf 59       	subi	r28, 0x9F	; 159
    120c:	dd 4f       	sbci	r29, 0xFD	; 253
    120e:	e8 82       	st	Y, r14
    1210:	c1 56       	subi	r28, 0x61	; 97
    1212:	d2 40       	sbci	r29, 0x02	; 2
  uint8_t bitmap[DIGIT_WIDTH_DEATH * DIGIT_HEIGHT_DEATH / 8] = {0};
  
  if(width > DIGIT_WIDTH_DEATH)
    1214:	2c e4       	ldi	r18, 0x4C	; 76
    1216:	2b 15       	cp	r18, r11
    1218:	08 f4       	brcc	.+2      	; 0x121c <death_blitsegs_rom+0x28>
    121a:	76 c0       	rjmp	.+236    	; 0x1308 <death_blitsegs_rom+0x114>
  	  return;
  if((x_origin + width) < 0)
    121c:	0b 2d       	mov	r16, r11
    121e:	10 e0       	ldi	r17, 0x00	; 0
    1220:	c8 01       	movw	r24, r16
    1222:	8c 0d       	add	r24, r12
    1224:	9d 1d       	adc	r25, r13
    1226:	97 fd       	sbrc	r25, 7
    1228:	6f c0       	rjmp	.+222    	; 0x1308 <death_blitsegs_rom+0x114>
    return;
  if(x_origin >= 128)
    122a:	30 e8       	ldi	r19, 0x80	; 128
    122c:	c3 16       	cp	r12, r19
    122e:	d1 04       	cpc	r13, r1
    1230:	0c f0       	brlt	.+2      	; 0x1234 <death_blitsegs_rom+0x40>
    1232:	6a c0       	rjmp	.+212    	; 0x1308 <death_blitsegs_rom+0x114>
    return;
  if((y_origin + DIGIT_HEIGHT_DEATH) < 0)
    return;
  if(y_origin >= 64)
    1234:	8f e3       	ldi	r24, 0x3F	; 63
    1236:	86 17       	cp	r24, r22
    1238:	08 f4       	brcc	.+2      	; 0x123c <death_blitsegs_rom+0x48>
    123a:	66 c0       	rjmp	.+204    	; 0x1308 <death_blitsegs_rom+0x114>

// number of segments to expect
#define SEGMENTS 2

void death_blitsegs_rom(int16_t x_origin, uint8_t y_origin, PGM_P bitmap_p, uint8_t width, uint8_t height, uint8_t inverted) {
  uint8_t bitmap[DIGIT_WIDTH_DEATH * DIGIT_HEIGHT_DEATH / 8] = {0};
    123c:	fe 01       	movw	r30, r28
    123e:	31 96       	adiw	r30, 0x01	; 1
    1240:	80 e6       	ldi	r24, 0x60	; 96
    1242:	92 e0       	ldi	r25, 0x02	; 2
    1244:	df 01       	movw	r26, r30
    1246:	9c 01       	movw	r18, r24
    1248:	1d 92       	st	X+, r1
    124a:	21 50       	subi	r18, 0x01	; 1
    124c:	30 40       	sbci	r19, 0x00	; 0
    124e:	e1 f7       	brne	.-8      	; 0x1248 <death_blitsegs_rom+0x54>
    1250:	20 e0       	ldi	r18, 0x00	; 0
    1252:	30 e0       	ldi	r19, 0x00	; 0
    1254:	40 e0       	ldi	r20, 0x00	; 0
    while(count--) {
      uint8_t start = pgm_read_byte(bitmap_p+pointer);pointer++;
      uint8_t stop = pgm_read_byte(bitmap_p+pointer);pointer++;
    
      while (start <= stop) {
        bitmap[start + (line/8)*width ] |= _BV(line%8);
    1256:	61 e0       	ldi	r22, 0x01	; 1
    1258:	46 2e       	mov	r4, r22
    125a:	51 2c       	mov	r5, r1
    125c:	3f 01       	movw	r6, r30
    125e:	3f c0       	rjmp	.+126    	; 0x12de <death_blitsegs_rom+0xea>
  if(y_origin >= 64)
    return;
  
  uint16_t pointer=0;
  for (uint8_t line = 0; line<height; line++) {
    uint8_t count = pgm_read_byte(bitmap_p+pointer);
    1260:	f4 01       	movw	r30, r8
    1262:	e2 0f       	add	r30, r18
    1264:	f3 1f       	adc	r31, r19
    1266:	64 91       	lpm	r22, Z+
    while(count--) {
      uint8_t start = pgm_read_byte(bitmap_p+pointer);pointer++;
      uint8_t stop = pgm_read_byte(bitmap_p+pointer);pointer++;
    
      while (start <= stop) {
        bitmap[start + (line/8)*width ] |= _BV(line%8);
    1268:	84 2f       	mov	r24, r20
    126a:	86 95       	lsr	r24
    126c:	86 95       	lsr	r24
    126e:	86 95       	lsr	r24
    1270:	90 e0       	ldi	r25, 0x00	; 0
    1272:	80 9f       	mul	r24, r16
    1274:	70 01       	movw	r14, r0
    1276:	81 9f       	mul	r24, r17
    1278:	f0 0c       	add	r15, r0
    127a:	90 9f       	mul	r25, r16
    127c:	f0 0c       	add	r15, r0
    127e:	11 24       	eor	r1, r1
    1280:	84 2f       	mov	r24, r20
    1282:	87 70       	andi	r24, 0x07	; 7
    1284:	a4 2c       	mov	r10, r4
    1286:	01 c0       	rjmp	.+2      	; 0x128a <death_blitsegs_rom+0x96>
    1288:	aa 0c       	add	r10, r10
    128a:	8a 95       	dec	r24
    128c:	ea f7       	brpl	.-6      	; 0x1288 <death_blitsegs_rom+0x94>
    128e:	2f 5f       	subi	r18, 0xFF	; 255
    1290:	3f 4f       	sbci	r19, 0xFF	; 255
    1292:	d4 01       	movw	r26, r8
    1294:	a2 0f       	add	r26, r18
    1296:	b3 1f       	adc	r27, r19
    1298:	21 50       	subi	r18, 0x01	; 1
    129a:	30 40       	sbci	r19, 0x00	; 0
    129c:	76 2f       	mov	r23, r22
    129e:	15 c0       	rjmp	.+42     	; 0x12ca <death_blitsegs_rom+0xd6>
  uint16_t pointer=0;
  for (uint8_t line = 0; line<height; line++) {
    uint8_t count = pgm_read_byte(bitmap_p+pointer);
    pointer++;
    while(count--) {
      uint8_t start = pgm_read_byte(bitmap_p+pointer);pointer++;
    12a0:	fd 01       	movw	r30, r26
    12a2:	84 91       	lpm	r24, Z+
      uint8_t stop = pgm_read_byte(bitmap_p+pointer);pointer++;
    12a4:	11 96       	adiw	r26, 0x01	; 1
    12a6:	fd 01       	movw	r30, r26
    12a8:	54 91       	lpm	r21, Z+
    12aa:	11 97       	sbiw	r26, 0x01	; 1
    12ac:	98 2f       	mov	r25, r24
    12ae:	09 c0       	rjmp	.+18     	; 0x12c2 <death_blitsegs_rom+0xce>
    
      while (start <= stop) {
        bitmap[start + (line/8)*width ] |= _BV(line%8);
    12b0:	f7 01       	movw	r30, r14
    12b2:	e9 0f       	add	r30, r25
    12b4:	f1 1d       	adc	r31, r1
    12b6:	e6 0d       	add	r30, r6
    12b8:	f7 1d       	adc	r31, r7
    12ba:	80 81       	ld	r24, Z
    12bc:	8a 29       	or	r24, r10
    12be:	80 83       	st	Z, r24
        start++;
    12c0:	9f 5f       	subi	r25, 0xFF	; 255
    pointer++;
    while(count--) {
      uint8_t start = pgm_read_byte(bitmap_p+pointer);pointer++;
      uint8_t stop = pgm_read_byte(bitmap_p+pointer);pointer++;
    
      while (start <= stop) {
    12c2:	59 17       	cp	r21, r25
    12c4:	a8 f7       	brcc	.-22     	; 0x12b0 <death_blitsegs_rom+0xbc>
    12c6:	71 50       	subi	r23, 0x01	; 1
    12c8:	12 96       	adiw	r26, 0x02	; 2
  
  uint16_t pointer=0;
  for (uint8_t line = 0; line<height; line++) {
    uint8_t count = pgm_read_byte(bitmap_p+pointer);
    pointer++;
    while(count--) {
    12ca:	77 23       	and	r23, r23
    12cc:	49 f7       	brne	.-46     	; 0x12a0 <death_blitsegs_rom+0xac>
    return;
  
  uint16_t pointer=0;
  for (uint8_t line = 0; line<height; line++) {
    uint8_t count = pgm_read_byte(bitmap_p+pointer);
    pointer++;
    12ce:	86 2f       	mov	r24, r22
    12d0:	90 e0       	ldi	r25, 0x00	; 0
    12d2:	88 0f       	add	r24, r24
    12d4:	99 1f       	adc	r25, r25
    12d6:	01 96       	adiw	r24, 0x01	; 1
    12d8:	28 0f       	add	r18, r24
    12da:	39 1f       	adc	r19, r25
    return;
  if(y_origin >= 64)
    return;
  
  uint16_t pointer=0;
  for (uint8_t line = 0; line<height; line++) {
    12dc:	4f 5f       	subi	r20, 0xFF	; 255
    12de:	42 15       	cp	r20, r2
    12e0:	08 f4       	brcc	.+2      	; 0x12e4 <death_blitsegs_rom+0xf0>
    12e2:	be cf       	rjmp	.-132    	; 0x1260 <death_blitsegs_rom+0x6c>
        bitmap[start + (line/8)*width ] |= _BV(line%8);
        start++;
      }
    }
  }
  death_bitblit_ram(x_origin, y_origin, width, bitmap, DIGIT_HEIGHT_DEATH*width/8, inverted);
    12e4:	83 e0       	ldi	r24, 0x03	; 3
    12e6:	00 0f       	add	r16, r16
    12e8:	11 1f       	adc	r17, r17
    12ea:	8a 95       	dec	r24
    12ec:	e1 f7       	brne	.-8      	; 0x12e6 <death_blitsegs_rom+0xf2>
    12ee:	c6 01       	movw	r24, r12
    12f0:	63 2d       	mov	r22, r3
    12f2:	4b 2d       	mov	r20, r11
    12f4:	9e 01       	movw	r18, r28
    12f6:	2f 5f       	subi	r18, 0xFF	; 255
    12f8:	3f 4f       	sbci	r19, 0xFF	; 255
    12fa:	cf 59       	subi	r28, 0x9F	; 159
    12fc:	dd 4f       	sbci	r29, 0xFD	; 253
    12fe:	e8 80       	ld	r14, Y
    1300:	c1 56       	subi	r28, 0x61	; 97
    1302:	d2 40       	sbci	r29, 0x02	; 2
    1304:	0e 94 a4 08 	call	0x1148	; 0x1148 <death_bitblit_ram>
}
    1308:	cf 59       	subi	r28, 0x9F	; 159
    130a:	dd 4f       	sbci	r29, 0xFD	; 253
    130c:	e2 e1       	ldi	r30, 0x12	; 18
    130e:	0c 94 6a 3a 	jmp	0x74d4	; 0x74d4 <__epilogue_restores__>

00001312 <next_border>:
  }
}

static uint8_t border_x=0, border_y=0, border_state=0,border_on=0;
void next_border(void)
{
    1312:	0f 93       	push	r16
  if(!border_on)
    1314:	80 91 35 02 	lds	r24, 0x0235
    1318:	88 23       	and	r24, r24
    131a:	09 f4       	brne	.+2      	; 0x131e <next_border+0xc>
    131c:	55 c0       	rjmp	.+170    	; 0x13c8 <next_border+0xb6>
  	  return;
  glcdFillRectangle(border_x, border_y, 2, 2, (border_state<2));
    131e:	00 e0       	ldi	r16, 0x00	; 0
    1320:	80 91 38 02 	lds	r24, 0x0238
    1324:	82 30       	cpi	r24, 0x02	; 2
    1326:	08 f4       	brcc	.+2      	; 0x132a <next_border+0x18>
    1328:	01 e0       	ldi	r16, 0x01	; 1
    132a:	80 91 36 02 	lds	r24, 0x0236
    132e:	60 91 37 02 	lds	r22, 0x0237
    1332:	42 e0       	ldi	r20, 0x02	; 2
    1334:	22 e0       	ldi	r18, 0x02	; 2
    1336:	0e 94 05 29 	call	0x520a	; 0x520a <glcdFillRectangle>
  if(++border_state >= 4) border_state = 0;
    133a:	80 91 38 02 	lds	r24, 0x0238
    133e:	8f 5f       	subi	r24, 0xFF	; 255
    1340:	80 93 38 02 	sts	0x0238, r24
    1344:	84 30       	cpi	r24, 0x04	; 4
    1346:	10 f0       	brcs	.+4      	; 0x134c <next_border+0x3a>
    1348:	10 92 38 02 	sts	0x0238, r1
  if((border_x == 0) && (border_y == 0))
    134c:	90 91 36 02 	lds	r25, 0x0236
    1350:	99 23       	and	r25, r25
    1352:	c9 f4       	brne	.+50     	; 0x1386 <next_border+0x74>
    1354:	80 91 37 02 	lds	r24, 0x0237
    1358:	88 23       	and	r24, r24
    135a:	59 f4       	brne	.+22     	; 0x1372 <next_border+0x60>
  {
    border_state += 2;
    135c:	80 91 38 02 	lds	r24, 0x0238
    1360:	8e 5f       	subi	r24, 0xFE	; 254
    1362:	80 93 38 02 	sts	0x0238, r24
    if(border_state >= 4) border_state = 0;
    1366:	84 30       	cpi	r24, 0x04	; 4
    1368:	10 f0       	brcs	.+4      	; 0x136e <next_border+0x5c>
    136a:	10 92 38 02 	sts	0x0238, r1
    border_y+=2;
    136e:	82 e0       	ldi	r24, 0x02	; 2
    1370:	03 c0       	rjmp	.+6      	; 0x1378 <next_border+0x66>
  }
  else if ((border_x == 0) && (border_y < 62))
    1372:	8e 33       	cpi	r24, 0x3E	; 62
    1374:	20 f4       	brcc	.+8      	; 0x137e <next_border+0x6c>
    border_y+=2;
    1376:	8e 5f       	subi	r24, 0xFE	; 254
    1378:	80 93 37 02 	sts	0x0237, r24
    137c:	25 c0       	rjmp	.+74     	; 0x13c8 <next_border+0xb6>
  else if ((border_x == 0) && (border_y == 62))
    137e:	8e 33       	cpi	r24, 0x3E	; 62
    1380:	21 f4       	brne	.+8      	; 0x138a <next_border+0x78>
    border_x+=2;
    1382:	82 e0       	ldi	r24, 0x02	; 2
    1384:	15 c0       	rjmp	.+42     	; 0x13b0 <next_border+0x9e>
  else if ((border_x < 126) && (border_y == 62))
    1386:	9e 37       	cpi	r25, 0x7E	; 126
    1388:	30 f4       	brcc	.+12     	; 0x1396 <next_border+0x84>
    138a:	80 91 37 02 	lds	r24, 0x0237
    138e:	8e 33       	cpi	r24, 0x3E	; 62
    1390:	11 f4       	brne	.+4      	; 0x1396 <next_border+0x84>
    border_x+=2;
    1392:	9e 5f       	subi	r25, 0xFE	; 254
    1394:	17 c0       	rjmp	.+46     	; 0x13c4 <next_border+0xb2>
  else if ((border_x == 126) && (border_y == 62))
    1396:	9e 37       	cpi	r25, 0x7E	; 126
    1398:	71 f4       	brne	.+28     	; 0x13b6 <next_border+0xa4>
    139a:	80 91 37 02 	lds	r24, 0x0237
    139e:	8e 33       	cpi	r24, 0x3E	; 62
    13a0:	11 f4       	brne	.+4      	; 0x13a6 <next_border+0x94>
    border_y-=2;
    13a2:	8c e3       	ldi	r24, 0x3C	; 60
    13a4:	e9 cf       	rjmp	.-46     	; 0x1378 <next_border+0x66>
  else if ((border_x == 126) && (border_y > 0))
    13a6:	88 23       	and	r24, r24
    13a8:	11 f0       	breq	.+4      	; 0x13ae <next_border+0x9c>
    border_y-=2;
    13aa:	82 50       	subi	r24, 0x02	; 2
    13ac:	e5 cf       	rjmp	.-54     	; 0x1378 <next_border+0x66>
  else if ((border_x == 126) && (border_y == 0))
    border_x-=2;
    13ae:	8c e7       	ldi	r24, 0x7C	; 124
    13b0:	80 93 36 02 	sts	0x0236, r24
    13b4:	09 c0       	rjmp	.+18     	; 0x13c8 <next_border+0xb6>
  else if ((border_x > 0) && (border_y == 0))
    13b6:	99 23       	and	r25, r25
    13b8:	39 f0       	breq	.+14     	; 0x13c8 <next_border+0xb6>
    13ba:	80 91 37 02 	lds	r24, 0x0237
    13be:	88 23       	and	r24, r24
    13c0:	19 f4       	brne	.+6      	; 0x13c8 <next_border+0xb6>
    border_x-=2;
    13c2:	92 50       	subi	r25, 0x02	; 2
    13c4:	90 93 36 02 	sts	0x0236, r25
}
    13c8:	0f 91       	pop	r16
    13ca:	08 95       	ret

000013cc <render_image>:
void death_blitsegs_rom(int16_t x_origin, uint8_t y_origin, PGM_P bitmap_p, uint8_t width, uint8_t height, uint8_t inverted);
void drawdisplay_death(uint8_t inverted);


void render_image (uint8_t image, int16_t x, uint8_t inverted)
{
    13cc:	ef 92       	push	r14
    13ce:	0f 93       	push	r16
    13d0:	1f 93       	push	r17
    13d2:	cf 93       	push	r28
    13d4:	df 93       	push	r29
    13d6:	eb 01       	movw	r28, r22
    13d8:	14 2f       	mov	r17, r20
  switch(image)
    13da:	82 30       	cpi	r24, 0x02	; 2
    13dc:	09 f1       	breq	.+66     	; 0x1420 <render_image+0x54>
    13de:	83 30       	cpi	r24, 0x03	; 3
    13e0:	59 f1       	breq	.+86     	; 0x1438 <render_image+0x6c>
    13e2:	81 30       	cpi	r24, 0x01	; 1
    13e4:	69 f0       	breq	.+26     	; 0x1400 <render_image+0x34>
  {
    default:
    case SKULL:
      if((x > -76) && (x < 128))
    13e6:	cb 01       	movw	r24, r22
    13e8:	85 5b       	subi	r24, 0xB5	; 181
    13ea:	9f 4f       	sbci	r25, 0xFF	; 255
    13ec:	8b 3c       	cpi	r24, 0xCB	; 203
    13ee:	91 05       	cpc	r25, r1
    13f0:	08 f0       	brcs	.+2      	; 0x13f4 <render_image+0x28>
    13f2:	a5 c0       	rjmp	.+330    	; 0x153e <render_image+0x172>
        death_blitsegs_rom(x+0,0,skull0_p, 76, 64, inverted);
    13f4:	cb 01       	movw	r24, r22
    13f6:	60 e0       	ldi	r22, 0x00	; 0
    13f8:	42 ee       	ldi	r20, 0xE2	; 226
    13fa:	54 e0       	ldi	r21, 0x04	; 4
    13fc:	2c e4       	ldi	r18, 0x4C	; 76
    13fe:	0b c0       	rjmp	.+22     	; 0x1416 <render_image+0x4a>
      break;
    case REAPER:
      if((x > -42) && (x < 128))
    1400:	cb 01       	movw	r24, r22
    1402:	89 96       	adiw	r24, 0x29	; 41
    1404:	89 3a       	cpi	r24, 0xA9	; 169
    1406:	91 05       	cpc	r25, r1
    1408:	08 f0       	brcs	.+2      	; 0x140c <render_image+0x40>
    140a:	99 c0       	rjmp	.+306    	; 0x153e <render_image+0x172>
        death_blitsegs_rom(x+0,0,reaper0_p, 42, 64, inverted);
    140c:	cb 01       	movw	r24, r22
    140e:	60 e0       	ldi	r22, 0x00	; 0
    1410:	44 e4       	ldi	r20, 0x44	; 68
    1412:	56 e0       	ldi	r21, 0x06	; 6
    1414:	2a e2       	ldi	r18, 0x2A	; 42
    1416:	00 e4       	ldi	r16, 0x40	; 64
    1418:	e1 2e       	mov	r14, r17
    141a:	0e 94 fa 08 	call	0x11f4	; 0x11f4 <death_blitsegs_rom>
    141e:	8f c0       	rjmp	.+286    	; 0x153e <render_image+0x172>
      break;
    case RIP:
      if((x > -56) && (x < 128))
    1420:	cb 01       	movw	r24, r22
    1422:	c7 96       	adiw	r24, 0x37	; 55
    1424:	87 3b       	cpi	r24, 0xB7	; 183
    1426:	91 05       	cpc	r25, r1
    1428:	08 f0       	brcs	.+2      	; 0x142c <render_image+0x60>
    142a:	89 c0       	rjmp	.+274    	; 0x153e <render_image+0x172>
        death_blitsegs_rom(x+0,0,rip0_p, 56, 64, inverted);
    142c:	cb 01       	movw	r24, r22
    142e:	60 e0       	ldi	r22, 0x00	; 0
    1430:	42 e2       	ldi	r20, 0x22	; 34
    1432:	57 e0       	ldi	r21, 0x07	; 7
    1434:	28 e3       	ldi	r18, 0x38	; 56
    1436:	ef cf       	rjmp	.-34     	; 0x1416 <render_image+0x4a>
      break;
    case REAPER_TOW_RIP:
      if((x > -56) && (x <= 36))
    1438:	cb 01       	movw	r24, r22
    143a:	c7 96       	adiw	r24, 0x37	; 55
    143c:	8c 35       	cpi	r24, 0x5C	; 92
    143e:	91 05       	cpc	r25, r1
    1440:	48 f4       	brcc	.+18     	; 0x1454 <render_image+0x88>
        death_blitsegs_rom(x+0,0,rip0_p, 56, 64, inverted);
    1442:	cb 01       	movw	r24, r22
    1444:	60 e0       	ldi	r22, 0x00	; 0
    1446:	42 e2       	ldi	r20, 0x22	; 34
    1448:	57 e0       	ldi	r21, 0x07	; 7
    144a:	28 e3       	ldi	r18, 0x38	; 56
    144c:	00 e4       	ldi	r16, 0x40	; 64
    144e:	e1 2e       	mov	r14, r17
    1450:	0e 94 fa 08 	call	0x11f4	; 0x11f4 <death_blitsegs_rom>
      if((x > -98) && (x < 212))
    1454:	ce 01       	movw	r24, r28
    1456:	8f 59       	subi	r24, 0x9F	; 159
    1458:	9f 4f       	sbci	r25, 0xFF	; 255
    145a:	85 53       	subi	r24, 0x35	; 53
    145c:	91 40       	sbci	r25, 0x01	; 1
    145e:	50 f4       	brcc	.+20     	; 0x1474 <render_image+0xa8>
        death_blitsegs_rom(x+56,0,reaper0_p, 42, 64, inverted);
    1460:	ce 01       	movw	r24, r28
    1462:	c8 96       	adiw	r24, 0x38	; 56
    1464:	60 e0       	ldi	r22, 0x00	; 0
    1466:	44 e4       	ldi	r20, 0x44	; 68
    1468:	56 e0       	ldi	r21, 0x06	; 6
    146a:	2a e2       	ldi	r18, 0x2A	; 42
    146c:	00 e4       	ldi	r16, 0x40	; 64
    146e:	e1 2e       	mov	r14, r17
    1470:	0e 94 fa 08 	call	0x11f4	; 0x11f4 <death_blitsegs_rom>
      if((x >= -30 ) && (x < -24)) {
    1474:	ce 01       	movw	r24, r28
    1476:	4e 96       	adiw	r24, 0x1e	; 30
    1478:	06 97       	sbiw	r24, 0x06	; 6
    147a:	38 f4       	brcc	.+14     	; 0x148a <render_image+0xbe>
        glcdSetAddress(30+x,5);
    147c:	9e 01       	movw	r18, r28
    147e:	22 5e       	subi	r18, 0xE2	; 226
    1480:	82 2f       	mov	r24, r18
    1482:	65 e0       	ldi	r22, 0x05	; 5
    1484:	0e 94 9c 2c 	call	0x5938	; 0x5938 <glcdSetAddress>
    1488:	50 c0       	rjmp	.+160    	; 0x152a <render_image+0x15e>
        glcdWriteChar((death_y%10)+'0', inverted);
      } else if ((x >= -24 ) && (x < -18)) {
    148a:	ce 01       	movw	r24, r28
    148c:	48 96       	adiw	r24, 0x18	; 24
    148e:	06 97       	sbiw	r24, 0x06	; 6
    1490:	38 f4       	brcc	.+14     	; 0x14a0 <render_image+0xd4>
        glcdSetAddress(24+x,5);
    1492:	9e 01       	movw	r18, r28
    1494:	28 5e       	subi	r18, 0xE8	; 232
    1496:	82 2f       	mov	r24, r18
    1498:	65 e0       	ldi	r22, 0x05	; 5
    149a:	0e 94 9c 2c 	call	0x5938	; 0x5938 <glcdSetAddress>
    149e:	38 c0       	rjmp	.+112    	; 0x1510 <render_image+0x144>
        glcdWriteChar(((death_y%100)/10)+'0', inverted);
        glcdWriteChar((death_y%10)+'0', inverted);
      } else if ((x >= -18 ) && (x < -12)) {
    14a0:	ce 01       	movw	r24, r28
    14a2:	42 96       	adiw	r24, 0x12	; 18
    14a4:	06 97       	sbiw	r24, 0x06	; 6
    14a6:	38 f4       	brcc	.+14     	; 0x14b6 <render_image+0xea>
        glcdSetAddress(18+x,5);
    14a8:	9e 01       	movw	r18, r28
    14aa:	2e 5e       	subi	r18, 0xEE	; 238
    14ac:	82 2f       	mov	r24, r18
    14ae:	65 e0       	ldi	r22, 0x05	; 5
    14b0:	0e 94 9c 2c 	call	0x5938	; 0x5938 <glcdSetAddress>
    14b4:	1e c0       	rjmp	.+60     	; 0x14f2 <render_image+0x126>
        glcdWriteChar(((19+(death_y/100))%10)+'0', inverted);
        glcdWriteChar(((death_y%100)/10)+'0', inverted);
        glcdWriteChar((death_y%10)+'0', inverted);
      } else if ((x >= -12 ) && (x < 36)) {
    14b6:	ce 01       	movw	r24, r28
    14b8:	0c 96       	adiw	r24, 0x0c	; 12
    14ba:	c0 97       	sbiw	r24, 0x30	; 48
    14bc:	20 f4       	brcc	.+8      	; 0x14c6 <render_image+0xfa>
        glcdSetAddress(12+x,5);
    14be:	9e 01       	movw	r18, r28
    14c0:	24 5f       	subi	r18, 0xF4	; 244
    14c2:	82 2f       	mov	r24, r18
    14c4:	03 c0       	rjmp	.+6      	; 0x14cc <render_image+0x100>
        glcdWriteChar(((19+(death_y/100))/10)+'0', inverted);
        glcdWriteChar(((19+(death_y/100))%10)+'0', inverted);
        glcdWriteChar(((death_y%100)/10)+'0', inverted);
        glcdWriteChar((death_y%10)+'0', inverted);
      } else if (x >= 36) {
    14c6:	a4 97       	sbiw	r28, 0x24	; 36
    14c8:	d4 f1       	brlt	.+116    	; 0x153e <render_image+0x172>
        glcdSetAddress(48,5);
    14ca:	80 e3       	ldi	r24, 0x30	; 48
    14cc:	65 e0       	ldi	r22, 0x05	; 5
    14ce:	0e 94 9c 2c 	call	0x5938	; 0x5938 <glcdSetAddress>
        glcdWriteChar(((19+(death_y/100))/10)+'0', inverted);
    14d2:	80 91 55 03 	lds	r24, 0x0355
    14d6:	64 e6       	ldi	r22, 0x64	; 100
    14d8:	0e 94 de 39 	call	0x73bc	; 0x73bc <__udivmodqi4>
    14dc:	90 e0       	ldi	r25, 0x00	; 0
    14de:	43 96       	adiw	r24, 0x13	; 19
    14e0:	6a e0       	ldi	r22, 0x0A	; 10
    14e2:	70 e0       	ldi	r23, 0x00	; 0
    14e4:	0e 94 fe 39 	call	0x73fc	; 0x73fc <__divmodhi4>
    14e8:	86 2f       	mov	r24, r22
    14ea:	80 5d       	subi	r24, 0xD0	; 208
    14ec:	61 2f       	mov	r22, r17
    14ee:	0e 94 b3 28 	call	0x5166	; 0x5166 <glcdWriteChar>
        glcdWriteChar(((19+(death_y/100))%10)+'0', inverted);
    14f2:	80 91 55 03 	lds	r24, 0x0355
    14f6:	64 e6       	ldi	r22, 0x64	; 100
    14f8:	0e 94 de 39 	call	0x73bc	; 0x73bc <__udivmodqi4>
    14fc:	90 e0       	ldi	r25, 0x00	; 0
    14fe:	43 96       	adiw	r24, 0x13	; 19
    1500:	6a e0       	ldi	r22, 0x0A	; 10
    1502:	70 e0       	ldi	r23, 0x00	; 0
    1504:	0e 94 fe 39 	call	0x73fc	; 0x73fc <__divmodhi4>
    1508:	80 5d       	subi	r24, 0xD0	; 208
    150a:	61 2f       	mov	r22, r17
    150c:	0e 94 b3 28 	call	0x5166	; 0x5166 <glcdWriteChar>
        glcdWriteChar(((death_y%100)/10)+'0', inverted);
    1510:	80 91 55 03 	lds	r24, 0x0355
    1514:	64 e6       	ldi	r22, 0x64	; 100
    1516:	0e 94 de 39 	call	0x73bc	; 0x73bc <__udivmodqi4>
    151a:	89 2f       	mov	r24, r25
    151c:	6a e0       	ldi	r22, 0x0A	; 10
    151e:	0e 94 de 39 	call	0x73bc	; 0x73bc <__udivmodqi4>
    1522:	80 5d       	subi	r24, 0xD0	; 208
    1524:	61 2f       	mov	r22, r17
    1526:	0e 94 b3 28 	call	0x5166	; 0x5166 <glcdWriteChar>
        glcdWriteChar((death_y%10)+'0', inverted);
    152a:	80 91 55 03 	lds	r24, 0x0355
    152e:	6a e0       	ldi	r22, 0x0A	; 10
    1530:	0e 94 de 39 	call	0x73bc	; 0x73bc <__udivmodqi4>
    1534:	89 2f       	mov	r24, r25
    1536:	80 5d       	subi	r24, 0xD0	; 208
    1538:	61 2f       	mov	r22, r17
    153a:	0e 94 b3 28 	call	0x5166	; 0x5166 <glcdWriteChar>
      }
  }
}
    153e:	df 91       	pop	r29
    1540:	cf 91       	pop	r28
    1542:	1f 91       	pop	r17
    1544:	0f 91       	pop	r16
    1546:	ef 90       	pop	r14
    1548:	08 95       	ret

0000154a <initdisplay_death>:
	    	}
	    }
    }
}

void initdisplay_death(uint8_t inverted) {
    154a:	0f 93       	push	r16
    154c:	1f 93       	push	r17
    154e:	cf 93       	push	r28
    1550:	df 93       	push	r29
    1552:	18 2f       	mov	r17, r24
  int16_t i;
  glcdFillRectangle(0, 0, GLCD_XPIXELS, GLCD_YPIXELS, inverted);
    1554:	80 e0       	ldi	r24, 0x00	; 0
    1556:	60 e0       	ldi	r22, 0x00	; 0
    1558:	40 e8       	ldi	r20, 0x80	; 128
    155a:	20 e4       	ldi	r18, 0x40	; 64
    155c:	01 2f       	mov	r16, r17
    155e:	0e 94 05 29 	call	0x520a	; 0x520a <glcdFillRectangle>
  death_setscore();
    1562:	0e 94 a5 05 	call	0xb4a	; 0xb4a <death_setscore>
  prep_digits();
    1566:	0e 94 8f 07 	call	0xf1e	; 0xf1e <prep_digits>
  // time
  if(score_mode == SCORE_MODE_TIME)
    156a:	80 91 67 02 	lds	r24, 0x0267
    156e:	88 23       	and	r24, r24
    1570:	a1 f4       	brne	.+40     	; 0x159a <initdisplay_death+0x50>
  {
  	  display_digits[2] = 10;
    1572:	8a e0       	ldi	r24, 0x0A	; 10
    1574:	80 93 15 03 	sts	0x0315, r24
  	  if(time_format == TIME_24H)
    1578:	80 91 64 03 	lds	r24, 0x0364
    157c:	81 30       	cpi	r24, 0x01	; 1
    157e:	69 f4       	brne	.+26     	; 0x159a <initdisplay_death+0x50>
  	  {
  	  	  display_digits[6] = time_s / 10;
    1580:	80 91 77 03 	lds	r24, 0x0377
    1584:	6a e0       	ldi	r22, 0x0A	; 10
    1586:	0e 94 de 39 	call	0x73bc	; 0x73bc <__udivmodqi4>
    158a:	80 93 19 03 	sts	0x0319, r24
  	  	  display_digits[7] = time_s % 10;
    158e:	80 91 77 03 	lds	r24, 0x0377
    1592:	0e 94 de 39 	call	0x73bc	; 0x73bc <__udivmodqi4>
    1596:	90 93 1a 03 	sts	0x031A, r25
  	  }
  }
  if(((score_mode != SCORE_MODE_DEATH_TIME) && (score_mode != SCORE_MODE_DEATH_ALARM)) ||
    159a:	80 91 67 02 	lds	r24, 0x0267
    159e:	84 30       	cpi	r24, 0x04	; 4
    15a0:	21 f0       	breq	.+8      	; 0x15aa <initdisplay_death+0x60>
    15a2:	80 91 67 02 	lds	r24, 0x0267
    15a6:	87 30       	cpi	r24, 0x07	; 7
    15a8:	31 f4       	brne	.+12     	; 0x15b6 <initdisplay_death+0x6c>
    15aa:	80 91 1b 03 	lds	r24, 0x031B
    15ae:	90 91 1c 03 	lds	r25, 0x031C
    15b2:	89 2b       	or	r24, r25
    15b4:	21 f0       	breq	.+8      	; 0x15be <initdisplay_death+0x74>
    15b6:	c3 e1       	ldi	r28, 0x13	; 19
    15b8:	d3 e0       	ldi	r29, 0x03	; 3
    15ba:	05 e0       	ldi	r16, 0x05	; 5
    15bc:	07 c0       	rjmp	.+14     	; 0x15cc <initdisplay_death+0x82>
    15be:	80 91 1d 03 	lds	r24, 0x031D
    15c2:	90 91 1e 03 	lds	r25, 0x031E
    15c6:	89 2b       	or	r24, r25
    15c8:	b1 f7       	brne	.-20     	; 0x15b6 <initdisplay_death+0x6c>
    15ca:	0a c0       	rjmp	.+20     	; 0x15e0 <initdisplay_death+0x96>
  ((left_score != 0) || (right_score != 0))) {
    for(i=0;i<8;i++)
    	drawbigdigit(DISPLAY_H10_X_DEATH + (i*15), DISPLAY_TIME_Y_DEATH, display_digits[i], inverted);
    15cc:	80 2f       	mov	r24, r16
    15ce:	6c e0       	ldi	r22, 0x0C	; 12
    15d0:	49 91       	ld	r20, Y+
    15d2:	21 2f       	mov	r18, r17
    15d4:	0e 94 6a 39 	call	0x72d4	; 0x72d4 <drawbigdigit>
    15d8:	01 5f       	subi	r16, 0xF1	; 241
  	  	  display_digits[7] = time_s % 10;
  	  }
  }
  if(((score_mode != SCORE_MODE_DEATH_TIME) && (score_mode != SCORE_MODE_DEATH_ALARM)) ||
  ((left_score != 0) || (right_score != 0))) {
    for(i=0;i<8;i++)
    15da:	0d 37       	cpi	r16, 0x7D	; 125
    15dc:	b9 f7       	brne	.-18     	; 0x15cc <initdisplay_death+0x82>
    15de:	58 c0       	rjmp	.+176    	; 0x1690 <initdisplay_death+0x146>
    	drawbigdigit(DISPLAY_H10_X_DEATH + (i*15), DISPLAY_TIME_Y_DEATH, display_digits[i], inverted);
  }
  else
  {
    
      calc_death_date();
    15e0:	0e 94 58 26 	call	0x4cb0	; 0x4cb0 <calc_death_date>
      if(!reaper_tow_rip)
    15e4:	80 91 43 03 	lds	r24, 0x0343
    15e8:	88 23       	and	r24, r24
    15ea:	91 f4       	brne	.+36     	; 0x1610 <initdisplay_death+0xc6>
      {
        reaper_tow_rip = 1;
    15ec:	81 e0       	ldi	r24, 0x01	; 1
    15ee:	80 93 43 03 	sts	0x0343, r24
    15f2:	c4 e9       	ldi	r28, 0x94	; 148
    15f4:	df ef       	ldi	r29, 0xFF	; 255
        for(i=-108;i<82;i++)
        {
          render_image(REAPER_TOW_RIP,i,inverted);
    15f6:	83 e0       	ldi	r24, 0x03	; 3
    15f8:	be 01       	movw	r22, r28
    15fa:	41 2f       	mov	r20, r17
    15fc:	0e 94 e6 09 	call	0x13cc	; 0x13cc <render_image>
          delay_ms(16);
    1600:	80 e1       	ldi	r24, 0x10	; 16
    1602:	90 e0       	ldi	r25, 0x00	; 0
    1604:	0e 94 0c 35 	call	0x6a18	; 0x6a18 <delay_ms>
    
      calc_death_date();
      if(!reaper_tow_rip)
      {
        reaper_tow_rip = 1;
        for(i=-108;i<82;i++)
    1608:	21 96       	adiw	r28, 0x01	; 1
    160a:	c2 35       	cpi	r28, 0x52	; 82
    160c:	d1 05       	cpc	r29, r1
    160e:	99 f7       	brne	.-26     	; 0x15f6 <initdisplay_death+0xac>
          render_image(REAPER_TOW_RIP,i,inverted);
          delay_ms(16);
        }
      }
      
      render_image(RIP,36,inverted);
    1610:	82 e0       	ldi	r24, 0x02	; 2
    1612:	64 e2       	ldi	r22, 0x24	; 36
    1614:	70 e0       	ldi	r23, 0x00	; 0
    1616:	41 2f       	mov	r20, r17
    1618:	0e 94 e6 09 	call	0x13cc	; 0x13cc <render_image>
      glcdSetAddress(48, 5);
    161c:	80 e3       	ldi	r24, 0x30	; 48
    161e:	65 e0       	ldi	r22, 0x05	; 5
    1620:	0e 94 9c 2c 	call	0x5938	; 0x5938 <glcdSetAddress>
      glcdWriteChar(((19+(death_y/100))/10)+'0', NORMAL);
    1624:	80 91 55 03 	lds	r24, 0x0355
    1628:	64 e6       	ldi	r22, 0x64	; 100
    162a:	0e 94 de 39 	call	0x73bc	; 0x73bc <__udivmodqi4>
    162e:	90 e0       	ldi	r25, 0x00	; 0
    1630:	43 96       	adiw	r24, 0x13	; 19
    1632:	6a e0       	ldi	r22, 0x0A	; 10
    1634:	70 e0       	ldi	r23, 0x00	; 0
    1636:	0e 94 fe 39 	call	0x73fc	; 0x73fc <__divmodhi4>
    163a:	86 2f       	mov	r24, r22
    163c:	80 5d       	subi	r24, 0xD0	; 208
    163e:	60 e0       	ldi	r22, 0x00	; 0
    1640:	0e 94 b3 28 	call	0x5166	; 0x5166 <glcdWriteChar>
      glcdWriteChar(((19+(death_y/100))%10)+'0', NORMAL);
    1644:	80 91 55 03 	lds	r24, 0x0355
    1648:	64 e6       	ldi	r22, 0x64	; 100
    164a:	0e 94 de 39 	call	0x73bc	; 0x73bc <__udivmodqi4>
    164e:	90 e0       	ldi	r25, 0x00	; 0
    1650:	43 96       	adiw	r24, 0x13	; 19
    1652:	6a e0       	ldi	r22, 0x0A	; 10
    1654:	70 e0       	ldi	r23, 0x00	; 0
    1656:	0e 94 fe 39 	call	0x73fc	; 0x73fc <__divmodhi4>
    165a:	80 5d       	subi	r24, 0xD0	; 208
    165c:	60 e0       	ldi	r22, 0x00	; 0
    165e:	0e 94 b3 28 	call	0x5166	; 0x5166 <glcdWriteChar>
      glcdWriteChar(((death_y%100)/10)+'0', NORMAL);
    1662:	80 91 55 03 	lds	r24, 0x0355
    1666:	64 e6       	ldi	r22, 0x64	; 100
    1668:	0e 94 de 39 	call	0x73bc	; 0x73bc <__udivmodqi4>
    166c:	89 2f       	mov	r24, r25
    166e:	6a e0       	ldi	r22, 0x0A	; 10
    1670:	0e 94 de 39 	call	0x73bc	; 0x73bc <__udivmodqi4>
    1674:	80 5d       	subi	r24, 0xD0	; 208
    1676:	60 e0       	ldi	r22, 0x00	; 0
    1678:	0e 94 b3 28 	call	0x5166	; 0x5166 <glcdWriteChar>
      glcdWriteChar((death_y%10)+'0', NORMAL);
    167c:	80 91 55 03 	lds	r24, 0x0355
    1680:	6a e0       	ldi	r22, 0x0A	; 10
    1682:	0e 94 de 39 	call	0x73bc	; 0x73bc <__udivmodqi4>
    1686:	89 2f       	mov	r24, r25
    1688:	80 5d       	subi	r24, 0xD0	; 208
    168a:	60 e0       	ldi	r22, 0x00	; 0
    168c:	0e 94 b3 28 	call	0x5166	; 0x5166 <glcdWriteChar>
  }

  //drawmidline(inverted);
}
    1690:	df 91       	pop	r29
    1692:	cf 91       	pop	r28
    1694:	1f 91       	pop	r17
    1696:	0f 91       	pop	r16
    1698:	08 95       	ret

0000169a <drawdisplay_death>:
    border_x-=2;
  else if ((border_x > 0) && (border_y == 0))
    border_x-=2;
}

void drawdisplay_death(uint8_t inverted) {
    169a:	8f 92       	push	r8
    169c:	9f 92       	push	r9
    169e:	af 92       	push	r10
    16a0:	cf 92       	push	r12
    16a2:	ef 92       	push	r14
    16a4:	ff 92       	push	r15
    16a6:	0f 93       	push	r16
    16a8:	1f 93       	push	r17
    16aa:	df 93       	push	r29
    16ac:	cf 93       	push	r28
    16ae:	0f 92       	push	r0
    16b0:	cd b7       	in	r28, 0x3d	; 61
    16b2:	de b7       	in	r29, 0x3e	; 62
    16b4:	f8 2e       	mov	r15, r24
   // draw time
   volatile uint8_t redraw_digits = 0;
    16b6:	19 82       	std	Y+1, r1	; 0x01
   static volatile uint8_t old_seconds, old_border_tick;
   uint8_t i;
   TIMSK2 = 0;  //Disable Timer 2 interrupt, to prevent a race condition.
    16b8:	10 92 70 00 	sts	0x0070, r1
   if(redraw_time)
    16bc:	80 91 33 02 	lds	r24, 0x0233
    16c0:	88 23       	and	r24, r24
    16c2:	21 f0       	breq	.+8      	; 0x16cc <drawdisplay_death+0x32>
   {
     //if(redraw_time == 2)
     //  initdisplay(inverted);
     //else
       redraw_digits = 1;
    16c4:	81 e0       	ldi	r24, 0x01	; 1
    16c6:	89 83       	std	Y+1, r24	; 0x01
     redraw_time = 0;
    16c8:	10 92 33 02 	sts	0x0233, r1
   }
   TIMSK2 = _BV(TOIE2); //Race issue gone, renable.
    16cc:	81 e0       	ldi	r24, 0x01	; 1
    16ce:	80 93 70 00 	sts	0x0070, r24
    
    // redraw 10's of hours
  if(!hour_changed)
    16d2:	80 91 64 02 	lds	r24, 0x0264
    16d6:	88 23       	and	r24, r24
    16d8:	11 f4       	brne	.+4      	; 0x16de <drawdisplay_death+0x44>
  	prep_digits();
    16da:	0e 94 8f 07 	call	0xf1e	; 0xf1e <prep_digits>
  if(((score_mode != SCORE_MODE_DEATH_TIME) && (score_mode != SCORE_MODE_DEATH_ALARM)) ||
    16de:	80 91 67 02 	lds	r24, 0x0267
    16e2:	84 30       	cpi	r24, 0x04	; 4
    16e4:	21 f0       	breq	.+8      	; 0x16ee <drawdisplay_death+0x54>
    16e6:	80 91 67 02 	lds	r24, 0x0267
    16ea:	87 30       	cpi	r24, 0x07	; 7
    16ec:	71 f4       	brne	.+28     	; 0x170a <drawdisplay_death+0x70>
    16ee:	80 91 59 02 	lds	r24, 0x0259
    16f2:	90 91 5a 02 	lds	r25, 0x025A
    16f6:	a0 91 5b 02 	lds	r26, 0x025B
    16fa:	b0 91 5c 02 	lds	r27, 0x025C
    16fe:	18 16       	cp	r1, r24
    1700:	19 06       	cpc	r1, r25
    1702:	1a 06       	cpc	r1, r26
    1704:	1b 06       	cpc	r1, r27
    1706:	0c f0       	brlt	.+2      	; 0x170a <drawdisplay_death+0x70>
    1708:	5f c0       	rjmp	.+190    	; 0x17c8 <drawdisplay_death+0x12e>
  	  (minutes_left > 0)) {
    if(reaper_x == 256) {
    170a:	80 91 0d 03 	lds	r24, 0x030D
    170e:	90 91 0e 03 	lds	r25, 0x030E
    1712:	80 50       	subi	r24, 0x00	; 0
    1714:	91 40       	sbci	r25, 0x01	; 1
    1716:	49 f4       	brne	.+18     	; 0x172a <drawdisplay_death+0x90>
      reaper_x--;
    1718:	8f ef       	ldi	r24, 0xFF	; 255
    171a:	90 e0       	ldi	r25, 0x00	; 0
    171c:	90 93 0e 03 	sts	0x030E, r25
    1720:	80 93 0d 03 	sts	0x030D, r24
      initdisplay(inverted);
    1724:	8f 2d       	mov	r24, r15
    1726:	0e 94 cc 27 	call	0x4f98	; 0x4f98 <initdisplay>
    172a:	b3 e1       	ldi	r27, 0x13	; 19
    172c:	8b 2e       	mov	r8, r27
    172e:	b3 e0       	ldi	r27, 0x03	; 3
    1730:	9b 2e       	mov	r9, r27
    1732:	15 e0       	ldi	r17, 0x05	; 5
    }
    
    for(i=0;i<8;i++)
    {
    	if (redraw_digits || intersectrect(reaper_x, reaper_y, reaper_w, reaper_h,
    1734:	89 81       	ldd	r24, Y+1	; 0x01
    1736:	88 23       	and	r24, r24
    1738:	a1 f4       	brne	.+40     	; 0x1762 <drawdisplay_death+0xc8>
    173a:	80 91 0d 03 	lds	r24, 0x030D
    173e:	60 e0       	ldi	r22, 0x00	; 0
    1740:	48 e3       	ldi	r20, 0x38	; 56
    1742:	20 e4       	ldi	r18, 0x40	; 64
    1744:	01 2f       	mov	r16, r17
    1746:	ac e0       	ldi	r26, 0x0C	; 12
    1748:	ea 2e       	mov	r14, r26
    174a:	fa e0       	ldi	r31, 0x0A	; 10
    174c:	cf 2e       	mov	r12, r31
    174e:	e0 e1       	ldi	r30, 0x10	; 16
    1750:	ae 2e       	mov	r10, r30
    1752:	0e 94 5f 38 	call	0x70be	; 0x70be <intersectrect>
    1756:	88 23       	and	r24, r24
    1758:	21 f4       	brne	.+8      	; 0x1762 <drawdisplay_death+0xc8>
    175a:	f4 01       	movw	r30, r8
    175c:	80 81       	ld	r24, Z
    175e:	87 ff       	sbrs	r24, 7
    1760:	08 c0       	rjmp	.+16     	; 0x1772 <drawdisplay_death+0xd8>
    	DISPLAY_H10_X_DEATH + (i*15), DISPLAY_TIME_Y_DEATH, DISPLAY_DIGITW, DISPLAY_DIGITH) ||
    	(display_digits[i] & 0x80)) {
    		drawbigdigit(DISPLAY_H10_X_DEATH + (i*15), DISPLAY_TIME_Y_DEATH, display_digits[i] & 0x7F, inverted);
    1762:	f4 01       	movw	r30, r8
    1764:	40 81       	ld	r20, Z
    1766:	4f 77       	andi	r20, 0x7F	; 127
    1768:	81 2f       	mov	r24, r17
    176a:	6c e0       	ldi	r22, 0x0C	; 12
    176c:	2f 2d       	mov	r18, r15
    176e:	0e 94 6a 39 	call	0x72d4	; 0x72d4 <drawbigdigit>
    1772:	08 94       	sec
    1774:	81 1c       	adc	r8, r1
    1776:	91 1c       	adc	r9, r1
    1778:	11 5f       	subi	r17, 0xF1	; 241
    if(reaper_x == 256) {
      reaper_x--;
      initdisplay(inverted);
    }
    
    for(i=0;i<8;i++)
    177a:	1d 37       	cpi	r17, 0x7D	; 125
    177c:	d9 f6       	brne	.-74     	; 0x1734 <drawdisplay_death+0x9a>
    	(display_digits[i] & 0x80)) {
    		drawbigdigit(DISPLAY_H10_X_DEATH + (i*15), DISPLAY_TIME_Y_DEATH, display_digits[i] & 0x7F, inverted);
    	}
    }
    
    if(score_mode >= SCORE_MODE_DEATH_TIME)
    177e:	80 91 67 02 	lds	r24, 0x0267
    1782:	84 30       	cpi	r24, 0x04	; 4
    1784:	60 f0       	brcs	.+24     	; 0x179e <drawdisplay_death+0x104>
    {
      border_on = 1;
    1786:	81 e0       	ldi	r24, 0x01	; 1
    1788:	80 93 35 02 	sts	0x0235, r24
      if(border_tick != old_border_tick)
    178c:	90 91 32 02 	lds	r25, 0x0232
    1790:	80 91 39 02 	lds	r24, 0x0239
    1794:	98 17       	cp	r25, r24
    1796:	91 f1       	breq	.+100    	; 0x17fc <drawdisplay_death+0x162>
      {
        next_border();
    1798:	0e 94 89 09 	call	0x1312	; 0x1312 <next_border>
    179c:	2f c0       	rjmp	.+94     	; 0x17fc <drawdisplay_death+0x162>
      }
    }
    else
    {
    	uint8_t current_x = border_x, current_y = border_y;
    179e:	00 91 36 02 	lds	r16, 0x0236
    17a2:	10 91 37 02 	lds	r17, 0x0237
    	do {
	    	border_state = 3;
    17a6:	73 e0       	ldi	r23, 0x03	; 3
    17a8:	e7 2e       	mov	r14, r23
    17aa:	e0 92 38 02 	sts	0x0238, r14
	    	next_border();
    17ae:	0e 94 89 09 	call	0x1312	; 0x1312 <next_border>
    	} while((border_x != current_x) || (border_y != current_y));
    17b2:	80 91 36 02 	lds	r24, 0x0236
    17b6:	80 17       	cp	r24, r16
    17b8:	c1 f7       	brne	.-16     	; 0x17aa <drawdisplay_death+0x110>
    17ba:	80 91 37 02 	lds	r24, 0x0237
    17be:	81 17       	cp	r24, r17
    17c0:	a1 f7       	brne	.-24     	; 0x17aa <drawdisplay_death+0x110>
    	border_on = 0;
    17c2:	10 92 35 02 	sts	0x0235, r1
    17c6:	1a c0       	rjmp	.+52     	; 0x17fc <drawdisplay_death+0x162>
    }
  }
  else
  {
    if(hour_changed)
    17c8:	80 91 64 02 	lds	r24, 0x0264
    17cc:	88 23       	and	r24, r24
    17ce:	11 f0       	breq	.+4      	; 0x17d4 <drawdisplay_death+0x13a>
      hour_changed = 0;
    17d0:	10 92 64 02 	sts	0x0264, r1
    if (redraw_digits || (reaper_x < 256)) {
    17d4:	89 81       	ldd	r24, Y+1	; 0x01
    17d6:	88 23       	and	r24, r24
    17d8:	41 f4       	brne	.+16     	; 0x17ea <drawdisplay_death+0x150>
    17da:	80 91 0d 03 	lds	r24, 0x030D
    17de:	90 91 0e 03 	lds	r25, 0x030E
    17e2:	8f 3f       	cpi	r24, 0xFF	; 255
    17e4:	91 05       	cpc	r25, r1
    17e6:	09 f0       	breq	.+2      	; 0x17ea <drawdisplay_death+0x150>
    17e8:	4c f4       	brge	.+18     	; 0x17fc <drawdisplay_death+0x162>
      reaper_x = 256; //Stop drawing the reaper, already dead. :)
    17ea:	80 e0       	ldi	r24, 0x00	; 0
    17ec:	91 e0       	ldi	r25, 0x01	; 1
    17ee:	90 93 0e 03 	sts	0x030E, r25
    17f2:	80 93 0d 03 	sts	0x030D, r24
      initdisplay_death(inverted);
    17f6:	8f 2d       	mov	r24, r15
    17f8:	0e 94 a5 0a 	call	0x154a	; 0x154a <initdisplay_death>
    }
  }
  old_border_tick = border_tick;
    17fc:	80 91 32 02 	lds	r24, 0x0232
    1800:	80 93 39 02 	sts	0x0239, r24
  old_seconds = time_s;
    1804:	80 91 77 03 	lds	r24, 0x0377
    1808:	80 93 3a 02 	sts	0x023A, r24
  redraw_digits = 0;
    180c:	19 82       	std	Y+1, r1	; 0x01
}
    180e:	0f 90       	pop	r0
    1810:	cf 91       	pop	r28
    1812:	df 91       	pop	r29
    1814:	1f 91       	pop	r17
    1816:	0f 91       	pop	r16
    1818:	ff 90       	pop	r15
    181a:	ef 90       	pop	r14
    181c:	cf 90       	pop	r12
    181e:	af 90       	pop	r10
    1820:	9f 90       	pop	r9
    1822:	8f 90       	pop	r8
    1824:	08 95       	ret

00001826 <step_death>:
#define reaper_y 0
#define reaper_w 56
#define reaper_h 64
void step_death(void) {
  uint8_t i;
  death_setscore();
    1826:	0e 94 a5 05 	call	0xb4a	; 0xb4a <death_setscore>
  if((score_mode == SCORE_MODE_TIME) || (score_mode == SCORE_MODE_DEATH_TIME))
    182a:	80 91 67 02 	lds	r24, 0x0267
    182e:	88 23       	and	r24, r24
    1830:	29 f0       	breq	.+10     	; 0x183c <step_death+0x16>
    1832:	80 91 67 02 	lds	r24, 0x0267
    1836:	84 30       	cpi	r24, 0x04	; 4
    1838:	09 f0       	breq	.+2      	; 0x183c <step_death+0x16>
    183a:	e1 c0       	rjmp	.+450    	; 0x19fe <step_death+0x1d8>
  {
    if(minute_changed) 
    183c:	80 91 63 02 	lds	r24, 0x0263
    1840:	88 23       	and	r24, r24
    1842:	41 f1       	breq	.+80     	; 0x1894 <step_death+0x6e>
    {
      redraw_time = 1;
    1844:	81 e0       	ldi	r24, 0x01	; 1
    1846:	80 93 33 02 	sts	0x0233, r24
      minutes_left -= ((dc_mode == DC_mode_sadistic)?4:1);
    184a:	20 91 59 02 	lds	r18, 0x0259
    184e:	30 91 5a 02 	lds	r19, 0x025A
    1852:	40 91 5b 02 	lds	r20, 0x025B
    1856:	50 91 5c 02 	lds	r21, 0x025C
    185a:	80 91 5b 03 	lds	r24, 0x035B
    185e:	83 30       	cpi	r24, 0x03	; 3
    1860:	29 f0       	breq	.+10     	; 0x186c <step_death+0x46>
    1862:	81 e0       	ldi	r24, 0x01	; 1
    1864:	90 e0       	ldi	r25, 0x00	; 0
    1866:	a0 e0       	ldi	r26, 0x00	; 0
    1868:	b0 e0       	ldi	r27, 0x00	; 0
    186a:	04 c0       	rjmp	.+8      	; 0x1874 <step_death+0x4e>
    186c:	84 e0       	ldi	r24, 0x04	; 4
    186e:	90 e0       	ldi	r25, 0x00	; 0
    1870:	a0 e0       	ldi	r26, 0x00	; 0
    1872:	b0 e0       	ldi	r27, 0x00	; 0
    1874:	28 1b       	sub	r18, r24
    1876:	39 0b       	sbc	r19, r25
    1878:	4a 0b       	sbc	r20, r26
    187a:	5b 0b       	sbc	r21, r27
    187c:	20 93 59 02 	sts	0x0259, r18
    1880:	30 93 5a 02 	sts	0x025A, r19
    1884:	40 93 5b 02 	sts	0x025B, r20
    1888:	50 93 5c 02 	sts	0x025C, r21
      minute_changed = 0;
    188c:	10 92 63 02 	sts	0x0263, r1
      death_setscore();
    1890:	0e 94 a5 05 	call	0xb4a	; 0xb4a <death_setscore>
    }
    if(hour_changed) 
    1894:	80 91 64 02 	lds	r24, 0x0264
    1898:	88 23       	and	r24, r24
    189a:	09 f4       	brne	.+2      	; 0x189e <step_death+0x78>
    189c:	b0 c0       	rjmp	.+352    	; 0x19fe <step_death+0x1d8>
    {
      minutes_left -= ((dc_mode == DC_mode_sadistic)?4:1);
    189e:	20 91 59 02 	lds	r18, 0x0259
    18a2:	30 91 5a 02 	lds	r19, 0x025A
    18a6:	40 91 5b 02 	lds	r20, 0x025B
    18aa:	50 91 5c 02 	lds	r21, 0x025C
    18ae:	80 91 5b 03 	lds	r24, 0x035B
    18b2:	83 30       	cpi	r24, 0x03	; 3
    18b4:	29 f0       	breq	.+10     	; 0x18c0 <step_death+0x9a>
    18b6:	81 e0       	ldi	r24, 0x01	; 1
    18b8:	90 e0       	ldi	r25, 0x00	; 0
    18ba:	a0 e0       	ldi	r26, 0x00	; 0
    18bc:	b0 e0       	ldi	r27, 0x00	; 0
    18be:	04 c0       	rjmp	.+8      	; 0x18c8 <step_death+0xa2>
    18c0:	84 e0       	ldi	r24, 0x04	; 4
    18c2:	90 e0       	ldi	r25, 0x00	; 0
    18c4:	a0 e0       	ldi	r26, 0x00	; 0
    18c6:	b0 e0       	ldi	r27, 0x00	; 0
    18c8:	28 1b       	sub	r18, r24
    18ca:	39 0b       	sbc	r19, r25
    18cc:	4a 0b       	sbc	r20, r26
    18ce:	5b 0b       	sbc	r21, r27
    18d0:	20 93 59 02 	sts	0x0259, r18
    18d4:	30 93 5a 02 	sts	0x025A, r19
    18d8:	40 93 5b 02 	sts	0x025B, r20
    18dc:	50 93 5c 02 	sts	0x025C, r21
      initdisplay_death(1);
    18e0:	81 e0       	ldi	r24, 0x01	; 1
    18e2:	0e 94 a5 0a 	call	0x154a	; 0x154a <initdisplay_death>
      for(reaper_x = -52;reaper_x<138;reaper_x++)
    18e6:	8c ec       	ldi	r24, 0xCC	; 204
    18e8:	9f ef       	ldi	r25, 0xFF	; 255
    18ea:	78 c0       	rjmp	.+240    	; 0x19dc <step_death+0x1b6>
      {
        //redraw_time = 1;
        //if((reaper_x%8)==0)
        //  draw(1);
        render_image (REAPER,reaper_x+1,1);
    18ec:	6f 5f       	subi	r22, 0xFF	; 255
    18ee:	7f 4f       	sbci	r23, 0xFF	; 255
    18f0:	81 e0       	ldi	r24, 0x01	; 1
    18f2:	41 e0       	ldi	r20, 0x01	; 1
    18f4:	0e 94 e6 09 	call	0x13cc	; 0x13cc <render_image>
        delay_ms(16);
    18f8:	80 e1       	ldi	r24, 0x10	; 16
    18fa:	90 e0       	ldi	r25, 0x00	; 0
    18fc:	0e 94 0c 35 	call	0x6a18	; 0x6a18 <delay_ms>
        if(((reaper_x%15)==6)&&(reaper_x>6))
    1900:	20 91 0d 03 	lds	r18, 0x030D
    1904:	30 91 0e 03 	lds	r19, 0x030E
    1908:	c9 01       	movw	r24, r18
    190a:	6f e0       	ldi	r22, 0x0F	; 15
    190c:	70 e0       	ldi	r23, 0x00	; 0
    190e:	0e 94 fe 39 	call	0x73fc	; 0x73fc <__divmodhi4>
    1912:	06 97       	sbiw	r24, 0x06	; 6
    1914:	31 f5       	brne	.+76     	; 0x1962 <step_death+0x13c>
    1916:	27 30       	cpi	r18, 0x07	; 7
    1918:	31 05       	cpc	r19, r1
    191a:	1c f1       	brlt	.+70     	; 0x1962 <step_death+0x13c>
        {
        	prep_digits();
    191c:	0e 94 8f 07 	call	0xf1e	; 0xf1e <prep_digits>
        	for(i=0;(i<4)&&(((reaper_x/15)+i)<8);i++)
    1920:	80 91 0d 03 	lds	r24, 0x030D
    1924:	90 91 0e 03 	lds	r25, 0x030E
    1928:	6f e0       	ldi	r22, 0x0F	; 15
    192a:	70 e0       	ldi	r23, 0x00	; 0
    192c:	0e 94 fe 39 	call	0x73fc	; 0x73fc <__divmodhi4>
    1930:	9b 01       	movw	r18, r22
    1932:	fb 01       	movw	r30, r22
    1934:	ed 5e       	subi	r30, 0xED	; 237
    1936:	fc 4f       	sbci	r31, 0xFC	; 252
    1938:	40 e0       	ldi	r20, 0x00	; 0
    193a:	50 e0       	ldi	r21, 0x00	; 0
    193c:	08 c0       	rjmp	.+16     	; 0x194e <step_death+0x128>
        	{
        		display_digits[(reaper_x/15)+i] |= 0x40;
    193e:	80 81       	ld	r24, Z
    1940:	80 64       	ori	r24, 0x40	; 64
    1942:	81 93       	st	Z+, r24
    1944:	4f 5f       	subi	r20, 0xFF	; 255
    1946:	5f 4f       	sbci	r21, 0xFF	; 255
        render_image (REAPER,reaper_x+1,1);
        delay_ms(16);
        if(((reaper_x%15)==6)&&(reaper_x>6))
        {
        	prep_digits();
        	for(i=0;(i<4)&&(((reaper_x/15)+i)<8);i++)
    1948:	44 30       	cpi	r20, 0x04	; 4
    194a:	51 05       	cpc	r21, r1
    194c:	29 f0       	breq	.+10     	; 0x1958 <step_death+0x132>
    194e:	ca 01       	movw	r24, r20
    1950:	82 0f       	add	r24, r18
    1952:	93 1f       	adc	r25, r19
    1954:	08 97       	sbiw	r24, 0x08	; 8
    1956:	9c f3       	brlt	.-26     	; 0x193e <step_death+0x118>
        	{
        		display_digits[(reaper_x/15)+i] |= 0x40;
        	}
            redraw_time = 1;
    1958:	81 e0       	ldi	r24, 0x01	; 1
    195a:	80 93 33 02 	sts	0x0233, r24
            drawdisplay_death(1);
    195e:	0e 94 4d 0b 	call	0x169a	; 0x169a <drawdisplay_death>
        }
        if(reaper_x==43) 
    1962:	80 91 0d 03 	lds	r24, 0x030D
    1966:	90 91 0e 03 	lds	r25, 0x030E
    196a:	8b 97       	sbiw	r24, 0x2b	; 43
    196c:	91 f5       	brne	.+100    	; 0x19d2 <step_death+0x1ac>
        {
          //render_image (REAPER,reaper_x+1,1);
          delay_ms(500);
    196e:	84 ef       	ldi	r24, 0xF4	; 244
    1970:	91 e0       	ldi	r25, 0x01	; 1
    1972:	0e 94 0c 35 	call	0x6a18	; 0x6a18 <delay_ms>
          hour_changed = 0;
    1976:	10 92 64 02 	sts	0x0264, r1
          death_setscore();
    197a:	0e 94 a5 05 	call	0xb4a	; 0xb4a <death_setscore>
          hour_changed = 1;
    197e:	81 e0       	ldi	r24, 0x01	; 1
    1980:	80 93 64 02 	sts	0x0264, r24
          prep_digits();
    1984:	0e 94 8f 07 	call	0xf1e	; 0xf1e <prep_digits>
          for(i=0;(i<4)&&(((reaper_x/15)+i)<8);i++)
    1988:	80 91 0d 03 	lds	r24, 0x030D
    198c:	90 91 0e 03 	lds	r25, 0x030E
    1990:	6f e0       	ldi	r22, 0x0F	; 15
    1992:	70 e0       	ldi	r23, 0x00	; 0
    1994:	0e 94 fe 39 	call	0x73fc	; 0x73fc <__divmodhi4>
    1998:	9b 01       	movw	r18, r22
    199a:	fb 01       	movw	r30, r22
    199c:	ed 5e       	subi	r30, 0xED	; 237
    199e:	fc 4f       	sbci	r31, 0xFC	; 252
    19a0:	40 e0       	ldi	r20, 0x00	; 0
    19a2:	50 e0       	ldi	r21, 0x00	; 0
    19a4:	08 c0       	rjmp	.+16     	; 0x19b6 <step_death+0x190>
          	display_digits[(reaper_x/15)+i] |= 0x40;
    19a6:	80 81       	ld	r24, Z
    19a8:	80 64       	ori	r24, 0x40	; 64
    19aa:	81 93       	st	Z+, r24
    19ac:	4f 5f       	subi	r20, 0xFF	; 255
    19ae:	5f 4f       	sbci	r21, 0xFF	; 255
          delay_ms(500);
          hour_changed = 0;
          death_setscore();
          hour_changed = 1;
          prep_digits();
          for(i=0;(i<4)&&(((reaper_x/15)+i)<8);i++)
    19b0:	44 30       	cpi	r20, 0x04	; 4
    19b2:	51 05       	cpc	r21, r1
    19b4:	29 f0       	breq	.+10     	; 0x19c0 <step_death+0x19a>
    19b6:	ca 01       	movw	r24, r20
    19b8:	82 0f       	add	r24, r18
    19ba:	93 1f       	adc	r25, r19
    19bc:	08 97       	sbiw	r24, 0x08	; 8
    19be:	9c f3       	brlt	.-26     	; 0x19a6 <step_death+0x180>
          	display_digits[(reaper_x/15)+i] |= 0x40;
          redraw_time = 1;
    19c0:	81 e0       	ldi	r24, 0x01	; 1
    19c2:	80 93 33 02 	sts	0x0233, r24
          drawdisplay_death(1);
    19c6:	0e 94 4d 0b 	call	0x169a	; 0x169a <drawdisplay_death>
          delay_ms(500);
    19ca:	84 ef       	ldi	r24, 0xF4	; 244
    19cc:	91 e0       	ldi	r25, 0x01	; 1
    19ce:	0e 94 0c 35 	call	0x6a18	; 0x6a18 <delay_ms>
    }
    if(hour_changed) 
    {
      minutes_left -= ((dc_mode == DC_mode_sadistic)?4:1);
      initdisplay_death(1);
      for(reaper_x = -52;reaper_x<138;reaper_x++)
    19d2:	80 91 0d 03 	lds	r24, 0x030D
    19d6:	90 91 0e 03 	lds	r25, 0x030E
    19da:	01 96       	adiw	r24, 0x01	; 1
    19dc:	90 93 0e 03 	sts	0x030E, r25
    19e0:	80 93 0d 03 	sts	0x030D, r24
    19e4:	60 91 0d 03 	lds	r22, 0x030D
    19e8:	70 91 0e 03 	lds	r23, 0x030E
    19ec:	6a 38       	cpi	r22, 0x8A	; 138
    19ee:	71 05       	cpc	r23, r1
    19f0:	0c f4       	brge	.+2      	; 0x19f4 <step_death+0x1ce>
    19f2:	7c cf       	rjmp	.-264    	; 0x18ec <step_death+0xc6>
          redraw_time = 1;
          drawdisplay_death(1);
          delay_ms(500);
        }
      }
      hour_changed = 0;
    19f4:	10 92 64 02 	sts	0x0264, r1
      initdisplay_death(0);
    19f8:	80 e0       	ldi	r24, 0x00	; 0
    19fa:	0e 94 a5 0a 	call	0x154a	; 0x154a <initdisplay_death>
    19fe:	08 95       	ret

00001a00 <initanim_death>:
      }
      break;
  }
}

void initanim_death(void) {
    1a00:	0f 93       	push	r16
  static int16_t scroller = -84;
  glcdFillRectangle(0, 0, GLCD_XPIXELS, GLCD_YPIXELS, scroller==-84);
    1a02:	00 e0       	ldi	r16, 0x00	; 0
    1a04:	80 91 00 01 	lds	r24, 0x0100
    1a08:	90 91 01 01 	lds	r25, 0x0101
    1a0c:	8c 5a       	subi	r24, 0xAC	; 172
    1a0e:	9f 4f       	sbci	r25, 0xFF	; 255
    1a10:	09 f4       	brne	.+2      	; 0x1a14 <initanim_death+0x14>
    1a12:	01 e0       	ldi	r16, 0x01	; 1
    1a14:	80 e0       	ldi	r24, 0x00	; 0
    1a16:	60 e0       	ldi	r22, 0x00	; 0
    1a18:	40 e8       	ldi	r20, 0x80	; 128
    1a1a:	20 e4       	ldi	r18, 0x40	; 64
    1a1c:	0e 94 05 29 	call	0x520a	; 0x520a <glcdFillRectangle>
    1a20:	1b c0       	rjmp	.+54     	; 0x1a58 <initanim_death+0x58>
  for(;scroller<138;scroller++)
  {
    render_image (SKULL,scroller,1);
    1a22:	80 e0       	ldi	r24, 0x00	; 0
    1a24:	41 e0       	ldi	r20, 0x01	; 1
    1a26:	0e 94 e6 09 	call	0x13cc	; 0x13cc <render_image>
    delay_ms(16);
    1a2a:	80 e1       	ldi	r24, 0x10	; 16
    1a2c:	90 e0       	ldi	r25, 0x00	; 0
    1a2e:	0e 94 0c 35 	call	0x6a18	; 0x6a18 <delay_ms>
    if(scroller==26)
    1a32:	80 91 00 01 	lds	r24, 0x0100
    1a36:	90 91 01 01 	lds	r25, 0x0101
    1a3a:	4a 97       	sbiw	r24, 0x1a	; 26
    1a3c:	21 f4       	brne	.+8      	; 0x1a46 <initanim_death+0x46>
    	delay_ms(2000);
    1a3e:	80 ed       	ldi	r24, 0xD0	; 208
    1a40:	97 e0       	ldi	r25, 0x07	; 7
    1a42:	0e 94 0c 35 	call	0x6a18	; 0x6a18 <delay_ms>
}

void initanim_death(void) {
  static int16_t scroller = -84;
  glcdFillRectangle(0, 0, GLCD_XPIXELS, GLCD_YPIXELS, scroller==-84);
  for(;scroller<138;scroller++)
    1a46:	80 91 00 01 	lds	r24, 0x0100
    1a4a:	90 91 01 01 	lds	r25, 0x0101
    1a4e:	01 96       	adiw	r24, 0x01	; 1
    1a50:	90 93 01 01 	sts	0x0101, r25
    1a54:	80 93 00 01 	sts	0x0100, r24
    1a58:	60 91 00 01 	lds	r22, 0x0100
    1a5c:	70 91 01 01 	lds	r23, 0x0101
    1a60:	6a 38       	cpi	r22, 0x8A	; 138
    1a62:	71 05       	cpc	r23, r1
    1a64:	f4 f2       	brlt	.-68     	; 0x1a22 <initanim_death+0x22>
    render_image (SKULL,scroller,1);
    delay_ms(16);
    if(scroller==26)
    	delay_ms(2000);
  }
  score_mode = SCORE_MODE_DEATH_TIME;
    1a66:	84 e0       	ldi	r24, 0x04	; 4
    1a68:	80 93 67 02 	sts	0x0267, r24
  minute_changed = hour_changed = 0;
    1a6c:	10 92 64 02 	sts	0x0264, r1
    1a70:	80 91 64 02 	lds	r24, 0x0264
    1a74:	80 93 63 02 	sts	0x0263, r24
  load_etd();
    1a78:	0e 94 d6 26 	call	0x4dac	; 0x4dac <load_etd>
  initdisplay(0);
    1a7c:	80 e0       	ldi	r24, 0x00	; 0
    1a7e:	0e 94 cc 27 	call	0x4f98	; 0x4f98 <initdisplay>
}
    1a82:	0f 91       	pop	r16
    1a84:	08 95       	ret

00001a86 <deathclock_changed>:
  glcdWriteChar(n/100+'0', inverted);
  printnumber(n%100, inverted);
}

void deathclock_changed(void) //Any changes to the death clock neccesitates a recalculation of the death clock.
{
    1a86:	a8 e0       	ldi	r26, 0x08	; 8
    1a88:	b0 e0       	ldi	r27, 0x00	; 0
    1a8a:	e9 e4       	ldi	r30, 0x49	; 73
    1a8c:	fd e0       	ldi	r31, 0x0D	; 13
    1a8e:	0c 94 5d 3a 	jmp	0x74ba	; 0x74ba <__prologue_saves__+0x1e>
	uint8_t ee_set_year = date_y + 100;
    1a92:	60 91 65 03 	lds	r22, 0x0365
	uint8_t max_year_diff[4][2] = {{72,78},{57,63},{82,88},{35,38}};
    1a96:	de 01       	movw	r26, r28
    1a98:	11 96       	adiw	r26, 0x01	; 1
    1a9a:	e2 e0       	ldi	r30, 0x02	; 2
    1a9c:	f1 e0       	ldi	r31, 0x01	; 1
    1a9e:	88 e0       	ldi	r24, 0x08	; 8
    1aa0:	01 90       	ld	r0, Z+
    1aa2:	0d 92       	st	X+, r0
    1aa4:	81 50       	subi	r24, 0x01	; 1
    1aa6:	e1 f7       	brne	.-8      	; 0x1aa0 <deathclock_changed+0x1a>
	
	if(((date_y + 100)-cfg_dob_y)>max_year_diff[cfg_dc_mode][cfg_gender]) ee_set_year = cfg_dob_y + max_year_diff[cfg_dc_mode][cfg_gender];
    1aa8:	20 91 65 03 	lds	r18, 0x0365
    1aac:	80 91 20 03 	lds	r24, 0x0320
    1ab0:	e0 91 21 03 	lds	r30, 0x0321
    1ab4:	90 91 1f 03 	lds	r25, 0x031F
    1ab8:	30 e0       	ldi	r19, 0x00	; 0
    1aba:	2c 59       	subi	r18, 0x9C	; 156
    1abc:	3f 4f       	sbci	r19, 0xFF	; 255
    1abe:	28 1b       	sub	r18, r24
    1ac0:	31 09       	sbc	r19, r1
    1ac2:	f0 e0       	ldi	r31, 0x00	; 0
    1ac4:	ee 0f       	add	r30, r30
    1ac6:	ff 1f       	adc	r31, r31
    1ac8:	e9 0f       	add	r30, r25
    1aca:	f1 1d       	adc	r31, r1
    1acc:	de 01       	movw	r26, r28
    1ace:	11 96       	adiw	r26, 0x01	; 1
    1ad0:	ea 0f       	add	r30, r26
    1ad2:	fb 1f       	adc	r31, r27
    1ad4:	80 81       	ld	r24, Z
    1ad6:	90 e0       	ldi	r25, 0x00	; 0
    1ad8:	82 17       	cp	r24, r18
    1ada:	93 07       	cpc	r25, r19
    1adc:	1c f0       	brlt	.+6      	; 0x1ae4 <deathclock_changed+0x5e>
  printnumber(n%100, inverted);
}

void deathclock_changed(void) //Any changes to the death clock neccesitates a recalculation of the death clock.
{
	uint8_t ee_set_year = date_y + 100;
    1ade:	16 2f       	mov	r17, r22
    1ae0:	1c 59       	subi	r17, 0x9C	; 156
    1ae2:	0f c0       	rjmp	.+30     	; 0x1b02 <deathclock_changed+0x7c>
	uint8_t max_year_diff[4][2] = {{72,78},{57,63},{82,88},{35,38}};
	
	if(((date_y + 100)-cfg_dob_y)>max_year_diff[cfg_dc_mode][cfg_gender]) ee_set_year = cfg_dob_y + max_year_diff[cfg_dc_mode][cfg_gender];
    1ae4:	10 91 20 03 	lds	r17, 0x0320
    1ae8:	80 91 21 03 	lds	r24, 0x0321
    1aec:	20 91 1f 03 	lds	r18, 0x031F
    1af0:	90 e0       	ldi	r25, 0x00	; 0
    1af2:	88 0f       	add	r24, r24
    1af4:	99 1f       	adc	r25, r25
    1af6:	82 0f       	add	r24, r18
    1af8:	91 1d       	adc	r25, r1
    1afa:	a8 0f       	add	r26, r24
    1afc:	b9 1f       	adc	r27, r25
    1afe:	8c 91       	ld	r24, X
    1b00:	18 0f       	add	r17, r24
	
	eeprom_write_byte(&EE_SET_MONTH,date_m);
    1b02:	60 91 76 03 	lds	r22, 0x0376
    1b06:	8b e0       	ldi	r24, 0x0B	; 11
    1b08:	90 e0       	ldi	r25, 0x00	; 0
    1b0a:	0e 94 a2 3a 	call	0x7544	; 0x7544 <__eewr_byte_m328p>
	eeprom_write_byte(&EE_SET_DAY,date_d);
    1b0e:	60 91 6b 03 	lds	r22, 0x036B
    1b12:	8c e0       	ldi	r24, 0x0C	; 12
    1b14:	90 e0       	ldi	r25, 0x00	; 0
    1b16:	0e 94 a2 3a 	call	0x7544	; 0x7544 <__eewr_byte_m328p>
	eeprom_write_byte(&EE_SET_YEAR,ee_set_year);
    1b1a:	8d e0       	ldi	r24, 0x0D	; 13
    1b1c:	90 e0       	ldi	r25, 0x00	; 0
    1b1e:	61 2f       	mov	r22, r17
    1b20:	0e 94 a2 3a 	call	0x7544	; 0x7544 <__eewr_byte_m328p>
	eeprom_write_byte(&EE_SET_HOUR,time_h);
    1b24:	60 91 62 03 	lds	r22, 0x0362
    1b28:	86 e1       	ldi	r24, 0x16	; 22
    1b2a:	90 e0       	ldi	r25, 0x00	; 0
    1b2c:	0e 94 a2 3a 	call	0x7544	; 0x7544 <__eewr_byte_m328p>
	eeprom_write_byte(&EE_SET_MIN,time_m);
    1b30:	60 91 6c 03 	lds	r22, 0x036C
    1b34:	87 e1       	ldi	r24, 0x17	; 23
    1b36:	90 e0       	ldi	r25, 0x00	; 0
    1b38:	0e 94 a2 3a 	call	0x7544	; 0x7544 <__eewr_byte_m328p>
	eeprom_write_byte(&EE_SET_SEC,time_s);
    1b3c:	60 91 77 03 	lds	r22, 0x0377
    1b40:	88 e1       	ldi	r24, 0x18	; 24
    1b42:	90 e0       	ldi	r25, 0x00	; 0
    1b44:	0e 94 a2 3a 	call	0x7544	; 0x7544 <__eewr_byte_m328p>
	load_etd();
    1b48:	0e 94 d6 26 	call	0x4dac	; 0x4dac <load_etd>
}
    1b4c:	28 96       	adiw	r28, 0x08	; 8
    1b4e:	e3 e0       	ldi	r30, 0x03	; 3
    1b50:	0c 94 79 3a 	jmp	0x74f2	; 0x74f2 <__epilogue_restores__+0x1e>

00001b54 <display_smoker>:
  	  printnumber_3d(cfg_bmi_weight, inverted&2);
  }
}

void display_smoker(uint8_t inverted)
{
    1b54:	1f 93       	push	r17
    1b56:	18 2f       	mov	r17, r24
	glcdSetAddress(MENU_INDENT, 5);
    1b58:	88 e0       	ldi	r24, 0x08	; 8
    1b5a:	65 e0       	ldi	r22, 0x05	; 5
    1b5c:	0e 94 9c 2c 	call	0x5938	; 0x5938 <glcdSetAddress>
  glcdPutStr("Smoker?:         ", NORMAL);
    1b60:	81 e0       	ldi	r24, 0x01	; 1
    1b62:	91 e0       	ldi	r25, 0x01	; 1
    1b64:	60 e0       	ldi	r22, 0x00	; 0
    1b66:	0e 94 dd 28 	call	0x51ba	; 0x51ba <glcdPutStr_rom>
  if(cfg_smoker)
    1b6a:	80 91 27 03 	lds	r24, 0x0327
    1b6e:	88 23       	and	r24, r24
    1b70:	19 f0       	breq	.+6      	; 0x1b78 <display_smoker+0x24>
  	  glcdPutStr("Yes", inverted);
    1b72:	8d ef       	ldi	r24, 0xFD	; 253
    1b74:	90 e0       	ldi	r25, 0x00	; 0
    1b76:	02 c0       	rjmp	.+4      	; 0x1b7c <display_smoker+0x28>
  else
  	  glcdPutStr(" No", inverted);
    1b78:	89 ef       	ldi	r24, 0xF9	; 249
    1b7a:	90 e0       	ldi	r25, 0x00	; 0
    1b7c:	61 2f       	mov	r22, r17
    1b7e:	0e 94 dd 28 	call	0x51ba	; 0x51ba <glcdPutStr_rom>
}
    1b82:	1f 91       	pop	r17
    1b84:	08 95       	ret

00001b86 <display_dc_mode>:
  else
  	  glcdPutStr("Female", inverted);
}

void display_dc_mode(uint8_t inverted)
{
    1b86:	1f 93       	push	r17
    1b88:	18 2f       	mov	r17, r24
	glcdSetAddress(MENU_INDENT, 3);
    1b8a:	88 e0       	ldi	r24, 0x08	; 8
    1b8c:	63 e0       	ldi	r22, 0x03	; 3
    1b8e:	0e 94 9c 2c 	call	0x5938	; 0x5938 <glcdSetAddress>
  glcdPutStr("Set Mode:", NORMAL);
    1b92:	8f e6       	ldi	r24, 0x6F	; 111
    1b94:	91 e0       	ldi	r25, 0x01	; 1
    1b96:	60 e0       	ldi	r22, 0x00	; 0
    1b98:	0e 94 dd 28 	call	0x51ba	; 0x51ba <glcdPutStr_rom>
  if(cfg_dc_mode == DC_mode_normal)
    1b9c:	80 91 21 03 	lds	r24, 0x0321
    1ba0:	88 23       	and	r24, r24
    1ba2:	19 f4       	brne	.+6      	; 0x1baa <display_dc_mode+0x24>
    glcdPutStr("     Normal", inverted);
    1ba4:	83 e6       	ldi	r24, 0x63	; 99
    1ba6:	91 e0       	ldi	r25, 0x01	; 1
    1ba8:	10 c0       	rjmp	.+32     	; 0x1bca <display_dc_mode+0x44>
  else if (cfg_dc_mode == DC_mode_pessimistic)
    1baa:	80 91 21 03 	lds	r24, 0x0321
    1bae:	81 30       	cpi	r24, 0x01	; 1
    1bb0:	19 f4       	brne	.+6      	; 0x1bb8 <display_dc_mode+0x32>
    glcdPutStr("Pessimistic", inverted);
    1bb2:	87 e5       	ldi	r24, 0x57	; 87
    1bb4:	91 e0       	ldi	r25, 0x01	; 1
    1bb6:	09 c0       	rjmp	.+18     	; 0x1bca <display_dc_mode+0x44>
  else if (cfg_dc_mode == DC_mode_optimistic)
    1bb8:	80 91 21 03 	lds	r24, 0x0321
    1bbc:	82 30       	cpi	r24, 0x02	; 2
    1bbe:	19 f4       	brne	.+6      	; 0x1bc6 <display_dc_mode+0x40>
    glcdPutStr(" Optimistic", inverted);
    1bc0:	8b e4       	ldi	r24, 0x4B	; 75
    1bc2:	91 e0       	ldi	r25, 0x01	; 1
    1bc4:	02 c0       	rjmp	.+4      	; 0x1bca <display_dc_mode+0x44>
  else
    glcdPutStr("   Sadistic", inverted);
    1bc6:	8f e3       	ldi	r24, 0x3F	; 63
    1bc8:	91 e0       	ldi	r25, 0x01	; 1
    1bca:	61 2f       	mov	r22, r17
    1bcc:	0e 94 dd 28 	call	0x51ba	; 0x51ba <glcdPutStr_rom>
}
    1bd0:	1f 91       	pop	r17
    1bd2:	08 95       	ret

00001bd4 <display_gender>:
  printnumber((cfg_dob_y+1900)/100, (mode==SET_YEAR)?INVERTED:NORMAL);
  printnumber((cfg_dob_y+1900)%100, (mode==SET_YEAR)?INVERTED:NORMAL);
}

void display_gender(uint8_t inverted)
{
    1bd4:	1f 93       	push	r17
    1bd6:	18 2f       	mov	r17, r24
	glcdSetAddress(MENU_INDENT, 2);
    1bd8:	88 e0       	ldi	r24, 0x08	; 8
    1bda:	62 e0       	ldi	r22, 0x02	; 2
    1bdc:	0e 94 9c 2c 	call	0x5938	; 0x5938 <glcdSetAddress>
  glcdPutStr("Set Gender:   ",NORMAL);
    1be0:	87 e8       	ldi	r24, 0x87	; 135
    1be2:	91 e0       	ldi	r25, 0x01	; 1
    1be4:	60 e0       	ldi	r22, 0x00	; 0
    1be6:	0e 94 dd 28 	call	0x51ba	; 0x51ba <glcdPutStr_rom>
  if(cfg_gender==DC_gender_male)
    1bea:	80 91 1f 03 	lds	r24, 0x031F
    1bee:	88 23       	and	r24, r24
    1bf0:	19 f4       	brne	.+6      	; 0x1bf8 <display_gender+0x24>
  	  glcdPutStr("  Male", inverted);
    1bf2:	80 e8       	ldi	r24, 0x80	; 128
    1bf4:	91 e0       	ldi	r25, 0x01	; 1
    1bf6:	02 c0       	rjmp	.+4      	; 0x1bfc <display_gender+0x28>
  else
  	  glcdPutStr("Female", inverted);
    1bf8:	89 e7       	ldi	r24, 0x79	; 121
    1bfa:	91 e0       	ldi	r25, 0x01	; 1
    1bfc:	61 2f       	mov	r22, r17
    1bfe:	0e 94 dd 28 	call	0x51ba	; 0x51ba <glcdPutStr_rom>
}
    1c02:	1f 91       	pop	r17
    1c04:	08 95       	ret

00001c06 <display_dob>:
	eeprom_write_byte(&EE_SET_SEC,time_s);
	load_etd();
}

void display_dob(uint8_t mode)
{
    1c06:	0f 93       	push	r16
    1c08:	1f 93       	push	r17
    1c0a:	08 2f       	mov	r16, r24
  glcdSetAddress(MENU_INDENT, 1);
    1c0c:	88 e0       	ldi	r24, 0x08	; 8
    1c0e:	61 e0       	ldi	r22, 0x01	; 1
    1c10:	0e 94 9c 2c 	call	0x5938	; 0x5938 <glcdSetAddress>
  glcdPutStr("Set DOB:  ",NORMAL);
    1c14:	86 e9       	ldi	r24, 0x96	; 150
    1c16:	91 e0       	ldi	r25, 0x01	; 1
    1c18:	60 e0       	ldi	r22, 0x00	; 0
    1c1a:	0e 94 dd 28 	call	0x51ba	; 0x51ba <glcdPutStr_rom>
   if (region == REGION_US) {
    1c1e:	80 91 6f 03 	lds	r24, 0x036F
    1c22:	88 23       	and	r24, r24
    1c24:	91 f4       	brne	.+36     	; 0x1c4a <display_dob+0x44>
    printnumber(cfg_dob_m, (mode==SET_MONTH)?INVERTED:NORMAL);
    1c26:	80 91 25 03 	lds	r24, 0x0325
    1c2a:	60 e0       	ldi	r22, 0x00	; 0
    1c2c:	00 31       	cpi	r16, 0x10	; 16
    1c2e:	09 f4       	brne	.+2      	; 0x1c32 <display_dob+0x2c>
    1c30:	61 e0       	ldi	r22, 0x01	; 1
    1c32:	0e 94 50 2e 	call	0x5ca0	; 0x5ca0 <printnumber>
    glcdWriteChar('/', NORMAL);
    1c36:	8f e2       	ldi	r24, 0x2F	; 47
    1c38:	60 e0       	ldi	r22, 0x00	; 0
    1c3a:	0e 94 b3 28 	call	0x5166	; 0x5166 <glcdWriteChar>
    printnumber(cfg_dob_d, (mode==SET_DAY)?INVERTED:NORMAL);
    1c3e:	80 91 22 03 	lds	r24, 0x0322
    1c42:	60 e0       	ldi	r22, 0x00	; 0
    1c44:	01 31       	cpi	r16, 0x11	; 17
    1c46:	99 f4       	brne	.+38     	; 0x1c6e <display_dob+0x68>
    1c48:	11 c0       	rjmp	.+34     	; 0x1c6c <display_dob+0x66>
  } else {
    printnumber(cfg_dob_d, (mode==SET_DAY)?INVERTED:NORMAL);
    1c4a:	80 91 22 03 	lds	r24, 0x0322
    1c4e:	60 e0       	ldi	r22, 0x00	; 0
    1c50:	01 31       	cpi	r16, 0x11	; 17
    1c52:	09 f4       	brne	.+2      	; 0x1c56 <display_dob+0x50>
    1c54:	61 e0       	ldi	r22, 0x01	; 1
    1c56:	0e 94 50 2e 	call	0x5ca0	; 0x5ca0 <printnumber>
    glcdWriteChar('/', NORMAL);
    1c5a:	8f e2       	ldi	r24, 0x2F	; 47
    1c5c:	60 e0       	ldi	r22, 0x00	; 0
    1c5e:	0e 94 b3 28 	call	0x5166	; 0x5166 <glcdWriteChar>
    printnumber(cfg_dob_m, (mode==SET_MONTH)?INVERTED:NORMAL);
    1c62:	80 91 25 03 	lds	r24, 0x0325
    1c66:	60 e0       	ldi	r22, 0x00	; 0
    1c68:	00 31       	cpi	r16, 0x10	; 16
    1c6a:	09 f4       	brne	.+2      	; 0x1c6e <display_dob+0x68>
    1c6c:	61 e0       	ldi	r22, 0x01	; 1
    1c6e:	0e 94 50 2e 	call	0x5ca0	; 0x5ca0 <printnumber>
  }
  glcdWriteChar('/', NORMAL);
    1c72:	8f e2       	ldi	r24, 0x2F	; 47
    1c74:	60 e0       	ldi	r22, 0x00	; 0
    1c76:	0e 94 b3 28 	call	0x5166	; 0x5166 <glcdWriteChar>
  printnumber((cfg_dob_y+1900)/100, (mode==SET_YEAR)?INVERTED:NORMAL);
    1c7a:	80 91 20 03 	lds	r24, 0x0320
    1c7e:	10 e0       	ldi	r17, 0x00	; 0
    1c80:	02 31       	cpi	r16, 0x12	; 18
    1c82:	09 f4       	brne	.+2      	; 0x1c86 <display_dob+0x80>
    1c84:	11 e0       	ldi	r17, 0x01	; 1
    1c86:	90 e0       	ldi	r25, 0x00	; 0
    1c88:	84 59       	subi	r24, 0x94	; 148
    1c8a:	98 4f       	sbci	r25, 0xF8	; 248
    1c8c:	64 e6       	ldi	r22, 0x64	; 100
    1c8e:	70 e0       	ldi	r23, 0x00	; 0
    1c90:	0e 94 fe 39 	call	0x73fc	; 0x73fc <__divmodhi4>
    1c94:	86 2f       	mov	r24, r22
    1c96:	61 2f       	mov	r22, r17
    1c98:	0e 94 50 2e 	call	0x5ca0	; 0x5ca0 <printnumber>
  printnumber((cfg_dob_y+1900)%100, (mode==SET_YEAR)?INVERTED:NORMAL);
    1c9c:	80 91 20 03 	lds	r24, 0x0320
    1ca0:	90 e0       	ldi	r25, 0x00	; 0
    1ca2:	84 59       	subi	r24, 0x94	; 148
    1ca4:	98 4f       	sbci	r25, 0xF8	; 248
    1ca6:	64 e6       	ldi	r22, 0x64	; 100
    1ca8:	70 e0       	ldi	r23, 0x00	; 0
    1caa:	0e 94 fe 39 	call	0x73fc	; 0x73fc <__divmodhi4>
    1cae:	61 2f       	mov	r22, r17
    1cb0:	0e 94 50 2e 	call	0x5ca0	; 0x5ca0 <printnumber>
}
    1cb4:	1f 91       	pop	r17
    1cb6:	0f 91       	pop	r16
    1cb8:	08 95       	ret

00001cba <printnumber_3d>:
// buttons in a few seconds, and turns off the menu display
extern volatile uint8_t timeoutcounter;

extern volatile uint8_t screenmutex;

void printnumber_3d(uint16_t n, uint8_t inverted) {
    1cba:	ff 92       	push	r15
    1cbc:	0f 93       	push	r16
    1cbe:	1f 93       	push	r17
    1cc0:	8c 01       	movw	r16, r24
    1cc2:	f6 2e       	mov	r15, r22
  glcdWriteChar(n/100+'0', inverted);
    1cc4:	64 e6       	ldi	r22, 0x64	; 100
    1cc6:	70 e0       	ldi	r23, 0x00	; 0
    1cc8:	0e 94 ea 39 	call	0x73d4	; 0x73d4 <__udivmodhi4>
    1ccc:	86 2f       	mov	r24, r22
    1cce:	80 5d       	subi	r24, 0xD0	; 208
    1cd0:	6f 2d       	mov	r22, r15
    1cd2:	0e 94 b3 28 	call	0x5166	; 0x5166 <glcdWriteChar>
  printnumber(n%100, inverted);
    1cd6:	c8 01       	movw	r24, r16
    1cd8:	64 e6       	ldi	r22, 0x64	; 100
    1cda:	70 e0       	ldi	r23, 0x00	; 0
    1cdc:	0e 94 ea 39 	call	0x73d4	; 0x73d4 <__udivmodhi4>
    1ce0:	6f 2d       	mov	r22, r15
    1ce2:	0e 94 50 2e 	call	0x5ca0	; 0x5ca0 <printnumber>
}
    1ce6:	1f 91       	pop	r17
    1ce8:	0f 91       	pop	r16
    1cea:	ff 90       	pop	r15
    1cec:	08 95       	ret

00001cee <display_bmi_set>:
  else
    glcdPutStr("   Sadistic", inverted);
}

void display_bmi_set(uint8_t inverted)
{
    1cee:	0f 93       	push	r16
    1cf0:	1f 93       	push	r17
    1cf2:	08 2f       	mov	r16, r24
  glcdSetAddress(MENU_INDENT, 4);
    1cf4:	88 e0       	ldi	r24, 0x08	; 8
    1cf6:	64 e0       	ldi	r22, 0x04	; 4
    1cf8:	0e 94 9c 2c 	call	0x5938	; 0x5938 <glcdSetAddress>
  glcdPutStr("Set ", NORMAL);
    1cfc:	8a e3       	ldi	r24, 0x3A	; 58
    1cfe:	91 e0       	ldi	r25, 0x01	; 1
    1d00:	60 e0       	ldi	r22, 0x00	; 0
    1d02:	0e 94 dd 28 	call	0x51ba	; 0x51ba <glcdPutStr_rom>
  if(cfg_bmi_unit == BMI_Imperial)
    1d06:	80 91 26 03 	lds	r24, 0x0326
    1d0a:	88 23       	and	r24, r24
    1d0c:	99 f5       	brne	.+102    	; 0x1d74 <display_bmi_set+0x86>
  {
  	  glcdPutStr("Imp:", inverted&1);
    1d0e:	60 2f       	mov	r22, r16
    1d10:	61 70       	andi	r22, 0x01	; 1
    1d12:	85 e3       	ldi	r24, 0x35	; 53
    1d14:	91 e0       	ldi	r25, 0x01	; 1
    1d16:	0e 94 dd 28 	call	0x51ba	; 0x51ba <glcdPutStr_rom>
  	  printnumber_3d(cfg_bmi_weight, inverted&2);
    1d1a:	80 91 23 03 	lds	r24, 0x0323
    1d1e:	90 91 24 03 	lds	r25, 0x0324
    1d22:	10 2f       	mov	r17, r16
    1d24:	12 70       	andi	r17, 0x02	; 2
    1d26:	61 2f       	mov	r22, r17
    1d28:	0e 94 5d 0e 	call	0x1cba	; 0x1cba <printnumber_3d>
  	  glcdPutStr("lb ", inverted&2);
    1d2c:	81 e3       	ldi	r24, 0x31	; 49
    1d2e:	91 e0       	ldi	r25, 0x01	; 1
    1d30:	61 2f       	mov	r22, r17
    1d32:	0e 94 dd 28 	call	0x51ba	; 0x51ba <glcdPutStr_rom>
  	  printnumber(cfg_bmi_height / 12, inverted&4);
    1d36:	80 91 28 03 	lds	r24, 0x0328
    1d3a:	90 91 29 03 	lds	r25, 0x0329
    1d3e:	10 2f       	mov	r17, r16
    1d40:	14 70       	andi	r17, 0x04	; 4
    1d42:	6c e0       	ldi	r22, 0x0C	; 12
    1d44:	70 e0       	ldi	r23, 0x00	; 0
    1d46:	0e 94 ea 39 	call	0x73d4	; 0x73d4 <__udivmodhi4>
    1d4a:	86 2f       	mov	r24, r22
    1d4c:	61 2f       	mov	r22, r17
    1d4e:	0e 94 50 2e 	call	0x5ca0	; 0x5ca0 <printnumber>
  	  glcdPutStr("ft", inverted&4);
    1d52:	8e e2       	ldi	r24, 0x2E	; 46
    1d54:	91 e0       	ldi	r25, 0x01	; 1
    1d56:	61 2f       	mov	r22, r17
    1d58:	0e 94 dd 28 	call	0x51ba	; 0x51ba <glcdPutStr_rom>
  	  printnumber(cfg_bmi_height % 12, inverted&4);
    1d5c:	80 91 28 03 	lds	r24, 0x0328
    1d60:	90 91 29 03 	lds	r25, 0x0329
    1d64:	6c e0       	ldi	r22, 0x0C	; 12
    1d66:	70 e0       	ldi	r23, 0x00	; 0
    1d68:	0e 94 ea 39 	call	0x73d4	; 0x73d4 <__udivmodhi4>
    1d6c:	61 2f       	mov	r22, r17
    1d6e:	0e 94 50 2e 	call	0x5ca0	; 0x5ca0 <printnumber>
    1d72:	3b c0       	rjmp	.+118    	; 0x1dea <display_bmi_set+0xfc>
  	  
  }
  else if (cfg_bmi_unit == BMI_Metric)
    1d74:	80 91 26 03 	lds	r24, 0x0326
    1d78:	60 2f       	mov	r22, r16
    1d7a:	61 70       	andi	r22, 0x01	; 1
    1d7c:	10 2f       	mov	r17, r16
    1d7e:	12 70       	andi	r17, 0x02	; 2
    1d80:	81 30       	cpi	r24, 0x01	; 1
    1d82:	19 f5       	brne	.+70     	; 0x1dca <display_bmi_set+0xdc>
  {
  	  glcdPutStr("Met:", inverted&1);
    1d84:	89 e2       	ldi	r24, 0x29	; 41
    1d86:	91 e0       	ldi	r25, 0x01	; 1
    1d88:	0e 94 dd 28 	call	0x51ba	; 0x51ba <glcdPutStr_rom>
  	  glcdWriteChar(' ', NORMAL);
    1d8c:	80 e2       	ldi	r24, 0x20	; 32
    1d8e:	60 e0       	ldi	r22, 0x00	; 0
    1d90:	0e 94 b3 28 	call	0x5166	; 0x5166 <glcdWriteChar>
  	  printnumber_3d(cfg_bmi_weight, inverted&2);
    1d94:	80 91 23 03 	lds	r24, 0x0323
    1d98:	90 91 24 03 	lds	r25, 0x0324
    1d9c:	61 2f       	mov	r22, r17
    1d9e:	0e 94 5d 0e 	call	0x1cba	; 0x1cba <printnumber_3d>
  	  glcdPutStr("kg ", inverted&2);
    1da2:	85 e2       	ldi	r24, 0x25	; 37
    1da4:	91 e0       	ldi	r25, 0x01	; 1
    1da6:	61 2f       	mov	r22, r17
    1da8:	0e 94 dd 28 	call	0x51ba	; 0x51ba <glcdPutStr_rom>
  	  printnumber_3d(cfg_bmi_height, inverted&4);
    1dac:	80 91 28 03 	lds	r24, 0x0328
    1db0:	90 91 29 03 	lds	r25, 0x0329
    1db4:	10 2f       	mov	r17, r16
    1db6:	14 70       	andi	r17, 0x04	; 4
    1db8:	61 2f       	mov	r22, r17
    1dba:	0e 94 5d 0e 	call	0x1cba	; 0x1cba <printnumber_3d>
  	  glcdPutStr("cm", inverted&4);
    1dbe:	82 e2       	ldi	r24, 0x22	; 34
    1dc0:	91 e0       	ldi	r25, 0x01	; 1
    1dc2:	61 2f       	mov	r22, r17
    1dc4:	0e 94 dd 28 	call	0x51ba	; 0x51ba <glcdPutStr_rom>
    1dc8:	10 c0       	rjmp	.+32     	; 0x1dea <display_bmi_set+0xfc>
  }
  else
  {
  	  glcdPutStr("BMI:", inverted&1);
    1dca:	8d e1       	ldi	r24, 0x1D	; 29
    1dcc:	91 e0       	ldi	r25, 0x01	; 1
    1dce:	0e 94 dd 28 	call	0x51ba	; 0x51ba <glcdPutStr_rom>
  	  glcdPutStr("         ",NORMAL);
    1dd2:	83 e1       	ldi	r24, 0x13	; 19
    1dd4:	91 e0       	ldi	r25, 0x01	; 1
    1dd6:	60 e0       	ldi	r22, 0x00	; 0
    1dd8:	0e 94 dd 28 	call	0x51ba	; 0x51ba <glcdPutStr_rom>
  	  printnumber_3d(cfg_bmi_weight, inverted&2);
    1ddc:	80 91 23 03 	lds	r24, 0x0323
    1de0:	90 91 24 03 	lds	r25, 0x0324
    1de4:	61 2f       	mov	r22, r17
    1de6:	0e 94 5d 0e 	call	0x1cba	; 0x1cba <printnumber_3d>
  }
}
    1dea:	1f 91       	pop	r17
    1dec:	0f 91       	pop	r16
    1dee:	08 95       	ret

00001df0 <display_death_menu>:
  	  glcdPutStr(" No", inverted);
}

//Setting the Death Clock needs its own screen.
void display_death_menu(void) {
  cfg_dob_m = eeprom_read_byte(&EE_DOB_MONTH);
    1df0:	88 e0       	ldi	r24, 0x08	; 8
    1df2:	90 e0       	ldi	r25, 0x00	; 0
    1df4:	0e 94 94 3a 	call	0x7528	; 0x7528 <__eerd_byte_m328p>
    1df8:	80 93 25 03 	sts	0x0325, r24
  cfg_dob_d = eeprom_read_byte(&EE_DOB_DAY);
    1dfc:	89 e0       	ldi	r24, 0x09	; 9
    1dfe:	90 e0       	ldi	r25, 0x00	; 0
    1e00:	0e 94 94 3a 	call	0x7528	; 0x7528 <__eerd_byte_m328p>
    1e04:	80 93 22 03 	sts	0x0322, r24
  cfg_dob_y = eeprom_read_byte(&EE_DOB_YEAR);
    1e08:	8a e0       	ldi	r24, 0x0A	; 10
    1e0a:	90 e0       	ldi	r25, 0x00	; 0
    1e0c:	0e 94 94 3a 	call	0x7528	; 0x7528 <__eerd_byte_m328p>
    1e10:	80 93 20 03 	sts	0x0320, r24
  cfg_gender = eeprom_read_byte(&EE_GENDER);
    1e14:	8e e0       	ldi	r24, 0x0E	; 14
    1e16:	90 e0       	ldi	r25, 0x00	; 0
    1e18:	0e 94 94 3a 	call	0x7528	; 0x7528 <__eerd_byte_m328p>
    1e1c:	80 93 1f 03 	sts	0x031F, r24
  cfg_dc_mode = eeprom_read_byte(&EE_DC_MODE);
    1e20:	8f e0       	ldi	r24, 0x0F	; 15
    1e22:	90 e0       	ldi	r25, 0x00	; 0
    1e24:	0e 94 94 3a 	call	0x7528	; 0x7528 <__eerd_byte_m328p>
    1e28:	80 93 21 03 	sts	0x0321, r24
  cfg_bmi_unit = eeprom_read_byte(&EE_BMI_UNIT);
    1e2c:	80 e1       	ldi	r24, 0x10	; 16
    1e2e:	90 e0       	ldi	r25, 0x00	; 0
    1e30:	0e 94 94 3a 	call	0x7528	; 0x7528 <__eerd_byte_m328p>
    1e34:	80 93 26 03 	sts	0x0326, r24
  cfg_bmi_height = eeprom_read_word(&EE_BMI_HEIGHT);
    1e38:	83 e1       	ldi	r24, 0x13	; 19
    1e3a:	90 e0       	ldi	r25, 0x00	; 0
    1e3c:	0e 94 9c 3a 	call	0x7538	; 0x7538 <__eerd_word_m328p>
    1e40:	90 93 29 03 	sts	0x0329, r25
    1e44:	80 93 28 03 	sts	0x0328, r24
  cfg_bmi_weight = eeprom_read_word(&EE_BMI_WEIGHT);
    1e48:	81 e1       	ldi	r24, 0x11	; 17
    1e4a:	90 e0       	ldi	r25, 0x00	; 0
    1e4c:	0e 94 9c 3a 	call	0x7538	; 0x7538 <__eerd_word_m328p>
    1e50:	90 93 24 03 	sts	0x0324, r25
    1e54:	80 93 23 03 	sts	0x0323, r24
  cfg_smoker = eeprom_read_byte(&EE_SMOKER);
    1e58:	85 e1       	ldi	r24, 0x15	; 21
    1e5a:	90 e0       	ldi	r25, 0x00	; 0
    1e5c:	0e 94 94 3a 	call	0x7528	; 0x7528 <__eerd_byte_m328p>
    1e60:	80 93 27 03 	sts	0x0327, r24


  screenmutex++;
    1e64:	80 91 58 02 	lds	r24, 0x0258
    1e68:	8f 5f       	subi	r24, 0xFF	; 255
    1e6a:	80 93 58 02 	sts	0x0258, r24
  glcdClearScreen();
    1e6e:	0e 94 a6 2c 	call	0x594c	; 0x594c <glcdClearScreen>
  
  glcdSetAddress(0, 0);
    1e72:	80 e0       	ldi	r24, 0x00	; 0
    1e74:	60 e0       	ldi	r22, 0x00	; 0
    1e76:	0e 94 9c 2c 	call	0x5938	; 0x5938 <glcdSetAddress>
  glcdPutStr("DeathChron", NORMAL);
    1e7a:	8e ee       	ldi	r24, 0xEE	; 238
    1e7c:	90 e0       	ldi	r25, 0x00	; 0
    1e7e:	60 e0       	ldi	r22, 0x00	; 0
    1e80:	0e 94 dd 28 	call	0x51ba	; 0x51ba <glcdPutStr_rom>
  glcdSetAddress(64, 0);	//Not enough space in the 128 bits to put "DeathChron Config Menu"
    1e84:	80 e4       	ldi	r24, 0x40	; 64
    1e86:	60 e0       	ldi	r22, 0x00	; 0
    1e88:	0e 94 9c 2c 	call	0x5938	; 0x5938 <glcdSetAddress>
  glcdPutStr("Config", NORMAL);
    1e8c:	87 ee       	ldi	r24, 0xE7	; 231
    1e8e:	90 e0       	ldi	r25, 0x00	; 0
    1e90:	60 e0       	ldi	r22, 0x00	; 0
    1e92:	0e 94 dd 28 	call	0x51ba	; 0x51ba <glcdPutStr_rom>
  glcdSetAddress(104, 0);  //So these two lines are making up for that. :)
    1e96:	88 e6       	ldi	r24, 0x68	; 104
    1e98:	60 e0       	ldi	r22, 0x00	; 0
    1e9a:	0e 94 9c 2c 	call	0x5938	; 0x5938 <glcdSetAddress>
  glcdPutStr("Menu", NORMAL);
    1e9e:	82 ee       	ldi	r24, 0xE2	; 226
    1ea0:	90 e0       	ldi	r25, 0x00	; 0
    1ea2:	60 e0       	ldi	r22, 0x00	; 0
    1ea4:	0e 94 dd 28 	call	0x51ba	; 0x51ba <glcdPutStr_rom>
  
  //DOB , render based on region setting, in mm/dd/yyyy or dd/mm/yyyy, range is 1900 - 2099.
  display_dob(displaymode);
    1ea8:	80 91 72 03 	lds	r24, 0x0372
    1eac:	0e 94 03 0e 	call	0x1c06	; 0x1c06 <display_dob>
  
  //Gender, Male, Female
  display_gender(NORMAL);
    1eb0:	80 e0       	ldi	r24, 0x00	; 0
    1eb2:	0e 94 ea 0d 	call	0x1bd4	; 0x1bd4 <display_gender>
  
  //Mode, Normal, Optimistic, Pessimistic, Sadistic
  display_dc_mode(NORMAL);
    1eb6:	80 e0       	ldi	r24, 0x00	; 0
    1eb8:	0e 94 c3 0d 	call	0x1b86	; 0x1b86 <display_dc_mode>
  
  //BMI Entry Method, Imperial (Weight in pounds, height in X foot Y inches), 
  //Metric (Weight in Kilograms, Height in Centimeters), 
  //Direct (Direct BMI value from 0-255, (actual range for calculation is less then 25, 25-44, and greater then or equal to 45.))
  display_bmi_set(NORMAL);
    1ebc:	80 e0       	ldi	r24, 0x00	; 0
    1ebe:	0e 94 77 0e 	call	0x1cee	; 0x1cee <display_bmi_set>
  
  //Smoking Status.
  display_smoker(NORMAL);
    1ec2:	80 e0       	ldi	r24, 0x00	; 0
    1ec4:	0e 94 aa 0d 	call	0x1b54	; 0x1b54 <display_smoker>
  print_menu_advance();
    1ec8:	0e 94 5f 39 	call	0x72be	; 0x72be <print_menu_advance>
  
  screenmutex--;
    1ecc:	80 91 58 02 	lds	r24, 0x0258
    1ed0:	81 50       	subi	r24, 0x01	; 1
    1ed2:	80 93 58 02 	sts	0x0258, r24
}
    1ed6:	08 95       	ret

00001ed8 <init_set_death_menu>:

uint8_t init_set_death_menu(uint8_t line)
{
    1ed8:	1f 93       	push	r17
    1eda:	18 2f       	mov	r17, r24
  display_death_menu();
    1edc:	0e 94 f8 0e 	call	0x1df0	; 0x1df0 <display_death_menu>
  
  screenmutex++;
    1ee0:	80 91 58 02 	lds	r24, 0x0258
    1ee4:	8f 5f       	subi	r24, 0xFF	; 255
    1ee6:	80 93 58 02 	sts	0x0258, r24
  if(displaymode == SET_DCSMOKER)
    1eea:	80 91 72 03 	lds	r24, 0x0372
    1eee:	8f 36       	cpi	r24, 0x6F	; 111
    1ef0:	11 f4       	brne	.+4      	; 0x1ef6 <init_set_death_menu+0x1e>
  	  print_menu_exit();
    1ef2:	0e 94 54 39 	call	0x72a8	; 0x72a8 <print_menu_exit>
  // put a small arrow next to 'set 12h/24h'
  drawArrow(0, (line*8)+3, MENU_INDENT -1);
    1ef6:	11 0f       	add	r17, r17
    1ef8:	11 0f       	add	r17, r17
    1efa:	11 0f       	add	r17, r17
    1efc:	1d 5f       	subi	r17, 0xFD	; 253
    1efe:	80 e0       	ldi	r24, 0x00	; 0
    1f00:	61 2f       	mov	r22, r17
    1f02:	47 e0       	ldi	r20, 0x07	; 7
    1f04:	0e 94 56 33 	call	0x66ac	; 0x66ac <drawArrow>
  screenmutex--;
    1f08:	80 91 58 02 	lds	r24, 0x0258
    1f0c:	81 50       	subi	r24, 0x01	; 1
    1f0e:	80 93 58 02 	sts	0x0258, r24
   
  timeoutcounter = INACTIVITYTIMEOUT;
    1f12:	8a e0       	ldi	r24, 0x0A	; 10
    1f14:	80 93 57 02 	sts	0x0257, r24
  return displaymode;
    1f18:	80 91 72 03 	lds	r24, 0x0372
}
    1f1c:	1f 91       	pop	r17
    1f1e:	08 95       	ret

00001f20 <set_deathclock_smoker>:
	delay_ms(200);
    }
  }
}

void set_deathclock_smoker(void) {
    1f20:	1f 93       	push	r17
  uint8_t mode = init_set_death_menu(5);
    1f22:	85 e0       	ldi	r24, 0x05	; 5
    1f24:	0e 94 6c 0f 	call	0x1ed8	; 0x1ed8 <init_set_death_menu>
    1f28:	18 2f       	mov	r17, r24
    1f2a:	48 c0       	rjmp	.+144    	; 0x1fbc <set_deathclock_smoker+0x9c>

  while (!check_timeout()) {
  
    if (just_pressed & 0x2) {
    1f2c:	80 91 54 02 	lds	r24, 0x0254
    1f30:	81 ff       	sbrs	r24, 1
    1f32:	1b c0       	rjmp	.+54     	; 0x1f6a <set_deathclock_smoker+0x4a>
      just_pressed = 0;
    1f34:	10 92 54 02 	sts	0x0254, r1
      screenmutex++;
    1f38:	80 91 58 02 	lds	r24, 0x0258
    1f3c:	8f 5f       	subi	r24, 0xFF	; 255
    1f3e:	80 93 58 02 	sts	0x0258, r24

      if (mode == SET_DEATHCLOCK_SMOKER) {
    1f42:	1f 30       	cpi	r17, 0x0F	; 15
    1f44:	39 f4       	brne	.+14     	; 0x1f54 <set_deathclock_smoker+0x34>
	DEBUG(putstring("Setting deathclock smoker status"));
	// ok now its selected
	mode = SET_DCSMOKER;
	// print the region 
	display_smoker(INVERTED);
    1f46:	81 e0       	ldi	r24, 0x01	; 1
    1f48:	0e 94 aa 0d 	call	0x1b54	; 0x1b54 <display_smoker>
	// display instructions below
	print_menu_change();
    1f4c:	0e 94 4d 39 	call	0x729a	; 0x729a <print_menu_change>
    1f50:	1f e6       	ldi	r17, 0x6F	; 111
    1f52:	06 c0       	rjmp	.+12     	; 0x1f60 <set_deathclock_smoker+0x40>
      } else {
	mode = SET_DEATHCLOCK_SMOKER;
	// print the region normal
	display_smoker(NORMAL);
    1f54:	80 e0       	ldi	r24, 0x00	; 0
    1f56:	0e 94 aa 0d 	call	0x1b54	; 0x1b54 <display_smoker>

	print_menu_exit();
    1f5a:	0e 94 54 39 	call	0x72a8	; 0x72a8 <print_menu_exit>
    1f5e:	1f e0       	ldi	r17, 0x0F	; 15
      }
      screenmutex--;
    1f60:	80 91 58 02 	lds	r24, 0x0258
    1f64:	81 50       	subi	r24, 0x01	; 1
    1f66:	80 93 58 02 	sts	0x0258, r24
    }
    if ((just_pressed & 0x4) || (pressed & 0x4)) {
    1f6a:	80 91 54 02 	lds	r24, 0x0254
    1f6e:	82 fd       	sbrc	r24, 2
    1f70:	04 c0       	rjmp	.+8      	; 0x1f7a <set_deathclock_smoker+0x5a>
    1f72:	80 91 55 02 	lds	r24, 0x0255
    1f76:	82 ff       	sbrs	r24, 2
    1f78:	21 c0       	rjmp	.+66     	; 0x1fbc <set_deathclock_smoker+0x9c>
      just_pressed = 0;
    1f7a:	10 92 54 02 	sts	0x0254, r1
      
      if (mode == SET_DCSMOKER) {
    1f7e:	1f 36       	cpi	r17, 0x6F	; 111
    1f80:	e9 f4       	brne	.+58     	; 0x1fbc <set_deathclock_smoker+0x9c>
	    cfg_smoker = !cfg_smoker;
    1f82:	80 91 27 03 	lds	r24, 0x0327
    1f86:	90 e0       	ldi	r25, 0x00	; 0
    1f88:	88 23       	and	r24, r24
    1f8a:	09 f4       	brne	.+2      	; 0x1f8e <set_deathclock_smoker+0x6e>
    1f8c:	91 e0       	ldi	r25, 0x01	; 1
    1f8e:	90 93 27 03 	sts	0x0327, r25
	screenmutex++;
    1f92:	80 91 58 02 	lds	r24, 0x0258
    1f96:	8f 5f       	subi	r24, 0xFF	; 255
    1f98:	80 93 58 02 	sts	0x0258, r24

	display_smoker(INVERTED);
    1f9c:	81 e0       	ldi	r24, 0x01	; 1
    1f9e:	0e 94 aa 0d 	call	0x1b54	; 0x1b54 <display_smoker>
	screenmutex--;
    1fa2:	80 91 58 02 	lds	r24, 0x0258
    1fa6:	81 50       	subi	r24, 0x01	; 1
    1fa8:	80 93 58 02 	sts	0x0258, r24

	eeprom_write_byte(&EE_SMOKER, cfg_smoker);
    1fac:	60 91 27 03 	lds	r22, 0x0327
    1fb0:	85 e1       	ldi	r24, 0x15	; 21
    1fb2:	90 e0       	ldi	r25, 0x00	; 0
    1fb4:	0e 94 a2 3a 	call	0x7544	; 0x7544 <__eewr_byte_m328p>
	deathclock_changed();   
    1fb8:	0e 94 43 0d 	call	0x1a86	; 0x1a86 <deathclock_changed>
}

void set_deathclock_smoker(void) {
  uint8_t mode = init_set_death_menu(5);

  while (!check_timeout()) {
    1fbc:	0e 94 c2 38 	call	0x7184	; 0x7184 <check_timeout>
    1fc0:	88 23       	and	r24, r24
    1fc2:	09 f4       	brne	.+2      	; 0x1fc6 <set_deathclock_smoker+0xa6>
    1fc4:	b3 cf       	rjmp	.-154    	; 0x1f2c <set_deathclock_smoker+0xc>
	eeprom_write_byte(&EE_SMOKER, cfg_smoker);
	deathclock_changed();   
      }
    }
  }
}
    1fc6:	1f 91       	pop	r17
    1fc8:	08 95       	ret

00001fca <set_deathclock_mode>:
      }
    }
  }
}

void set_deathclock_mode(void) {
    1fca:	1f 93       	push	r17
  uint8_t mode = init_set_death_menu(3);
    1fcc:	83 e0       	ldi	r24, 0x03	; 3
    1fce:	0e 94 6c 0f 	call	0x1ed8	; 0x1ed8 <init_set_death_menu>
    1fd2:	18 2f       	mov	r17, r24
    1fd4:	48 c0       	rjmp	.+144    	; 0x2066 <set_deathclock_mode+0x9c>

  while (!check_timeout()) {
  
    if (just_pressed & 0x2) {
    1fd6:	80 91 54 02 	lds	r24, 0x0254
    1fda:	81 ff       	sbrs	r24, 1
    1fdc:	1b c0       	rjmp	.+54     	; 0x2014 <set_deathclock_mode+0x4a>
      just_pressed = 0;
    1fde:	10 92 54 02 	sts	0x0254, r1
      screenmutex++;
    1fe2:	80 91 58 02 	lds	r24, 0x0258
    1fe6:	8f 5f       	subi	r24, 0xFF	; 255
    1fe8:	80 93 58 02 	sts	0x0258, r24

      if (mode == SET_DEATHCLOCK_MODE) {
    1fec:	1d 30       	cpi	r17, 0x0D	; 13
    1fee:	39 f4       	brne	.+14     	; 0x1ffe <set_deathclock_mode+0x34>
	DEBUG(putstring("Setting deathclock mode"));
	// ok now its selected
	mode = SET_DCMODE;
	// print the region 
	display_dc_mode(INVERTED);
    1ff0:	81 e0       	ldi	r24, 0x01	; 1
    1ff2:	0e 94 c3 0d 	call	0x1b86	; 0x1b86 <display_dc_mode>
	// display instructions below
	print_menu_change();
    1ff6:	0e 94 4d 39 	call	0x729a	; 0x729a <print_menu_change>
    1ffa:	1b e6       	ldi	r17, 0x6B	; 107
    1ffc:	06 c0       	rjmp	.+12     	; 0x200a <set_deathclock_mode+0x40>
      } else {
	mode = SET_DEATHCLOCK_MODE;
	// print the region normal
	display_dc_mode(NORMAL);
    1ffe:	80 e0       	ldi	r24, 0x00	; 0
    2000:	0e 94 c3 0d 	call	0x1b86	; 0x1b86 <display_dc_mode>

	print_menu_advance();
    2004:	0e 94 5f 39 	call	0x72be	; 0x72be <print_menu_advance>
    2008:	1d e0       	ldi	r17, 0x0D	; 13
      }
      screenmutex--;
    200a:	80 91 58 02 	lds	r24, 0x0258
    200e:	81 50       	subi	r24, 0x01	; 1
    2010:	80 93 58 02 	sts	0x0258, r24
    }
    if ((just_pressed & 0x4) || (pressed & 0x4)) {
    2014:	80 91 54 02 	lds	r24, 0x0254
    2018:	82 fd       	sbrc	r24, 2
    201a:	04 c0       	rjmp	.+8      	; 0x2024 <set_deathclock_mode+0x5a>
    201c:	80 91 55 02 	lds	r24, 0x0255
    2020:	82 ff       	sbrs	r24, 2
    2022:	21 c0       	rjmp	.+66     	; 0x2066 <set_deathclock_mode+0x9c>
      just_pressed = 0;
    2024:	10 92 54 02 	sts	0x0254, r1
      
      if (mode == SET_DCMODE) {
    2028:	1b 36       	cpi	r17, 0x6B	; 107
    202a:	e9 f4       	brne	.+58     	; 0x2066 <set_deathclock_mode+0x9c>
	    cfg_dc_mode = (cfg_dc_mode + 1) % 4;
    202c:	80 91 21 03 	lds	r24, 0x0321
    2030:	90 e0       	ldi	r25, 0x00	; 0
    2032:	01 96       	adiw	r24, 0x01	; 1
    2034:	83 70       	andi	r24, 0x03	; 3
    2036:	90 70       	andi	r25, 0x00	; 0
    2038:	80 93 21 03 	sts	0x0321, r24
	screenmutex++;
    203c:	80 91 58 02 	lds	r24, 0x0258
    2040:	8f 5f       	subi	r24, 0xFF	; 255
    2042:	80 93 58 02 	sts	0x0258, r24

	display_dc_mode(INVERTED);
    2046:	81 e0       	ldi	r24, 0x01	; 1
    2048:	0e 94 c3 0d 	call	0x1b86	; 0x1b86 <display_dc_mode>
	screenmutex--;
    204c:	80 91 58 02 	lds	r24, 0x0258
    2050:	81 50       	subi	r24, 0x01	; 1
    2052:	80 93 58 02 	sts	0x0258, r24

	eeprom_write_byte(&EE_DC_MODE, cfg_dc_mode);
    2056:	60 91 21 03 	lds	r22, 0x0321
    205a:	8f e0       	ldi	r24, 0x0F	; 15
    205c:	90 e0       	ldi	r25, 0x00	; 0
    205e:	0e 94 a2 3a 	call	0x7544	; 0x7544 <__eewr_byte_m328p>
	deathclock_changed();   
    2062:	0e 94 43 0d 	call	0x1a86	; 0x1a86 <deathclock_changed>
}

void set_deathclock_mode(void) {
  uint8_t mode = init_set_death_menu(3);

  while (!check_timeout()) {
    2066:	0e 94 c2 38 	call	0x7184	; 0x7184 <check_timeout>
    206a:	88 23       	and	r24, r24
    206c:	09 f4       	brne	.+2      	; 0x2070 <set_deathclock_mode+0xa6>
    206e:	b3 cf       	rjmp	.-154    	; 0x1fd6 <set_deathclock_mode+0xc>
	eeprom_write_byte(&EE_DC_MODE, cfg_dc_mode);
	deathclock_changed();   
      }
    }
  }
}
    2070:	1f 91       	pop	r17
    2072:	08 95       	ret

00002074 <set_deathclock_gender>:
	delay_ms(200);  
    }
  }
}

void set_deathclock_gender(void) {
    2074:	1f 93       	push	r17
  uint8_t mode = init_set_death_menu(2);
    2076:	82 e0       	ldi	r24, 0x02	; 2
    2078:	0e 94 6c 0f 	call	0x1ed8	; 0x1ed8 <init_set_death_menu>
    207c:	18 2f       	mov	r17, r24
    207e:	48 c0       	rjmp	.+144    	; 0x2110 <set_deathclock_gender+0x9c>

  while (!check_timeout()) {
  
    if (just_pressed & 0x2) {
    2080:	80 91 54 02 	lds	r24, 0x0254
    2084:	81 ff       	sbrs	r24, 1
    2086:	1b c0       	rjmp	.+54     	; 0x20be <set_deathclock_gender+0x4a>
      just_pressed = 0;
    2088:	10 92 54 02 	sts	0x0254, r1
      screenmutex++;
    208c:	80 91 58 02 	lds	r24, 0x0258
    2090:	8f 5f       	subi	r24, 0xFF	; 255
    2092:	80 93 58 02 	sts	0x0258, r24

      if (mode == SET_DEATHCLOCK_GENDER) {
    2096:	1c 30       	cpi	r17, 0x0C	; 12
    2098:	39 f4       	brne	.+14     	; 0x20a8 <set_deathclock_gender+0x34>
	DEBUG(putstring("Setting deathclock gender"));
	// ok now its selected
	mode = SET_DCGENDER;
	// print the region 
	display_gender(INVERTED);
    209a:	81 e0       	ldi	r24, 0x01	; 1
    209c:	0e 94 ea 0d 	call	0x1bd4	; 0x1bd4 <display_gender>
	// display instructions below
	print_menu_change();
    20a0:	0e 94 4d 39 	call	0x729a	; 0x729a <print_menu_change>
    20a4:	1a e6       	ldi	r17, 0x6A	; 106
    20a6:	06 c0       	rjmp	.+12     	; 0x20b4 <set_deathclock_gender+0x40>
      } else {
	mode = SET_DEATHCLOCK_GENDER;
	// print the region normal
	display_gender(NORMAL);
    20a8:	80 e0       	ldi	r24, 0x00	; 0
    20aa:	0e 94 ea 0d 	call	0x1bd4	; 0x1bd4 <display_gender>

	print_menu_advance();
    20ae:	0e 94 5f 39 	call	0x72be	; 0x72be <print_menu_advance>
    20b2:	1c e0       	ldi	r17, 0x0C	; 12
      }
      screenmutex--;
    20b4:	80 91 58 02 	lds	r24, 0x0258
    20b8:	81 50       	subi	r24, 0x01	; 1
    20ba:	80 93 58 02 	sts	0x0258, r24
    }
    if ((just_pressed & 0x4) || (pressed & 0x4)) {
    20be:	80 91 54 02 	lds	r24, 0x0254
    20c2:	82 fd       	sbrc	r24, 2
    20c4:	04 c0       	rjmp	.+8      	; 0x20ce <set_deathclock_gender+0x5a>
    20c6:	80 91 55 02 	lds	r24, 0x0255
    20ca:	82 ff       	sbrs	r24, 2
    20cc:	21 c0       	rjmp	.+66     	; 0x2110 <set_deathclock_gender+0x9c>
      just_pressed = 0;
    20ce:	10 92 54 02 	sts	0x0254, r1
      
      if (mode == SET_DCGENDER) {
    20d2:	1a 36       	cpi	r17, 0x6A	; 106
    20d4:	e9 f4       	brne	.+58     	; 0x2110 <set_deathclock_gender+0x9c>
	    cfg_gender = !cfg_gender;
    20d6:	80 91 1f 03 	lds	r24, 0x031F
    20da:	90 e0       	ldi	r25, 0x00	; 0
    20dc:	88 23       	and	r24, r24
    20de:	09 f4       	brne	.+2      	; 0x20e2 <set_deathclock_gender+0x6e>
    20e0:	91 e0       	ldi	r25, 0x01	; 1
    20e2:	90 93 1f 03 	sts	0x031F, r25
	screenmutex++;
    20e6:	80 91 58 02 	lds	r24, 0x0258
    20ea:	8f 5f       	subi	r24, 0xFF	; 255
    20ec:	80 93 58 02 	sts	0x0258, r24
	//print_menu_change();

	// put a small arrow next to 'set 12h/24h'
	//drawArrow(0, 19, MENU_INDENT -1);

	display_gender(INVERTED);
    20f0:	81 e0       	ldi	r24, 0x01	; 1
    20f2:	0e 94 ea 0d 	call	0x1bd4	; 0x1bd4 <display_gender>
	screenmutex--;
    20f6:	80 91 58 02 	lds	r24, 0x0258
    20fa:	81 50       	subi	r24, 0x01	; 1
    20fc:	80 93 58 02 	sts	0x0258, r24

	eeprom_write_byte(&EE_GENDER, cfg_gender);
    2100:	60 91 1f 03 	lds	r22, 0x031F
    2104:	8e e0       	ldi	r24, 0x0E	; 14
    2106:	90 e0       	ldi	r25, 0x00	; 0
    2108:	0e 94 a2 3a 	call	0x7544	; 0x7544 <__eewr_byte_m328p>
	deathclock_changed();   
    210c:	0e 94 43 0d 	call	0x1a86	; 0x1a86 <deathclock_changed>
}

void set_deathclock_gender(void) {
  uint8_t mode = init_set_death_menu(2);

  while (!check_timeout()) {
    2110:	0e 94 c2 38 	call	0x7184	; 0x7184 <check_timeout>
    2114:	88 23       	and	r24, r24
    2116:	09 f4       	brne	.+2      	; 0x211a <set_deathclock_gender+0xa6>
    2118:	b3 cf       	rjmp	.-154    	; 0x2080 <set_deathclock_gender+0xc>
	eeprom_write_byte(&EE_GENDER, cfg_gender);
	deathclock_changed();   
      }
    }
  }
}
    211a:	1f 91       	pop	r17
    211c:	08 95       	ret

0000211e <set_deathclock_dob>:
extern uint8_t next_mode_setmonth[];
extern uint8_t next_mode_setday[];
void print_monthday_help(uint8_t mode);


void set_deathclock_dob(void) {
    211e:	1f 93       	push	r17
   uint8_t mode = init_set_death_menu(1);
    2120:	81 e0       	ldi	r24, 0x01	; 1
    2122:	0e 94 6c 0f 	call	0x1ed8	; 0x1ed8 <init_set_death_menu>
    2126:	18 2f       	mov	r17, r24
    2128:	8a c0       	rjmp	.+276    	; 0x223e <set_deathclock_dob+0x120>

  while (!check_timeout()) {

    if (just_pressed & 0x2) {
    212a:	80 91 54 02 	lds	r24, 0x0254
    212e:	81 ff       	sbrs	r24, 1
    2130:	40 c0       	rjmp	.+128    	; 0x21b2 <set_deathclock_dob+0x94>
      just_pressed = 0;
    2132:	10 92 54 02 	sts	0x0254, r1
      screenmutex++;
    2136:	80 91 58 02 	lds	r24, 0x0258
    213a:	8f 5f       	subi	r24, 0xFF	; 255
    213c:	80 93 58 02 	sts	0x0258, r24

      if (mode == SET_DEATHCLOCK_DOB) {
    2140:	1b 30       	cpi	r17, 0x0B	; 11
    2142:	31 f4       	brne	.+12     	; 0x2150 <set_deathclock_dob+0x32>
	// ok now its selected
	mode = next_mode_setdate[region];
    2144:	e0 91 6f 03 	lds	r30, 0x036F
    2148:	f0 e0       	ldi	r31, 0x00	; 0
    214a:	e6 53       	subi	r30, 0x36	; 54
    214c:	fe 4f       	sbci	r31, 0xFE	; 254
    214e:	07 c0       	rjmp	.+14     	; 0x215e <set_deathclock_dob+0x40>
      } else if (mode == SET_MONTH) {
    2150:	10 31       	cpi	r17, 0x10	; 16
    2152:	39 f4       	brne	.+14     	; 0x2162 <set_deathclock_dob+0x44>
	mode = next_mode_setmonth[region];
    2154:	e0 91 6f 03 	lds	r30, 0x036F
    2158:	f0 e0       	ldi	r31, 0x00	; 0
    215a:	e4 53       	subi	r30, 0x34	; 52
    215c:	fe 4f       	sbci	r31, 0xFE	; 254
    215e:	10 81       	ld	r17, Z
    2160:	1d c0       	rjmp	.+58     	; 0x219c <set_deathclock_dob+0x7e>
      } else if (mode == SET_DAY) {
    2162:	11 31       	cpi	r17, 0x11	; 17
    2164:	31 f4       	brne	.+12     	; 0x2172 <set_deathclock_dob+0x54>
	mode = next_mode_setday[region];
    2166:	e0 91 6f 03 	lds	r30, 0x036F
    216a:	f0 e0       	ldi	r31, 0x00	; 0
    216c:	e2 53       	subi	r30, 0x32	; 50
    216e:	fe 4f       	sbci	r31, 0xFE	; 254
    2170:	f6 cf       	rjmp	.-20     	; 0x215e <set_deathclock_dob+0x40>
	mode = SET_DEATHCLOCK_DOB;
	
	//date_y = year;
	//date_m = month;
	//date_d = day;
	eeprom_write_byte(&EE_DOB_MONTH,cfg_dob_m);
    2172:	60 91 25 03 	lds	r22, 0x0325
    2176:	88 e0       	ldi	r24, 0x08	; 8
    2178:	90 e0       	ldi	r25, 0x00	; 0
    217a:	0e 94 a2 3a 	call	0x7544	; 0x7544 <__eewr_byte_m328p>
    eeprom_write_byte(&EE_DOB_DAY,cfg_dob_d);
    217e:	60 91 22 03 	lds	r22, 0x0322
    2182:	89 e0       	ldi	r24, 0x09	; 9
    2184:	90 e0       	ldi	r25, 0x00	; 0
    2186:	0e 94 a2 3a 	call	0x7544	; 0x7544 <__eewr_byte_m328p>
    eeprom_write_byte(&EE_DOB_YEAR,cfg_dob_y);
    218a:	60 91 20 03 	lds	r22, 0x0320
    218e:	8a e0       	ldi	r24, 0x0A	; 10
    2190:	90 e0       	ldi	r25, 0x00	; 0
    2192:	0e 94 a2 3a 	call	0x7544	; 0x7544 <__eewr_byte_m328p>
    deathclock_changed();
    2196:	0e 94 43 0d 	call	0x1a86	; 0x1a86 <deathclock_changed>
    219a:	1b e0       	ldi	r17, 0x0B	; 11
      }
      display_dob(mode);
    219c:	81 2f       	mov	r24, r17
    219e:	0e 94 03 0e 	call	0x1c06	; 0x1c06 <display_dob>
	  print_monthday_help(mode);
    21a2:	81 2f       	mov	r24, r17
    21a4:	0e 94 ef 1f 	call	0x3fde	; 0x3fde <print_monthday_help>
      screenmutex--;
    21a8:	80 91 58 02 	lds	r24, 0x0258
    21ac:	81 50       	subi	r24, 0x01	; 1
    21ae:	80 93 58 02 	sts	0x0258, r24
    }
    if ((just_pressed & 0x4) || (pressed & 0x4)) {
    21b2:	80 91 54 02 	lds	r24, 0x0254
    21b6:	82 fd       	sbrc	r24, 2
    21b8:	04 c0       	rjmp	.+8      	; 0x21c2 <set_deathclock_dob+0xa4>
    21ba:	80 91 55 02 	lds	r24, 0x0255
    21be:	82 ff       	sbrs	r24, 2
    21c0:	3e c0       	rjmp	.+124    	; 0x223e <set_deathclock_dob+0x120>
      just_pressed = 0;
    21c2:	10 92 54 02 	sts	0x0254, r1

      screenmutex++;
    21c6:	80 91 58 02 	lds	r24, 0x0258
    21ca:	8f 5f       	subi	r24, 0xFF	; 255
    21cc:	80 93 58 02 	sts	0x0258, r24

      if (mode == SET_MONTH) {
    21d0:	10 31       	cpi	r17, 0x10	; 16
    21d2:	31 f4       	brne	.+12     	; 0x21e0 <set_deathclock_dob+0xc2>
    cfg_dob_m++;
    21d4:	80 91 25 03 	lds	r24, 0x0325
    21d8:	8f 5f       	subi	r24, 0xFF	; 255
    21da:	80 93 25 03 	sts	0x0325, r24
    21de:	14 c0       	rjmp	.+40     	; 0x2208 <set_deathclock_dob+0xea>
      }
      if (mode == SET_DAY) {
    21e0:	11 31       	cpi	r17, 0x11	; 17
    21e2:	31 f4       	brne	.+12     	; 0x21f0 <set_deathclock_dob+0xd2>
	cfg_dob_d++;
    21e4:	80 91 22 03 	lds	r24, 0x0322
    21e8:	8f 5f       	subi	r24, 0xFF	; 255
    21ea:	80 93 22 03 	sts	0x0322, r24
    21ee:	0c c0       	rjmp	.+24     	; 0x2208 <set_deathclock_dob+0xea>
      }
      if (mode == SET_YEAR) {
    21f0:	12 31       	cpi	r17, 0x12	; 18
    21f2:	51 f4       	brne	.+20     	; 0x2208 <set_deathclock_dob+0xea>
	cfg_dob_y = (cfg_dob_y+1) % 200;
    21f4:	80 91 20 03 	lds	r24, 0x0320
    21f8:	90 e0       	ldi	r25, 0x00	; 0
    21fa:	01 96       	adiw	r24, 0x01	; 1
    21fc:	68 ec       	ldi	r22, 0xC8	; 200
    21fe:	70 e0       	ldi	r23, 0x00	; 0
    2200:	0e 94 fe 39 	call	0x73fc	; 0x73fc <__divmodhi4>
    2204:	80 93 20 03 	sts	0x0320, r24
      }
      add_month(&cfg_dob_m,&cfg_dob_d,cfg_dob_d+1900);
    2208:	40 91 22 03 	lds	r20, 0x0322
    220c:	50 e0       	ldi	r21, 0x00	; 0
    220e:	44 59       	subi	r20, 0x94	; 148
    2210:	58 4f       	sbci	r21, 0xF8	; 248
    2212:	85 e2       	ldi	r24, 0x25	; 37
    2214:	93 e0       	ldi	r25, 0x03	; 3
    2216:	62 e2       	ldi	r22, 0x22	; 34
    2218:	73 e0       	ldi	r23, 0x03	; 3
    221a:	0e 94 89 38 	call	0x7112	; 0x7112 <add_month>
      display_dob(mode);
    221e:	81 2f       	mov	r24, r17
    2220:	0e 94 03 0e 	call	0x1c06	; 0x1c06 <display_dob>
      screenmutex--;
    2224:	80 91 58 02 	lds	r24, 0x0258
    2228:	81 50       	subi	r24, 0x01	; 1
    222a:	80 93 58 02 	sts	0x0258, r24

      if (pressed & 0x4)
    222e:	80 91 55 02 	lds	r24, 0x0255
    2232:	82 ff       	sbrs	r24, 2
    2234:	04 c0       	rjmp	.+8      	; 0x223e <set_deathclock_dob+0x120>
	delay_ms(200);  
    2236:	88 ec       	ldi	r24, 0xC8	; 200
    2238:	90 e0       	ldi	r25, 0x00	; 0
    223a:	0e 94 0c 35 	call	0x6a18	; 0x6a18 <delay_ms>


void set_deathclock_dob(void) {
   uint8_t mode = init_set_death_menu(1);

  while (!check_timeout()) {
    223e:	0e 94 c2 38 	call	0x7184	; 0x7184 <check_timeout>
    2242:	88 23       	and	r24, r24
    2244:	09 f4       	brne	.+2      	; 0x2248 <set_deathclock_dob+0x12a>
    2246:	71 cf       	rjmp	.-286    	; 0x212a <set_deathclock_dob+0xc>

      if (pressed & 0x4)
	delay_ms(200);  
    }
  }
}
    2248:	1f 91       	pop	r17
    224a:	08 95       	ret

0000224c <set_deathclock_bmi>:
      }
    }
  }
}

void set_deathclock_bmi(void) {
    224c:	af 92       	push	r10
    224e:	bf 92       	push	r11
    2250:	cf 92       	push	r12
    2252:	df 92       	push	r13
    2254:	ef 92       	push	r14
    2256:	ff 92       	push	r15
    2258:	1f 93       	push	r17
    225a:	cf 93       	push	r28
    225c:	df 93       	push	r29
  uint8_t mode = init_set_death_menu(4);
    225e:	84 e0       	ldi	r24, 0x04	; 4
    2260:	0e 94 6c 0f 	call	0x1ed8	; 0x1ed8 <init_set_death_menu>
    2264:	18 2f       	mov	r17, r24
      	  	  if ( cfg_bmi_height > 120 )
      	  	  	  cfg_bmi_height = 36;
      	  } else if (cfg_bmi_unit == BMI_Metric) {
      	  	  cfg_bmi_height++;
      	  	  if ( cfg_bmi_height > 305 )
      	  	  	  cfg_bmi_height = 92;
    2266:	7c e5       	ldi	r23, 0x5C	; 92
    2268:	a7 2e       	mov	r10, r23
    226a:	b1 2c       	mov	r11, r1
      }
      if (mode == SET_BMI_HT) {
      	  if(cfg_bmi_unit == BMI_Imperial) {
      	  	  cfg_bmi_height++;
      	  	  if ( cfg_bmi_height > 120 )
      	  	  	  cfg_bmi_height = 36;
    226c:	64 e2       	ldi	r22, 0x24	; 36
    226e:	c6 2e       	mov	r12, r22
    2270:	d1 2c       	mov	r13, r1
      	  	  if ( cfg_bmi_weight > 660 )
      	  	  	  cfg_bmi_weight = 35;
      	  } else if (cfg_bmi_unit == BMI_Metric) {
      	  	  cfg_bmi_weight += 5;
      	  	  if ( cfg_bmi_weight > 300 )
      	  	  	  cfg_bmi_weight = 15;
    2272:	5f e0       	ldi	r21, 0x0F	; 15
    2274:	e5 2e       	mov	r14, r21
    2276:	f1 2c       	mov	r15, r1
      if (mode == SET_BMI_WT) {
      	  if(cfg_bmi_unit == BMI_Imperial) {
      	  	  //cfg_bmi_weight = (cfg_bmi_weight + 5) % 660;
      	  	  cfg_bmi_weight += 5;
      	  	  if ( cfg_bmi_weight > 660 )
      	  	  	  cfg_bmi_weight = 35;
    2278:	c3 e2       	ldi	r28, 0x23	; 35
    227a:	d0 e0       	ldi	r29, 0x00	; 0
    227c:	21 c1       	rjmp	.+578    	; 0x24c0 <set_deathclock_bmi+0x274>

void set_deathclock_bmi(void) {
  uint8_t mode = init_set_death_menu(4);

  while (!check_timeout()) {
    if (just_pressed & 0x2) {
    227e:	80 91 54 02 	lds	r24, 0x0254
    2282:	81 ff       	sbrs	r24, 1
    2284:	46 c0       	rjmp	.+140    	; 0x2312 <set_deathclock_bmi+0xc6>
      just_pressed = 0;
    2286:	10 92 54 02 	sts	0x0254, r1
      screenmutex++;
    228a:	80 91 58 02 	lds	r24, 0x0258
    228e:	8f 5f       	subi	r24, 0xFF	; 255
    2290:	80 93 58 02 	sts	0x0258, r24

      if (mode == SET_DEATHCLOCK_BMI) {
    2294:	1e 30       	cpi	r17, 0x0E	; 14
    2296:	59 f4       	brne	.+22     	; 0x22ae <set_deathclock_bmi+0x62>
	DEBUG(putstring("Set BMI Unit"));
	// ok now its selected
	mode = SET_BMI_UNIT;

	//Set BMI Unit
	display_bmi_set(1);
    2298:	81 e0       	ldi	r24, 0x01	; 1
    229a:	0e 94 77 0e 	call	0x1cee	; 0x1cee <display_bmi_set>
	// display instructions below
	//PLUS_TO_CHANGE(" ut."," set unit");
	print_menu_opts("change ut.","set unit");
    229e:	87 ed       	ldi	r24, 0xD7	; 215
    22a0:	90 e0       	ldi	r25, 0x00	; 0
    22a2:	6e ec       	ldi	r22, 0xCE	; 206
    22a4:	70 e0       	ldi	r23, 0x00	; 0
    22a6:	0e 94 43 39 	call	0x7286	; 0x7286 <PRINT_MENU_OPTS>
    22aa:	1c e6       	ldi	r17, 0x6C	; 108
    22ac:	2d c0       	rjmp	.+90     	; 0x2308 <set_deathclock_bmi+0xbc>
      } else if (mode == SET_BMI_UNIT) {
    22ae:	1c 36       	cpi	r17, 0x6C	; 108
    22b0:	a1 f4       	brne	.+40     	; 0x22da <set_deathclock_bmi+0x8e>
	DEBUG(putstring("Set bmi weight / bmi direct"));
	mode = SET_BMI_WT;
	display_bmi_set(2);
    22b2:	82 e0       	ldi	r24, 0x02	; 2
    22b4:	0e 94 77 0e 	call	0x1cee	; 0x1cee <display_bmi_set>
	// display instructions below
	if(cfg_bmi_unit != BMI_Direct)
    22b8:	80 91 26 03 	lds	r24, 0x0326
    22bc:	82 30       	cpi	r24, 0x02	; 2
    22be:	29 f0       	breq	.+10     	; 0x22ca <set_deathclock_bmi+0x7e>
	  //PLUS_TO_CHANGE(" wt."," set wt. ");
	  print_menu_opts("change wt."," set wt.");
    22c0:	83 ec       	ldi	r24, 0xC3	; 195
    22c2:	90 e0       	ldi	r25, 0x00	; 0
    22c4:	6a eb       	ldi	r22, 0xBA	; 186
    22c6:	70 e0       	ldi	r23, 0x00	; 0
    22c8:	04 c0       	rjmp	.+8      	; 0x22d2 <set_deathclock_bmi+0x86>
	else
	  //PLUS_TO_CHANGE(" bmi"," set bmi ");
	  print_menu_opts("change bmi","set bmi");
    22ca:	8f ea       	ldi	r24, 0xAF	; 175
    22cc:	90 e0       	ldi	r25, 0x00	; 0
    22ce:	67 ea       	ldi	r22, 0xA7	; 167
    22d0:	70 e0       	ldi	r23, 0x00	; 0
    22d2:	0e 94 43 39 	call	0x7286	; 0x7286 <PRINT_MENU_OPTS>
    22d6:	1d e6       	ldi	r17, 0x6D	; 109
    22d8:	17 c0       	rjmp	.+46     	; 0x2308 <set_deathclock_bmi+0xbc>
	  } else if ((mode == SET_BMI_WT) && (cfg_bmi_unit != BMI_Direct)) {
    22da:	1d 36       	cpi	r17, 0x6D	; 109
    22dc:	79 f4       	brne	.+30     	; 0x22fc <set_deathclock_bmi+0xb0>
    22de:	80 91 26 03 	lds	r24, 0x0326
    22e2:	82 30       	cpi	r24, 0x02	; 2
    22e4:	59 f0       	breq	.+22     	; 0x22fc <set_deathclock_bmi+0xb0>
	mode = SET_BMI_HT;
    display_bmi_set(4);
    22e6:	84 e0       	ldi	r24, 0x04	; 4
    22e8:	0e 94 77 0e 	call	0x1cee	; 0x1cee <display_bmi_set>
    //PLUS_TO_CHANGE(" ht."," set ht. ");
    print_menu_opts("change ht.","set ht.");
    22ec:	8c e9       	ldi	r24, 0x9C	; 156
    22ee:	90 e0       	ldi	r25, 0x00	; 0
    22f0:	64 e9       	ldi	r22, 0x94	; 148
    22f2:	70 e0       	ldi	r23, 0x00	; 0
    22f4:	0e 94 43 39 	call	0x7286	; 0x7286 <PRINT_MENU_OPTS>
    22f8:	1e e6       	ldi	r17, 0x6E	; 110
    22fa:	06 c0       	rjmp	.+12     	; 0x2308 <set_deathclock_bmi+0xbc>
      } else {
	mode = SET_DEATHCLOCK_BMI;
	display_bmi_set(NORMAL);
    22fc:	80 e0       	ldi	r24, 0x00	; 0
    22fe:	0e 94 77 0e 	call	0x1cee	; 0x1cee <display_bmi_set>
	// display instructions below
	print_menu_advance();
    2302:	0e 94 5f 39 	call	0x72be	; 0x72be <print_menu_advance>
    2306:	1e e0       	ldi	r17, 0x0E	; 14
      }
      screenmutex--;
    2308:	80 91 58 02 	lds	r24, 0x0258
    230c:	81 50       	subi	r24, 0x01	; 1
    230e:	80 93 58 02 	sts	0x0258, r24
    }
    if ((just_pressed & 0x4) || (pressed & 0x4)) {
    2312:	80 91 54 02 	lds	r24, 0x0254
    2316:	82 fd       	sbrc	r24, 2
    2318:	04 c0       	rjmp	.+8      	; 0x2322 <set_deathclock_bmi+0xd6>
    231a:	80 91 55 02 	lds	r24, 0x0255
    231e:	82 ff       	sbrs	r24, 2
    2320:	cf c0       	rjmp	.+414    	; 0x24c0 <set_deathclock_bmi+0x274>
      just_pressed = 0;
    2322:	10 92 54 02 	sts	0x0254, r1
      screenmutex++;
    2326:	80 91 58 02 	lds	r24, 0x0258
    232a:	8f 5f       	subi	r24, 0xFF	; 255
    232c:	80 93 58 02 	sts	0x0258, r24

      if (mode == SET_BMI_UNIT) { 
    2330:	1c 36       	cpi	r17, 0x6C	; 108
    2332:	51 f5       	brne	.+84     	; 0x2388 <set_deathclock_bmi+0x13c>
      	  cfg_bmi_unit = (cfg_bmi_unit + 1) % 3;
    2334:	80 91 26 03 	lds	r24, 0x0326
    2338:	90 e0       	ldi	r25, 0x00	; 0
    233a:	01 96       	adiw	r24, 0x01	; 1
    233c:	63 e0       	ldi	r22, 0x03	; 3
    233e:	70 e0       	ldi	r23, 0x00	; 0
    2340:	0e 94 fe 39 	call	0x73fc	; 0x73fc <__divmodhi4>
    2344:	80 93 26 03 	sts	0x0326, r24
      	  if(cfg_bmi_unit == BMI_Imperial) {
    2348:	80 91 26 03 	lds	r24, 0x0326
    234c:	88 23       	and	r24, r24
    234e:	49 f4       	brne	.+18     	; 0x2362 <set_deathclock_bmi+0x116>
      	  	  cfg_bmi_weight = 35;
    2350:	d0 93 24 03 	sts	0x0324, r29
    2354:	c0 93 23 03 	sts	0x0323, r28
      	  	  cfg_bmi_height = 36;
    2358:	d0 92 29 03 	sts	0x0329, r13
    235c:	c0 92 28 03 	sts	0x0328, r12
    2360:	11 c0       	rjmp	.+34     	; 0x2384 <set_deathclock_bmi+0x138>
      	  } else if (cfg_bmi_unit == BMI_Metric) {
    2362:	80 91 26 03 	lds	r24, 0x0326
    2366:	81 30       	cpi	r24, 0x01	; 1
    2368:	49 f4       	brne	.+18     	; 0x237c <set_deathclock_bmi+0x130>
      	  	  cfg_bmi_weight = 15;
    236a:	f0 92 24 03 	sts	0x0324, r15
    236e:	e0 92 23 03 	sts	0x0323, r14
      	  	  cfg_bmi_height = 92;
    2372:	b0 92 29 03 	sts	0x0329, r11
    2376:	a0 92 28 03 	sts	0x0328, r10
    237a:	04 c0       	rjmp	.+8      	; 0x2384 <set_deathclock_bmi+0x138>
      	  } else {
      	  	  cfg_bmi_weight = 0;
    237c:	10 92 24 03 	sts	0x0324, r1
    2380:	10 92 23 03 	sts	0x0323, r1
      	  }
      	  display_bmi_set(1);
    2384:	81 e0       	ldi	r24, 0x01	; 1
    2386:	75 c0       	rjmp	.+234    	; 0x2472 <set_deathclock_bmi+0x226>
      } 
      if (mode == SET_BMI_WT) {
    2388:	1d 36       	cpi	r17, 0x6D	; 109
    238a:	09 f0       	breq	.+2      	; 0x238e <set_deathclock_bmi+0x142>
    238c:	3e c0       	rjmp	.+124    	; 0x240a <set_deathclock_bmi+0x1be>
      	  if(cfg_bmi_unit == BMI_Imperial) {
    238e:	80 91 26 03 	lds	r24, 0x0326
    2392:	88 23       	and	r24, r24
    2394:	a9 f4       	brne	.+42     	; 0x23c0 <set_deathclock_bmi+0x174>
      	  	  //cfg_bmi_weight = (cfg_bmi_weight + 5) % 660;
      	  	  cfg_bmi_weight += 5;
    2396:	80 91 23 03 	lds	r24, 0x0323
    239a:	90 91 24 03 	lds	r25, 0x0324
    239e:	05 96       	adiw	r24, 0x05	; 5
    23a0:	90 93 24 03 	sts	0x0324, r25
    23a4:	80 93 23 03 	sts	0x0323, r24
      	  	  if ( cfg_bmi_weight > 660 )
    23a8:	80 91 23 03 	lds	r24, 0x0323
    23ac:	90 91 24 03 	lds	r25, 0x0324
    23b0:	85 59       	subi	r24, 0x95	; 149
    23b2:	92 40       	sbci	r25, 0x02	; 2
    23b4:	40 f1       	brcs	.+80     	; 0x2406 <set_deathclock_bmi+0x1ba>
      	  	  	  cfg_bmi_weight = 35;
    23b6:	d0 93 24 03 	sts	0x0324, r29
    23ba:	c0 93 23 03 	sts	0x0323, r28
    23be:	23 c0       	rjmp	.+70     	; 0x2406 <set_deathclock_bmi+0x1ba>
      	  } else if (cfg_bmi_unit == BMI_Metric) {
    23c0:	80 91 26 03 	lds	r24, 0x0326
    23c4:	81 30       	cpi	r24, 0x01	; 1
    23c6:	a9 f4       	brne	.+42     	; 0x23f2 <set_deathclock_bmi+0x1a6>
      	  	  cfg_bmi_weight += 5;
    23c8:	80 91 23 03 	lds	r24, 0x0323
    23cc:	90 91 24 03 	lds	r25, 0x0324
    23d0:	05 96       	adiw	r24, 0x05	; 5
    23d2:	90 93 24 03 	sts	0x0324, r25
    23d6:	80 93 23 03 	sts	0x0323, r24
      	  	  if ( cfg_bmi_weight > 300 )
    23da:	80 91 23 03 	lds	r24, 0x0323
    23de:	90 91 24 03 	lds	r25, 0x0324
    23e2:	8d 52       	subi	r24, 0x2D	; 45
    23e4:	91 40       	sbci	r25, 0x01	; 1
    23e6:	78 f0       	brcs	.+30     	; 0x2406 <set_deathclock_bmi+0x1ba>
      	  	  	  cfg_bmi_weight = 15;
    23e8:	f0 92 24 03 	sts	0x0324, r15
    23ec:	e0 92 23 03 	sts	0x0323, r14
    23f0:	0a c0       	rjmp	.+20     	; 0x2406 <set_deathclock_bmi+0x1ba>
      	  } else {
      	  	  cfg_bmi_weight = (cfg_bmi_weight + 1) % 256;
    23f2:	80 91 23 03 	lds	r24, 0x0323
    23f6:	90 91 24 03 	lds	r25, 0x0324
    23fa:	01 96       	adiw	r24, 0x01	; 1
    23fc:	90 70       	andi	r25, 0x00	; 0
    23fe:	90 93 24 03 	sts	0x0324, r25
    2402:	80 93 23 03 	sts	0x0323, r24
      	  }
      	  display_bmi_set(2);
    2406:	82 e0       	ldi	r24, 0x02	; 2
    2408:	34 c0       	rjmp	.+104    	; 0x2472 <set_deathclock_bmi+0x226>
      }
      if (mode == SET_BMI_HT) {
    240a:	1e 36       	cpi	r17, 0x6E	; 110
    240c:	a1 f5       	brne	.+104    	; 0x2476 <set_deathclock_bmi+0x22a>
      	  if(cfg_bmi_unit == BMI_Imperial) {
    240e:	80 91 26 03 	lds	r24, 0x0326
    2412:	88 23       	and	r24, r24
    2414:	a9 f4       	brne	.+42     	; 0x2440 <set_deathclock_bmi+0x1f4>
      	  	  cfg_bmi_height++;
    2416:	80 91 28 03 	lds	r24, 0x0328
    241a:	90 91 29 03 	lds	r25, 0x0329
    241e:	01 96       	adiw	r24, 0x01	; 1
    2420:	90 93 29 03 	sts	0x0329, r25
    2424:	80 93 28 03 	sts	0x0328, r24
      	  	  if ( cfg_bmi_height > 120 )
    2428:	80 91 28 03 	lds	r24, 0x0328
    242c:	90 91 29 03 	lds	r25, 0x0329
    2430:	89 37       	cpi	r24, 0x79	; 121
    2432:	91 05       	cpc	r25, r1
    2434:	e8 f0       	brcs	.+58     	; 0x2470 <set_deathclock_bmi+0x224>
      	  	  	  cfg_bmi_height = 36;
    2436:	d0 92 29 03 	sts	0x0329, r13
    243a:	c0 92 28 03 	sts	0x0328, r12
    243e:	18 c0       	rjmp	.+48     	; 0x2470 <set_deathclock_bmi+0x224>
      	  } else if (cfg_bmi_unit == BMI_Metric) {
    2440:	80 91 26 03 	lds	r24, 0x0326
    2444:	81 30       	cpi	r24, 0x01	; 1
    2446:	a1 f4       	brne	.+40     	; 0x2470 <set_deathclock_bmi+0x224>
      	  	  cfg_bmi_height++;
    2448:	80 91 28 03 	lds	r24, 0x0328
    244c:	90 91 29 03 	lds	r25, 0x0329
    2450:	01 96       	adiw	r24, 0x01	; 1
    2452:	90 93 29 03 	sts	0x0329, r25
    2456:	80 93 28 03 	sts	0x0328, r24
      	  	  if ( cfg_bmi_height > 305 )
    245a:	80 91 28 03 	lds	r24, 0x0328
    245e:	90 91 29 03 	lds	r25, 0x0329
    2462:	82 53       	subi	r24, 0x32	; 50
    2464:	91 40       	sbci	r25, 0x01	; 1
    2466:	20 f0       	brcs	.+8      	; 0x2470 <set_deathclock_bmi+0x224>
      	  	  	  cfg_bmi_height = 92;
    2468:	b0 92 29 03 	sts	0x0329, r11
    246c:	a0 92 28 03 	sts	0x0328, r10
      	  }
      	  display_bmi_set(4);
    2470:	84 e0       	ldi	r24, 0x04	; 4
    2472:	0e 94 77 0e 	call	0x1cee	; 0x1cee <display_bmi_set>
      }
      eeprom_write_byte(&EE_BMI_UNIT,cfg_bmi_unit);
    2476:	60 91 26 03 	lds	r22, 0x0326
    247a:	80 e1       	ldi	r24, 0x10	; 16
    247c:	90 e0       	ldi	r25, 0x00	; 0
    247e:	0e 94 a2 3a 	call	0x7544	; 0x7544 <__eewr_byte_m328p>
      eeprom_write_word(&EE_BMI_WEIGHT,cfg_bmi_weight);
    2482:	60 91 23 03 	lds	r22, 0x0323
    2486:	70 91 24 03 	lds	r23, 0x0324
    248a:	81 e1       	ldi	r24, 0x11	; 17
    248c:	90 e0       	ldi	r25, 0x00	; 0
    248e:	0e 94 b0 3a 	call	0x7560	; 0x7560 <__eewr_word_m328p>
      eeprom_write_word(&EE_BMI_HEIGHT,cfg_bmi_height);
    2492:	60 91 28 03 	lds	r22, 0x0328
    2496:	70 91 29 03 	lds	r23, 0x0329
    249a:	83 e1       	ldi	r24, 0x13	; 19
    249c:	90 e0       	ldi	r25, 0x00	; 0
    249e:	0e 94 b0 3a 	call	0x7560	; 0x7560 <__eewr_word_m328p>
      deathclock_changed();
    24a2:	0e 94 43 0d 	call	0x1a86	; 0x1a86 <deathclock_changed>
      screenmutex--;
    24a6:	80 91 58 02 	lds	r24, 0x0258
    24aa:	81 50       	subi	r24, 0x01	; 1
    24ac:	80 93 58 02 	sts	0x0258, r24
      if (pressed & 0x4)
    24b0:	80 91 55 02 	lds	r24, 0x0255
    24b4:	82 ff       	sbrs	r24, 2
    24b6:	04 c0       	rjmp	.+8      	; 0x24c0 <set_deathclock_bmi+0x274>
	delay_ms(200);
    24b8:	88 ec       	ldi	r24, 0xC8	; 200
    24ba:	90 e0       	ldi	r25, 0x00	; 0
    24bc:	0e 94 0c 35 	call	0x6a18	; 0x6a18 <delay_ms>
}

void set_deathclock_bmi(void) {
  uint8_t mode = init_set_death_menu(4);

  while (!check_timeout()) {
    24c0:	0e 94 c2 38 	call	0x7184	; 0x7184 <check_timeout>
    24c4:	88 23       	and	r24, r24
    24c6:	09 f4       	brne	.+2      	; 0x24ca <set_deathclock_bmi+0x27e>
    24c8:	da ce       	rjmp	.-588    	; 0x227e <set_deathclock_bmi+0x32>
      screenmutex--;
      if (pressed & 0x4)
	delay_ms(200);
    }
  }
}
    24ca:	df 91       	pop	r29
    24cc:	cf 91       	pop	r28
    24ce:	1f 91       	pop	r17
    24d0:	ff 90       	pop	r15
    24d2:	ef 90       	pop	r14
    24d4:	df 90       	pop	r13
    24d6:	cf 90       	pop	r12
    24d8:	bf 90       	pop	r11
    24da:	af 90       	pop	r10
    24dc:	08 95       	ret

000024de <initanim_deathcfg>:
      }
    }
  }
}

void initanim_deathcfg(void) {
    24de:	df 92       	push	r13
    24e0:	ef 92       	push	r14
    24e2:	ff 92       	push	r15
    24e4:	0f 93       	push	r16
    24e6:	1f 93       	push	r17

  load_etd();	//Only need to do this once at power on, and once if Death Clock settings are changed, and refresh if date/time is changed.
    24e8:	0e 94 d6 26 	call	0x4dac	; 0x4dac <load_etd>
		set_deathclock_bmi();
  	} else if (displaymode == SET_DEATHCLOCK_GENDER) {
  		displaymode = SET_DEATHCLOCK_MODE;
		set_deathclock_mode();
  	} else if (displaymode == SET_DEATHCLOCK_BMI) {
  		displaymode = SET_DEATHCLOCK_SMOKER;
    24ec:	af e0       	ldi	r26, 0x0F	; 15
    24ee:	da 2e       	mov	r13, r26
		set_deathclock_gender();
  	} else if (displaymode == SET_DEATHCLOCK_MODE) {
  		displaymode = SET_DEATHCLOCK_BMI;
		set_deathclock_bmi();
  	} else if (displaymode == SET_DEATHCLOCK_GENDER) {
  		displaymode = SET_DEATHCLOCK_MODE;
    24f0:	fd e0       	ldi	r31, 0x0D	; 13
    24f2:	ef 2e       	mov	r14, r31
		set_deathclock_dob();
  	} else if (displaymode == SET_DEATHCLOCK_DOB) {
  		displaymode = SET_DEATHCLOCK_GENDER;
		set_deathclock_gender();
  	} else if (displaymode == SET_DEATHCLOCK_MODE) {
  		displaymode = SET_DEATHCLOCK_BMI;
    24f4:	ee e0       	ldi	r30, 0x0E	; 14
    24f6:	fe 2e       	mov	r15, r30
  		just_pressed = 0;
  	if(displaymode == SHOW_TIME) {
  		displaymode = SET_DEATHCLOCK_DOB;
		set_deathclock_dob();
  	} else if (displaymode == SET_DEATHCLOCK_DOB) {
  		displaymode = SET_DEATHCLOCK_GENDER;
    24f8:	0c e0       	ldi	r16, 0x0C	; 12
  load_etd();	//Only need to do this once at power on, and once if Death Clock settings are changed, and refresh if date/time is changed.
  do {
  	if(just_pressed & 1)
  		just_pressed = 0;
  	if(displaymode == SHOW_TIME) {
  		displaymode = SET_DEATHCLOCK_DOB;
    24fa:	1b e0       	ldi	r17, 0x0B	; 11

void initanim_deathcfg(void) {

  load_etd();	//Only need to do this once at power on, and once if Death Clock settings are changed, and refresh if date/time is changed.
  do {
  	if(just_pressed & 1)
    24fc:	80 91 54 02 	lds	r24, 0x0254
    2500:	80 ff       	sbrs	r24, 0
    2502:	02 c0       	rjmp	.+4      	; 0x2508 <initanim_deathcfg+0x2a>
  		just_pressed = 0;
    2504:	10 92 54 02 	sts	0x0254, r1
  	if(displaymode == SHOW_TIME) {
    2508:	80 91 72 03 	lds	r24, 0x0372
    250c:	88 23       	and	r24, r24
    250e:	29 f4       	brne	.+10     	; 0x251a <initanim_deathcfg+0x3c>
  		displaymode = SET_DEATHCLOCK_DOB;
    2510:	10 93 72 03 	sts	0x0372, r17
		set_deathclock_dob();
    2514:	0e 94 8f 10 	call	0x211e	; 0x211e <set_deathclock_dob>
    2518:	23 c0       	rjmp	.+70     	; 0x2560 <initanim_deathcfg+0x82>
  	} else if (displaymode == SET_DEATHCLOCK_DOB) {
    251a:	80 91 72 03 	lds	r24, 0x0372
    251e:	8b 30       	cpi	r24, 0x0B	; 11
    2520:	29 f4       	brne	.+10     	; 0x252c <initanim_deathcfg+0x4e>
  		displaymode = SET_DEATHCLOCK_GENDER;
    2522:	00 93 72 03 	sts	0x0372, r16
		set_deathclock_gender();
    2526:	0e 94 3a 10 	call	0x2074	; 0x2074 <set_deathclock_gender>
    252a:	1a c0       	rjmp	.+52     	; 0x2560 <initanim_deathcfg+0x82>
  	} else if (displaymode == SET_DEATHCLOCK_MODE) {
    252c:	80 91 72 03 	lds	r24, 0x0372
    2530:	8d 30       	cpi	r24, 0x0D	; 13
    2532:	29 f4       	brne	.+10     	; 0x253e <initanim_deathcfg+0x60>
  		displaymode = SET_DEATHCLOCK_BMI;
    2534:	f0 92 72 03 	sts	0x0372, r15
		set_deathclock_bmi();
    2538:	0e 94 26 11 	call	0x224c	; 0x224c <set_deathclock_bmi>
    253c:	11 c0       	rjmp	.+34     	; 0x2560 <initanim_deathcfg+0x82>
  	} else if (displaymode == SET_DEATHCLOCK_GENDER) {
    253e:	80 91 72 03 	lds	r24, 0x0372
    2542:	8c 30       	cpi	r24, 0x0C	; 12
    2544:	29 f4       	brne	.+10     	; 0x2550 <initanim_deathcfg+0x72>
  		displaymode = SET_DEATHCLOCK_MODE;
    2546:	e0 92 72 03 	sts	0x0372, r14
		set_deathclock_mode();
    254a:	0e 94 e5 0f 	call	0x1fca	; 0x1fca <set_deathclock_mode>
    254e:	08 c0       	rjmp	.+16     	; 0x2560 <initanim_deathcfg+0x82>
  	} else if (displaymode == SET_DEATHCLOCK_BMI) {
    2550:	80 91 72 03 	lds	r24, 0x0372
    2554:	8e 30       	cpi	r24, 0x0E	; 14
    2556:	21 f4       	brne	.+8      	; 0x2560 <initanim_deathcfg+0x82>
  		displaymode = SET_DEATHCLOCK_SMOKER;
    2558:	d0 92 72 03 	sts	0x0372, r13
		set_deathclock_smoker();
    255c:	0e 94 90 0f 	call	0x1f20	; 0x1f20 <set_deathclock_smoker>
  	}
  } while ((displaymode != SHOW_TIME) && (displaymode != SET_DEATHCLOCK_SMOKER));
    2560:	80 91 72 03 	lds	r24, 0x0372
    2564:	88 23       	and	r24, r24
    2566:	21 f0       	breq	.+8      	; 0x2570 <initanim_deathcfg+0x92>
    2568:	80 91 72 03 	lds	r24, 0x0372
    256c:	8f 30       	cpi	r24, 0x0F	; 15
    256e:	31 f6       	brne	.-116    	; 0x24fc <initanim_deathcfg+0x1e>
  just_pressed = 1;	//Exit, returning to the main cfg menu.
    2570:	81 e0       	ldi	r24, 0x01	; 1
    2572:	80 93 54 02 	sts	0x0254, r24
  displaymode = CFG_MENU;
    2576:	82 e6       	ldi	r24, 0x62	; 98
    2578:	80 93 72 03 	sts	0x0372, r24
  displaystyle=eeprom_read_byte(&EE_STYLE);
    257c:	87 e0       	ldi	r24, 0x07	; 7
    257e:	90 e0       	ldi	r25, 0x00	; 0
    2580:	0e 94 94 3a 	call	0x7528	; 0x7528 <__eerd_byte_m328p>
    2584:	80 93 69 03 	sts	0x0369, r24
  glcdClearScreen();
    2588:	0e 94 a6 2c 	call	0x594c	; 0x594c <glcdClearScreen>
}
    258c:	1f 91       	pop	r17
    258e:	0f 91       	pop	r16
    2590:	ff 90       	pop	r15
    2592:	ef 90       	pop	r14
    2594:	df 90       	pop	r13
    2596:	08 95       	ret

00002598 <initanim_GPS>:
	                 "\x15" "GPS Time:        UTC\0"
	                 "\x01" "\0"
	                 "\x14" "Menu=Exit, Set=-, +";
	                 

void initanim_GPS(void){
    2598:	0f 93       	push	r16
    259a:	1f 93       	push	r17
    259c:	cf 93       	push	r28
    259e:	df 93       	push	r29
 uint8_t UpdateTZ =1;
 uint8_t i,j;
 timezone=(int8_t)eeprom_read_byte(&EE_TIMEZONE);
    25a0:	89 e1       	ldi	r24, 0x19	; 25
    25a2:	90 e0       	ldi	r25, 0x00	; 0
    25a4:	0e 94 94 3a 	call	0x7528	; 0x7528 <__eerd_byte_m328p>
    25a8:	80 93 69 02 	sts	0x0269, r24
 glcdClearScreen();
    25ac:	0e 94 a6 2c 	call	0x594c	; 0x594c <glcdClearScreen>
    25b0:	00 e0       	ldi	r16, 0x00	; 0
    25b2:	10 e0       	ldi	r17, 0x00	; 0
    25b4:	04 c0       	rjmp	.+8      	; 0x25be <initanim_GPS+0x26>
 for(i=0,j=0;i<8;i++)
 {
 	 if(i) glcdSetAddress(MENU_INDENT, i);
    25b6:	88 e0       	ldi	r24, 0x08	; 8
    25b8:	60 2f       	mov	r22, r16
    25ba:	0e 94 9c 2c 	call	0x5938	; 0x5938 <glcdSetAddress>
     glcdPutStr_rom(&GPS_Text[j+1] ,NORMAL);
    25be:	c1 2f       	mov	r28, r17
    25c0:	d0 e0       	ldi	r29, 0x00	; 0
    25c2:	ce 01       	movw	r24, r28
    25c4:	8e 55       	subi	r24, 0x5E	; 94
    25c6:	9e 4f       	sbci	r25, 0xFE	; 254
    25c8:	60 e0       	ldi	r22, 0x00	; 0
    25ca:	0e 94 dd 28 	call	0x51ba	; 0x51ba <glcdPutStr_rom>
     j+=pgm_read_byte(&GPS_Text[j])+1;
    25ce:	cf 55       	subi	r28, 0x5F	; 95
    25d0:	de 4f       	sbci	r29, 0xFE	; 254
    25d2:	fe 01       	movw	r30, r28
    25d4:	84 91       	lpm	r24, Z+
    25d6:	18 0f       	add	r17, r24
    25d8:	1f 5f       	subi	r17, 0xFF	; 255
void initanim_GPS(void){
 uint8_t UpdateTZ =1;
 uint8_t i,j;
 timezone=(int8_t)eeprom_read_byte(&EE_TIMEZONE);
 glcdClearScreen();
 for(i=0,j=0;i<8;i++)
    25da:	0f 5f       	subi	r16, 0xFF	; 255
    25dc:	08 30       	cpi	r16, 0x08	; 8
    25de:	59 f7       	brne	.-42     	; 0x25b6 <initanim_GPS+0x1e>
    25e0:	91 e0       	ldi	r25, 0x01	; 1
  if (just_pressed) {
   switch (just_pressed) {
    case 4: if (++timezone>56) {timezone=56;}
            UpdateTZ=1;
            break;
    case 2: if (--timezone<-48) {timezone=-48;}
    25e2:	00 ed       	ldi	r16, 0xD0	; 208
 while (1) {
  // Must get a good test to enable gps
  // read buttons
  if (just_pressed) {
   switch (just_pressed) {
    case 4: if (++timezone>56) {timezone=56;}
    25e4:	18 e3       	ldi	r17, 0x38	; 56
     j+=pgm_read_byte(&GPS_Text[j])+1;
 }
 while (1) {
  // Must get a good test to enable gps
  // read buttons
  if (just_pressed) {
    25e6:	80 91 54 02 	lds	r24, 0x0254
    25ea:	88 23       	and	r24, r24
    25ec:	a1 f1       	breq	.+104    	; 0x2656 <initanim_GPS+0xbe>
   switch (just_pressed) {
    25ee:	80 91 54 02 	lds	r24, 0x0254
    25f2:	82 30       	cpi	r24, 0x02	; 2
    25f4:	89 f0       	breq	.+34     	; 0x2618 <initanim_GPS+0x80>
    25f6:	84 30       	cpi	r24, 0x04	; 4
    25f8:	19 f0       	breq	.+6      	; 0x2600 <initanim_GPS+0x68>
    25fa:	81 30       	cpi	r24, 0x01	; 1
    25fc:	51 f5       	brne	.+84     	; 0x2652 <initanim_GPS+0xba>
    25fe:	18 c0       	rjmp	.+48     	; 0x2630 <initanim_GPS+0x98>
    case 4: if (++timezone>56) {timezone=56;}
    2600:	80 91 69 02 	lds	r24, 0x0269
    2604:	8f 5f       	subi	r24, 0xFF	; 255
    2606:	80 93 69 02 	sts	0x0269, r24
    260a:	80 91 69 02 	lds	r24, 0x0269
    260e:	89 33       	cpi	r24, 0x39	; 57
    2610:	fc f0       	brlt	.+62     	; 0x2650 <initanim_GPS+0xb8>
    2612:	10 93 69 02 	sts	0x0269, r17
    2616:	1c c0       	rjmp	.+56     	; 0x2650 <initanim_GPS+0xb8>
            UpdateTZ=1;
            break;
    case 2: if (--timezone<-48) {timezone=-48;}
    2618:	80 91 69 02 	lds	r24, 0x0269
    261c:	81 50       	subi	r24, 0x01	; 1
    261e:	80 93 69 02 	sts	0x0269, r24
    2622:	80 91 69 02 	lds	r24, 0x0269
    2626:	80 3d       	cpi	r24, 0xD0	; 208
    2628:	9c f4       	brge	.+38     	; 0x2650 <initanim_GPS+0xb8>
    262a:	00 93 69 02 	sts	0x0269, r16
    262e:	10 c0       	rjmp	.+32     	; 0x2650 <initanim_GPS+0xb8>
            UpdateTZ=1;
            break;
    case 1: displaystyle=eeprom_read_byte(&EE_STYLE); glcdClearScreen(); displaymode = CFG_MENU; return;
    2630:	87 e0       	ldi	r24, 0x07	; 7
    2632:	90 e0       	ldi	r25, 0x00	; 0
    2634:	0e 94 94 3a 	call	0x7528	; 0x7528 <__eerd_byte_m328p>
    2638:	80 93 69 03 	sts	0x0369, r24
    263c:	0e 94 a6 2c 	call	0x594c	; 0x594c <glcdClearScreen>
    2640:	82 e6       	ldi	r24, 0x62	; 98
    2642:	80 93 72 03 	sts	0x0372, r24
  //GPSRead(1); //1 if debugging to screen on line 5
  //Hooked GPSRead elsewhere, that is quick enough for actual use.
  // display
  //_delay_ms(500);
 }
}
    2646:	df 91       	pop	r29
    2648:	cf 91       	pop	r28
    264a:	1f 91       	pop	r17
    264c:	0f 91       	pop	r16
    264e:	08 95       	ret
            UpdateTZ=1;
            break;
    case 2: if (--timezone<-48) {timezone=-48;}
            UpdateTZ=1;
            break;
    case 1: displaystyle=eeprom_read_byte(&EE_STYLE); glcdClearScreen(); displaymode = CFG_MENU; return;
    2650:	91 e0       	ldi	r25, 0x01	; 1
   }
   just_pressed=0;
    2652:	10 92 54 02 	sts	0x0254, r1
  }
  // display
  if (UpdateTZ) {
    2656:	99 23       	and	r25, r25
    2658:	31 f2       	breq	.-116    	; 0x25e6 <initanim_GPS+0x4e>
   UpdateTZ=0;
   eeprom_write_byte(&EE_TIMEZONE, timezone);
    265a:	60 91 69 02 	lds	r22, 0x0269
    265e:	89 e1       	ldi	r24, 0x19	; 25
    2660:	90 e0       	ldi	r25, 0x00	; 0
    2662:	0e 94 a2 3a 	call	0x7544	; 0x7544 <__eewr_byte_m328p>
   glcdSetAddress(45+MENU_INDENT,2);
    2666:	85 e3       	ldi	r24, 0x35	; 53
    2668:	62 e0       	ldi	r22, 0x02	; 2
    266a:	0e 94 9c 2c 	call	0x5938	; 0x5938 <glcdSetAddress>
   if(timezone<0)
    266e:	80 91 69 02 	lds	r24, 0x0269
    2672:	87 ff       	sbrs	r24, 7
    2674:	03 c0       	rjmp	.+6      	; 0x267c <initanim_GPS+0xe4>
   	   glcdPutStr("-",NORMAL);
    2676:	89 e0       	ldi	r24, 0x09	; 9
    2678:	92 e0       	ldi	r25, 0x02	; 2
    267a:	02 c0       	rjmp	.+4      	; 0x2680 <initanim_GPS+0xe8>
   else
   	   glcdPutStr("+",NORMAL);
    267c:	87 e0       	ldi	r24, 0x07	; 7
    267e:	92 e0       	ldi	r25, 0x02	; 2
    2680:	60 e0       	ldi	r22, 0x00	; 0
    2682:	0e 94 dd 28 	call	0x51ba	; 0x51ba <glcdPutStr_rom>
   //glcdPutStr((timezone<0 ? "-" : "+"),NORMAL);
   printnumber(TIMEZONEHOUR,NORMAL);
    2686:	80 91 69 02 	lds	r24, 0x0269
    268a:	99 27       	eor	r25, r25
    268c:	87 fd       	sbrc	r24, 7
    268e:	90 95       	com	r25
    2690:	97 ff       	sbrs	r25, 7
    2692:	03 c0       	rjmp	.+6      	; 0x269a <initanim_GPS+0x102>
    2694:	90 95       	com	r25
    2696:	81 95       	neg	r24
    2698:	9f 4f       	sbci	r25, 0xFF	; 255
    269a:	95 95       	asr	r25
    269c:	87 95       	ror	r24
    269e:	95 95       	asr	r25
    26a0:	87 95       	ror	r24
    26a2:	60 e0       	ldi	r22, 0x00	; 0
    26a4:	0e 94 50 2e 	call	0x5ca0	; 0x5ca0 <printnumber>
   glcdPutStr(":",NORMAL);
    26a8:	85 e0       	ldi	r24, 0x05	; 5
    26aa:	92 e0       	ldi	r25, 0x02	; 2
    26ac:	60 e0       	ldi	r22, 0x00	; 0
    26ae:	0e 94 dd 28 	call	0x51ba	; 0x51ba <glcdPutStr_rom>
   printnumber(TIMEZONEMIN,NORMAL);
    26b2:	80 91 69 02 	lds	r24, 0x0269
    26b6:	28 2f       	mov	r18, r24
    26b8:	33 27       	eor	r19, r19
    26ba:	27 fd       	sbrc	r18, 7
    26bc:	30 95       	com	r19
    26be:	37 ff       	sbrs	r19, 7
    26c0:	03 c0       	rjmp	.+6      	; 0x26c8 <initanim_GPS+0x130>
    26c2:	30 95       	com	r19
    26c4:	21 95       	neg	r18
    26c6:	3f 4f       	sbci	r19, 0xFF	; 255
    26c8:	23 70       	andi	r18, 0x03	; 3
    26ca:	30 70       	andi	r19, 0x00	; 0
    26cc:	c9 01       	movw	r24, r18
    26ce:	34 e0       	ldi	r19, 0x04	; 4
    26d0:	88 0f       	add	r24, r24
    26d2:	99 1f       	adc	r25, r25
    26d4:	3a 95       	dec	r19
    26d6:	e1 f7       	brne	.-8      	; 0x26d0 <initanim_GPS+0x138>
    26d8:	82 1b       	sub	r24, r18
    26da:	60 e0       	ldi	r22, 0x00	; 0
    26dc:	0e 94 50 2e 	call	0x5ca0	; 0x5ca0 <printnumber>
    26e0:	90 e0       	ldi	r25, 0x00	; 0
    26e2:	81 cf       	rjmp	.-254    	; 0x25e6 <initanim_GPS+0x4e>

000026e4 <step_int>:
  // Show the bases, 1 time only
  WriteBases_int(inverted);
}

void step_int(void) {
 if (--Timer==0) 
    26e4:	80 91 0c 01 	lds	r24, 0x010C
    26e8:	81 50       	subi	r24, 0x01	; 1
    26ea:	80 93 0c 01 	sts	0x010C, r24
    26ee:	88 23       	and	r24, r24
    26f0:	f1 f4       	brne	.+60     	; 0x272e <step_int+0x4a>
  {
  Timer=InvaderTimer;
    26f2:	85 e0       	ldi	r24, 0x05	; 5
    26f4:	80 93 0c 01 	sts	0x010C, r24
  pInvadersPrevious = pInvaders;
    26f8:	80 91 0a 01 	lds	r24, 0x010A
    26fc:	80 93 3b 02 	sts	0x023B, r24
  pInvaders += pInvadersDirection;
    2700:	90 91 0b 01 	lds	r25, 0x010B
    2704:	98 0f       	add	r25, r24
    2706:	90 93 0a 01 	sts	0x010A, r25
  if (pInvaders > 31) {pInvadersDirection=-1;}
    270a:	90 32       	cpi	r25, 0x20	; 32
    270c:	18 f0       	brcs	.+6      	; 0x2714 <step_int+0x30>
    270e:	8f ef       	ldi	r24, 0xFF	; 255
    2710:	80 93 0b 01 	sts	0x010B, r24
  if (pInvaders < 1) {pInvadersDirection=1;}
    2714:	99 23       	and	r25, r25
    2716:	19 f4       	brne	.+6      	; 0x271e <step_int+0x3a>
    2718:	81 e0       	ldi	r24, 0x01	; 1
    271a:	80 93 0b 01 	sts	0x010B, r24
  Frame = !Frame;
    271e:	90 e0       	ldi	r25, 0x00	; 0
    2720:	80 91 3c 02 	lds	r24, 0x023C
    2724:	88 23       	and	r24, r24
    2726:	09 f4       	brne	.+2      	; 0x272a <step_int+0x46>
    2728:	91 e0       	ldi	r25, 0x01	; 1
    272a:	90 93 3c 02 	sts	0x023C, r25
    272e:	08 95       	ret

00002730 <WriteTime_int>:
    glcdSetAddress(20 + (i*24), 7);
    glcdWriteCharGr(FontGr_INTRUDER_BASE,inverted);
   }
}

void WriteTime_int(uint8_t inverted) {
    2730:	1f 93       	push	r17
    2732:	18 2f       	mov	r17, r24
 	 glcdSetAddress(0,0);
    2734:	80 e0       	ldi	r24, 0x00	; 0
    2736:	60 e0       	ldi	r22, 0x00	; 0
    2738:	0e 94 9c 2c 	call	0x5938	; 0x5938 <glcdSetAddress>
	 printnumber(left_score,inverted);
    273c:	80 91 1b 03 	lds	r24, 0x031B
    2740:	61 2f       	mov	r22, r17
    2742:	0e 94 50 2e 	call	0x5ca0	; 0x5ca0 <printnumber>
     printnumber(left_score2,inverted);
    2746:	80 91 2b 03 	lds	r24, 0x032B
    274a:	61 2f       	mov	r22, r17
    274c:	0e 94 50 2e 	call	0x5ca0	; 0x5ca0 <printnumber>
     glcdSetAddress(102,0);
    2750:	86 e6       	ldi	r24, 0x66	; 102
    2752:	60 e0       	ldi	r22, 0x00	; 0
    2754:	0e 94 9c 2c 	call	0x5938	; 0x5938 <glcdSetAddress>
	 printnumber(right_score,inverted);
    2758:	80 91 1d 03 	lds	r24, 0x031D
    275c:	61 2f       	mov	r22, r17
    275e:	0e 94 50 2e 	call	0x5ca0	; 0x5ca0 <printnumber>
	 printnumber(right_score2,inverted);
    2762:	80 91 2a 03 	lds	r24, 0x032A
    2766:	61 2f       	mov	r22, r17
    2768:	0e 94 50 2e 	call	0x5ca0	; 0x5ca0 <printnumber>
}
    276c:	1f 91       	pop	r17
    276e:	08 95       	ret

00002770 <WriteBases_int>:
	glcdWriteCharGr(FontGr_INTRUDER_TRIANGLE_UP+(i/2)+(Frame*3),inverted);
   }
  }
}

void WriteBases_int(uint8_t inverted) {
    2770:	0f 93       	push	r16
    2772:	1f 93       	push	r17
    2774:	08 2f       	mov	r16, r24
    2776:	14 e1       	ldi	r17, 0x14	; 20
  for (uint8_t i=0;i<4;i++) {
    glcdSetAddress(20 + (i*24), 7);
    2778:	81 2f       	mov	r24, r17
    277a:	67 e0       	ldi	r22, 0x07	; 7
    277c:	0e 94 9c 2c 	call	0x5938	; 0x5938 <glcdSetAddress>
    glcdWriteCharGr(FontGr_INTRUDER_BASE,inverted);
    2780:	86 e0       	ldi	r24, 0x06	; 6
    2782:	60 2f       	mov	r22, r16
    2784:	0e 94 84 28 	call	0x5108	; 0x5108 <glcdWriteCharGr>
    2788:	18 5e       	subi	r17, 0xE8	; 232
   }
  }
}

void WriteBases_int(uint8_t inverted) {
  for (uint8_t i=0;i<4;i++) {
    278a:	14 37       	cpi	r17, 0x74	; 116
    278c:	a9 f7       	brne	.-22     	; 0x2778 <WriteBases_int+0x8>
    glcdSetAddress(20 + (i*24), 7);
    glcdWriteCharGr(FontGr_INTRUDER_BASE,inverted);
   }
}
    278e:	1f 91       	pop	r17
    2790:	0f 91       	pop	r16
    2792:	08 95       	ret

00002794 <WriteInvaders_int>:
    WriteTime_int(inverted);
   }
  }
}

void WriteInvaders_int(uint8_t inverted) {
    2794:	df 92       	push	r13
    2796:	ef 92       	push	r14
    2798:	ff 92       	push	r15
    279a:	0f 93       	push	r16
    279c:	1f 93       	push	r17
    279e:	e8 2e       	mov	r14, r24
  uint8_t j;
  uint8_t i;
  // Clear Previous
  if (pInvadersPrevious > pInvaders) {i=pInvaders+96;}
    27a0:	90 91 0a 01 	lds	r25, 0x010A
    27a4:	80 91 3b 02 	lds	r24, 0x023B
    27a8:	98 17       	cp	r25, r24
    27aa:	18 f4       	brcc	.+6      	; 0x27b2 <WriteInvaders_int+0x1e>
    27ac:	89 2f       	mov	r24, r25
    27ae:	80 5a       	subi	r24, 0xA0	; 160
    27b0:	02 c0       	rjmp	.+4      	; 0x27b6 <WriteInvaders_int+0x22>
  else {i=pInvaders-1;}
    27b2:	89 2f       	mov	r24, r25
    27b4:	81 50       	subi	r24, 0x01	; 1
  glcdFillRectangle(i, 8, 1, 48, inverted);
    27b6:	68 e0       	ldi	r22, 0x08	; 8
    27b8:	41 e0       	ldi	r20, 0x01	; 1
    27ba:	20 e3       	ldi	r18, 0x30	; 48
    27bc:	0e 2d       	mov	r16, r14
    27be:	0e 94 05 29 	call	0x520a	; 0x520a <glcdFillRectangle>
    27c2:	60 e0       	ldi	r22, 0x00	; 0
  // Draw Current
  for (i=0;i<6;i++){
   for (j=0;j<6;j++){
    glcdSetAddress(pInvaders + (j*16), 1+i);
	glcdWriteCharGr(FontGr_INTRUDER_TRIANGLE_UP+(i/2)+(Frame*3),inverted);
    27c4:	83 e0       	ldi	r24, 0x03	; 3
    27c6:	d8 2e       	mov	r13, r24
    27c8:	15 c0       	rjmp	.+42     	; 0x27f4 <WriteInvaders_int+0x60>
  else {i=pInvaders-1;}
  glcdFillRectangle(i, 8, 1, 48, inverted);
  // Draw Current
  for (i=0;i<6;i++){
   for (j=0;j<6;j++){
    glcdSetAddress(pInvaders + (j*16), 1+i);
    27ca:	80 91 0a 01 	lds	r24, 0x010A
    27ce:	80 0f       	add	r24, r16
    27d0:	61 2f       	mov	r22, r17
    27d2:	0e 94 9c 2c 	call	0x5938	; 0x5938 <glcdSetAddress>
	glcdWriteCharGr(FontGr_INTRUDER_TRIANGLE_UP+(i/2)+(Frame*3),inverted);
    27d6:	80 91 3c 02 	lds	r24, 0x023C
    27da:	8d 9d       	mul	r24, r13
    27dc:	c0 01       	movw	r24, r0
    27de:	11 24       	eor	r1, r1
    27e0:	8f 0d       	add	r24, r15
    27e2:	6e 2d       	mov	r22, r14
    27e4:	0e 94 84 28 	call	0x5108	; 0x5108 <glcdWriteCharGr>
    27e8:	00 5f       	subi	r16, 0xF0	; 240
  if (pInvadersPrevious > pInvaders) {i=pInvaders+96;}
  else {i=pInvaders-1;}
  glcdFillRectangle(i, 8, 1, 48, inverted);
  // Draw Current
  for (i=0;i<6;i++){
   for (j=0;j<6;j++){
    27ea:	00 36       	cpi	r16, 0x60	; 96
    27ec:	71 f7       	brne	.-36     	; 0x27ca <WriteInvaders_int+0x36>
  // Clear Previous
  if (pInvadersPrevious > pInvaders) {i=pInvaders+96;}
  else {i=pInvaders-1;}
  glcdFillRectangle(i, 8, 1, 48, inverted);
  // Draw Current
  for (i=0;i<6;i++){
    27ee:	16 30       	cpi	r17, 0x06	; 6
    27f0:	39 f0       	breq	.+14     	; 0x2800 <WriteInvaders_int+0x6c>
    27f2:	61 2f       	mov	r22, r17
   for (j=0;j<6;j++){
    glcdSetAddress(pInvaders + (j*16), 1+i);
	glcdWriteCharGr(FontGr_INTRUDER_TRIANGLE_UP+(i/2)+(Frame*3),inverted);
    27f4:	f6 2e       	mov	r15, r22
    27f6:	f6 94       	lsr	r15
    27f8:	00 e0       	ldi	r16, 0x00	; 0
  uint8_t j;
  uint8_t i;
  // Clear Previous
  if (pInvadersPrevious > pInvaders) {i=pInvaders+96;}
  else {i=pInvaders-1;}
  glcdFillRectangle(i, 8, 1, 48, inverted);
    27fa:	16 2f       	mov	r17, r22
    27fc:	1f 5f       	subi	r17, 0xFF	; 255
    27fe:	e5 cf       	rjmp	.-54     	; 0x27ca <WriteInvaders_int+0x36>
   for (j=0;j<6;j++){
    glcdSetAddress(pInvaders + (j*16), 1+i);
	glcdWriteCharGr(FontGr_INTRUDER_TRIANGLE_UP+(i/2)+(Frame*3),inverted);
   }
  }
}
    2800:	1f 91       	pop	r17
    2802:	0f 91       	pop	r16
    2804:	ff 90       	pop	r15
    2806:	ef 90       	pop	r14
    2808:	df 90       	pop	r13
    280a:	08 95       	ret

0000280c <setscore_int>:
    }
    setscore_int(inverted);
    return;
}

void setscore_int(uint8_t inverted) {
    280c:	1f 93       	push	r17
    280e:	18 2f       	mov	r17, r24
   if (minute_changed || hour_changed || last_score_mode2 != score_mode) {
    2810:	80 91 63 02 	lds	r24, 0x0263
    2814:	88 23       	and	r24, r24
    2816:	59 f4       	brne	.+22     	; 0x282e <setscore_int+0x22>
    2818:	80 91 64 02 	lds	r24, 0x0264
    281c:	88 23       	and	r24, r24
    281e:	39 f4       	brne	.+14     	; 0x282e <setscore_int+0x22>
    2820:	90 91 67 02 	lds	r25, 0x0267
    2824:	80 91 3e 02 	lds	r24, 0x023E
    2828:	89 17       	cp	r24, r25
    282a:	09 f4       	brne	.+2      	; 0x282e <setscore_int+0x22>
    282c:	4e c0       	rjmp	.+156    	; 0x28ca <setscore_int+0xbe>
   	   minute_changed = hour_changed = 0;
    282e:	10 92 64 02 	sts	0x0264, r1
    2832:	80 91 64 02 	lds	r24, 0x0264
    2836:	80 93 63 02 	sts	0x0263, r24
   if (! digitsmutex_int) {
    283a:	80 91 3d 02 	lds	r24, 0x023D
    283e:	88 23       	and	r24, r24
    2840:	09 f0       	breq	.+2      	; 0x2844 <setscore_int+0x38>
    2842:	43 c0       	rjmp	.+134    	; 0x28ca <setscore_int+0xbe>
    digitsmutex_int++;
    2844:	81 e0       	ldi	r24, 0x01	; 1
    2846:	80 93 3d 02 	sts	0x023D, r24
    last_score_mode2 = score_mode;
    284a:	80 91 67 02 	lds	r24, 0x0267
    284e:	80 93 3e 02 	sts	0x023E, r24
    left_score = hours(time_h);
    2852:	80 91 62 03 	lds	r24, 0x0362
    2856:	0e 94 ca 36 	call	0x6d94	; 0x6d94 <hours>
    285a:	80 93 1b 03 	sts	0x031B, r24
    left_score2 = time_m;
    285e:	80 91 6c 03 	lds	r24, 0x036C
    2862:	80 93 2b 03 	sts	0x032B, r24
    if (score_mode == SCORE_MODE_ALARM) {
    2866:	80 91 67 02 	lds	r24, 0x0267
    286a:	83 30       	cpi	r24, 0x03	; 3
    286c:	49 f4       	brne	.+18     	; 0x2880 <setscore_int+0x74>
     right_score = hours(alarm_h);
    286e:	80 91 70 03 	lds	r24, 0x0370
    2872:	0e 94 ca 36 	call	0x6d94	; 0x6d94 <hours>
    2876:	80 93 1d 03 	sts	0x031D, r24
     right_score2 = alarm_m;
    287a:	80 91 66 03 	lds	r24, 0x0366
    287e:	1b c0       	rjmp	.+54     	; 0x28b6 <setscore_int+0xaa>
    } 
    else if (score_mode == SCORE_MODE_DATE) {
    2880:	80 91 67 02 	lds	r24, 0x0267
    2884:	81 30       	cpi	r24, 0x01	; 1
    2886:	31 f4       	brne	.+12     	; 0x2894 <setscore_int+0x88>
      right_score = 20;
    2888:	84 e1       	ldi	r24, 0x14	; 20
    288a:	80 93 1d 03 	sts	0x031D, r24
      right_score2 = date_y;
    288e:	80 91 65 03 	lds	r24, 0x0365
    2892:	11 c0       	rjmp	.+34     	; 0x28b6 <setscore_int+0xaa>
    } 
    else if (region == REGION_US) {
    2894:	80 91 6f 03 	lds	r24, 0x036F
    2898:	88 23       	and	r24, r24
    289a:	39 f4       	brne	.+14     	; 0x28aa <setscore_int+0x9e>
     right_score = date_m;
    289c:	80 91 76 03 	lds	r24, 0x0376
    28a0:	80 93 1d 03 	sts	0x031D, r24
     right_score2 = date_d;
    28a4:	80 91 6b 03 	lds	r24, 0x036B
    28a8:	06 c0       	rjmp	.+12     	; 0x28b6 <setscore_int+0xaa>
    } 
    else {
     right_score = date_d;
    28aa:	80 91 6b 03 	lds	r24, 0x036B
    28ae:	80 93 1d 03 	sts	0x031D, r24
     right_score2 = date_m;
    28b2:	80 91 76 03 	lds	r24, 0x0376
    28b6:	80 93 2a 03 	sts	0x032A, r24
    }
    digitsmutex_int--;
    28ba:	80 91 3d 02 	lds	r24, 0x023D
    28be:	81 50       	subi	r24, 0x01	; 1
    28c0:	80 93 3d 02 	sts	0x023D, r24
    WriteTime_int(inverted);
    28c4:	81 2f       	mov	r24, r17
    28c6:	0e 94 98 13 	call	0x2730	; 0x2730 <WriteTime_int>
   }
  }
}
    28ca:	1f 91       	pop	r17
    28cc:	08 95       	ret

000028ce <drawdisplay_int>:
  if (pInvaders < 1) {pInvadersDirection=1;}
  Frame = !Frame;
  }
}

void drawdisplay_int(uint8_t inverted) {
    28ce:	1f 93       	push	r17
    28d0:	18 2f       	mov	r17, r24
    WriteInvaders_int(inverted);
    28d2:	0e 94 ca 13 	call	0x2794	; 0x2794 <WriteInvaders_int>
    if (alarming || wasalarming) {
    28d6:	80 91 71 03 	lds	r24, 0x0371
    28da:	88 23       	and	r24, r24
    28dc:	21 f4       	brne	.+8      	; 0x28e6 <drawdisplay_int+0x18>
    28de:	80 91 3f 02 	lds	r24, 0x023F
    28e2:	88 23       	and	r24, r24
    28e4:	39 f0       	breq	.+14     	; 0x28f4 <drawdisplay_int+0x26>
     WriteBases_int(inverted);
    28e6:	81 2f       	mov	r24, r17
    28e8:	0e 94 b8 13 	call	0x2770	; 0x2770 <WriteBases_int>
     wasalarming=alarming;
    28ec:	80 91 71 03 	lds	r24, 0x0371
    28f0:	80 93 3f 02 	sts	0x023F, r24
    }
    setscore_int(inverted);
    28f4:	81 2f       	mov	r24, r17
    28f6:	0e 94 06 14 	call	0x280c	; 0x280c <setscore_int>
    return;
}
    28fa:	1f 91       	pop	r17
    28fc:	08 95       	ret

000028fe <initdisplay_int>:
  pInvaders = 1;
  pInvadersPrevious=0;
  initdisplay_int(0);
 }

void initdisplay_int(uint8_t inverted) {
    28fe:	0f 93       	push	r16
    2900:	1f 93       	push	r17
    2902:	18 2f       	mov	r17, r24
  // clear screen
  glcdFillRectangle(0, 0, GLCD_XPIXELS, GLCD_YPIXELS, inverted);
    2904:	80 e0       	ldi	r24, 0x00	; 0
    2906:	60 e0       	ldi	r22, 0x00	; 0
    2908:	40 e8       	ldi	r20, 0x80	; 128
    290a:	20 e4       	ldi	r18, 0x40	; 64
    290c:	01 2f       	mov	r16, r17
    290e:	0e 94 05 29 	call	0x520a	; 0x520a <glcdFillRectangle>
  // get time & display
  last_score_mode2 = 99;
    2912:	83 e6       	ldi	r24, 0x63	; 99
    2914:	80 93 3e 02 	sts	0x023E, r24
  setscore_int(inverted);
    2918:	81 2f       	mov	r24, r17
    291a:	0e 94 06 14 	call	0x280c	; 0x280c <setscore_int>
  WriteTime_int(inverted);
    291e:	81 2f       	mov	r24, r17
    2920:	0e 94 98 13 	call	0x2730	; 0x2730 <WriteTime_int>
  // display players 
  WriteInvaders_int(inverted);
    2924:	81 2f       	mov	r24, r17
    2926:	0e 94 ca 13 	call	0x2794	; 0x2794 <WriteInvaders_int>
  // Show the bases, 1 time only
  WriteBases_int(inverted);
    292a:	81 2f       	mov	r24, r17
    292c:	0e 94 b8 13 	call	0x2770	; 0x2770 <WriteBases_int>
}
    2930:	1f 91       	pop	r17
    2932:	0f 91       	pop	r16
    2934:	08 95       	ret

00002936 <initanim_int>:
  DEBUG(uart_putw_dec(GLCD_XPIXELS));
  DEBUG(putstring("\n\rscreen height: "));
  DEBUG(uart_putw_dec(GLCD_YPIXELS));
  DEBUG(putstring_nl(""));
#endif
  pInvaders = 1;
    2936:	81 e0       	ldi	r24, 0x01	; 1
    2938:	80 93 0a 01 	sts	0x010A, r24
  pInvadersPrevious=0;
    293c:	10 92 3b 02 	sts	0x023B, r1
  initdisplay_int(0);
    2940:	80 e0       	ldi	r24, 0x00	; 0
    2942:	0e 94 7f 14 	call	0x28fe	; 0x28fe <initdisplay_int>
 }
    2946:	08 95       	ret

00002948 <sine>:

// Input:  angle in fixed point notation - -128 to +127 = -180 to +~179 degrees.
// output: 16-bit -7fff to +7fff
int16_t sine(int8_t angle)
{
	if(angle == -128) return 0;
    2948:	80 38       	cpi	r24, 0x80	; 128
    294a:	19 f4       	brne	.+6      	; 0x2952 <sine+0xa>
    294c:	e0 e0       	ldi	r30, 0x00	; 0
    294e:	f0 e0       	ldi	r31, 0x00	; 0
    2950:	27 c0       	rjmp	.+78     	; 0x29a0 <sine+0x58>
	if(angle < 0) return -sine(-angle);
    2952:	87 ff       	sbrs	r24, 7
    2954:	08 c0       	rjmp	.+16     	; 0x2966 <sine+0x1e>
    2956:	81 95       	neg	r24
    2958:	0e 94 a4 14 	call	0x2948	; 0x2948 <sine>
    295c:	ee 27       	eor	r30, r30
    295e:	ff 27       	eor	r31, r31
    2960:	e8 1b       	sub	r30, r24
    2962:	f9 0b       	sbc	r31, r25
    2964:	1d c0       	rjmp	.+58     	; 0x29a0 <sine+0x58>
	if(angle == 64) return 32767;
    2966:	80 34       	cpi	r24, 0x40	; 64
    2968:	19 f4       	brne	.+6      	; 0x2970 <sine+0x28>
    296a:	ef ef       	ldi	r30, 0xFF	; 255
    296c:	ff e7       	ldi	r31, 0x7F	; 127
    296e:	18 c0       	rjmp	.+48     	; 0x29a0 <sine+0x58>
    2970:	a8 2f       	mov	r26, r24
    2972:	bb 27       	eor	r27, r27
    2974:	a7 fd       	sbrc	r26, 7
    2976:	b0 95       	com	r27
	if(angle < 64) return sine_table[angle];
    2978:	80 34       	cpi	r24, 0x40	; 64
    297a:	3c f4       	brge	.+14     	; 0x298a <sine+0x42>
    297c:	aa 0f       	add	r26, r26
    297e:	bb 1f       	adc	r27, r27
    2980:	a3 5f       	subi	r26, 0xF3	; 243
    2982:	be 4f       	sbci	r27, 0xFE	; 254
    2984:	ed 91       	ld	r30, X+
    2986:	fc 91       	ld	r31, X
    2988:	0b c0       	rjmp	.+22     	; 0x29a0 <sine+0x58>
	return sine_table[63-(angle-65)];
    298a:	e0 e8       	ldi	r30, 0x80	; 128
    298c:	f0 e0       	ldi	r31, 0x00	; 0
    298e:	ea 1b       	sub	r30, r26
    2990:	fb 0b       	sbc	r31, r27
    2992:	ee 0f       	add	r30, r30
    2994:	ff 1f       	adc	r31, r31
    2996:	e3 5f       	subi	r30, 0xF3	; 243
    2998:	fe 4f       	sbci	r31, 0xFE	; 254
    299a:	01 90       	ld	r0, Z+
    299c:	f0 81       	ld	r31, Z
    299e:	e0 2d       	mov	r30, r0
}
    29a0:	cf 01       	movw	r24, r30
    29a2:	08 95       	ret

000029a4 <cosine>:

int16_t cosine(int8_t angle)
{
	return sine(angle+64);
    29a4:	80 5c       	subi	r24, 0xC0	; 192
    29a6:	0e 94 a4 14 	call	0x2948	; 0x2948 <sine>
}
    29aa:	08 95       	ret

000029ac <move_paddle>:
  drawbigdigit(DISPLAY_M1_X_RAT, DISPLAY_TIME_Y_RAT, right_score%10, inverted);

  drawmidline(inverted);
}

void move_paddle(int16_t *paddle, int16_t dest) {
    29ac:	fc 01       	movw	r30, r24
	if(abs(*paddle - dest) < MAX_PADDLE_SPEED) {
    29ae:	20 81       	ld	r18, Z
    29b0:	31 81       	ldd	r19, Z+1	; 0x01
    29b2:	c9 01       	movw	r24, r18
    29b4:	86 1b       	sub	r24, r22
    29b6:	97 0b       	sbc	r25, r23
    29b8:	81 50       	subi	r24, 0x01	; 1
    29ba:	9b 4f       	sbci	r25, 0xFB	; 251
    29bc:	8f 5f       	subi	r24, 0xFF	; 255
    29be:	99 40       	sbci	r25, 0x09	; 9
    29c0:	18 f4       	brcc	.+6      	; 0x29c8 <move_paddle+0x1c>
//if(1) {
        *paddle = dest;
    29c2:	71 83       	std	Z+1, r23	; 0x01
    29c4:	60 83       	st	Z, r22
    29c6:	08 95       	ret
      } else {
        if(*paddle > dest)
    29c8:	62 17       	cp	r22, r18
    29ca:	73 07       	cpc	r23, r19
    29cc:	1c f4       	brge	.+6      	; 0x29d4 <move_paddle+0x28>
          *paddle -= MAX_PADDLE_SPEED;
    29ce:	20 50       	subi	r18, 0x00	; 0
    29d0:	35 40       	sbci	r19, 0x05	; 5
    29d2:	02 c0       	rjmp	.+4      	; 0x29d8 <move_paddle+0x2c>
        else
          *paddle += MAX_PADDLE_SPEED;
    29d4:	20 50       	subi	r18, 0x00	; 0
    29d6:	3b 4f       	sbci	r19, 0xFB	; 251
    29d8:	31 83       	std	Z+1, r19	; 0x01
    29da:	20 83       	st	Z, r18
    29dc:	08 95       	ret

000029de <calculate_keepout>:
}


// JMM This seems broken... the simulation is just the paddle position! hmm...
uint8_t calculate_keepout(int16_t theball_x, int16_t theball_y, int16_t theball_dx, int16_t theball_dy, uint16_t *keepout1, uint16_t *keepout2)
{
    29de:	a8 e0       	ldi	r26, 0x08	; 8
    29e0:	b0 e0       	ldi	r27, 0x00	; 0
    29e2:	e5 ef       	ldi	r30, 0xF5	; 245
    29e4:	f4 e1       	ldi	r31, 0x14	; 20
    29e6:	0c 94 4f 3a 	jmp	0x749e	; 0x749e <__prologue_saves__+0x2>
    29ea:	5a 83       	std	Y+2, r21	; 0x02
    29ec:	49 83       	std	Y+1, r20	; 0x01
    29ee:	1c 83       	std	Y+4, r17	; 0x04
    29f0:	0b 83       	std	Y+3, r16	; 0x03
    29f2:	fe 82       	std	Y+6, r15	; 0x06
    29f4:	ed 82       	std	Y+5, r14	; 0x05
    29f6:	78 87       	std	Y+8, r23	; 0x08
    29f8:	6f 83       	std	Y+7, r22	; 0x07
    29fa:	bc 01       	movw	r22, r24
    29fc:	69 01       	movw	r12, r18
    29fe:	33 24       	eor	r3, r3
    2a00:	20 e0       	ldi	r18, 0x00	; 0
      int32_t dx = (LEFTPADDLE_X_FIXED + PADDLE_W_FIXED) - old_sim_ball_x;
      // now figure out what fraction that is of the motion and multiply that by the dy
      int32_t dy = (dx / (int32_t)sim_ball_dx) * (int32_t) sim_ball_dy;
      //if(DEBUGGING){putstring("LCOLL@ ("); uart_putw_dec(old_sim_ball_x + dx); putstring(", "); uart_putw_dec(old_sim_ball_y + dy);}
      
      *keepout1 = (old_sim_ball_y + dy); 
    2a02:	89 81       	ldd	r24, Y+1	; 0x01
    2a04:	9a 81       	ldd	r25, Y+2	; 0x02
    2a06:	2c 01       	movw	r4, r24
    2a08:	66 24       	eor	r6, r6
    2a0a:	57 fc       	sbrc	r5, 7
    2a0c:	60 94       	com	r6
    2a0e:	76 2c       	mov	r7, r6
    2a10:	76 c0       	rjmp	.+236    	; 0x2afe <calculate_keepout+0x120>

  while (    (sim_ball_x < (RIGHTPADDLE_X_FIXED + PADDLE_W_FIXED)) 
         && ((sim_ball_x + (BALL_RADIUS*2*FIXED_MATH)) > LEFTPADDLE_X_FIXED)) {
    int16_t old_sim_ball_x = sim_ball_x;
    int16_t old_sim_ball_y = sim_ball_y;
    sim_ball_y += sim_ball_dy;
    2a12:	af 80       	ldd	r10, Y+7	; 0x07
    2a14:	b8 84       	ldd	r11, Y+8	; 0x08
    2a16:	ac 0c       	add	r10, r12
    2a18:	bd 1c       	adc	r11, r13
    sim_ball_x += sim_ball_dx;
    2a1a:	89 80       	ldd	r8, Y+1	; 0x01
    2a1c:	9a 80       	ldd	r9, Y+2	; 0x02
    2a1e:	86 0e       	add	r8, r22
    2a20:	97 1e       	adc	r9, r23
	
    if (sim_ball_y  > (SCREEN_H - BALL_RADIUS*2 - BOTBAR_H)*FIXED_MATH) {
    2a22:	91 e0       	ldi	r25, 0x01	; 1
    2a24:	a9 16       	cp	r10, r25
    2a26:	9a e3       	ldi	r25, 0x3A	; 58
    2a28:	b9 06       	cpc	r11, r25
    2a2a:	44 f0       	brlt	.+16     	; 0x2a3c <calculate_keepout+0x5e>
      sim_ball_y = (SCREEN_H - BALL_RADIUS*2 - BOTBAR_H)*FIXED_MATH;
      sim_ball_dy = -sim_ball_dy;
    2a2c:	d0 94       	com	r13
    2a2e:	c1 94       	neg	r12
    2a30:	d1 08       	sbc	r13, r1
    2a32:	d3 94       	inc	r13
    2a34:	a1 2c       	mov	r10, r1
    2a36:	4a e3       	ldi	r20, 0x3A	; 58
    2a38:	b4 2e       	mov	r11, r20
    2a3a:	0c c0       	rjmp	.+24     	; 0x2a54 <calculate_keepout+0x76>
    }
	
    if (sim_ball_y <  TOPBAR_H_FIXED) {
    2a3c:	e0 e0       	ldi	r30, 0x00	; 0
    2a3e:	ae 16       	cp	r10, r30
    2a40:	e2 e0       	ldi	r30, 0x02	; 2
    2a42:	be 06       	cpc	r11, r30
    2a44:	3c f4       	brge	.+14     	; 0x2a54 <calculate_keepout+0x76>
      sim_ball_y = TOPBAR_H_FIXED;
      sim_ball_dy = -sim_ball_dy;
    2a46:	d0 94       	com	r13
    2a48:	c1 94       	neg	r12
    2a4a:	d1 08       	sbc	r13, r1
    2a4c:	d3 94       	inc	r13
    2a4e:	a1 2c       	mov	r10, r1
    2a50:	32 e0       	ldi	r19, 0x02	; 2
    2a52:	b3 2e       	mov	r11, r19
    }
    
    if (((sim_ball_x + BALL_RADIUS*2*FIXED_MATH) >= RIGHTPADDLE_X_FIXED) && 
    2a54:	f0 e0       	ldi	r31, 0x00	; 0
    2a56:	8f 16       	cp	r8, r31
    2a58:	ff e6       	ldi	r31, 0x6F	; 111
    2a5a:	9f 06       	cpc	r9, r31
    2a5c:	04 f1       	brlt	.+64     	; 0x2a9e <calculate_keepout+0xc0>
    2a5e:	3f e6       	ldi	r19, 0x6F	; 111
    2a60:	60 30       	cpi	r22, 0x00	; 0
    2a62:	73 07       	cpc	r23, r19
    2a64:	e4 f4       	brge	.+56     	; 0x2a9e <calculate_keepout+0xc0>
      int32_t dx = RIGHTPADDLE_X_FIXED - (old_sim_ball_x + BALL_RADIUS*2*FIXED_MATH);
      // now figure out what fraction that is of the motion and multiply that by the dy
      int32_t dy = (dx / (int32_t)sim_ball_dx) * (int32_t) sim_ball_dy;
      //if(DEBUGGING){putstring("RCOLL@ ("); uart_putw_dec(old_sim_ball_x + dx); putstring(", "); uart_putw_dec(old_sim_ball_y + dy);}
      
      *keepout1 = (old_sim_ball_y + dy); 
    2a66:	76 01       	movw	r14, r12
    2a68:	00 27       	eor	r16, r16
    2a6a:	f7 fc       	sbrc	r15, 7
    2a6c:	00 95       	com	r16
    2a6e:	10 2f       	mov	r17, r16
    2a70:	80 e0       	ldi	r24, 0x00	; 0
    2a72:	9f e6       	ldi	r25, 0x6F	; 111
    2a74:	86 1b       	sub	r24, r22
    2a76:	97 0b       	sbc	r25, r23
    2a78:	bc 01       	movw	r22, r24
    2a7a:	88 27       	eor	r24, r24
    2a7c:	77 fd       	sbrc	r23, 7
    2a7e:	80 95       	com	r24
    2a80:	98 2f       	mov	r25, r24
    2a82:	a3 01       	movw	r20, r6
    2a84:	92 01       	movw	r18, r4
    2a86:	0e 94 33 3a 	call	0x7466	; 0x7466 <__divmodsi4>
    2a8a:	c8 01       	movw	r24, r16
    2a8c:	b7 01       	movw	r22, r14
    2a8e:	0e 94 bf 39 	call	0x737e	; 0x737e <__mulsi3>
    2a92:	ef 81       	ldd	r30, Y+7	; 0x07
    2a94:	f8 85       	ldd	r31, Y+8	; 0x08
    2a96:	e6 0f       	add	r30, r22
    2a98:	f7 1f       	adc	r31, r23
    2a9a:	9f 01       	movw	r18, r30
    2a9c:	23 c0       	rjmp	.+70     	; 0x2ae4 <calculate_keepout+0x106>
      collided = 1;
    } else if ((sim_ball_x <= (LEFTPADDLE_X_FIXED + PADDLE_W_FIXED)) && 
    2a9e:	31 e0       	ldi	r19, 0x01	; 1
    2aa0:	83 16       	cp	r8, r19
    2aa2:	3d e0       	ldi	r19, 0x0D	; 13
    2aa4:	93 06       	cpc	r9, r19
    2aa6:	1c f5       	brge	.+70     	; 0x2aee <calculate_keepout+0x110>
    2aa8:	8d e0       	ldi	r24, 0x0D	; 13
    2aaa:	61 30       	cpi	r22, 0x01	; 1
    2aac:	78 07       	cpc	r23, r24
    2aae:	fc f0       	brlt	.+62     	; 0x2aee <calculate_keepout+0x110>
      int32_t dx = (LEFTPADDLE_X_FIXED + PADDLE_W_FIXED) - old_sim_ball_x;
      // now figure out what fraction that is of the motion and multiply that by the dy
      int32_t dy = (dx / (int32_t)sim_ball_dx) * (int32_t) sim_ball_dy;
      //if(DEBUGGING){putstring("LCOLL@ ("); uart_putw_dec(old_sim_ball_x + dx); putstring(", "); uart_putw_dec(old_sim_ball_y + dy);}
      
      *keepout1 = (old_sim_ball_y + dy); 
    2ab0:	76 01       	movw	r14, r12
    2ab2:	00 27       	eor	r16, r16
    2ab4:	f7 fc       	sbrc	r15, 7
    2ab6:	00 95       	com	r16
    2ab8:	10 2f       	mov	r17, r16
    2aba:	e0 e0       	ldi	r30, 0x00	; 0
    2abc:	fd e0       	ldi	r31, 0x0D	; 13
    2abe:	e6 1b       	sub	r30, r22
    2ac0:	f7 0b       	sbc	r31, r23
    2ac2:	bf 01       	movw	r22, r30
    2ac4:	88 27       	eor	r24, r24
    2ac6:	77 fd       	sbrc	r23, 7
    2ac8:	80 95       	com	r24
    2aca:	98 2f       	mov	r25, r24
    2acc:	a3 01       	movw	r20, r6
    2ace:	92 01       	movw	r18, r4
    2ad0:	0e 94 33 3a 	call	0x7466	; 0x7466 <__divmodsi4>
    2ad4:	c8 01       	movw	r24, r16
    2ad6:	b7 01       	movw	r22, r14
    2ad8:	0e 94 bf 39 	call	0x737e	; 0x737e <__mulsi3>
    2adc:	2f 81       	ldd	r18, Y+7	; 0x07
    2ade:	38 85       	ldd	r19, Y+8	; 0x08
    2ae0:	26 0f       	add	r18, r22
    2ae2:	37 1f       	adc	r19, r23
    2ae4:	eb 81       	ldd	r30, Y+3	; 0x03
    2ae6:	fc 81       	ldd	r31, Y+4	; 0x04
    2ae8:	31 83       	std	Z+1, r19	; 0x01
    2aea:	20 83       	st	Z, r18
    2aec:	04 c0       	rjmp	.+8      	; 0x2af6 <calculate_keepout+0x118>
      collided = 1;
    }
    if (!collided) {
    2aee:	22 23       	and	r18, r18
    2af0:	11 f4       	brne	.+4      	; 0x2af6 <calculate_keepout+0x118>
      tix++;
    2af2:	33 94       	inc	r3
    2af4:	01 c0       	rjmp	.+2      	; 0x2af8 <calculate_keepout+0x11a>
    2af6:	21 e0       	ldi	r18, 0x01	; 1
    2af8:	b8 86       	std	Y+8, r11	; 0x08
    2afa:	af 82       	std	Y+7, r10	; 0x07
    2afc:	b4 01       	movw	r22, r8
  int16_t sim_ball_dy = theball_dy;
  int16_t sim_ball_dx = theball_dx;
  
  uint8_t tix = 0, collided = 0;

  while (    (sim_ball_x < (RIGHTPADDLE_X_FIXED + PADDLE_W_FIXED)) 
    2afe:	cb 01       	movw	r24, r22
    2b00:	81 50       	subi	r24, 0x01	; 1
    2b02:	96 40       	sbci	r25, 0x06	; 6
    2b04:	8f 5f       	subi	r24, 0xFF	; 255
    2b06:	9f 46       	sbci	r25, 0x6F	; 111
    2b08:	08 f4       	brcc	.+2      	; 0x2b0c <calculate_keepout+0x12e>
    2b0a:	83 cf       	rjmp	.-250    	; 0x2a12 <calculate_keepout+0x34>
      tix++;
    }
    
    //if(DEBUGGING){putstring("\tSIMball @ ["); uart_putw_dec(sim_ball_x); putstring(", "); uart_putw_dec(sim_ball_y); putstring_nl("]");}
  }
  *keepout2 = sim_ball_y; // Used to include this -- error?: / FIXED_MATH;
    2b0c:	2f 81       	ldd	r18, Y+7	; 0x07
    2b0e:	38 85       	ldd	r19, Y+8	; 0x08
    2b10:	ed 81       	ldd	r30, Y+5	; 0x05
    2b12:	fe 81       	ldd	r31, Y+6	; 0x06
    2b14:	31 83       	std	Z+1, r19	; 0x01
    2b16:	20 83       	st	Z, r18

  return tix;
}
    2b18:	83 2d       	mov	r24, r3
    2b1a:	28 96       	adiw	r28, 0x08	; 8
    2b1c:	e1 e1       	ldi	r30, 0x11	; 17
    2b1e:	0c 94 6b 3a 	jmp	0x74d6	; 0x74d6 <__epilogue_restores__+0x2>

00002b22 <random_angle>:
    }
  }
}
#endif

int8_t random_angle(void) {
    2b22:	ef 92       	push	r14
    2b24:	ff 92       	push	r15
    2b26:	0f 93       	push	r16
    2b28:	1f 93       	push	r17
	uint32_t angle = crand(0);
    2b2a:	80 e0       	ldi	r24, 0x00	; 0
    2b2c:	0e 94 0d 38 	call	0x701a	; 0x701a <crand>
    2b30:	a0 e0       	ldi	r26, 0x00	; 0
    2b32:	b0 e0       	ldi	r27, 0x00	; 0
	angle *= (64 - MIN_BALL_ANGLE*2);
    2b34:	bc 01       	movw	r22, r24
    2b36:	cd 01       	movw	r24, r26
    2b38:	22 e2       	ldi	r18, 0x22	; 34
    2b3a:	30 e0       	ldi	r19, 0x00	; 0
    2b3c:	40 e0       	ldi	r20, 0x00	; 0
    2b3e:	50 e0       	ldi	r21, 0x00	; 0
    2b40:	0e 94 bf 39 	call	0x737e	; 0x737e <__mulsi3>
	angle /= RAND_MAX;
    2b44:	2f ef       	ldi	r18, 0xFF	; 255
    2b46:	3f e7       	ldi	r19, 0x7F	; 127
    2b48:	40 e0       	ldi	r20, 0x00	; 0
    2b4a:	50 e0       	ldi	r21, 0x00	; 0
    2b4c:	0e 94 11 3a 	call	0x7422	; 0x7422 <__udivmodsi4>
    2b50:	79 01       	movw	r14, r18
    2b52:	8a 01       	movw	r16, r20
	angle += MIN_BALL_ANGLE;
	uint8_t quadrant = (crand(1)) % 4;
    2b54:	81 e0       	ldi	r24, 0x01	; 1
    2b56:	0e 94 0d 38 	call	0x701a	; 0x701a <crand>

int8_t random_angle(void) {
	uint32_t angle = crand(0);
	angle *= (64 - MIN_BALL_ANGLE*2);
	angle /= RAND_MAX;
	angle += MIN_BALL_ANGLE;
    2b5a:	2f e0       	ldi	r18, 0x0F	; 15
    2b5c:	30 e0       	ldi	r19, 0x00	; 0
    2b5e:	40 e0       	ldi	r20, 0x00	; 0
    2b60:	50 e0       	ldi	r21, 0x00	; 0
    2b62:	e2 0e       	add	r14, r18
    2b64:	f3 1e       	adc	r15, r19
    2b66:	04 1f       	adc	r16, r20
    2b68:	15 1f       	adc	r17, r21
    2b6a:	82 95       	swap	r24
    2b6c:	88 0f       	add	r24, r24
    2b6e:	88 0f       	add	r24, r24
    2b70:	80 7c       	andi	r24, 0xC0	; 192
	uint8_t quadrant = (crand(1)) % 4;
	angle += quadrant*64;
	return angle & 0xFF;
}
    2b72:	8e 0d       	add	r24, r14
    2b74:	1f 91       	pop	r17
    2b76:	0f 91       	pop	r16
    2b78:	ff 90       	pop	r15
    2b7a:	ef 90       	pop	r14
    2b7c:	08 95       	ret

00002b7e <calculate_dest_pos>:
        else
          *paddle += MAX_PADDLE_SPEED;
      }
}

uint8_t calculate_dest_pos(uint16_t *left, uint16_t *right, uint16_t *dest, uint8_t dir) {
    2b7e:	a0 e0       	ldi	r26, 0x00	; 0
    2b80:	b0 e0       	ldi	r27, 0x00	; 0
    2b82:	e5 ec       	ldi	r30, 0xC5	; 197
    2b84:	f5 e1       	ldi	r31, 0x15	; 21
    2b86:	0c 94 56 3a 	jmp	0x74ac	; 0x74ac <__prologue_saves__+0x10>
    2b8a:	5c 01       	movw	r10, r24
    2b8c:	6b 01       	movw	r12, r22
    2b8e:	ea 01       	movw	r28, r20
    2b90:	80 91 3a 03 	lds	r24, 0x033A
    2b94:	90 91 3b 03 	lds	r25, 0x033B
    2b98:	60 91 32 03 	lds	r22, 0x0332
    2b9c:	70 91 33 03 	lds	r23, 0x0333
    2ba0:	40 91 36 03 	lds	r20, 0x0336
    2ba4:	50 91 37 03 	lds	r21, 0x0337
    2ba8:	e0 91 30 03 	lds	r30, 0x0330
    2bac:	f0 91 31 03 	lds	r31, 0x0331
  uint8_t miss=0;
  if(dir) //Ball moving to the left
    2bb0:	22 23       	and	r18, r18
    2bb2:	89 f0       	breq	.+34     	; 0x2bd6 <calculate_dest_pos+0x58>
  {
  	ticksremaining = calculate_keepout(ball_x, ball_y, ball_dx, ball_dy, left, right);
    2bb4:	9f 01       	movw	r18, r30
    2bb6:	85 01       	movw	r16, r10
    2bb8:	76 01       	movw	r14, r12
    2bba:	0e 94 ef 14 	call	0x29de	; 0x29de <calculate_keepout>
    2bbe:	80 93 34 03 	sts	0x0334, r24
    2bc2:	10 92 35 03 	sts	0x0335, r1
  	*dest = *left;
    2bc6:	f5 01       	movw	r30, r10
    2bc8:	80 81       	ld	r24, Z
    2bca:	91 81       	ldd	r25, Z+1	; 0x01
    2bcc:	99 83       	std	Y+1, r25	; 0x01
    2bce:	88 83       	st	Y, r24
  	if(minute_changed) miss=1;
    2bd0:	80 91 63 02 	lds	r24, 0x0263
    2bd4:	10 c0       	rjmp	.+32     	; 0x2bf6 <calculate_dest_pos+0x78>
  }
  else
  {
  	ticksremaining = calculate_keepout(ball_x, ball_y, ball_dx, ball_dy, right, left);
    2bd6:	9f 01       	movw	r18, r30
    2bd8:	86 01       	movw	r16, r12
    2bda:	75 01       	movw	r14, r10
    2bdc:	0e 94 ef 14 	call	0x29de	; 0x29de <calculate_keepout>
    2be0:	80 93 34 03 	sts	0x0334, r24
    2be4:	10 92 35 03 	sts	0x0335, r1
  	*dest = *right;
    2be8:	f6 01       	movw	r30, r12
    2bea:	80 81       	ld	r24, Z
    2bec:	91 81       	ldd	r25, Z+1	; 0x01
    2bee:	99 83       	std	Y+1, r25	; 0x01
    2bf0:	88 83       	st	Y, r24
  	if(hour_changed) miss=1;
    2bf2:	80 91 64 02 	lds	r24, 0x0264
    2bf6:	88 23       	and	r24, r24
    2bf8:	11 f0       	breq	.+4      	; 0x2bfe <calculate_dest_pos+0x80>
    2bfa:	21 e0       	ldi	r18, 0x01	; 1
    2bfc:	01 c0       	rjmp	.+2      	; 0x2c00 <calculate_dest_pos+0x82>
    2bfe:	20 e0       	ldi	r18, 0x00	; 0
  }
  *dest -= (PADDLE_H_FIXED / 3);
    2c00:	88 81       	ld	r24, Y
    2c02:	99 81       	ldd	r25, Y+1	; 0x01
    2c04:	8c 01       	movw	r16, r24
    2c06:	00 50       	subi	r16, 0x00	; 0
    2c08:	14 40       	sbci	r17, 0x04	; 4
    2c0a:	19 83       	std	Y+1, r17	; 0x01
    2c0c:	08 83       	st	Y, r16
    if(miss)
    2c0e:	22 23       	and	r18, r18
    2c10:	e1 f0       	breq	.+56     	; 0x2c4a <calculate_dest_pos+0xcc>
    {
      if(*dest < SCREEN_H*(FIXED_MATH/3)) {
    2c12:	f5 e1       	ldi	r31, 0x15	; 21
    2c14:	00 34       	cpi	r16, 0x40	; 64
    2c16:	1f 07       	cpc	r17, r31
    2c18:	18 f4       	brcc	.+6      	; 0x2c20 <calculate_dest_pos+0xa2>
      	*dest += (PADDLE_H_FIXED*2);
    2c1a:	80 50       	subi	r24, 0x00	; 0
    2c1c:	9c 4e       	sbci	r25, 0xEC	; 236
    2c1e:	13 c0       	rjmp	.+38     	; 0x2c46 <calculate_dest_pos+0xc8>
      }
//      else if (*dest > ((SCREEN_H_FIXED/3)*2)) {
      else if (*dest > SCREEN_H*(FIXED_MATH/3*2)) {
    2c20:	2a e2       	ldi	r18, 0x2A	; 42
    2c22:	01 38       	cpi	r16, 0x81	; 129
    2c24:	12 07       	cpc	r17, r18
    2c26:	18 f0       	brcs	.+6      	; 0x2c2e <calculate_dest_pos+0xb0>
      	*dest -= (PADDLE_H_FIXED*2);
    2c28:	80 50       	subi	r24, 0x00	; 0
    2c2a:	9c 41       	sbci	r25, 0x1C	; 28
    2c2c:	0c c0       	rjmp	.+24     	; 0x2c46 <calculate_dest_pos+0xc8>
      }
      else {
      	//*dest = crand(2)?0:SCREEN_H_FIXED;
      	*dest += crand(2) ? (PADDLE_H_FIXED*2) : -(PADDLE_H_FIXED*2);
    2c2e:	82 e0       	ldi	r24, 0x02	; 2
    2c30:	0e 94 0d 38 	call	0x701a	; 0x701a <crand>
    2c34:	89 2b       	or	r24, r25
    2c36:	19 f4       	brne	.+6      	; 0x2c3e <calculate_dest_pos+0xc0>
    2c38:	80 e0       	ldi	r24, 0x00	; 0
    2c3a:	98 ee       	ldi	r25, 0xE8	; 232
    2c3c:	02 c0       	rjmp	.+4      	; 0x2c42 <calculate_dest_pos+0xc4>
    2c3e:	80 e0       	ldi	r24, 0x00	; 0
    2c40:	98 e1       	ldi	r25, 0x18	; 24
    2c42:	80 0f       	add	r24, r16
    2c44:	91 1f       	adc	r25, r17
    2c46:	99 83       	std	Y+1, r25	; 0x01
    2c48:	88 83       	st	Y, r24
      }
    }
    return ticksremaining;
}
    2c4a:	80 91 34 03 	lds	r24, 0x0334
    2c4e:	cd b7       	in	r28, 0x3d	; 61
    2c50:	de b7       	in	r29, 0x3e	; 62
    2c52:	ea e0       	ldi	r30, 0x0A	; 10
    2c54:	0c 94 72 3a 	jmp	0x74e4	; 0x74e4 <__epilogue_restores__+0x10>

00002c58 <check_ball_digit_collision>:
	DISPLAY_DOW3_X
};
#endif

void check_ball_digit_collision(uint8_t redraw_digits, uint8_t digit_x, uint8_t digit, uint8_t inverted)
{
    2c58:	af 92       	push	r10
    2c5a:	cf 92       	push	r12
    2c5c:	df 92       	push	r13
    2c5e:	ef 92       	push	r14
    2c60:	ff 92       	push	r15
    2c62:	0f 93       	push	r16
    2c64:	1f 93       	push	r17
    2c66:	16 2f       	mov	r17, r22
    2c68:	f4 2e       	mov	r15, r20
    2c6a:	d2 2e       	mov	r13, r18
	if (redraw_digits || intersectrect(INT_MSB(oldball_x), INT_MSB(oldball_y), BALL_RADIUS*2, BALL_RADIUS*2,
    2c6c:	88 23       	and	r24, r24
    2c6e:	89 f4       	brne	.+34     	; 0x2c92 <check_ball_digit_collision+0x3a>
    2c70:	80 91 39 03 	lds	r24, 0x0339
    2c74:	60 91 41 03 	lds	r22, 0x0341
    2c78:	44 e0       	ldi	r20, 0x04	; 4
    2c7a:	24 e0       	ldi	r18, 0x04	; 4
    2c7c:	01 2f       	mov	r16, r17
    2c7e:	e4 e0       	ldi	r30, 0x04	; 4
    2c80:	ee 2e       	mov	r14, r30
    2c82:	7a e0       	ldi	r23, 0x0A	; 10
    2c84:	c7 2e       	mov	r12, r23
    2c86:	50 e1       	ldi	r21, 0x10	; 16
    2c88:	a5 2e       	mov	r10, r21
    2c8a:	0e 94 5f 38 	call	0x70be	; 0x70be <intersectrect>
    2c8e:	88 23       	and	r24, r24
    2c90:	31 f0       	breq	.+12     	; 0x2c9e <check_ball_digit_collision+0x46>
#ifdef OPTION_DOW_DATELONG
        if(digit > 10)
          drawbigfont(digit_x, DISPLAY_TIME_Y_RAT, digit, inverted);
        else
#endif
	      drawbigdigit(digit_x, DISPLAY_TIME_Y_RAT, digit, inverted);
    2c92:	81 2f       	mov	r24, r17
    2c94:	64 e0       	ldi	r22, 0x04	; 4
    2c96:	4f 2d       	mov	r20, r15
    2c98:	2d 2d       	mov	r18, r13
    2c9a:	0e 94 6a 39 	call	0x72d4	; 0x72d4 <drawbigdigit>
      }
}
    2c9e:	1f 91       	pop	r17
    2ca0:	0f 91       	pop	r16
    2ca2:	ff 90       	pop	r15
    2ca4:	ef 90       	pop	r14
    2ca6:	df 90       	pop	r13
    2ca8:	cf 90       	pop	r12
    2caa:	af 90       	pop	r10
    2cac:	08 95       	ret

00002cae <draw_score_rat>:

void draw_score_rat(uint8_t redraw_digits, uint8_t inverted) {
    2cae:	0f 93       	push	r16
    2cb0:	1f 93       	push	r17
    2cb2:	18 2f       	mov	r17, r24
    2cb4:	06 2f       	mov	r16, r22
		    }
			glcdFillRectangle(INT_MSB(ball_x), INT_MSB(ball_y), BALL_RADIUS*2, BALL_RADIUS*2, ! inverted);
			prev_mode = SCORE_MODE_TIME;
	    }
#endif
	check_ball_digit_collision(redraw_digits, DISPLAY_H10_X_RAT,left_score/10,inverted);
    2cb6:	80 91 1b 03 	lds	r24, 0x031B
    2cba:	6a e0       	ldi	r22, 0x0A	; 10
    2cbc:	0e 94 de 39 	call	0x73bc	; 0x73bc <__udivmodqi4>
    2cc0:	48 2f       	mov	r20, r24
    2cc2:	81 2f       	mov	r24, r17
    2cc4:	6e e1       	ldi	r22, 0x1E	; 30
    2cc6:	20 2f       	mov	r18, r16
    2cc8:	0e 94 2c 16 	call	0x2c58	; 0x2c58 <check_ball_digit_collision>
	check_ball_digit_collision(redraw_digits, DISPLAY_H1_X_RAT,left_score%10,inverted);
    2ccc:	80 91 1b 03 	lds	r24, 0x031B
    2cd0:	6a e0       	ldi	r22, 0x0A	; 10
    2cd2:	0e 94 de 39 	call	0x73bc	; 0x73bc <__udivmodqi4>
    2cd6:	81 2f       	mov	r24, r17
    2cd8:	6d e2       	ldi	r22, 0x2D	; 45
    2cda:	49 2f       	mov	r20, r25
    2cdc:	20 2f       	mov	r18, r16
    2cde:	0e 94 2c 16 	call	0x2c58	; 0x2c58 <check_ball_digit_collision>
	check_ball_digit_collision(redraw_digits, DISPLAY_M10_X_RAT,right_score/10,inverted);
    2ce2:	80 91 1d 03 	lds	r24, 0x031D
    2ce6:	6a e0       	ldi	r22, 0x0A	; 10
    2ce8:	0e 94 de 39 	call	0x73bc	; 0x73bc <__udivmodqi4>
    2cec:	48 2f       	mov	r20, r24
    2cee:	81 2f       	mov	r24, r17
    2cf0:	66 e4       	ldi	r22, 0x46	; 70
    2cf2:	20 2f       	mov	r18, r16
    2cf4:	0e 94 2c 16 	call	0x2c58	; 0x2c58 <check_ball_digit_collision>
	check_ball_digit_collision(redraw_digits, DISPLAY_M1_X_RAT,right_score%10,inverted);
    2cf8:	80 91 1d 03 	lds	r24, 0x031D
    2cfc:	6a e0       	ldi	r22, 0x0A	; 10
    2cfe:	0e 94 de 39 	call	0x73bc	; 0x73bc <__udivmodqi4>
    2d02:	81 2f       	mov	r24, r17
    2d04:	65 e5       	ldi	r22, 0x55	; 85
    2d06:	49 2f       	mov	r20, r25
    2d08:	20 2f       	mov	r18, r16
    2d0a:	0e 94 2c 16 	call	0x2c58	; 0x2c58 <check_ball_digit_collision>
#ifdef OPTION_DOW_DATELONG
  }
#endif
}
    2d0e:	1f 91       	pop	r17
    2d10:	0f 91       	pop	r16
    2d12:	08 95       	ret

00002d14 <drawmidline>:
    //ticksremaining = calculate_dest_pos(&left_dest, &right_dest, &dest_paddle_pos, 0);
  }
  
}

void drawmidline(uint8_t inverted) {
    2d14:	0f 93       	push	r16
    2d16:	1f 93       	push	r17
    2d18:	08 2f       	mov	r16, r24
    2d1a:	10 e0       	ldi	r17, 0x00	; 0
  uint8_t i;
  for (i=0; i < (SCREEN_H/8 - 1); i++) { 
    glcdSetAddress((SCREEN_W-MIDLINE_W)/2, i);
    2d1c:	8f e3       	ldi	r24, 0x3F	; 63
    2d1e:	61 2f       	mov	r22, r17
    2d20:	0e 94 9c 2c 	call	0x5938	; 0x5938 <glcdSetAddress>
    if (inverted) {
    2d24:	00 23       	and	r16, r16
    2d26:	11 f0       	breq	.+4      	; 0x2d2c <drawmidline+0x18>
      glcdDataWrite(0xF0);
    2d28:	80 ef       	ldi	r24, 0xF0	; 240
    2d2a:	01 c0       	rjmp	.+2      	; 0x2d2e <drawmidline+0x1a>
    } else {
      glcdDataWrite(0x0F);  
    2d2c:	8f e0       	ldi	r24, 0x0F	; 15
    2d2e:	0e 94 43 2c 	call	0x5886	; 0x5886 <glcdDataWrite>
  
}

void drawmidline(uint8_t inverted) {
  uint8_t i;
  for (i=0; i < (SCREEN_H/8 - 1); i++) { 
    2d32:	1f 5f       	subi	r17, 0xFF	; 255
    2d34:	17 30       	cpi	r17, 0x07	; 7
    2d36:	91 f7       	brne	.-28     	; 0x2d1c <drawmidline+0x8>
      glcdDataWrite(0xF0);
    } else {
      glcdDataWrite(0x0F);  
    }
  }
  glcdSetAddress((SCREEN_W-MIDLINE_W)/2, i);
    2d38:	8f e3       	ldi	r24, 0x3F	; 63
    2d3a:	67 e0       	ldi	r22, 0x07	; 7
    2d3c:	0e 94 9c 2c 	call	0x5938	; 0x5938 <glcdSetAddress>
  if (inverted) {
    2d40:	00 23       	and	r16, r16
    2d42:	11 f0       	breq	.+4      	; 0x2d48 <drawmidline+0x34>
    glcdDataWrite(0x20);  
    2d44:	80 e2       	ldi	r24, 0x20	; 32
    2d46:	01 c0       	rjmp	.+2      	; 0x2d4a <drawmidline+0x36>
  } else {
    glcdDataWrite(0xCF);  
    2d48:	8f ec       	ldi	r24, 0xCF	; 207
    2d4a:	0e 94 43 2c 	call	0x5886	; 0x5886 <glcdDataWrite>
  }
}
    2d4e:	1f 91       	pop	r17
    2d50:	0f 91       	pop	r16
    2d52:	08 95       	ret

00002d54 <setscore_rat>:
	return sine(angle+64);
}

void setscore_rat(void)
{
  if(score_mode != last_score_mode_rat) {
    2d54:	90 91 67 02 	lds	r25, 0x0267
    2d58:	80 91 41 02 	lds	r24, 0x0241
    2d5c:	98 17       	cp	r25, r24
    2d5e:	39 f0       	breq	.+14     	; 0x2d6e <setscore_rat+0x1a>
    redraw_time_rat = 1;
    2d60:	81 e0       	ldi	r24, 0x01	; 1
    2d62:	80 93 40 02 	sts	0x0240, r24
    last_score_mode_rat = score_mode;
    2d66:	80 91 67 02 	lds	r24, 0x0267
    2d6a:	80 93 41 02 	sts	0x0241, r24
  }
  switch(score_mode) {
    2d6e:	80 91 67 02 	lds	r24, 0x0267
    2d72:	81 30       	cpi	r24, 0x01	; 1
    2d74:	59 f1       	breq	.+86     	; 0x2dcc <setscore_rat+0x78>
    2d76:	81 30       	cpi	r24, 0x01	; 1
    2d78:	30 f0       	brcs	.+12     	; 0x2d86 <setscore_rat+0x32>
    2d7a:	82 30       	cpi	r24, 0x02	; 2
    2d7c:	c9 f1       	breq	.+114    	; 0x2df0 <setscore_rat+0x9c>
    2d7e:	83 30       	cpi	r24, 0x03	; 3
    2d80:	09 f0       	breq	.+2      	; 0x2d84 <setscore_rat+0x30>
    2d82:	48 c0       	rjmp	.+144    	; 0x2e14 <setscore_rat+0xc0>
    2d84:	3d c0       	rjmp	.+122    	; 0x2e00 <setscore_rat+0xac>
  	case SCORE_MODE_DATELONG:
  	  right_score = date_d;
  	  break;
#endif
    case SCORE_MODE_TIME:
      if((minute_changed || hour_changed)) {
    2d86:	80 91 63 02 	lds	r24, 0x0263
    2d8a:	88 23       	and	r24, r24
    2d8c:	21 f4       	brne	.+8      	; 0x2d96 <setscore_rat+0x42>
    2d8e:	80 91 64 02 	lds	r24, 0x0264
    2d92:	88 23       	and	r24, r24
    2d94:	91 f0       	breq	.+36     	; 0x2dba <setscore_rat+0x66>
      	if(hour_changed) {
    2d96:	80 91 64 02 	lds	r24, 0x0264
    2d9a:	88 23       	and	r24, r24
    2d9c:	39 f0       	breq	.+14     	; 0x2dac <setscore_rat+0x58>
	      left_score = hours(old_h);
    2d9e:	80 91 6d 03 	lds	r24, 0x036D
    2da2:	0e 94 ca 36 	call	0x6d94	; 0x6d94 <hours>
    2da6:	80 93 1b 03 	sts	0x031B, r24
    2daa:	04 c0       	rjmp	.+8      	; 0x2db4 <setscore_rat+0x60>
	      right_score = old_m;
	    } else if (minute_changed) {
    2dac:	80 91 63 02 	lds	r24, 0x0263
    2db0:	88 23       	and	r24, r24
    2db2:	81 f1       	breq	.+96     	; 0x2e14 <setscore_rat+0xc0>
	      right_score = old_m;
    2db4:	80 91 63 03 	lds	r24, 0x0363
    2db8:	20 c0       	rjmp	.+64     	; 0x2dfa <setscore_rat+0xa6>
	    }
      } else {
        left_score = hours(time_h);
    2dba:	80 91 62 03 	lds	r24, 0x0362
    2dbe:	0e 94 ca 36 	call	0x6d94	; 0x6d94 <hours>
    2dc2:	80 93 1b 03 	sts	0x031B, r24
        right_score = time_m;
    2dc6:	80 91 6c 03 	lds	r24, 0x036C
    2dca:	17 c0       	rjmp	.+46     	; 0x2dfa <setscore_rat+0xa6>
      break;
    case SCORE_MODE_DATE:
#ifdef OPTION_DOW_DATELONG
      if((region == REGION_US)||(region == DOW_REGION_US)) {
#else
      if(region == REGION_US) {
    2dcc:	80 91 6f 03 	lds	r24, 0x036F
    2dd0:	88 23       	and	r24, r24
    2dd2:	39 f4       	brne	.+14     	; 0x2de2 <setscore_rat+0x8e>
#endif
        left_score = date_m;
    2dd4:	80 91 76 03 	lds	r24, 0x0376
    2dd8:	80 93 1b 03 	sts	0x031B, r24
        right_score = date_d;
    2ddc:	80 91 6b 03 	lds	r24, 0x036B
    2de0:	0c c0       	rjmp	.+24     	; 0x2dfa <setscore_rat+0xa6>
      } else {
        left_score = date_d;
    2de2:	80 91 6b 03 	lds	r24, 0x036B
    2de6:	80 93 1b 03 	sts	0x031B, r24
        right_score = date_m;
    2dea:	80 91 76 03 	lds	r24, 0x0376
    2dee:	05 c0       	rjmp	.+10     	; 0x2dfa <setscore_rat+0xa6>
      }
      break;
    case SCORE_MODE_YEAR:
      left_score = 20;
    2df0:	84 e1       	ldi	r24, 0x14	; 20
    2df2:	80 93 1b 03 	sts	0x031B, r24
      right_score = date_y;
    2df6:	80 91 65 03 	lds	r24, 0x0365
    2dfa:	80 93 1d 03 	sts	0x031D, r24
    2dfe:	08 95       	ret
      break;
    case SCORE_MODE_ALARM:
      left_score = hours(alarm_h);
    2e00:	80 91 70 03 	lds	r24, 0x0370
    2e04:	0e 94 ca 36 	call	0x6d94	; 0x6d94 <hours>
    2e08:	80 93 1b 03 	sts	0x031B, r24
      right_score = alarm_m;
    2e0c:	80 91 66 03 	lds	r24, 0x0366
    2e10:	80 93 1d 03 	sts	0x031D, r24
    2e14:	08 95       	ret

00002e16 <drawdisplay_rat>:
  } else {
    glcdDataWrite(0xCF);  
  }
}

void drawdisplay_rat(uint8_t inverted) {
    2e16:	af 92       	push	r10
    2e18:	cf 92       	push	r12
    2e1a:	ef 92       	push	r14
    2e1c:	ff 92       	push	r15
    2e1e:	0f 93       	push	r16
    2e20:	1f 93       	push	r17
    2e22:	f8 2e       	mov	r15, r24

	setscore_rat();
    2e24:	0e 94 aa 16 	call	0x2d54	; 0x2d54 <setscore_rat>
    // erase old ball
//    *** THIS DOESN'T WORK WITH FIXED=256
    glcdFillRectangle(INT_MSB(oldball_x), INT_MSB(oldball_y), BALL_RADIUS*2, BALL_RADIUS*2, inverted);
    2e28:	80 91 39 03 	lds	r24, 0x0339
    2e2c:	60 91 41 03 	lds	r22, 0x0341
    2e30:	44 e0       	ldi	r20, 0x04	; 4
    2e32:	24 e0       	ldi	r18, 0x04	; 4
    2e34:	0f 2d       	mov	r16, r15
    2e36:	0e 94 05 29 	call	0x520a	; 0x520a <glcdFillRectangle>
    // draw new ball
    glcdFillRectangle(INT_MSB(ball_x), INT_MSB(ball_y), BALL_RADIUS*2, BALL_RADIUS*2, ! inverted);
    2e3a:	10 e0       	ldi	r17, 0x00	; 0
    2e3c:	ff 20       	and	r15, r15
    2e3e:	09 f4       	brne	.+2      	; 0x2e42 <drawdisplay_rat+0x2c>
    2e40:	11 e0       	ldi	r17, 0x01	; 1
    2e42:	80 91 3b 03 	lds	r24, 0x033B
    2e46:	60 91 33 03 	lds	r22, 0x0333
    2e4a:	44 e0       	ldi	r20, 0x04	; 4
    2e4c:	24 e0       	ldi	r18, 0x04	; 4
    2e4e:	01 2f       	mov	r16, r17
    2e50:	0e 94 05 29 	call	0x520a	; 0x520a <glcdFillRectangle>

    // draw middle lines around where the ball may have intersected it?
    if  (intersectrect(INT_MSB(oldball_x), INT_MSB(oldball_y), BALL_RADIUS*2, BALL_RADIUS*2,
    2e54:	80 91 39 03 	lds	r24, 0x0339
    2e58:	60 91 41 03 	lds	r22, 0x0341
    2e5c:	44 e0       	ldi	r20, 0x04	; 4
    2e5e:	24 e0       	ldi	r18, 0x04	; 4
    2e60:	0f e3       	ldi	r16, 0x3F	; 63
    2e62:	ee 24       	eor	r14, r14
    2e64:	cc 24       	eor	r12, r12
    2e66:	c3 94       	inc	r12
    2e68:	30 e4       	ldi	r19, 0x40	; 64
    2e6a:	a3 2e       	mov	r10, r19
    2e6c:	0e 94 5f 38 	call	0x70be	; 0x70be <intersectrect>
    2e70:	88 23       	and	r24, r24
    2e72:	19 f0       	breq	.+6      	; 0x2e7a <drawdisplay_rat+0x64>
		       SCREEN_W/2-MIDLINE_W, 0, MIDLINE_W, SCREEN_H)) {
      // redraw it since we had an intersection
      drawmidline(inverted);
    2e74:	8f 2d       	mov	r24, r15
    2e76:	0e 94 8a 16 	call	0x2d14	; 0x2d14 <drawmidline>
    }



    
    if (oldleftpaddle_y != leftpaddle_y) {
    2e7a:	20 91 2c 03 	lds	r18, 0x032C
    2e7e:	30 91 2d 03 	lds	r19, 0x032D
    2e82:	80 91 2e 03 	lds	r24, 0x032E
    2e86:	90 91 2f 03 	lds	r25, 0x032F
    2e8a:	28 17       	cp	r18, r24
    2e8c:	39 07       	cpc	r19, r25
    2e8e:	41 f0       	breq	.+16     	; 0x2ea0 <drawdisplay_rat+0x8a>
      // clear left paddle
      glcdFillRectangle(LEFTPADDLE_X, INT_MSB(oldleftpaddle_y), PADDLE_W, PADDLE_H, inverted);
    2e90:	8a e0       	ldi	r24, 0x0A	; 10
    2e92:	60 91 2d 03 	lds	r22, 0x032D
    2e96:	43 e0       	ldi	r20, 0x03	; 3
    2e98:	2c e0       	ldi	r18, 0x0C	; 12
    2e9a:	0f 2d       	mov	r16, r15
    2e9c:	0e 94 05 29 	call	0x520a	; 0x520a <glcdFillRectangle>
    }
      // draw left paddle
      glcdFillRectangle(LEFTPADDLE_X, INT_MSB(leftpaddle_y), PADDLE_W, PADDLE_H, !inverted);
    2ea0:	8a e0       	ldi	r24, 0x0A	; 10
    2ea2:	60 91 2f 03 	lds	r22, 0x032F
    2ea6:	43 e0       	ldi	r20, 0x03	; 3
    2ea8:	2c e0       	ldi	r18, 0x0C	; 12
    2eaa:	01 2f       	mov	r16, r17
    2eac:	0e 94 05 29 	call	0x520a	; 0x520a <glcdFillRectangle>
    

    if (oldrightpaddle_y != rightpaddle_y) {
    2eb0:	20 91 3e 03 	lds	r18, 0x033E
    2eb4:	30 91 3f 03 	lds	r19, 0x033F
    2eb8:	80 91 3c 03 	lds	r24, 0x033C
    2ebc:	90 91 3d 03 	lds	r25, 0x033D
    2ec0:	28 17       	cp	r18, r24
    2ec2:	39 07       	cpc	r19, r25
    2ec4:	41 f0       	breq	.+16     	; 0x2ed6 <drawdisplay_rat+0xc0>
      // clear right paddle
      glcdFillRectangle(RIGHTPADDLE_X, INT_MSB(oldrightpaddle_y), PADDLE_W, PADDLE_H, inverted);
    2ec6:	83 e7       	ldi	r24, 0x73	; 115
    2ec8:	60 91 3f 03 	lds	r22, 0x033F
    2ecc:	43 e0       	ldi	r20, 0x03	; 3
    2ece:	2c e0       	ldi	r18, 0x0C	; 12
    2ed0:	0f 2d       	mov	r16, r15
    2ed2:	0e 94 05 29 	call	0x520a	; 0x520a <glcdFillRectangle>
    }
      // draw right paddle
      glcdFillRectangle(RIGHTPADDLE_X, INT_MSB(rightpaddle_y), PADDLE_W, PADDLE_H, !inverted);
    2ed6:	83 e7       	ldi	r24, 0x73	; 115
    2ed8:	60 91 3d 03 	lds	r22, 0x033D
    2edc:	43 e0       	ldi	r20, 0x03	; 3
    2ede:	2c e0       	ldi	r18, 0x0C	; 12
    2ee0:	01 2f       	mov	r16, r17
    2ee2:	0e 94 05 29 	call	0x520a	; 0x520a <glcdFillRectangle>
    

    if (intersectrect(INT_MSB(oldball_x), INT_MSB(oldball_y), BALL_RADIUS*2, BALL_RADIUS*2, RIGHTPADDLE_X, INT_MSB(rightpaddle_y), PADDLE_W, PADDLE_H)) {
    2ee6:	80 91 39 03 	lds	r24, 0x0339
    2eea:	60 91 41 03 	lds	r22, 0x0341
    2eee:	44 e0       	ldi	r20, 0x04	; 4
    2ef0:	24 e0       	ldi	r18, 0x04	; 4
    2ef2:	03 e7       	ldi	r16, 0x73	; 115
    2ef4:	e0 90 3d 03 	lds	r14, 0x033D
    2ef8:	93 e0       	ldi	r25, 0x03	; 3
    2efa:	c9 2e       	mov	r12, r25
    2efc:	bc e0       	ldi	r27, 0x0C	; 12
    2efe:	ab 2e       	mov	r10, r27
    2f00:	0e 94 5f 38 	call	0x70be	; 0x70be <intersectrect>
    2f04:	88 23       	and	r24, r24
    2f06:	41 f0       	breq	.+16     	; 0x2f18 <drawdisplay_rat+0x102>
      glcdFillRectangle(RIGHTPADDLE_X, INT_MSB(rightpaddle_y), PADDLE_W, PADDLE_H, !inverted);
    2f08:	83 e7       	ldi	r24, 0x73	; 115
    2f0a:	60 91 3d 03 	lds	r22, 0x033D
    2f0e:	43 e0       	ldi	r20, 0x03	; 3
    2f10:	2c e0       	ldi	r18, 0x0C	; 12
    2f12:	01 2f       	mov	r16, r17
    2f14:	0e 94 05 29 	call	0x520a	; 0x520a <glcdFillRectangle>
    }
    if (intersectrect(INT_MSB(oldball_x), INT_MSB(oldball_y), BALL_RADIUS*2, BALL_RADIUS*2, LEFTPADDLE_X, INT_MSB(leftpaddle_y), PADDLE_W, PADDLE_H)) {
    2f18:	80 91 39 03 	lds	r24, 0x0339
    2f1c:	60 91 41 03 	lds	r22, 0x0341
    2f20:	44 e0       	ldi	r20, 0x04	; 4
    2f22:	24 e0       	ldi	r18, 0x04	; 4
    2f24:	0a e0       	ldi	r16, 0x0A	; 10
    2f26:	e0 90 2f 03 	lds	r14, 0x032F
    2f2a:	a3 e0       	ldi	r26, 0x03	; 3
    2f2c:	ca 2e       	mov	r12, r26
    2f2e:	fc e0       	ldi	r31, 0x0C	; 12
    2f30:	af 2e       	mov	r10, r31
    2f32:	0e 94 5f 38 	call	0x70be	; 0x70be <intersectrect>
    2f36:	88 23       	and	r24, r24
    2f38:	41 f0       	breq	.+16     	; 0x2f4a <drawdisplay_rat+0x134>
      glcdFillRectangle(LEFTPADDLE_X, INT_MSB(leftpaddle_y), PADDLE_W, PADDLE_H, !inverted);
    2f3a:	8a e0       	ldi	r24, 0x0A	; 10
    2f3c:	60 91 2f 03 	lds	r22, 0x032F
    2f40:	43 e0       	ldi	r20, 0x03	; 3
    2f42:	2c e0       	ldi	r18, 0x0C	; 12
    2f44:	01 2f       	mov	r16, r17
    2f46:	0e 94 05 29 	call	0x520a	; 0x520a <glcdFillRectangle>
    }
   // draw time
   uint8_t redraw_digits;
   TIMSK2 = 0;	//Disable Timer 2 interrupt, to prevent a race condition.
    2f4a:	10 92 70 00 	sts	0x0070, r1
   if(redraw_time_rat)
    2f4e:	80 91 40 02 	lds	r24, 0x0240
    2f52:	88 23       	and	r24, r24
    2f54:	11 f0       	breq	.+4      	; 0x2f5a <drawdisplay_rat+0x144>
   {
   	   redraw_digits = 1;
   	   redraw_time_rat = 0;
    2f56:	10 92 40 02 	sts	0x0240, r1
   }
   TIMSK2 = _BV(TOIE2); //Race issue gone, renable.
    2f5a:	81 e0       	ldi	r24, 0x01	; 1
    2f5c:	80 93 70 00 	sts	0x0070, r24
    
    draw_score_rat(redraw_digits,inverted);
    2f60:	6f 2d       	mov	r22, r15
    2f62:	0e 94 57 16 	call	0x2cae	; 0x2cae <draw_score_rat>
    
    redraw_digits = 0;
    
}
    2f66:	1f 91       	pop	r17
    2f68:	0f 91       	pop	r16
    2f6a:	ff 90       	pop	r15
    2f6c:	ef 90       	pop	r14
    2f6e:	cf 90       	pop	r12
    2f70:	af 90       	pop	r10
    2f72:	08 95       	ret

00002f74 <step_rat>:
      }
    }
    return ticksremaining;
}

void step_rat(void) {
    2f74:	af 92       	push	r10
    2f76:	cf 92       	push	r12
    2f78:	ef 92       	push	r14
    2f7a:	0f 93       	push	r16
    2f7c:	1f 93       	push	r17
  static uint8_t left_keepout_top, left_keepout_bot;
  static uint16_t dest_paddle_pos;
  static uint16_t right_dest, left_dest;

  // Save old ball location so we can do some vector stuff 
  oldball_x = ball_x;
    2f7e:	80 91 3a 03 	lds	r24, 0x033A
    2f82:	90 91 3b 03 	lds	r25, 0x033B
    2f86:	90 93 39 03 	sts	0x0339, r25
    2f8a:	80 93 38 03 	sts	0x0338, r24
  oldball_y = ball_y;
    2f8e:	20 91 32 03 	lds	r18, 0x0332
    2f92:	30 91 33 03 	lds	r19, 0x0333
    2f96:	30 93 41 03 	sts	0x0341, r19
    2f9a:	20 93 40 03 	sts	0x0340, r18

  // move ball according to the vector
  ball_x += ball_dx;
    2f9e:	60 91 36 03 	lds	r22, 0x0336
    2fa2:	70 91 37 03 	lds	r23, 0x0337
    2fa6:	86 0f       	add	r24, r22
    2fa8:	97 1f       	adc	r25, r23
    2faa:	90 93 3b 03 	sts	0x033B, r25
    2fae:	80 93 3a 03 	sts	0x033A, r24
  ball_y += ball_dy;
    2fb2:	40 91 30 03 	lds	r20, 0x0330
    2fb6:	50 91 31 03 	lds	r21, 0x0331
    2fba:	ca 01       	movw	r24, r20
    2fbc:	82 0f       	add	r24, r18
    2fbe:	93 1f       	adc	r25, r19
    2fc0:	90 93 33 03 	sts	0x0333, r25
    2fc4:	80 93 32 03 	sts	0x0332, r24
    
  
  /************************************* TOP & BOTTOM WALLS */
  // bouncing off bottom wall, reverse direction
//  if (ball_y  > (SCREEN_H_FIXED - BALL_RADIUS*2*FIXED_MATH - BOTBAR_H_FIXED)) {
  if (ball_y  > (SCREEN_H - BOTBAR_H - BALL_RADIUS*2)*FIXED_MATH) {
    2fc8:	81 50       	subi	r24, 0x01	; 1
    2fca:	9a 43       	sbci	r25, 0x3A	; 58
    2fcc:	74 f0       	brlt	.+28     	; 0x2fea <step_rat+0x76>
    //DEBUG(putstring_nl("bottom wall bounce"));
    ball_y = (SCREEN_H - BOTBAR_H - BALL_RADIUS*2)*FIXED_MATH;
    2fce:	80 e0       	ldi	r24, 0x00	; 0
    2fd0:	9a e3       	ldi	r25, 0x3A	; 58
    2fd2:	90 93 33 03 	sts	0x0333, r25
    2fd6:	80 93 32 03 	sts	0x0332, r24
    ball_dy = -ball_dy;
    2fda:	88 27       	eor	r24, r24
    2fdc:	99 27       	eor	r25, r25
    2fde:	84 1b       	sub	r24, r20
    2fe0:	95 0b       	sbc	r25, r21
    2fe2:	90 93 31 03 	sts	0x0331, r25
    2fe6:	80 93 30 03 	sts	0x0330, r24
  }
  
  // bouncing off top wall, reverse direction
  if (ball_y < TOPBAR_H_FIXED) {
    2fea:	80 91 32 03 	lds	r24, 0x0332
    2fee:	90 91 33 03 	lds	r25, 0x0333
    2ff2:	80 50       	subi	r24, 0x00	; 0
    2ff4:	92 40       	sbci	r25, 0x02	; 2
    2ff6:	8c f4       	brge	.+34     	; 0x301a <step_rat+0xa6>
    //DEBUG(putstring_nl("top wall bounce"));
    ball_y = TOPBAR_H_FIXED;
    2ff8:	80 e0       	ldi	r24, 0x00	; 0
    2ffa:	92 e0       	ldi	r25, 0x02	; 2
    2ffc:	90 93 33 03 	sts	0x0333, r25
    3000:	80 93 32 03 	sts	0x0332, r24
    ball_dy = -ball_dy;
    3004:	80 91 30 03 	lds	r24, 0x0330
    3008:	90 91 31 03 	lds	r25, 0x0331
    300c:	90 95       	com	r25
    300e:	81 95       	neg	r24
    3010:	9f 4f       	sbci	r25, 0xFF	; 255
    3012:	90 93 31 03 	sts	0x0331, r25
    3016:	80 93 30 03 	sts	0x0330, r24
  
  
  
  /************************************* LEFT & RIGHT WALLS */
  // the ball hits either wall, the ball resets location & angle
  if (   ((INT_MSB(ball_x))  > (SCREEN_W - BALL_RADIUS*2)) 
    301a:	80 91 3b 03 	lds	r24, 0x033B
    301e:	81 50       	subi	r24, 0x01	; 1
    3020:	8c 37       	cpi	r24, 0x7C	; 124
    3022:	50 f4       	brcc	.+20     	; 0x3038 <step_rat+0xc4>
    3024:	67 2b       	or	r22, r23
    3026:	09 f0       	breq	.+2      	; 0x302a <step_rat+0xb6>
    3028:	82 c0       	rjmp	.+260    	; 0x312e <step_rat+0x1ba>
    302a:	80 91 30 03 	lds	r24, 0x0330
    302e:	90 91 31 03 	lds	r25, 0x0331
    3032:	89 2b       	or	r24, r25
    3034:	09 f0       	breq	.+2      	; 0x3038 <step_rat+0xc4>
    3036:	7b c0       	rjmp	.+246    	; 0x312e <step_rat+0x1ba>
        }
      }
    }

    // place ball in the middle of the screen
    ball_x = (SCREEN_W/2 - BALL_RADIUS)*FIXED_MATH;
    3038:	80 e0       	ldi	r24, 0x00	; 0
    303a:	9e e3       	ldi	r25, 0x3E	; 62
    303c:	90 93 3b 03 	sts	0x033B, r25
    3040:	80 93 3a 03 	sts	0x033A, r24
    ball_y = (SCREEN_H/2 - BALL_RADIUS)*FIXED_MATH;
    3044:	80 e0       	ldi	r24, 0x00	; 0
    3046:	9e e1       	ldi	r25, 0x1E	; 30
    3048:	90 93 33 03 	sts	0x0333, r25
    304c:	80 93 32 03 	sts	0x0332, r24

// TODO JMM:  don't use cosine/sine... pick one randomly and calc the other one.
    int8_t angle = random_angle();
    3050:	0e 94 91 15 	call	0x2b22	; 0x2b22 <random_angle>
    3054:	18 2f       	mov	r17, r24
    ball_dx = (int16_t)  (((int32_t) MAX_BALL_SPEED * cosine(angle)) / 0x7FFF);
    3056:	0e 94 d2 14 	call	0x29a4	; 0x29a4 <cosine>
    305a:	aa 27       	eor	r26, r26
    305c:	97 fd       	sbrc	r25, 7
    305e:	a0 95       	com	r26
    3060:	ba 2f       	mov	r27, r26
    3062:	bc 01       	movw	r22, r24
    3064:	cd 01       	movw	r24, r26
    3066:	20 e0       	ldi	r18, 0x00	; 0
    3068:	35 e0       	ldi	r19, 0x05	; 5
    306a:	40 e0       	ldi	r20, 0x00	; 0
    306c:	50 e0       	ldi	r21, 0x00	; 0
    306e:	0e 94 bf 39 	call	0x737e	; 0x737e <__mulsi3>
    3072:	2f ef       	ldi	r18, 0xFF	; 255
    3074:	3f e7       	ldi	r19, 0x7F	; 127
    3076:	40 e0       	ldi	r20, 0x00	; 0
    3078:	50 e0       	ldi	r21, 0x00	; 0
    307a:	0e 94 33 3a 	call	0x7466	; 0x7466 <__divmodsi4>
    307e:	30 93 37 03 	sts	0x0337, r19
    3082:	20 93 36 03 	sts	0x0336, r18
    ball_dy = (int16_t)  (((int32_t) MAX_BALL_SPEED * sine(angle)) / 0x7FFF);
    3086:	81 2f       	mov	r24, r17
    3088:	0e 94 a4 14 	call	0x2948	; 0x2948 <sine>
    308c:	aa 27       	eor	r26, r26
    308e:	97 fd       	sbrc	r25, 7
    3090:	a0 95       	com	r26
    3092:	ba 2f       	mov	r27, r26
    3094:	bc 01       	movw	r22, r24
    3096:	cd 01       	movw	r24, r26
    3098:	20 e0       	ldi	r18, 0x00	; 0
    309a:	35 e0       	ldi	r19, 0x05	; 5
    309c:	40 e0       	ldi	r20, 0x00	; 0
    309e:	50 e0       	ldi	r21, 0x00	; 0
    30a0:	0e 94 bf 39 	call	0x737e	; 0x737e <__mulsi3>
    30a4:	2f ef       	ldi	r18, 0xFF	; 255
    30a6:	3f e7       	ldi	r19, 0x7F	; 127
    30a8:	40 e0       	ldi	r20, 0x00	; 0
    30aa:	50 e0       	ldi	r21, 0x00	; 0
    30ac:	0e 94 33 3a 	call	0x7466	; 0x7466 <__divmodsi4>
    30b0:	30 93 31 03 	sts	0x0331, r19
    30b4:	20 93 30 03 	sts	0x0330, r18

    glcdFillRectangle(LEFTPADDLE_X, left_keepout_top, PADDLE_W, left_keepout_bot - left_keepout_top, 0);
    30b8:	60 91 49 02 	lds	r22, 0x0249
    30bc:	20 91 48 02 	lds	r18, 0x0248
    30c0:	26 1b       	sub	r18, r22
    30c2:	8a e0       	ldi	r24, 0x0A	; 10
    30c4:	43 e0       	ldi	r20, 0x03	; 3
    30c6:	00 e0       	ldi	r16, 0x00	; 0
    30c8:	0e 94 05 29 	call	0x520a	; 0x520a <glcdFillRectangle>
    glcdFillRectangle(RIGHTPADDLE_X, right_keepout_top, PADDLE_W, right_keepout_bot - right_keepout_top, 0);
    30cc:	60 91 4b 02 	lds	r22, 0x024B
    30d0:	20 91 4a 02 	lds	r18, 0x024A
    30d4:	26 1b       	sub	r18, r22
    30d6:	83 e7       	ldi	r24, 0x73	; 115
    30d8:	43 e0       	ldi	r20, 0x03	; 3
    30da:	0e 94 05 29 	call	0x520a	; 0x520a <glcdFillRectangle>

    right_keepout_top = right_keepout_bot = 0;
    30de:	10 92 4a 02 	sts	0x024A, r1
    30e2:	10 92 4b 02 	sts	0x024B, r1
    left_keepout_top = left_keepout_bot = 0;
    30e6:	10 92 48 02 	sts	0x0248, r1
    30ea:	10 92 49 02 	sts	0x0249, r1
    redraw_time_rat = 1;
    30ee:	81 e0       	ldi	r24, 0x01	; 1
    30f0:	80 93 40 02 	sts	0x0240, r24
    minute_changed = hour_changed = 0;
    30f4:	10 92 64 02 	sts	0x0264, r1
    30f8:	80 91 64 02 	lds	r24, 0x0264
    30fc:	80 93 63 02 	sts	0x0263, r24
    ticksremaining = calculate_dest_pos(&left_dest, &right_dest, &dest_paddle_pos, ball_dx > 0);
    3100:	20 e0       	ldi	r18, 0x00	; 0
    3102:	80 91 36 03 	lds	r24, 0x0336
    3106:	90 91 37 03 	lds	r25, 0x0337
    310a:	18 16       	cp	r1, r24
    310c:	19 06       	cpc	r1, r25
    310e:	0c f4       	brge	.+2      	; 0x3112 <step_rat+0x19e>
    3110:	21 e0       	ldi	r18, 0x01	; 1
    3112:	82 e4       	ldi	r24, 0x42	; 66
    3114:	92 e0       	ldi	r25, 0x02	; 2
    3116:	64 e4       	ldi	r22, 0x44	; 68
    3118:	72 e0       	ldi	r23, 0x02	; 2
    311a:	46 e4       	ldi	r20, 0x46	; 70
    311c:	52 e0       	ldi	r21, 0x02	; 2
    311e:	0e 94 bf 15 	call	0x2b7e	; 0x2b7e <calculate_dest_pos>
    3122:	80 93 34 03 	sts	0x0334, r24
    3126:	10 92 35 03 	sts	0x0335, r1

		//left_score = time_h;
		//right_score = time_m;
		setscore_rat();
    312a:	0e 94 aa 16 	call	0x2d54	; 0x2d54 <setscore_rat>
	}

 

  // save old paddle position
  oldleftpaddle_y = leftpaddle_y;
    312e:	80 91 2e 03 	lds	r24, 0x032E
    3132:	90 91 2f 03 	lds	r25, 0x032F
    3136:	90 93 2d 03 	sts	0x032D, r25
    313a:	80 93 2c 03 	sts	0x032C, r24
  oldrightpaddle_y = rightpaddle_y;
    313e:	80 91 3c 03 	lds	r24, 0x033C
    3142:	90 91 3d 03 	lds	r25, 0x033D
    3146:	90 93 3f 03 	sts	0x033F, r25
    314a:	80 93 3e 03 	sts	0x033E, r24
    	move_paddle(&leftpaddle_y, dest_paddle_pos);
    }
  }*/
  
  //ticksremaining--;
  if((ball_dx < 0) && (ball_x < (SCREEN_W/2)*FIXED_MATH) ) {
    314e:	80 91 36 03 	lds	r24, 0x0336
    3152:	90 91 37 03 	lds	r25, 0x0337
    3156:	97 ff       	sbrs	r25, 7
    3158:	19 c0       	rjmp	.+50     	; 0x318c <step_rat+0x218>
    315a:	80 91 3a 03 	lds	r24, 0x033A
    315e:	90 91 3b 03 	lds	r25, 0x033B
    3162:	80 50       	subi	r24, 0x00	; 0
    3164:	90 44       	sbci	r25, 0x40	; 64
    3166:	7c f5       	brge	.+94     	; 0x31c6 <step_rat+0x252>
    move_paddle(&leftpaddle_y, minute_changed?dest_paddle_pos:(ball_y-(PADDLE_H_FIXED/3)));
    3168:	80 91 63 02 	lds	r24, 0x0263
    316c:	88 23       	and	r24, r24
    316e:	29 f0       	breq	.+10     	; 0x317a <step_rat+0x206>
    3170:	60 91 46 02 	lds	r22, 0x0246
    3174:	70 91 47 02 	lds	r23, 0x0247
    3178:	06 c0       	rjmp	.+12     	; 0x3186 <step_rat+0x212>
    317a:	60 91 32 03 	lds	r22, 0x0332
    317e:	70 91 33 03 	lds	r23, 0x0333
    3182:	60 50       	subi	r22, 0x00	; 0
    3184:	74 40       	sbci	r23, 0x04	; 4
    3186:	8e e2       	ldi	r24, 0x2E	; 46
    3188:	93 e0       	ldi	r25, 0x03	; 3
    318a:	1a c0       	rjmp	.+52     	; 0x31c0 <step_rat+0x24c>
  } else if((ball_dx > 0) && (ball_x > (SCREEN_W/2)*FIXED_MATH) ) {
    318c:	89 2b       	or	r24, r25
    318e:	19 f1       	breq	.+70     	; 0x31d6 <step_rat+0x262>
    3190:	80 91 3a 03 	lds	r24, 0x033A
    3194:	90 91 3b 03 	lds	r25, 0x033B
    3198:	81 50       	subi	r24, 0x01	; 1
    319a:	90 44       	sbci	r25, 0x40	; 64
    319c:	e4 f0       	brlt	.+56     	; 0x31d6 <step_rat+0x262>
  	move_paddle(&rightpaddle_y, hour_changed?dest_paddle_pos:(ball_y-(PADDLE_H_FIXED/3)));
    319e:	80 91 64 02 	lds	r24, 0x0264
    31a2:	88 23       	and	r24, r24
    31a4:	29 f0       	breq	.+10     	; 0x31b0 <step_rat+0x23c>
    31a6:	60 91 46 02 	lds	r22, 0x0246
    31aa:	70 91 47 02 	lds	r23, 0x0247
    31ae:	06 c0       	rjmp	.+12     	; 0x31bc <step_rat+0x248>
    31b0:	60 91 32 03 	lds	r22, 0x0332
    31b4:	70 91 33 03 	lds	r23, 0x0333
    31b8:	60 50       	subi	r22, 0x00	; 0
    31ba:	74 40       	sbci	r23, 0x04	; 4
    31bc:	8c e3       	ldi	r24, 0x3C	; 60
    31be:	93 e0       	ldi	r25, 0x03	; 3
    31c0:	0e 94 d6 14 	call	0x29ac	; 0x29ac <move_paddle>
    31c4:	15 c0       	rjmp	.+42     	; 0x31f0 <step_rat+0x27c>
  } else {
  	if(ball_dx < 0)
  		ticksremaining = calculate_dest_pos(&left_dest, &right_dest, &dest_paddle_pos, 1);
    31c6:	82 e4       	ldi	r24, 0x42	; 66
    31c8:	92 e0       	ldi	r25, 0x02	; 2
    31ca:	64 e4       	ldi	r22, 0x44	; 68
    31cc:	72 e0       	ldi	r23, 0x02	; 2
    31ce:	46 e4       	ldi	r20, 0x46	; 70
    31d0:	52 e0       	ldi	r21, 0x02	; 2
    31d2:	21 e0       	ldi	r18, 0x01	; 1
    31d4:	07 c0       	rjmp	.+14     	; 0x31e4 <step_rat+0x270>
  	else
  		ticksremaining = calculate_dest_pos(&left_dest, &right_dest, &dest_paddle_pos, 0);
    31d6:	82 e4       	ldi	r24, 0x42	; 66
    31d8:	92 e0       	ldi	r25, 0x02	; 2
    31da:	64 e4       	ldi	r22, 0x44	; 68
    31dc:	72 e0       	ldi	r23, 0x02	; 2
    31de:	46 e4       	ldi	r20, 0x46	; 70
    31e0:	52 e0       	ldi	r21, 0x02	; 2
    31e2:	20 e0       	ldi	r18, 0x00	; 0
    31e4:	0e 94 bf 15 	call	0x2b7e	; 0x2b7e <calculate_dest_pos>
    31e8:	80 93 34 03 	sts	0x0334, r24
    31ec:	10 92 35 03 	sts	0x0335, r1
  }

  // make sure the paddles dont hit the top or bottom
  if (leftpaddle_y < TOPBAR_H_FIXED +1)
    31f0:	80 91 2e 03 	lds	r24, 0x032E
    31f4:	90 91 2f 03 	lds	r25, 0x032F
    31f8:	81 50       	subi	r24, 0x01	; 1
    31fa:	92 40       	sbci	r25, 0x02	; 2
    31fc:	34 f4       	brge	.+12     	; 0x320a <step_rat+0x296>
    leftpaddle_y = TOPBAR_H_FIXED + 1;
    31fe:	81 e0       	ldi	r24, 0x01	; 1
    3200:	92 e0       	ldi	r25, 0x02	; 2
    3202:	90 93 2f 03 	sts	0x032F, r25
    3206:	80 93 2e 03 	sts	0x032E, r24
  if (rightpaddle_y < TOPBAR_H_FIXED + 1)
    320a:	80 91 3c 03 	lds	r24, 0x033C
    320e:	90 91 3d 03 	lds	r25, 0x033D
    3212:	81 50       	subi	r24, 0x01	; 1
    3214:	92 40       	sbci	r25, 0x02	; 2
    3216:	34 f4       	brge	.+12     	; 0x3224 <step_rat+0x2b0>
    rightpaddle_y = TOPBAR_H_FIXED + 1;
    3218:	81 e0       	ldi	r24, 0x01	; 1
    321a:	92 e0       	ldi	r25, 0x02	; 2
    321c:	90 93 3d 03 	sts	0x033D, r25
    3220:	80 93 3c 03 	sts	0x033C, r24
  
  if (leftpaddle_y > ((SCREEN_H - PADDLE_H - BOTBAR_H)*FIXED_MATH - 1))
    3224:	80 91 2e 03 	lds	r24, 0x032E
    3228:	90 91 2f 03 	lds	r25, 0x032F
    322c:	80 50       	subi	r24, 0x00	; 0
    322e:	92 43       	sbci	r25, 0x32	; 50
    3230:	34 f0       	brlt	.+12     	; 0x323e <step_rat+0x2ca>
    leftpaddle_y =   ((SCREEN_H - PADDLE_H - BOTBAR_H)*FIXED_MATH - 1);
    3232:	8f ef       	ldi	r24, 0xFF	; 255
    3234:	91 e3       	ldi	r25, 0x31	; 49
    3236:	90 93 2f 03 	sts	0x032F, r25
    323a:	80 93 2e 03 	sts	0x032E, r24
  if (rightpaddle_y> ((SCREEN_H - PADDLE_H - BOTBAR_H)*FIXED_MATH - 1))
    323e:	80 91 3c 03 	lds	r24, 0x033C
    3242:	90 91 3d 03 	lds	r25, 0x033D
    3246:	80 50       	subi	r24, 0x00	; 0
    3248:	92 43       	sbci	r25, 0x32	; 50
    324a:	34 f0       	brlt	.+12     	; 0x3258 <step_rat+0x2e4>
    rightpaddle_y =  ((SCREEN_H - PADDLE_H - BOTBAR_H)*FIXED_MATH - 1);
    324c:	8f ef       	ldi	r24, 0xFF	; 255
    324e:	91 e3       	ldi	r25, 0x31	; 49
    3250:	90 93 3d 03 	sts	0x033D, r25
    3254:	80 93 3c 03 	sts	0x033C, r24
    
  if ((ball_dx > 0) && intersectrect(INT_MSB(ball_x), INT_MSB(ball_y), BALL_RADIUS*2, BALL_RADIUS*2, RIGHTPADDLE_X, INT_MSB(rightpaddle_y), PADDLE_W, PADDLE_H)) {
    3258:	80 91 36 03 	lds	r24, 0x0336
    325c:	90 91 37 03 	lds	r25, 0x0337
    3260:	18 16       	cp	r1, r24
    3262:	19 06       	cpc	r1, r25
    3264:	14 f5       	brge	.+68     	; 0x32aa <step_rat+0x336>
    3266:	80 91 3b 03 	lds	r24, 0x033B
    326a:	60 91 33 03 	lds	r22, 0x0333
    326e:	44 e0       	ldi	r20, 0x04	; 4
    3270:	24 e0       	ldi	r18, 0x04	; 4
    3272:	03 e7       	ldi	r16, 0x73	; 115
    3274:	e0 90 3d 03 	lds	r14, 0x033D
    3278:	f3 e0       	ldi	r31, 0x03	; 3
    327a:	cf 2e       	mov	r12, r31
    327c:	ec e0       	ldi	r30, 0x0C	; 12
    327e:	ae 2e       	mov	r10, r30
    3280:	0e 94 5f 38 	call	0x70be	; 0x70be <intersectrect>
    3284:	88 23       	and	r24, r24
    3286:	89 f0       	breq	.+34     	; 0x32aa <step_rat+0x336>
    ball_dx = -ball_dx;
    3288:	80 91 36 03 	lds	r24, 0x0336
    328c:	90 91 37 03 	lds	r25, 0x0337
    3290:	90 95       	com	r25
    3292:	81 95       	neg	r24
    3294:	9f 4f       	sbci	r25, 0xFF	; 255
    3296:	90 93 37 03 	sts	0x0337, r25
    329a:	80 93 36 03 	sts	0x0336, r24
    ball_x = RIGHTPADDLE_X_FIXED - (BALL_RADIUS*2*FIXED_MATH);
    329e:	80 e0       	ldi	r24, 0x00	; 0
    32a0:	9f e6       	ldi	r25, 0x6F	; 111
    32a2:	90 93 3b 03 	sts	0x033B, r25
    32a6:	80 93 3a 03 	sts	0x033A, r24
    //ball_y = right_dest;
    //ticksremaining = calculate_dest_pos(&left_dest, &right_dest, &dest_paddle_pos, 1);
  }
  if ((ball_dx < 0) && intersectrect(INT_MSB(ball_x), INT_MSB(ball_y), BALL_RADIUS*2, BALL_RADIUS*2, LEFTPADDLE_X, INT_MSB(leftpaddle_y), PADDLE_W, PADDLE_H)) {
    32aa:	80 91 36 03 	lds	r24, 0x0336
    32ae:	90 91 37 03 	lds	r25, 0x0337
    32b2:	97 ff       	sbrs	r25, 7
    32b4:	22 c0       	rjmp	.+68     	; 0x32fa <step_rat+0x386>
    32b6:	80 91 3b 03 	lds	r24, 0x033B
    32ba:	60 91 33 03 	lds	r22, 0x0333
    32be:	44 e0       	ldi	r20, 0x04	; 4
    32c0:	24 e0       	ldi	r18, 0x04	; 4
    32c2:	0a e0       	ldi	r16, 0x0A	; 10
    32c4:	e0 90 2f 03 	lds	r14, 0x032F
    32c8:	73 e0       	ldi	r23, 0x03	; 3
    32ca:	c7 2e       	mov	r12, r23
    32cc:	5c e0       	ldi	r21, 0x0C	; 12
    32ce:	a5 2e       	mov	r10, r21
    32d0:	0e 94 5f 38 	call	0x70be	; 0x70be <intersectrect>
    32d4:	88 23       	and	r24, r24
    32d6:	89 f0       	breq	.+34     	; 0x32fa <step_rat+0x386>
    ball_dx = -ball_dx;
    32d8:	80 91 36 03 	lds	r24, 0x0336
    32dc:	90 91 37 03 	lds	r25, 0x0337
    32e0:	90 95       	com	r25
    32e2:	81 95       	neg	r24
    32e4:	9f 4f       	sbci	r25, 0xFF	; 255
    32e6:	90 93 37 03 	sts	0x0337, r25
    32ea:	80 93 36 03 	sts	0x0336, r24
    ball_x = LEFTPADDLE_X_FIXED + PADDLE_W_FIXED;
    32ee:	80 e0       	ldi	r24, 0x00	; 0
    32f0:	9d e0       	ldi	r25, 0x0D	; 13
    32f2:	90 93 3b 03 	sts	0x033B, r25
    32f6:	80 93 3a 03 	sts	0x033A, r24
    //ball_y = left_dest;
    //ticksremaining = calculate_dest_pos(&left_dest, &right_dest, &dest_paddle_pos, 0);
  }
  
}
    32fa:	1f 91       	pop	r17
    32fc:	0f 91       	pop	r16
    32fe:	ef 90       	pop	r14
    3300:	cf 90       	pop	r12
    3302:	af 90       	pop	r10
    3304:	08 95       	ret

00003306 <initdisplay_rat>:

  ball_dx = ball_dy = 0;
  initdisplay_rat(0);
}

void initdisplay_rat(uint8_t inverted) {
    3306:	ff 92       	push	r15
    3308:	0f 93       	push	r16
    330a:	1f 93       	push	r17
    330c:	f8 2e       	mov	r15, r24

  glcdFillRectangle(0, 0, GLCD_XPIXELS, GLCD_YPIXELS, inverted);
    330e:	80 e0       	ldi	r24, 0x00	; 0
    3310:	60 e0       	ldi	r22, 0x00	; 0
    3312:	40 e8       	ldi	r20, 0x80	; 128
    3314:	20 e4       	ldi	r18, 0x40	; 64
    3316:	0f 2d       	mov	r16, r15
    3318:	0e 94 05 29 	call	0x520a	; 0x520a <glcdFillRectangle>
  
  // draw top 'line'
  glcdFillRectangle(0, 0, GLCD_XPIXELS, 2, ! inverted);
    331c:	10 e0       	ldi	r17, 0x00	; 0
    331e:	ff 20       	and	r15, r15
    3320:	09 f4       	brne	.+2      	; 0x3324 <initdisplay_rat+0x1e>
    3322:	11 e0       	ldi	r17, 0x01	; 1
    3324:	80 e0       	ldi	r24, 0x00	; 0
    3326:	60 e0       	ldi	r22, 0x00	; 0
    3328:	40 e8       	ldi	r20, 0x80	; 128
    332a:	22 e0       	ldi	r18, 0x02	; 2
    332c:	01 2f       	mov	r16, r17
    332e:	0e 94 05 29 	call	0x520a	; 0x520a <glcdFillRectangle>
  
  // bottom line
  glcdFillRectangle(0, GLCD_YPIXELS - 2, GLCD_XPIXELS, 2, ! inverted);
    3332:	80 e0       	ldi	r24, 0x00	; 0
    3334:	6e e3       	ldi	r22, 0x3E	; 62
    3336:	40 e8       	ldi	r20, 0x80	; 128
    3338:	22 e0       	ldi	r18, 0x02	; 2
    333a:	0e 94 05 29 	call	0x520a	; 0x520a <glcdFillRectangle>

  // left paddle
  glcdFillRectangle(LEFTPADDLE_X, INT_MSB(leftpaddle_y), PADDLE_W, PADDLE_H, ! inverted);
    333e:	8a e0       	ldi	r24, 0x0A	; 10
    3340:	60 91 2f 03 	lds	r22, 0x032F
    3344:	43 e0       	ldi	r20, 0x03	; 3
    3346:	2c e0       	ldi	r18, 0x0C	; 12
    3348:	0e 94 05 29 	call	0x520a	; 0x520a <glcdFillRectangle>
//!!  glcdFillRectangle(LEFTPADDLE_X, *((uint8_t *) (&leftpaddle_y)+1), PADDLE_W, PADDLE_H, ! inverted);
  // right paddle
  glcdFillRectangle(RIGHTPADDLE_X, INT_MSB(rightpaddle_y), PADDLE_W, PADDLE_H, ! inverted);
    334c:	83 e7       	ldi	r24, 0x73	; 115
    334e:	60 91 3d 03 	lds	r22, 0x033D
    3352:	43 e0       	ldi	r20, 0x03	; 3
    3354:	2c e0       	ldi	r18, 0x0C	; 12
    3356:	0e 94 05 29 	call	0x520a	; 0x520a <glcdFillRectangle>
      
	//left_score = time_h;
	//right_score = time_m;
	setscore_rat();
    335a:	0e 94 aa 16 	call	0x2d54	; 0x2d54 <setscore_rat>

  // time
    drawbigdigit(DISPLAY_H10_X_RAT, DISPLAY_TIME_Y_RAT, left_score/10, inverted);
    335e:	80 91 1b 03 	lds	r24, 0x031B
    3362:	6a e0       	ldi	r22, 0x0A	; 10
    3364:	0e 94 de 39 	call	0x73bc	; 0x73bc <__udivmodqi4>
    3368:	48 2f       	mov	r20, r24
    336a:	8e e1       	ldi	r24, 0x1E	; 30
    336c:	64 e0       	ldi	r22, 0x04	; 4
    336e:	2f 2d       	mov	r18, r15
    3370:	0e 94 6a 39 	call	0x72d4	; 0x72d4 <drawbigdigit>
    drawbigdigit(DISPLAY_H1_X_RAT, DISPLAY_TIME_Y_RAT, left_score%10, inverted);
    3374:	80 91 1b 03 	lds	r24, 0x031B
    3378:	6a e0       	ldi	r22, 0x0A	; 10
    337a:	0e 94 de 39 	call	0x73bc	; 0x73bc <__udivmodqi4>
    337e:	8d e2       	ldi	r24, 0x2D	; 45
    3380:	64 e0       	ldi	r22, 0x04	; 4
    3382:	49 2f       	mov	r20, r25
    3384:	2f 2d       	mov	r18, r15
    3386:	0e 94 6a 39 	call	0x72d4	; 0x72d4 <drawbigdigit>
  
  drawbigdigit(DISPLAY_M10_X_RAT, DISPLAY_TIME_Y_RAT, right_score/10, inverted);
    338a:	80 91 1d 03 	lds	r24, 0x031D
    338e:	6a e0       	ldi	r22, 0x0A	; 10
    3390:	0e 94 de 39 	call	0x73bc	; 0x73bc <__udivmodqi4>
    3394:	48 2f       	mov	r20, r24
    3396:	86 e4       	ldi	r24, 0x46	; 70
    3398:	64 e0       	ldi	r22, 0x04	; 4
    339a:	2f 2d       	mov	r18, r15
    339c:	0e 94 6a 39 	call	0x72d4	; 0x72d4 <drawbigdigit>
  drawbigdigit(DISPLAY_M1_X_RAT, DISPLAY_TIME_Y_RAT, right_score%10, inverted);
    33a0:	80 91 1d 03 	lds	r24, 0x031D
    33a4:	6a e0       	ldi	r22, 0x0A	; 10
    33a6:	0e 94 de 39 	call	0x73bc	; 0x73bc <__udivmodqi4>
    33aa:	85 e5       	ldi	r24, 0x55	; 85
    33ac:	64 e0       	ldi	r22, 0x04	; 4
    33ae:	49 2f       	mov	r20, r25
    33b0:	2f 2d       	mov	r18, r15
    33b2:	0e 94 6a 39 	call	0x72d4	; 0x72d4 <drawbigdigit>

  drawmidline(inverted);
    33b6:	8f 2d       	mov	r24, r15
    33b8:	0e 94 8a 16 	call	0x2d14	; 0x2d14 <drawmidline>
}
    33bc:	1f 91       	pop	r17
    33be:	0f 91       	pop	r16
    33c0:	ff 90       	pop	r15
    33c2:	08 95       	ret

000033c4 <initanim_rat>:
  DEBUG(uart_putw_dec(GLCD_XPIXELS));
  DEBUG(putstring("\n\rscreen height: "));
  DEBUG(uart_putw_dec(GLCD_YPIXELS));
  DEBUG(putstring_nl(""));

  oldball_x = ball_x = 25*FIXED_MATH;
    33c4:	80 e0       	ldi	r24, 0x00	; 0
    33c6:	99 e1       	ldi	r25, 0x19	; 25
    33c8:	90 93 3b 03 	sts	0x033B, r25
    33cc:	80 93 3a 03 	sts	0x033A, r24
    33d0:	90 93 39 03 	sts	0x0339, r25
    33d4:	80 93 38 03 	sts	0x0338, r24
  oldball_y = ball_y = 25*FIXED_MATH;	//Somewhere away from 0,0.
    33d8:	90 93 33 03 	sts	0x0333, r25
    33dc:	80 93 32 03 	sts	0x0332, r24
    33e0:	90 93 41 03 	sts	0x0341, r25
    33e4:	80 93 40 03 	sts	0x0340, r24
  oldleftpaddle_y = leftpaddle_y = 25*FIXED_MATH;
    33e8:	90 93 2f 03 	sts	0x032F, r25
    33ec:	80 93 2e 03 	sts	0x032E, r24
    33f0:	90 93 2d 03 	sts	0x032D, r25
    33f4:	80 93 2c 03 	sts	0x032C, r24
  oldrightpaddle_y = rightpaddle_y = 25*FIXED_MATH;
    33f8:	90 93 3d 03 	sts	0x033D, r25
    33fc:	80 93 3c 03 	sts	0x033C, r24
    3400:	90 93 3f 03 	sts	0x033F, r25
    3404:	80 93 3e 03 	sts	0x033E, r24
  init_crand();
    3408:	0e 94 04 38 	call	0x7008	; 0x7008 <init_crand>

  ball_dx = ball_dy = 0;
    340c:	10 92 31 03 	sts	0x0331, r1
    3410:	10 92 30 03 	sts	0x0330, r1
    3414:	10 92 37 03 	sts	0x0337, r1
    3418:	10 92 36 03 	sts	0x0336, r1
  initdisplay_rat(0);
    341c:	80 e0       	ldi	r24, 0x00	; 0
    341e:	0e 94 83 19 	call	0x3306	; 0x3306 <initdisplay_rat>
}
    3422:	08 95       	ret

00003424 <step_sev>:
  }
}


void step_sev(void) {
	if(!RotateFlag || (minute_changed == 2) || (hour_changed == 2))
    3424:	80 91 75 03 	lds	r24, 0x0375
    3428:	88 23       	and	r24, r24
    342a:	41 f0       	breq	.+16     	; 0x343c <step_sev+0x18>
    342c:	80 91 63 02 	lds	r24, 0x0263
    3430:	82 30       	cpi	r24, 0x02	; 2
    3432:	21 f0       	breq	.+8      	; 0x343c <step_sev+0x18>
    3434:	80 91 64 02 	lds	r24, 0x0264
    3438:	82 30       	cpi	r24, 0x02	; 2
    343a:	31 f4       	brne	.+12     	; 0x3448 <step_sev+0x24>
		minute_changed = hour_changed = 0;
    343c:	10 92 64 02 	sts	0x0264, r1
    3440:	80 91 64 02 	lds	r24, 0x0264
    3444:	80 93 63 02 	sts	0x0263, r24
    3448:	08 95       	ret

0000344a <drawvseg_sev>:
  else
  	  drawvseg_sev(x+seg_location_sev[s][1],y+seg_location_sev[s][2],VSEGMENT_W,VSEGMENT_H,inverted);
}


void drawvseg_sev(uint8_t x, uint8_t y, uint8_t w, uint8_t h, uint8_t inverted) {
    344a:	a1 e0       	ldi	r26, 0x01	; 1
    344c:	b0 e0       	ldi	r27, 0x00	; 0
    344e:	eb e2       	ldi	r30, 0x2B	; 43
    3450:	fa e1       	ldi	r31, 0x1A	; 26
    3452:	0c 94 58 3a 	jmp	0x74b0	; 0x74b0 <__prologue_saves__+0x14>
    3456:	e8 2e       	mov	r14, r24
    3458:	f4 2e       	mov	r15, r20
    345a:	12 2f       	mov	r17, r18
    345c:	c0 2e       	mov	r12, r16
    345e:	96 2f       	mov	r25, r22
    3460:	9e 5f       	subi	r25, 0xFE	; 254
    3462:	14 50       	subi	r17, 0x04	; 4
  uint8_t i;
  for(i=0;i<3;i++)
    3464:	d6 2e       	mov	r13, r22
    3466:	da 94       	dec	r13
  {
  	  glcdFillRectangle(x+i,y+2-i,w-(i*2),h-4+(i*2), ! inverted);
    3468:	00 e0       	ldi	r16, 0x00	; 0
    346a:	cc 20       	and	r12, r12
    346c:	09 f4       	brne	.+2      	; 0x3470 <drawvseg_sev+0x26>
    346e:	01 e0       	ldi	r16, 0x01	; 1
    3470:	8e 2d       	mov	r24, r14
    3472:	69 2f       	mov	r22, r25
    3474:	4f 2d       	mov	r20, r15
    3476:	21 2f       	mov	r18, r17
    3478:	99 83       	std	Y+1, r25	; 0x01
    347a:	0e 94 05 29 	call	0x520a	; 0x520a <glcdFillRectangle>
    347e:	e3 94       	inc	r14
    3480:	99 81       	ldd	r25, Y+1	; 0x01
    3482:	91 50       	subi	r25, 0x01	; 1
    3484:	8e ef       	ldi	r24, 0xFE	; 254
    3486:	f8 0e       	add	r15, r24
    3488:	1e 5f       	subi	r17, 0xFE	; 254
}


void drawvseg_sev(uint8_t x, uint8_t y, uint8_t w, uint8_t h, uint8_t inverted) {
  uint8_t i;
  for(i=0;i<3;i++)
    348a:	9d 15       	cp	r25, r13
    348c:	69 f7       	brne	.-38     	; 0x3468 <drawvseg_sev+0x1e>
  //glcdFillRectangle(x+1, y+1, VSEGMENT_W-2, 1, ! inverted);
  //glcdFillRectangle(x+2, y, VSEGMENT_W-4, 1, ! inverted);

  //glcdFillRectangle(x+1, y+VSEGMENT_H-2, VSEGMENT_W-2, 1, ! inverted);
  //glcdFillRectangle(x+2, y+VSEGMENT_H-1, VSEGMENT_W-4, 1, ! inverted);
}
    348e:	21 96       	adiw	r28, 0x01	; 1
    3490:	e8 e0       	ldi	r30, 0x08	; 8
    3492:	0c 94 74 3a 	jmp	0x74e8	; 0x74e8 <__epilogue_restores__+0x14>

00003496 <drawsegment_sev>:
	{SEGMENT_VERTICAL_SEV,0,GLCD_YPIXELS/2+2},
	{SEGMENT_VERTICAL_SEV,0,HSEGMENT_H/2+2},
	{SEGMENT_HORIZONTAL_SEV,VSEGMENT_W/2+1,(GLCD_YPIXELS - HSEGMENT_H)/2},
};

void drawsegment_sev(uint8_t s, uint8_t x, uint8_t y, uint8_t inverted) {
    3496:	0f 93       	push	r16
    3498:	36 2f       	mov	r19, r22
    349a:	02 2f       	mov	r16, r18
    break;
  case 'g':
    drawhseg_sev(x+VSEGMENT_W/2+1, (GLCD_YPIXELS - HSEGMENT_H)/2, inverted);
    break;    
  }*/
  if(!seg_location_sev[s][0])
    349c:	90 e0       	ldi	r25, 0x00	; 0
    349e:	fc 01       	movw	r30, r24
    34a0:	ee 0f       	add	r30, r30
    34a2:	ff 1f       	adc	r31, r31
    34a4:	e8 0f       	add	r30, r24
    34a6:	f9 1f       	adc	r31, r25
    34a8:	e3 57       	subi	r30, 0x73	; 115
    34aa:	fe 4f       	sbci	r31, 0xFE	; 254
    34ac:	80 81       	ld	r24, Z
    34ae:	88 23       	and	r24, r24
    34b0:	39 f4       	brne	.+14     	; 0x34c0 <drawsegment_sev+0x2a>
  	  drawvseg_sev(x+seg_location_sev[s][1],y+seg_location_sev[s][2],HSEGMENT_W,HSEGMENT_H,inverted);
    34b2:	81 81       	ldd	r24, Z+1	; 0x01
    34b4:	62 81       	ldd	r22, Z+2	; 0x02
    34b6:	64 0f       	add	r22, r20
    34b8:	83 0f       	add	r24, r19
    34ba:	42 e1       	ldi	r20, 0x12	; 18
    34bc:	26 e0       	ldi	r18, 0x06	; 6
    34be:	06 c0       	rjmp	.+12     	; 0x34cc <drawsegment_sev+0x36>
  else
  	  drawvseg_sev(x+seg_location_sev[s][1],y+seg_location_sev[s][2],VSEGMENT_W,VSEGMENT_H,inverted);
    34c0:	81 81       	ldd	r24, Z+1	; 0x01
    34c2:	62 81       	ldd	r22, Z+2	; 0x02
    34c4:	64 0f       	add	r22, r20
    34c6:	83 0f       	add	r24, r19
    34c8:	46 e0       	ldi	r20, 0x06	; 6
    34ca:	29 e1       	ldi	r18, 0x19	; 25
    34cc:	0e 94 25 1a 	call	0x344a	; 0x344a <drawvseg_sev>
}
    34d0:	0f 91       	pop	r16
    34d2:	08 95       	ret

000034d4 <draw7seg_sev>:
void drawdot_sev(uint8_t x, uint8_t y, uint8_t inverted) {
  glcdFillCircle(x, y, DOTRADIUS, !inverted);
}

void draw7seg_sev(uint8_t x, uint8_t y, uint8_t segs, uint8_t inverted)
{
    34d4:	a0 e0       	ldi	r26, 0x00	; 0
    34d6:	b0 e0       	ldi	r27, 0x00	; 0
    34d8:	e0 e7       	ldi	r30, 0x70	; 112
    34da:	fa e1       	ldi	r31, 0x1A	; 26
    34dc:	0c 94 58 3a 	jmp	0x74b0	; 0x74b0 <__prologue_saves__+0x14>
    34e0:	c8 2e       	mov	r12, r24
    34e2:	d6 2e       	mov	r13, r22
    34e4:	02 2f       	mov	r16, r18
    34e6:	10 e0       	ldi	r17, 0x00	; 0
    34e8:	c7 e0       	ldi	r28, 0x07	; 7
    34ea:	d0 e0       	ldi	r29, 0x00	; 0
	for(uint8_t i=0;i<7;i++)
	{
		if(segs & (1 << (7 - i)))
    34ec:	e4 2e       	mov	r14, r20
    34ee:	ff 24       	eor	r15, r15
    34f0:	c7 01       	movw	r24, r14
    34f2:	0c 2e       	mov	r0, r28
    34f4:	02 c0       	rjmp	.+4      	; 0x34fa <draw7seg_sev+0x26>
    34f6:	95 95       	asr	r25
    34f8:	87 95       	ror	r24
    34fa:	0a 94       	dec	r0
    34fc:	e2 f7       	brpl	.-8      	; 0x34f6 <draw7seg_sev+0x22>
    34fe:	80 ff       	sbrs	r24, 0
    3500:	05 c0       	rjmp	.+10     	; 0x350c <draw7seg_sev+0x38>
			drawsegment_sev(i, x, y, inverted);
    3502:	81 2f       	mov	r24, r17
    3504:	6c 2d       	mov	r22, r12
    3506:	4d 2d       	mov	r20, r13
    3508:	20 2f       	mov	r18, r16
    350a:	07 c0       	rjmp	.+14     	; 0x351a <draw7seg_sev+0x46>
		else
			drawsegment_sev(i, x, y, !inverted);
    350c:	20 e0       	ldi	r18, 0x00	; 0
    350e:	00 23       	and	r16, r16
    3510:	09 f4       	brne	.+2      	; 0x3514 <draw7seg_sev+0x40>
    3512:	21 e0       	ldi	r18, 0x01	; 1
    3514:	81 2f       	mov	r24, r17
    3516:	6c 2d       	mov	r22, r12
    3518:	4d 2d       	mov	r20, r13
    351a:	0e 94 4b 1a 	call	0x3496	; 0x3496 <drawsegment_sev>
  glcdFillCircle(x, y, DOTRADIUS, !inverted);
}

void draw7seg_sev(uint8_t x, uint8_t y, uint8_t segs, uint8_t inverted)
{
	for(uint8_t i=0;i<7;i++)
    351e:	1f 5f       	subi	r17, 0xFF	; 255
    3520:	21 97       	sbiw	r28, 0x01	; 1
    3522:	17 30       	cpi	r17, 0x07	; 7
    3524:	29 f7       	brne	.-54     	; 0x34f0 <draw7seg_sev+0x1c>
		if(segs & (1 << (7 - i)))
			drawsegment_sev(i, x, y, inverted);
		else
			drawsegment_sev(i, x, y, !inverted);
	}
}
    3526:	cd b7       	in	r28, 0x3d	; 61
    3528:	de b7       	in	r29, 0x3e	; 62
    352a:	e8 e0       	ldi	r30, 0x08	; 8
    352c:	0c 94 74 3a 	jmp	0x74e8	; 0x74e8 <__epilogue_restores__+0x14>

00003530 <initdisplay_sev>:
  DEBUG(putstring_nl(""));
#endif
  initdisplay_sev(0);
}

void initdisplay_sev(uint8_t inverted) {
    3530:	0f 93       	push	r16
    3532:	08 2f       	mov	r16, r24
  glcdFillRectangle(0, 0, GLCD_XPIXELS, GLCD_YPIXELS, inverted);
    3534:	80 e0       	ldi	r24, 0x00	; 0
    3536:	60 e0       	ldi	r22, 0x00	; 0
    3538:	40 e8       	ldi	r20, 0x80	; 128
    353a:	20 e4       	ldi	r18, 0x40	; 64
    353c:	0e 94 05 29 	call	0x520a	; 0x520a <glcdFillRectangle>
}
    3540:	0f 91       	pop	r16
    3542:	08 95       	ret

00003544 <initanim_sev>:
void drawvseg_sev(uint8_t x, uint8_t y, uint8_t w, uint8_t h, uint8_t inverted);
void drawhseg_sev(uint8_t x, uint8_t y, uint8_t inverted);



void initanim_sev(void) {
    3544:	0f 93       	push	r16
#endif
  initdisplay_sev(0);
}

void initdisplay_sev(uint8_t inverted) {
  glcdFillRectangle(0, 0, GLCD_XPIXELS, GLCD_YPIXELS, inverted);
    3546:	80 e0       	ldi	r24, 0x00	; 0
    3548:	60 e0       	ldi	r22, 0x00	; 0
    354a:	40 e8       	ldi	r20, 0x80	; 128
    354c:	20 e4       	ldi	r18, 0x40	; 64
    354e:	00 e0       	ldi	r16, 0x00	; 0
    3550:	0e 94 05 29 	call	0x520a	; 0x520a <glcdFillRectangle>
  DEBUG(putstring("\n\rscreen height: "));
  DEBUG(uart_putw_dec(GLCD_YPIXELS));
  DEBUG(putstring_nl(""));
#endif
  initdisplay_sev(0);
}
    3554:	0f 91       	pop	r16
    3556:	08 95       	ret

00003558 <drawdigit_sev>:
		else
			drawsegment_sev(i, x, y, !inverted);
	}
}

void drawdigit_sev(uint8_t x, uint8_t y, uint8_t d, uint8_t inverted) {
    3558:	ff 92       	push	r15
    355a:	0f 93       	push	r16
    355c:	1f 93       	push	r17
    355e:	18 2f       	mov	r17, r24
    3560:	06 2f       	mov	r16, r22
    3562:	f2 2e       	mov	r15, r18
    3564:	84 2f       	mov	r24, r20
    3566:	90 e0       	ldi	r25, 0x00	; 0
  if(d < 10)
    3568:	4a 30       	cpi	r20, 0x0A	; 10
    356a:	28 f4       	brcc	.+10     	; 0x3576 <drawdigit_sev+0x1e>
  	  draw7seg_sev(x,y,eeprom_read_byte(&numbertable[d]),inverted);
    356c:	84 5a       	subi	r24, 0xA4	; 164
    356e:	9d 4f       	sbci	r25, 0xFD	; 253
    3570:	0e 94 94 3a 	call	0x7528	; 0x7528 <__eerd_byte_m328p>
    3574:	04 c0       	rjmp	.+8      	; 0x357e <drawdigit_sev+0x26>
  else if ((d >= 'a') || (d <= 'z'))
  	  draw7seg_sev(x,y,eeprom_read_byte(&alphatable[(d - 'a')]),inverted);
    3576:	8f 51       	subi	r24, 0x1F	; 31
    3578:	9e 4f       	sbci	r25, 0xFE	; 254
    357a:	0e 94 94 3a 	call	0x7528	; 0x7528 <__eerd_byte_m328p>
    357e:	48 2f       	mov	r20, r24
    3580:	81 2f       	mov	r24, r17
    3582:	60 2f       	mov	r22, r16
    3584:	2f 2d       	mov	r18, r15
    3586:	0e 94 6a 1a 	call	0x34d4	; 0x34d4 <draw7seg_sev>
  else
  	  draw7seg_sev(x,y,0x00,inverted);
}
    358a:	1f 91       	pop	r17
    358c:	0f 91       	pop	r16
    358e:	ff 90       	pop	r15
    3590:	08 95       	ret

00003592 <printnumber_sev>:
void initdisplay_sev(uint8_t inverted) {
  glcdFillRectangle(0, 0, GLCD_XPIXELS, GLCD_YPIXELS, inverted);
}

void printnumber_sev(uint8_t x, uint8_t num, uint8_t inverted)
{
    3592:	ff 92       	push	r15
    3594:	0f 93       	push	r16
    3596:	1f 93       	push	r17
    3598:	f8 2e       	mov	r15, r24
    359a:	14 2f       	mov	r17, r20
	uint8_t temp=num&0x7F;
    359c:	06 2f       	mov	r16, r22
    359e:	0f 77       	andi	r16, 0x7F	; 127
	if(num&0x80)
    35a0:	67 ff       	sbrs	r22, 7
    35a2:	08 c0       	rjmp	.+16     	; 0x35b4 <printnumber_sev+0x22>
		drawdigit_sev(DISPLAY_H10_X_SEV, DISPLAY_TIME_Y_SEV, 8, !inverted);
    35a4:	20 e0       	ldi	r18, 0x00	; 0
    35a6:	44 23       	and	r20, r20
    35a8:	09 f4       	brne	.+2      	; 0x35ac <printnumber_sev+0x1a>
    35aa:	21 e0       	ldi	r18, 0x01	; 1
    35ac:	80 e0       	ldi	r24, 0x00	; 0
    35ae:	60 e0       	ldi	r22, 0x00	; 0
    35b0:	48 e0       	ldi	r20, 0x08	; 8
    35b2:	08 c0       	rjmp	.+16     	; 0x35c4 <printnumber_sev+0x32>
	else
		drawdigit_sev(x,DISPLAY_TIME_Y_SEV,temp/10,inverted);
    35b4:	80 2f       	mov	r24, r16
    35b6:	6a e0       	ldi	r22, 0x0A	; 10
    35b8:	0e 94 de 39 	call	0x73bc	; 0x73bc <__udivmodqi4>
    35bc:	48 2f       	mov	r20, r24
    35be:	8f 2d       	mov	r24, r15
    35c0:	60 e0       	ldi	r22, 0x00	; 0
    35c2:	21 2f       	mov	r18, r17
    35c4:	0e 94 ac 1a 	call	0x3558	; 0x3558 <drawdigit_sev>
	drawdigit_sev(x+DISPLAY_H1_X_SEV-DISPLAY_H10_X_SEV,DISPLAY_TIME_Y_SEV,temp%10,inverted);
    35c8:	80 2f       	mov	r24, r16
    35ca:	6a e0       	ldi	r22, 0x0A	; 10
    35cc:	0e 94 de 39 	call	0x73bc	; 0x73bc <__udivmodqi4>
    35d0:	8f 2d       	mov	r24, r15
    35d2:	82 5e       	subi	r24, 0xE2	; 226
    35d4:	60 e0       	ldi	r22, 0x00	; 0
    35d6:	49 2f       	mov	r20, r25
    35d8:	21 2f       	mov	r18, r17
    35da:	0e 94 ac 1a 	call	0x3558	; 0x3558 <drawdigit_sev>
}
    35de:	1f 91       	pop	r17
    35e0:	0f 91       	pop	r16
    35e2:	ff 90       	pop	r15
    35e4:	08 95       	ret

000035e6 <drawdot_sev>:
	if(!RotateFlag || (minute_changed == 2) || (hour_changed == 2))
		minute_changed = hour_changed = 0;
}

void drawdot_sev(uint8_t x, uint8_t y, uint8_t inverted) {
  glcdFillCircle(x, y, DOTRADIUS, !inverted);
    35e6:	20 e0       	ldi	r18, 0x00	; 0
    35e8:	44 23       	and	r20, r20
    35ea:	09 f4       	brne	.+2      	; 0x35ee <drawdot_sev+0x8>
    35ec:	21 e0       	ldi	r18, 0x01	; 1
    35ee:	44 e0       	ldi	r20, 0x04	; 4
    35f0:	0e 94 db 29 	call	0x53b6	; 0x53b6 <glcdFillCircle>
}
    35f4:	08 95       	ret

000035f6 <drawdisplay_sev>:
	else
		drawdigit_sev(x,DISPLAY_TIME_Y_SEV,temp/10,inverted);
	drawdigit_sev(x+DISPLAY_H1_X_SEV-DISPLAY_H10_X_SEV,DISPLAY_TIME_Y_SEV,temp%10,inverted);
}

void drawdisplay_sev(uint8_t inverted) {
    35f6:	ef 92       	push	r14
    35f8:	ff 92       	push	r15
    35fa:	0f 93       	push	r16
    35fc:	1f 93       	push	r17
    35fe:	08 2f       	mov	r16, r24

  if ((score_mode != SCORE_MODE_TIME) && (score_mode != SCORE_MODE_ALARM))
    3600:	80 91 67 02 	lds	r24, 0x0267
    3604:	88 23       	and	r24, r24
    3606:	c9 f0       	breq	.+50     	; 0x363a <drawdisplay_sev+0x44>
    3608:	80 91 67 02 	lds	r24, 0x0267
    360c:	83 30       	cpi	r24, 0x03	; 3
    360e:	a9 f0       	breq	.+42     	; 0x363a <drawdisplay_sev+0x44>
	if(!RotateFlag || (minute_changed == 2) || (hour_changed == 2))
		minute_changed = hour_changed = 0;
}

void drawdot_sev(uint8_t x, uint8_t y, uint8_t inverted) {
  glcdFillCircle(x, y, DOTRADIUS, !inverted);
    3610:	10 2f       	mov	r17, r16
    3612:	01 11       	cpse	r16, r1
    3614:	11 e0       	ldi	r17, 0x01	; 1
    3616:	80 e4       	ldi	r24, 0x40	; 64
    3618:	65 e1       	ldi	r22, 0x15	; 21
    361a:	44 e0       	ldi	r20, 0x04	; 4
    361c:	21 2f       	mov	r18, r17
    361e:	0e 94 db 29 	call	0x53b6	; 0x53b6 <glcdFillCircle>
  	drawdot_sev(GLCD_XPIXELS/2, GLCD_YPIXELS*1/3, !inverted);
    drawdot_sev(GLCD_XPIXELS/2, GLCD_YPIXELS*2/3, !inverted);
    drawdot_sev(GLCD_XPIXELS/2, GLCD_YPIXELS*1/10, !inverted);
  }

  if (score_mode == SCORE_MODE_YEAR) {
    3622:	80 e4       	ldi	r24, 0x40	; 64
    3624:	6a e2       	ldi	r22, 0x2A	; 42
    3626:	44 e0       	ldi	r20, 0x04	; 4
    3628:	21 2f       	mov	r18, r17
    362a:	0e 94 db 29 	call	0x53b6	; 0x53b6 <glcdFillCircle>
    362e:	80 e4       	ldi	r24, 0x40	; 64
    3630:	66 e0       	ldi	r22, 0x06	; 6
    3632:	44 e0       	ldi	r20, 0x04	; 4
    3634:	21 2f       	mov	r18, r17
    3636:	0e 94 db 29 	call	0x53b6	; 0x53b6 <glcdFillCircle>
    363a:	80 91 67 02 	lds	r24, 0x0267
    363e:	82 30       	cpi	r24, 0x02	; 2
    3640:	69 f4       	brne	.+26     	; 0x365c <drawdisplay_sev+0x66>
    /*drawdigit_sev(DISPLAY_H10_X_SEV, DISPLAY_TIME_Y_SEV, 2 , inverted);
    drawdigit_sev(DISPLAY_H1_X_SEV, DISPLAY_TIME_Y_SEV, 0, inverted);
    drawdigit_sev(DISPLAY_M10_X_SEV, DISPLAY_TIME_Y_SEV, (date_y % 100)/10, inverted);
    drawdigit_sev(DISPLAY_M1_X_SEV, DISPLAY_TIME_Y_SEV, date_y % 10, inverted);*/
    printnumber_sev(DISPLAY_H10_X_SEV, 20, inverted);
    3642:	80 e0       	ldi	r24, 0x00	; 0
    3644:	64 e1       	ldi	r22, 0x14	; 20
    3646:	40 2f       	mov	r20, r16
    3648:	0e 94 c9 1a 	call	0x3592	; 0x3592 <printnumber_sev>
    printnumber_sev(DISPLAY_M10_X_SEV, date_y % 100, inverted);
    364c:	80 91 65 03 	lds	r24, 0x0365
    3650:	64 e6       	ldi	r22, 0x64	; 100
    3652:	0e 94 de 39 	call	0x73bc	; 0x73bc <__udivmodqi4>
    3656:	88 e4       	ldi	r24, 0x48	; 72
    3658:	69 2f       	mov	r22, r25
    365a:	17 c0       	rjmp	.+46     	; 0x368a <drawdisplay_sev+0x94>
  } else if (score_mode == SCORE_MODE_DATE) {
    365c:	80 91 67 02 	lds	r24, 0x0267
    3660:	81 30       	cpi	r24, 0x01	; 1
    3662:	b9 f4       	brne	.+46     	; 0x3692 <drawdisplay_sev+0x9c>
    uint8_t left, right;
    if (region == REGION_US) {
    3664:	80 91 6f 03 	lds	r24, 0x036F
    3668:	88 23       	and	r24, r24
    366a:	29 f4       	brne	.+10     	; 0x3676 <drawdisplay_sev+0x80>
      left = date_m;
    366c:	60 91 76 03 	lds	r22, 0x0376
      right = date_d;
    3670:	10 91 6b 03 	lds	r17, 0x036B
    3674:	04 c0       	rjmp	.+8      	; 0x367e <drawdisplay_sev+0x88>
    } else {
      left = date_d;
    3676:	60 91 6b 03 	lds	r22, 0x036B
      right = date_m;
    367a:	10 91 76 03 	lds	r17, 0x0376
    }
    /*drawdigit_sev(DISPLAY_H10_X_SEV, DISPLAY_TIME_Y_SEV, left/10 , inverted);
    drawdigit_sev(DISPLAY_H1_X_SEV, DISPLAY_TIME_Y_SEV, left%10, inverted);
    drawdigit_sev(DISPLAY_M10_X_SEV, DISPLAY_TIME_Y_SEV, right/10, inverted);
    drawdigit_sev(DISPLAY_M1_X_SEV, DISPLAY_TIME_Y_SEV, right % 10, inverted);*/
    printnumber_sev(DISPLAY_H10_X_SEV, left, inverted);
    367e:	80 e0       	ldi	r24, 0x00	; 0
    3680:	40 2f       	mov	r20, r16
    3682:	0e 94 c9 1a 	call	0x3592	; 0x3592 <printnumber_sev>
    printnumber_sev(DISPLAY_M10_X_SEV, right, inverted);
    3686:	88 e4       	ldi	r24, 0x48	; 72
    3688:	61 2f       	mov	r22, r17
    368a:	40 2f       	mov	r20, r16
    368c:	0e 94 c9 1a 	call	0x3592	; 0x3592 <printnumber_sev>
    3690:	67 c0       	rjmp	.+206    	; 0x3760 <drawdisplay_sev+0x16a>
    draw7seg_sev(DISPLAY_H1_X_SEV, DISPLAY_TIME_Y_SEV, 0x00 , inverted);
    drawdigit_sev(DISPLAY_M10_X_SEV, DISPLAY_TIME_Y_SEV, date_d/10, inverted);
    drawdigit_sev(DISPLAY_M1_X_SEV, DISPLAY_TIME_Y_SEV, date_d % 10, inverted);
  } 
#endif
  else if ((score_mode == SCORE_MODE_TIME) || (score_mode == SCORE_MODE_ALARM)) {
    3692:	80 91 67 02 	lds	r24, 0x0267
    3696:	88 23       	and	r24, r24
    3698:	29 f0       	breq	.+10     	; 0x36a4 <drawdisplay_sev+0xae>
    369a:	80 91 67 02 	lds	r24, 0x0267
    369e:	83 30       	cpi	r24, 0x03	; 3
    36a0:	09 f0       	breq	.+2      	; 0x36a4 <drawdisplay_sev+0xae>
    36a2:	5e c0       	rjmp	.+188    	; 0x3760 <drawdisplay_sev+0x16a>
    // draw time or alarm
    uint8_t left, right;
    if (score_mode == SCORE_MODE_ALARM) {
    36a4:	80 91 67 02 	lds	r24, 0x0267
    36a8:	83 30       	cpi	r24, 0x03	; 3
    36aa:	29 f4       	brne	.+10     	; 0x36b6 <drawdisplay_sev+0xc0>
      left = alarm_h;
    36ac:	10 91 70 03 	lds	r17, 0x0370
      right = alarm_m;
    36b0:	e0 90 66 03 	lds	r14, 0x0366
    36b4:	04 c0       	rjmp	.+8      	; 0x36be <drawdisplay_sev+0xc8>
    } else {
      left = time_h;
    36b6:	10 91 62 03 	lds	r17, 0x0362
      right = time_m;
    36ba:	e0 90 6c 03 	lds	r14, 0x036C
    }
    uint8_t am = (left < 12);
    if (time_format == TIME_12H) {
    36be:	80 91 64 03 	lds	r24, 0x0364
    36c2:	88 23       	and	r24, r24
    36c4:	99 f4       	brne	.+38     	; 0x36ec <drawdisplay_sev+0xf6>
      left = hours(left);
    36c6:	81 2f       	mov	r24, r17
    36c8:	0e 94 ca 36 	call	0x6d94	; 0x6d94 <hours>
    36cc:	f8 2e       	mov	r15, r24
      if(am) {
    36ce:	1c 30       	cpi	r17, 0x0C	; 12
    36d0:	20 f4       	brcc	.+8      	; 0x36da <drawdisplay_sev+0xe4>
	if(!RotateFlag || (minute_changed == 2) || (hour_changed == 2))
		minute_changed = hour_changed = 0;
}

void drawdot_sev(uint8_t x, uint8_t y, uint8_t inverted) {
  glcdFillCircle(x, y, DOTRADIUS, !inverted);
    36d2:	20 e0       	ldi	r18, 0x00	; 0
    36d4:	00 23       	and	r16, r16
    36d6:	21 f4       	brne	.+8      	; 0x36e0 <drawdisplay_sev+0xea>
    36d8:	02 c0       	rjmp	.+4      	; 0x36de <drawdisplay_sev+0xe8>
    }
    drawdigit_sev(DISPLAY_H1_X_SEV, DISPLAY_TIME_Y_SEV, left%10, inverted);
    
    drawdigit_sev(DISPLAY_M10_X_SEV, DISPLAY_TIME_Y_SEV, right/10, inverted);
    drawdigit_sev(DISPLAY_M1_X_SEV, DISPLAY_TIME_Y_SEV, right%10, inverted);*/
    printnumber_sev(DISPLAY_H10_X_SEV, left | ((left<10)?0x80:0), inverted);
    36da:	20 e0       	ldi	r18, 0x00	; 0
    36dc:	01 11       	cpse	r16, r1
    36de:	21 e0       	ldi	r18, 0x01	; 1
    36e0:	80 e4       	ldi	r24, 0x40	; 64
    36e2:	66 e0       	ldi	r22, 0x06	; 6
    36e4:	44 e0       	ldi	r20, 0x04	; 4
    36e6:	0e 94 db 29 	call	0x53b6	; 0x53b6 <glcdFillCircle>
    36ea:	09 c0       	rjmp	.+18     	; 0x36fe <drawdisplay_sev+0x108>
    36ec:	20 e0       	ldi	r18, 0x00	; 0
    36ee:	01 11       	cpse	r16, r1
    36f0:	21 e0       	ldi	r18, 0x01	; 1
    36f2:	80 e4       	ldi	r24, 0x40	; 64
    36f4:	66 e0       	ldi	r22, 0x06	; 6
    36f6:	44 e0       	ldi	r20, 0x04	; 4
    36f8:	0e 94 db 29 	call	0x53b6	; 0x53b6 <glcdFillCircle>
    36fc:	f1 2e       	mov	r15, r17
    36fe:	89 e0       	ldi	r24, 0x09	; 9
    3700:	8f 15       	cp	r24, r15
    3702:	10 f0       	brcs	.+4      	; 0x3708 <drawdisplay_sev+0x112>
    3704:	60 e8       	ldi	r22, 0x80	; 128
    3706:	01 c0       	rjmp	.+2      	; 0x370a <drawdisplay_sev+0x114>
    3708:	60 e0       	ldi	r22, 0x00	; 0
    370a:	6f 29       	or	r22, r15
    370c:	80 e0       	ldi	r24, 0x00	; 0
    370e:	40 2f       	mov	r20, r16
    3710:	0e 94 c9 1a 	call	0x3592	; 0x3592 <printnumber_sev>
    printnumber_sev(DISPLAY_M10_X_SEV, right, inverted);
    3714:	88 e4       	ldi	r24, 0x48	; 72
    3716:	6e 2d       	mov	r22, r14
    3718:	40 2f       	mov	r20, r16
    371a:	0e 94 c9 1a 	call	0x3592	; 0x3592 <printnumber_sev>
    
    if (second_changed) {
    371e:	80 91 65 02 	lds	r24, 0x0265
    3722:	88 23       	and	r24, r24
    3724:	e9 f0       	breq	.+58     	; 0x3760 <drawdisplay_sev+0x16a>
      second_changed = time_s%2;
    3726:	80 91 77 03 	lds	r24, 0x0377
    372a:	81 70       	andi	r24, 0x01	; 1
    372c:	80 93 65 02 	sts	0x0265, r24
      drawdot_sev(GLCD_XPIXELS/2, GLCD_YPIXELS*1/3, second_changed);
    3730:	80 91 65 02 	lds	r24, 0x0265
	if(!RotateFlag || (minute_changed == 2) || (hour_changed == 2))
		minute_changed = hour_changed = 0;
}

void drawdot_sev(uint8_t x, uint8_t y, uint8_t inverted) {
  glcdFillCircle(x, y, DOTRADIUS, !inverted);
    3734:	20 e0       	ldi	r18, 0x00	; 0
    3736:	88 23       	and	r24, r24
    3738:	09 f4       	brne	.+2      	; 0x373c <drawdisplay_sev+0x146>
    373a:	21 e0       	ldi	r18, 0x01	; 1
    373c:	80 e4       	ldi	r24, 0x40	; 64
    373e:	65 e1       	ldi	r22, 0x15	; 21
    3740:	44 e0       	ldi	r20, 0x04	; 4
    3742:	0e 94 db 29 	call	0x53b6	; 0x53b6 <glcdFillCircle>
    printnumber_sev(DISPLAY_M10_X_SEV, right, inverted);
    
    if (second_changed) {
      second_changed = time_s%2;
      drawdot_sev(GLCD_XPIXELS/2, GLCD_YPIXELS*1/3, second_changed);
      drawdot_sev(GLCD_XPIXELS/2, GLCD_YPIXELS*2/3, second_changed);
    3746:	80 91 65 02 	lds	r24, 0x0265
	if(!RotateFlag || (minute_changed == 2) || (hour_changed == 2))
		minute_changed = hour_changed = 0;
}

void drawdot_sev(uint8_t x, uint8_t y, uint8_t inverted) {
  glcdFillCircle(x, y, DOTRADIUS, !inverted);
    374a:	20 e0       	ldi	r18, 0x00	; 0
    374c:	88 23       	and	r24, r24
    374e:	09 f4       	brne	.+2      	; 0x3752 <drawdisplay_sev+0x15c>
    3750:	21 e0       	ldi	r18, 0x01	; 1
    3752:	80 e4       	ldi	r24, 0x40	; 64
    3754:	6a e2       	ldi	r22, 0x2A	; 42
    3756:	44 e0       	ldi	r20, 0x04	; 4
    3758:	0e 94 db 29 	call	0x53b6	; 0x53b6 <glcdFillCircle>
    
    if (second_changed) {
      second_changed = time_s%2;
      drawdot_sev(GLCD_XPIXELS/2, GLCD_YPIXELS*1/3, second_changed);
      drawdot_sev(GLCD_XPIXELS/2, GLCD_YPIXELS*2/3, second_changed);
      second_changed = 0;
    375c:	10 92 65 02 	sts	0x0265, r1
    }
  }
}
    3760:	1f 91       	pop	r17
    3762:	0f 91       	pop	r16
    3764:	ff 90       	pop	r15
    3766:	ef 90       	pop	r14
    3768:	08 95       	ret

0000376a <setstringdigits_ts>:
 setstringdigits_ts((region == REGION_US ? 12 : 9),date_d);
 setstringdigits_ts(15,date_y);
}

void setstringdigits_ts(uint8_t cpos, uint8_t val)
{
    376a:	46 2f       	mov	r20, r22
 dispstring[cpos]=(val/10);
    376c:	28 2f       	mov	r18, r24
    376e:	30 e0       	ldi	r19, 0x00	; 0
    3770:	86 2f       	mov	r24, r22
    3772:	6a e0       	ldi	r22, 0x0A	; 10
    3774:	0e 94 de 39 	call	0x73bc	; 0x73bc <__udivmodqi4>
    3778:	a2 ea       	ldi	r26, 0xA2	; 162
    377a:	b1 e0       	ldi	r27, 0x01	; 1
    377c:	fd 01       	movw	r30, r26
    377e:	e2 0f       	add	r30, r18
    3780:	f3 1f       	adc	r31, r19
    3782:	80 83       	st	Z, r24
 dispstring[cpos+1]=(val%10);
    3784:	2f 5f       	subi	r18, 0xFF	; 255
    3786:	3f 4f       	sbci	r19, 0xFF	; 255
    3788:	84 2f       	mov	r24, r20
    378a:	0e 94 de 39 	call	0x73bc	; 0x73bc <__udivmodqi4>
    378e:	a2 0f       	add	r26, r18
    3790:	b3 1f       	adc	r27, r19
    3792:	9c 93       	st	X, r25
}
    3794:	08 95       	ret

00003796 <step_ts>:
 }
 return; 
}

void step_ts(void) {
	if(!RotateFlag || (minute_changed == 2) || (hour_changed == 2)) {
    3796:	80 91 75 03 	lds	r24, 0x0375
    379a:	88 23       	and	r24, r24
    379c:	41 f0       	breq	.+16     	; 0x37ae <step_ts+0x18>
    379e:	80 91 63 02 	lds	r24, 0x0263
    37a2:	82 30       	cpi	r24, 0x02	; 2
    37a4:	21 f0       	breq	.+8      	; 0x37ae <step_ts+0x18>
    37a6:	80 91 64 02 	lds	r24, 0x0264
    37aa:	82 30       	cpi	r24, 0x02	; 2
    37ac:	31 f4       	brne	.+12     	; 0x37ba <step_ts+0x24>
		minute_changed = hour_changed = 0;
    37ae:	10 92 64 02 	sts	0x0264, r1
    37b2:	80 91 64 02 	lds	r24, 0x0264
    37b6:	80 93 63 02 	sts	0x0263, r24
    37ba:	08 95       	ret

000037bc <drawseg_ts>:
void drawhseg_ts(uint8_t x, uint8_t y, uint8_t inverted) {   
 drawseg_ts(x,y,inverted, HSEGMENT_W, HSEGMENT_H);
}*/

void drawseg_ts(uint8_t px, uint8_t y, uint8_t inverted, uint8_t width, uint8_t height)
{
    37bc:	0f 93       	push	r16
    37be:	50 2f       	mov	r21, r16
  int16_t x = px;
    37c0:	e8 2f       	mov	r30, r24
    37c2:	f0 e0       	ldi	r31, 0x00	; 0
  int16_t hSeg = width;
    37c4:	30 e0       	ldi	r19, 0x00	; 0
  if (!scrx)
    37c6:	80 91 4f 02 	lds	r24, 0x024F
    37ca:	88 23       	and	r24, r24
    37cc:	69 f4       	brne	.+26     	; 0x37e8 <drawseg_ts+0x2c>
  {
    //if (x + hSeg < posx) return;
    x-=posx;
    37ce:	80 91 4d 02 	lds	r24, 0x024D
    37d2:	e8 1b       	sub	r30, r24
    37d4:	f1 09       	sbc	r31, r1
    if (x<0) 
    37d6:	f7 ff       	sbrs	r31, 7
    37d8:	11 c0       	rjmp	.+34     	; 0x37fc <drawseg_ts+0x40>
     {
     hSeg+=x;
    37da:	2e 0f       	add	r18, r30
    37dc:	3f 1f       	adc	r19, r31
     if (hSeg<0) {return;}
    37de:	37 fd       	sbrc	r19, 7
    37e0:	19 c0       	rjmp	.+50     	; 0x3814 <drawseg_ts+0x58>
    37e2:	e0 e0       	ldi	r30, 0x00	; 0
    37e4:	f0 e0       	ldi	r31, 0x00	; 0
    37e6:	0d c0       	rjmp	.+26     	; 0x3802 <drawseg_ts+0x46>
     x=0;
     } 
  }

  else if (x + hSeg>127) {hSeg=128-x;}
    37e8:	c9 01       	movw	r24, r18
    37ea:	8e 0f       	add	r24, r30
    37ec:	9f 1f       	adc	r25, r31
    37ee:	80 38       	cpi	r24, 0x80	; 128
    37f0:	91 05       	cpc	r25, r1
    37f2:	24 f0       	brlt	.+8      	; 0x37fc <drawseg_ts+0x40>
    37f4:	20 e8       	ldi	r18, 0x80	; 128
    37f6:	30 e0       	ldi	r19, 0x00	; 0
    37f8:	2e 1b       	sub	r18, r30
    37fa:	3f 0b       	sbc	r19, r31
  if(x > 127) return;
    37fc:	e0 38       	cpi	r30, 0x80	; 128
    37fe:	f1 05       	cpc	r31, r1
    3800:	4c f4       	brge	.+18     	; 0x3814 <drawseg_ts+0x58>
  glcdFillRectangle((uint8_t)x, y, (uint8_t)hSeg, height, !inverted);
    3802:	00 e0       	ldi	r16, 0x00	; 0
    3804:	44 23       	and	r20, r20
    3806:	09 f4       	brne	.+2      	; 0x380a <drawseg_ts+0x4e>
    3808:	01 e0       	ldi	r16, 0x01	; 1
    380a:	8e 2f       	mov	r24, r30
    380c:	42 2f       	mov	r20, r18
    380e:	25 2f       	mov	r18, r21
    3810:	0e 94 05 29 	call	0x520a	; 0x520a <glcdFillRectangle>
}
    3814:	0f 91       	pop	r16
    3816:	08 95       	ret

00003818 <drawsegment_ts>:
	{SEGMENT_VERTICAL_TS,0,GLCD_YPIXELS/2},
	{SEGMENT_VERTICAL_TS,0,0},
	{SEGMENT_HORIZONTAL_TS,0,(GLCD_YPIXELS/2)-(HSEGMENT_H/2)},
};

void drawsegment_ts(uint8_t s, uint8_t x, uint8_t y, uint8_t inverted) {
    3818:	0f 93       	push	r16
    381a:	36 2f       	mov	r19, r22
    break;
  case 'g':
    drawhseg_ts(x,(GLCD_YPIXELS/2)-(HSEGMENT_H/2), inverted);
    break;    
  }*/
  if(!seg_location_ts[s][0])
    381c:	90 e0       	ldi	r25, 0x00	; 0
    381e:	fc 01       	movw	r30, r24
    3820:	ee 0f       	add	r30, r30
    3822:	ff 1f       	adc	r31, r31
    3824:	e8 0f       	add	r30, r24
    3826:	f9 1f       	adc	r31, r25
    3828:	eb 54       	subi	r30, 0x4B	; 75
    382a:	fe 4f       	sbci	r31, 0xFE	; 254
    382c:	80 81       	ld	r24, Z
    382e:	88 23       	and	r24, r24
    3830:	41 f4       	brne	.+16     	; 0x3842 <drawsegment_ts+0x2a>
  	  drawseg_ts(x+seg_location_ts[s][1],y+seg_location_ts[s][2],inverted, HSEGMENT_W, HSEGMENT_H);
    3832:	81 81       	ldd	r24, Z+1	; 0x01
    3834:	62 81       	ldd	r22, Z+2	; 0x02
    3836:	64 0f       	add	r22, r20
    3838:	83 0f       	add	r24, r19
    383a:	42 2f       	mov	r20, r18
    383c:	22 e1       	ldi	r18, 0x12	; 18
    383e:	06 e0       	ldi	r16, 0x06	; 6
    3840:	07 c0       	rjmp	.+14     	; 0x3850 <drawsegment_ts+0x38>
  	  //drawhseg_ts(x+seg_location_ts[s][1],y+seg_location_ts[s][2],inverted);
  else
  	  drawseg_ts(x+seg_location_ts[s][1],y+seg_location_ts[s][2],inverted, VSEGMENT_W, GLCD_YPIXELS/2);
    3842:	81 81       	ldd	r24, Z+1	; 0x01
    3844:	62 81       	ldd	r22, Z+2	; 0x02
    3846:	64 0f       	add	r22, r20
    3848:	83 0f       	add	r24, r19
    384a:	42 2f       	mov	r20, r18
    384c:	26 e0       	ldi	r18, 0x06	; 6
    384e:	00 e2       	ldi	r16, 0x20	; 32
    3850:	0e 94 de 1b 	call	0x37bc	; 0x37bc <drawseg_ts>
  	  //drawvseg_ts(x+seg_location_ts[s][1],y+seg_location_ts[s][2],inverted);
}
    3854:	0f 91       	pop	r16
    3856:	08 95       	ret

00003858 <draw7seg_ts>:
void drawdot_ts(uint8_t x, uint8_t y, uint8_t inverted) {
 drawseg_ts(x,y-(DOTRADIUS/2),inverted, DOTRADIUS, DOTRADIUS);
}

void draw7seg_ts(uint8_t x, uint8_t y, uint8_t segs, uint8_t inverted)
{
    3858:	a0 e0       	ldi	r26, 0x00	; 0
    385a:	b0 e0       	ldi	r27, 0x00	; 0
    385c:	e2 e3       	ldi	r30, 0x32	; 50
    385e:	fc e1       	ldi	r31, 0x1C	; 28
    3860:	0c 94 58 3a 	jmp	0x74b0	; 0x74b0 <__prologue_saves__+0x14>
    3864:	c8 2e       	mov	r12, r24
    3866:	d6 2e       	mov	r13, r22
    3868:	02 2f       	mov	r16, r18
    386a:	10 e0       	ldi	r17, 0x00	; 0
    386c:	c7 e0       	ldi	r28, 0x07	; 7
    386e:	d0 e0       	ldi	r29, 0x00	; 0
	for(uint8_t i=0;i<7;i++)
	{
		if(segs & (1 << (7 - i)))
    3870:	e4 2e       	mov	r14, r20
    3872:	ff 24       	eor	r15, r15
    3874:	c7 01       	movw	r24, r14
    3876:	0c 2e       	mov	r0, r28
    3878:	02 c0       	rjmp	.+4      	; 0x387e <draw7seg_ts+0x26>
    387a:	95 95       	asr	r25
    387c:	87 95       	ror	r24
    387e:	0a 94       	dec	r0
    3880:	e2 f7       	brpl	.-8      	; 0x387a <draw7seg_ts+0x22>
    3882:	80 ff       	sbrs	r24, 0
    3884:	06 c0       	rjmp	.+12     	; 0x3892 <draw7seg_ts+0x3a>
			drawsegment_ts(i, x, y, inverted);
    3886:	81 2f       	mov	r24, r17
    3888:	6c 2d       	mov	r22, r12
    388a:	4d 2d       	mov	r20, r13
    388c:	20 2f       	mov	r18, r16
    388e:	0e 94 0c 1c 	call	0x3818	; 0x3818 <drawsegment_ts>
 drawseg_ts(x,y-(DOTRADIUS/2),inverted, DOTRADIUS, DOTRADIUS);
}

void draw7seg_ts(uint8_t x, uint8_t y, uint8_t segs, uint8_t inverted)
{
	for(uint8_t i=0;i<7;i++)
    3892:	1f 5f       	subi	r17, 0xFF	; 255
    3894:	21 97       	sbiw	r28, 0x01	; 1
    3896:	17 30       	cpi	r17, 0x07	; 7
    3898:	69 f7       	brne	.-38     	; 0x3874 <draw7seg_ts+0x1c>
		if(segs & (1 << (7 - i)))
			drawsegment_ts(i, x, y, inverted);
		//else
			//drawsegment_ts('a'+i, x, y, !inverted);
	}
}
    389a:	cd b7       	in	r28, 0x3d	; 61
    389c:	de b7       	in	r29, 0x3e	; 62
    389e:	e8 e0       	ldi	r30, 0x08	; 8
    38a0:	0c 94 74 3a 	jmp	0x74e8	; 0x74e8 <__epilogue_restores__+0x14>

000038a4 <drawdot_ts>:
		minute_changed = hour_changed = 0;
        }
       //posx++;
}

void drawdot_ts(uint8_t x, uint8_t y, uint8_t inverted) {
    38a4:	0f 93       	push	r16
 drawseg_ts(x,y-(DOTRADIUS/2),inverted, DOTRADIUS, DOTRADIUS);
    38a6:	62 50       	subi	r22, 0x02	; 2
    38a8:	24 e0       	ldi	r18, 0x04	; 4
    38aa:	04 e0       	ldi	r16, 0x04	; 4
    38ac:	0e 94 de 1b 	call	0x37bc	; 0x37bc <drawseg_ts>
}
    38b0:	0f 91       	pop	r16
    38b2:	08 95       	ret

000038b4 <drawdigit_ts>:
		//else
			//drawsegment_ts('a'+i, x, y, !inverted);
	}
}

uint8_t drawdigit_ts(uint8_t x, uint8_t y, uint8_t d, uint8_t inverted) {
    38b4:	cf 92       	push	r12
    38b6:	df 92       	push	r13
    38b8:	ef 92       	push	r14
    38ba:	ff 92       	push	r15
    38bc:	0f 93       	push	r16
    38be:	1f 93       	push	r17
    38c0:	18 2f       	mov	r17, r24
    38c2:	c6 2e       	mov	r12, r22
    38c4:	f4 2e       	mov	r15, r20
    38c6:	e2 2e       	mov	r14, r18
  scrx=x; // current start of char
    38c8:	80 93 4f 02 	sts	0x024F, r24
  charwidth = HSEGMENT_W + 2;
    38cc:	84 e1       	ldi	r24, 0x14	; 20
    38ce:	80 93 50 02 	sts	0x0250, r24
  if (d==':' || d=='-')  charwidth = DOTRADIUS + 2;
    38d2:	8a e3       	ldi	r24, 0x3A	; 58
    38d4:	48 17       	cp	r20, r24
    38d6:	19 f0       	breq	.+6      	; 0x38de <drawdigit_ts+0x2a>
    38d8:	8d e2       	ldi	r24, 0x2D	; 45
    38da:	48 17       	cp	r20, r24
    38dc:	19 f4       	brne	.+6      	; 0x38e4 <drawdigit_ts+0x30>
    38de:	86 e0       	ldi	r24, 0x06	; 6
    38e0:	80 93 50 02 	sts	0x0250, r24
  int8_t rval = (int8_t)charwidth;
    38e4:	20 91 50 02 	lds	r18, 0x0250
  if (!x) {
    38e8:	11 23       	and	r17, r17
    38ea:	41 f4       	brne	.+16     	; 0x38fc <drawdigit_ts+0x48>
   rval -= (int8_t)posx; 
    38ec:	80 91 4d 02 	lds	r24, 0x024D
    38f0:	42 2f       	mov	r20, r18
    38f2:	48 1b       	sub	r20, r24
   if (rval<=0) return 0;
    38f4:	14 16       	cp	r1, r20
    38f6:	8c f0       	brlt	.+34     	; 0x391a <drawdigit_ts+0x66>
    38f8:	dd 24       	eor	r13, r13
    38fa:	40 c0       	rjmp	.+128    	; 0x397c <drawdigit_ts+0xc8>

uint8_t drawdigit_ts(uint8_t x, uint8_t y, uint8_t d, uint8_t inverted) {
  scrx=x; // current start of char
  charwidth = HSEGMENT_W + 2;
  if (d==':' || d=='-')  charwidth = DOTRADIUS + 2;
  int8_t rval = (int8_t)charwidth;
    38fc:	42 2f       	mov	r20, r18
  if (!x) {
   rval -= (int8_t)posx; 
   if (rval<=0) return 0;
  }
  else if ((int16_t)((int8_t)x+rval)>127) {rval=(int8_t)(128-x);}
    38fe:	81 2f       	mov	r24, r17
    3900:	99 27       	eor	r25, r25
    3902:	87 fd       	sbrc	r24, 7
    3904:	90 95       	com	r25
    3906:	33 27       	eor	r19, r19
    3908:	27 fd       	sbrc	r18, 7
    390a:	30 95       	com	r19
    390c:	82 0f       	add	r24, r18
    390e:	93 1f       	adc	r25, r19
    3910:	80 38       	cpi	r24, 0x80	; 128
    3912:	91 05       	cpc	r25, r1
    3914:	14 f0       	brlt	.+4      	; 0x391a <drawdigit_ts+0x66>
    3916:	40 e8       	ldi	r20, 0x80	; 128
    3918:	41 1b       	sub	r20, r17
  glcdFillRectangle(x, 0, rval, GLCD_YPIXELS, inverted); 
    391a:	d4 2e       	mov	r13, r20
    391c:	81 2f       	mov	r24, r17
    391e:	60 e0       	ldi	r22, 0x00	; 0
    3920:	20 e4       	ldi	r18, 0x40	; 64
    3922:	0e 2d       	mov	r16, r14
    3924:	0e 94 05 29 	call	0x520a	; 0x520a <glcdFillRectangle>
  if(d < 10) {
    3928:	89 e0       	ldi	r24, 0x09	; 9
    392a:	8f 15       	cp	r24, r15
    392c:	68 f0       	brcs	.+26     	; 0x3948 <drawdigit_ts+0x94>
          draw7seg_ts(x,y,eeprom_read_byte(&numbertable[d]),inverted);
    392e:	8f 2d       	mov	r24, r15
    3930:	90 e0       	ldi	r25, 0x00	; 0
    3932:	84 5a       	subi	r24, 0xA4	; 164
    3934:	9d 4f       	sbci	r25, 0xFD	; 253
    3936:	0e 94 94 3a 	call	0x7528	; 0x7528 <__eerd_byte_m328p>
    393a:	48 2f       	mov	r20, r24
    393c:	81 2f       	mov	r24, r17
    393e:	6c 2d       	mov	r22, r12
    3940:	2e 2d       	mov	r18, r14
    3942:	0e 94 2c 1c 	call	0x3858	; 0x3858 <draw7seg_ts>
    3946:	1a c0       	rjmp	.+52     	; 0x397c <drawdigit_ts+0xc8>
  }
  else if (d==':') {
    3948:	8a e3       	ldi	r24, 0x3A	; 58
    394a:	f8 16       	cp	r15, r24
    394c:	41 f4       	brne	.+16     	; 0x395e <drawdigit_ts+0xaa>
  	  drawdot_ts(x,16,inverted);
    394e:	81 2f       	mov	r24, r17
    3950:	60 e1       	ldi	r22, 0x10	; 16
    3952:	4e 2d       	mov	r20, r14
    3954:	0e 94 52 1c 	call	0x38a4	; 0x38a4 <drawdot_ts>
          drawdot_ts(x,47,inverted);
    3958:	81 2f       	mov	r24, r17
    395a:	6f e2       	ldi	r22, 0x2F	; 47
    395c:	0c c0       	rjmp	.+24     	; 0x3976 <drawdigit_ts+0xc2>
  }
  else if (d=='-') {
    395e:	8d e2       	ldi	r24, 0x2D	; 45
    3960:	f8 16       	cp	r15, r24
    3962:	61 f4       	brne	.+24     	; 0x397c <drawdigit_ts+0xc8>
          glcdFillRectangle(x, 0, rval, GLCD_YPIXELS, inverted); 
    3964:	81 2f       	mov	r24, r17
    3966:	60 e0       	ldi	r22, 0x00	; 0
    3968:	4d 2d       	mov	r20, r13
    396a:	20 e4       	ldi	r18, 0x40	; 64
    396c:	0e 2d       	mov	r16, r14
    396e:	0e 94 05 29 	call	0x520a	; 0x520a <glcdFillRectangle>
          drawdot_ts(x,31,inverted);
    3972:	81 2f       	mov	r24, r17
    3974:	6f e1       	ldi	r22, 0x1F	; 31
    3976:	4e 2d       	mov	r20, r14
    3978:	0e 94 52 1c 	call	0x38a4	; 0x38a4 <drawdot_ts>
  }
  return rval;
}
    397c:	8d 2d       	mov	r24, r13
    397e:	1f 91       	pop	r17
    3980:	0f 91       	pop	r16
    3982:	ff 90       	pop	r15
    3984:	ef 90       	pop	r14
    3986:	df 90       	pop	r13
    3988:	cf 90       	pop	r12
    398a:	08 95       	ret

0000398c <setstring_ts>:

void setstring_ts()
{
 // 01234567890123456789
 // 12:15:05x09-01-2010x 
 setstringdigits_ts(0,hours(score_mode == SCORE_MODE_ALARM ? alarm_h : time_h));
    398c:	80 91 67 02 	lds	r24, 0x0267
    3990:	83 30       	cpi	r24, 0x03	; 3
    3992:	19 f4       	brne	.+6      	; 0x399a <setstring_ts+0xe>
    3994:	80 91 70 03 	lds	r24, 0x0370
    3998:	02 c0       	rjmp	.+4      	; 0x399e <setstring_ts+0x12>
    399a:	80 91 62 03 	lds	r24, 0x0362
    399e:	0e 94 ca 36 	call	0x6d94	; 0x6d94 <hours>
    39a2:	68 2f       	mov	r22, r24
    39a4:	80 e0       	ldi	r24, 0x00	; 0
    39a6:	0e 94 b5 1b 	call	0x376a	; 0x376a <setstringdigits_ts>
 setstringdigits_ts(3,(score_mode == SCORE_MODE_ALARM ? alarm_m : time_m));
    39aa:	80 91 67 02 	lds	r24, 0x0267
    39ae:	83 30       	cpi	r24, 0x03	; 3
    39b0:	19 f4       	brne	.+6      	; 0x39b8 <setstring_ts+0x2c>
    39b2:	60 91 66 03 	lds	r22, 0x0366
    39b6:	02 c0       	rjmp	.+4      	; 0x39bc <setstring_ts+0x30>
    39b8:	60 91 6c 03 	lds	r22, 0x036C
    39bc:	83 e0       	ldi	r24, 0x03	; 3
    39be:	0e 94 b5 1b 	call	0x376a	; 0x376a <setstringdigits_ts>
 setstringdigits_ts(6,(score_mode == SCORE_MODE_ALARM ? 0 : time_s));
    39c2:	80 91 67 02 	lds	r24, 0x0267
    39c6:	83 30       	cpi	r24, 0x03	; 3
    39c8:	11 f4       	brne	.+4      	; 0x39ce <setstring_ts+0x42>
    39ca:	60 e0       	ldi	r22, 0x00	; 0
    39cc:	02 c0       	rjmp	.+4      	; 0x39d2 <setstring_ts+0x46>
    39ce:	60 91 77 03 	lds	r22, 0x0377
    39d2:	86 e0       	ldi	r24, 0x06	; 6
    39d4:	0e 94 b5 1b 	call	0x376a	; 0x376a <setstringdigits_ts>
 setstringdigits_ts((region == REGION_US ? 9 : 12),date_m);
    39d8:	80 91 6f 03 	lds	r24, 0x036F
    39dc:	88 23       	and	r24, r24
    39de:	11 f0       	breq	.+4      	; 0x39e4 <setstring_ts+0x58>
    39e0:	8c e0       	ldi	r24, 0x0C	; 12
    39e2:	01 c0       	rjmp	.+2      	; 0x39e6 <setstring_ts+0x5a>
    39e4:	89 e0       	ldi	r24, 0x09	; 9
    39e6:	60 91 76 03 	lds	r22, 0x0376
    39ea:	0e 94 b5 1b 	call	0x376a	; 0x376a <setstringdigits_ts>
 setstringdigits_ts((region == REGION_US ? 12 : 9),date_d);
    39ee:	80 91 6f 03 	lds	r24, 0x036F
    39f2:	88 23       	and	r24, r24
    39f4:	11 f0       	breq	.+4      	; 0x39fa <setstring_ts+0x6e>
    39f6:	89 e0       	ldi	r24, 0x09	; 9
    39f8:	01 c0       	rjmp	.+2      	; 0x39fc <setstring_ts+0x70>
    39fa:	8c e0       	ldi	r24, 0x0C	; 12
    39fc:	60 91 6b 03 	lds	r22, 0x036B
    3a00:	0e 94 b5 1b 	call	0x376a	; 0x376a <setstringdigits_ts>
 setstringdigits_ts(15,date_y);
    3a04:	60 91 65 03 	lds	r22, 0x0365
    3a08:	8f e0       	ldi	r24, 0x0F	; 15
    3a0a:	0e 94 b5 1b 	call	0x376a	; 0x376a <setstringdigits_ts>
}
    3a0e:	08 95       	ret

00003a10 <drawdisplay_ts>:
{
 dispstring[cpos]=(val/10);
 dispstring[cpos+1]=(val%10);
}

void drawdisplay_ts(uint8_t inverted) {
    3a10:	ff 92       	push	r15
    3a12:	0f 93       	push	r16
    3a14:	1f 93       	push	r17
    3a16:	f8 2e       	mov	r15, r24
 static uint8_t loop=0;
 if (++loop<6) return;
    3a18:	80 91 51 02 	lds	r24, 0x0251
    3a1c:	8f 5f       	subi	r24, 0xFF	; 255
    3a1e:	80 93 51 02 	sts	0x0251, r24
    3a22:	86 30       	cpi	r24, 0x06	; 6
    3a24:	08 f4       	brcc	.+2      	; 0x3a28 <drawdisplay_ts+0x18>
    3a26:	58 c0       	rjmp	.+176    	; 0x3ad8 <drawdisplay_ts+0xc8>
 loop=0; 
    3a28:	10 92 51 02 	sts	0x0251, r1
 uint8_t rx=0;
 uint8_t tx=0;
 uint8_t cx=0;
 uint8_t sx=posstr;
    3a2c:	00 91 4e 02 	lds	r16, 0x024E
 if((score_mode == SCORE_MODE_ALARM) && score_mode_timeout)
    3a30:	80 91 67 02 	lds	r24, 0x0267
    3a34:	83 30       	cpi	r24, 0x03	; 3
    3a36:	59 f4       	brne	.+22     	; 0x3a4e <drawdisplay_ts+0x3e>
    3a38:	80 91 66 02 	lds	r24, 0x0266
    3a3c:	88 23       	and	r24, r24
    3a3e:	39 f0       	breq	.+14     	; 0x3a4e <drawdisplay_ts+0x3e>
 {
 	 score_mode_timeout = 0;
    3a40:	10 92 66 02 	sts	0x0266, r1
 	 rx=posstr-1;
    3a44:	80 91 4e 02 	lds	r24, 0x024E
 	 if(posstr == 0)
    3a48:	80 91 4e 02 	lds	r24, 0x024E
    3a4c:	0a c0       	rjmp	.+20     	; 0x3a62 <drawdisplay_ts+0x52>
 	 	 rx=16;
 } else if ((score_mode == SCORE_MODE_ALARM) && (rx == posstr))
    3a4e:	80 91 67 02 	lds	r24, 0x0267
    3a52:	83 30       	cpi	r24, 0x03	; 3
    3a54:	31 f4       	brne	.+12     	; 0x3a62 <drawdisplay_ts+0x52>
    3a56:	80 91 4e 02 	lds	r24, 0x024E
    3a5a:	88 23       	and	r24, r24
    3a5c:	11 f4       	brne	.+4      	; 0x3a62 <drawdisplay_ts+0x52>
 {
 	 score_mode = SCORE_MODE_TIME;
    3a5e:	10 92 67 02 	sts	0x0267, r1
 }
 setstring_ts();
    3a62:	0e 94 c6 1c 	call	0x398c	; 0x398c <setstring_ts>
    3a66:	10 e0       	ldi	r17, 0x00	; 0
    3a68:	35 c0       	rjmp	.+106    	; 0x3ad4 <drawdisplay_ts+0xc4>
 while (tx < 128) {
  cx = drawdigit_ts(tx, 0, dispstring[sx++], inverted);
    3a6a:	e0 2f       	mov	r30, r16
    3a6c:	f0 e0       	ldi	r31, 0x00	; 0
    3a6e:	ee 55       	subi	r30, 0x5E	; 94
    3a70:	fe 4f       	sbci	r31, 0xFE	; 254
    3a72:	40 81       	ld	r20, Z
    3a74:	0f 5f       	subi	r16, 0xFF	; 255
    3a76:	81 2f       	mov	r24, r17
    3a78:	60 e0       	ldi	r22, 0x00	; 0
    3a7a:	2f 2d       	mov	r18, r15
    3a7c:	0e 94 5a 1c 	call	0x38b4	; 0x38b4 <drawdigit_ts>
    3a80:	28 2f       	mov	r18, r24
  if (sx>17) sx=0;
    3a82:	02 31       	cpi	r16, 0x12	; 18
    3a84:	08 f0       	brcs	.+2      	; 0x3a88 <drawdisplay_ts+0x78>
    3a86:	00 e0       	ldi	r16, 0x00	; 0
  if (!tx) 
    3a88:	11 23       	and	r17, r17
    3a8a:	19 f5       	brne	.+70     	; 0x3ad2 <drawdisplay_ts+0xc2>
   { 
   if (cx==0) 
    3a8c:	22 23       	and	r18, r18
    3a8e:	e1 f4       	brne	.+56     	; 0x3ac8 <drawdisplay_ts+0xb8>
    {
    if (posx>charwidth) posx-=charwidth;
    3a90:	90 91 4d 02 	lds	r25, 0x024D
    3a94:	80 91 50 02 	lds	r24, 0x0250
    3a98:	89 17       	cp	r24, r25
    3a9a:	40 f4       	brcc	.+16     	; 0x3aac <drawdisplay_ts+0x9c>
    3a9c:	80 91 4d 02 	lds	r24, 0x024D
    3aa0:	90 91 50 02 	lds	r25, 0x0250
    3aa4:	89 1b       	sub	r24, r25
    3aa6:	80 93 4d 02 	sts	0x024D, r24
    3aaa:	02 c0       	rjmp	.+4      	; 0x3ab0 <drawdisplay_ts+0xa0>
    else posx=0;
    3aac:	10 92 4d 02 	sts	0x024D, r1
 
    if (++posstr>17) posstr=0;
    3ab0:	80 91 4e 02 	lds	r24, 0x024E
    3ab4:	8f 5f       	subi	r24, 0xFF	; 255
    3ab6:	80 93 4e 02 	sts	0x024E, r24
    3aba:	80 91 4e 02 	lds	r24, 0x024E
    3abe:	82 31       	cpi	r24, 0x12	; 18
    3ac0:	40 f0       	brcs	.+16     	; 0x3ad2 <drawdisplay_ts+0xc2>
    3ac2:	10 92 4e 02 	sts	0x024E, r1
    3ac6:	05 c0       	rjmp	.+10     	; 0x3ad2 <drawdisplay_ts+0xc2>
    }
   else
    posx+=5;
    3ac8:	80 91 4d 02 	lds	r24, 0x024D
    3acc:	8b 5f       	subi	r24, 0xFB	; 251
    3ace:	80 93 4d 02 	sts	0x024D, r24
   }
  tx+=cx;
    3ad2:	12 0f       	add	r17, r18
 } else if ((score_mode == SCORE_MODE_ALARM) && (rx == posstr))
 {
 	 score_mode = SCORE_MODE_TIME;
 }
 setstring_ts();
 while (tx < 128) {
    3ad4:	17 ff       	sbrs	r17, 7
    3ad6:	c9 cf       	rjmp	.-110    	; 0x3a6a <drawdisplay_ts+0x5a>
    posx+=5;
   }
  tx+=cx;
 }
 return; 
}
    3ad8:	1f 91       	pop	r17
    3ada:	0f 91       	pop	r16
    3adc:	ff 90       	pop	r15
    3ade:	08 95       	ret

00003ae0 <initdisplay_ts>:
  posx=0;
  posstr=0;
   initdisplay_ts(0);
}

void initdisplay_ts(uint8_t inverted) {
    3ae0:	0f 93       	push	r16
    3ae2:	1f 93       	push	r17
    3ae4:	18 2f       	mov	r17, r24
  if(!alarming)
    3ae6:	80 91 71 03 	lds	r24, 0x0371
    3aea:	88 23       	and	r24, r24
    3aec:	31 f4       	brne	.+12     	; 0x3afa <initdisplay_ts+0x1a>
  	glcdFillRectangle(0, 0, GLCD_XPIXELS, GLCD_YPIXELS, inverted);
    3aee:	60 e0       	ldi	r22, 0x00	; 0
    3af0:	40 e8       	ldi	r20, 0x80	; 128
    3af2:	20 e4       	ldi	r18, 0x40	; 64
    3af4:	01 2f       	mov	r16, r17
    3af6:	0e 94 05 29 	call	0x520a	; 0x520a <glcdFillRectangle>
  setstring_ts();
    3afa:	0e 94 c6 1c 	call	0x398c	; 0x398c <setstring_ts>
  drawdisplay_ts(inverted);
    3afe:	81 2f       	mov	r24, r17
    3b00:	0e 94 08 1d 	call	0x3a10	; 0x3a10 <drawdisplay_ts>
}
    3b04:	1f 91       	pop	r17
    3b06:	0f 91       	pop	r16
    3b08:	08 95       	ret

00003b0a <initanim_ts>:
  DEBUG(uart_putw_dec(GLCD_XPIXELS));
  DEBUG(putstring("\n\rscreen height: "));
  DEBUG(uart_putw_dec(GLCD_YPIXELS));
  DEBUG(putstring_nl(""));
#endif
  posx=0;
    3b0a:	10 92 4d 02 	sts	0x024D, r1
  posstr=0;
    3b0e:	10 92 4e 02 	sts	0x024E, r1
   initdisplay_ts(0);
    3b12:	80 e0       	ldi	r24, 0x00	; 0
    3b14:	0e 94 70 1d 	call	0x3ae0	; 0x3ae0 <initdisplay_ts>
}
    3b18:	08 95       	ret

00003b1a <initbuttons>:
// whether hte alarm is going off
extern volatile uint8_t alarming;

void initbuttons(void) {
  // alarm pin requires a pullup
  ALARM_DDR &= ~_BV(ALARM);
    3b1a:	26 98       	cbi	0x04, 6	; 4
  ALARM_PORT |= _BV(ALARM);
    3b1c:	2e 9a       	sbi	0x05, 6	; 5

  // alarm switching is detected by using the pin change interrupt
  PCICR =  _BV(PCIE0);
    3b1e:	81 e0       	ldi	r24, 0x01	; 1
    3b20:	80 93 68 00 	sts	0x0068, r24
  PCMSK0 |= _BV(ALARM);
    3b24:	eb e6       	ldi	r30, 0x6B	; 107
    3b26:	f0 e0       	ldi	r31, 0x00	; 0
    3b28:	80 81       	ld	r24, Z
    3b2a:	80 64       	ori	r24, 0x40	; 64
    3b2c:	80 83       	st	Z, r24

  // The buttons are totem pole'd together so we can read the buttons with one pin
  // set up ADC
  ADMUX = 2;      // listen to ADC2 for button presses
    3b2e:	82 e0       	ldi	r24, 0x02	; 2
    3b30:	80 93 7c 00 	sts	0x007C, r24
  ADCSRB = 0;     // free running mode
    3b34:	10 92 7b 00 	sts	0x007B, r1
  // enable ADC and interrupts, prescale down to <200KHz
  ADCSRA = _BV(ADEN) | _BV(ADIE) | _BV(ADPS2) | _BV(ADPS1); 
    3b38:	ea e7       	ldi	r30, 0x7A	; 122
    3b3a:	f0 e0       	ldi	r31, 0x00	; 0
    3b3c:	8e e8       	ldi	r24, 0x8E	; 142
    3b3e:	80 83       	st	Z, r24
  ADCSRA |= _BV(ADSC); // start a conversion
    3b40:	80 81       	ld	r24, Z
    3b42:	80 64       	ori	r24, 0x40	; 64
    3b44:	80 83       	st	Z, r24
}
    3b46:	08 95       	ret

00003b48 <readADC>:

uint16_t readADC(void) {
  // basically just the busy-wait code to read the ADC and return the value
  ADCSRA &= ~_BV(ADIE); // no interrupt
    3b48:	80 91 7a 00 	lds	r24, 0x007A
    3b4c:	87 7f       	andi	r24, 0xF7	; 247
    3b4e:	80 93 7a 00 	sts	0x007A, r24
  ADCSRA |= _BV(ADSC); // start a conversion
    3b52:	80 91 7a 00 	lds	r24, 0x007A
    3b56:	80 64       	ori	r24, 0x40	; 64
    3b58:	80 93 7a 00 	sts	0x007A, r24
  while (! (ADCSRA & _BV(ADIF)));
    3b5c:	80 91 7a 00 	lds	r24, 0x007A
    3b60:	84 ff       	sbrs	r24, 4
    3b62:	fc cf       	rjmp	.-8      	; 0x3b5c <readADC+0x14>
  return ADC;
    3b64:	20 91 78 00 	lds	r18, 0x0078
    3b68:	30 91 79 00 	lds	r19, 0x0079
}
    3b6c:	c9 01       	movw	r24, r18
    3b6e:	08 95       	ret

00003b70 <__vector_3>:
  }
  ADCSRA |= _BV(ADIE) | _BV(ADSC); // start next conversion  
}

// We use the pin change interrupts to detect when alarm changes
SIGNAL(PCINT0_vect) {
    3b70:	1f 92       	push	r1
    3b72:	0f 92       	push	r0
    3b74:	0f b6       	in	r0, 0x3f	; 63
    3b76:	0f 92       	push	r0
    3b78:	11 24       	eor	r1, r1
    3b7a:	2f 93       	push	r18
    3b7c:	3f 93       	push	r19
    3b7e:	4f 93       	push	r20
    3b80:	5f 93       	push	r21
    3b82:	6f 93       	push	r22
    3b84:	7f 93       	push	r23
    3b86:	8f 93       	push	r24
    3b88:	9f 93       	push	r25
    3b8a:	af 93       	push	r26
    3b8c:	bf 93       	push	r27
    3b8e:	ef 93       	push	r30
    3b90:	ff 93       	push	r31
  // allow interrupts while we're doing this
  sei();
    3b92:	78 94       	sei
  setalarmstate();
    3b94:	0e 94 d5 2d 	call	0x5baa	; 0x5baa <setalarmstate>
}
    3b98:	ff 91       	pop	r31
    3b9a:	ef 91       	pop	r30
    3b9c:	bf 91       	pop	r27
    3b9e:	af 91       	pop	r26
    3ba0:	9f 91       	pop	r25
    3ba2:	8f 91       	pop	r24
    3ba4:	7f 91       	pop	r23
    3ba6:	6f 91       	pop	r22
    3ba8:	5f 91       	pop	r21
    3baa:	4f 91       	pop	r20
    3bac:	3f 91       	pop	r19
    3bae:	2f 91       	pop	r18
    3bb0:	0f 90       	pop	r0
    3bb2:	0f be       	out	0x3f, r0	; 63
    3bb4:	0f 90       	pop	r0
    3bb6:	1f 90       	pop	r1
    3bb8:	18 95       	reti

00003bba <__vector_21>:
  return ADC;
}

// Every time the ADC finishes a conversion, we'll see whether
// the buttons have changed
SIGNAL(ADC_vect) {
    3bba:	1f 92       	push	r1
    3bbc:	0f 92       	push	r0
    3bbe:	0f b6       	in	r0, 0x3f	; 63
    3bc0:	0f 92       	push	r0
    3bc2:	11 24       	eor	r1, r1
    3bc4:	2f 93       	push	r18
    3bc6:	3f 93       	push	r19
    3bc8:	4f 93       	push	r20
    3bca:	5f 93       	push	r21
    3bcc:	6f 93       	push	r22
    3bce:	7f 93       	push	r23
    3bd0:	8f 93       	push	r24
    3bd2:	9f 93       	push	r25
    3bd4:	af 93       	push	r26
    3bd6:	bf 93       	push	r27
    3bd8:	ef 93       	push	r30
    3bda:	ff 93       	push	r31
  uint16_t reading, reading2;
  sei();
    3bdc:	78 94       	sei

  // We get called when ADC is ready so no need to request a conversion
  reading = ADC;
    3bde:	80 91 78 00 	lds	r24, 0x0078
    3be2:	90 91 79 00 	lds	r25, 0x0079

  if (reading > 735) {
    3be6:	22 e0       	ldi	r18, 0x02	; 2
    3be8:	80 3e       	cpi	r24, 0xE0	; 224
    3bea:	92 07       	cpc	r25, r18
    3bec:	28 f0       	brcs	.+10     	; 0x3bf8 <__vector_21+0x3e>
    // no presses
    pressed = 0;
    3bee:	10 92 55 02 	sts	0x0255, r1
    last_buttonstate = 0;
    3bf2:	10 92 52 02 	sts	0x0252, r1
    3bf6:	4a c0       	rjmp	.+148    	; 0x3c8c <__vector_21+0xd2>
    
    ADCSRA |= _BV(ADIE) | _BV(ADSC); // start next conversion  
    return;
  } else if (reading > 610) {
    3bf8:	22 e0       	ldi	r18, 0x02	; 2
    3bfa:	83 36       	cpi	r24, 0x63	; 99
    3bfc:	92 07       	cpc	r25, r18
    3bfe:	f0 f0       	brcs	.+60     	; 0x3c3c <__vector_21+0x82>
    // button 3 "+" pressed
    if (!last_buttonstate) { // was not pressed before
    3c00:	80 91 52 02 	lds	r24, 0x0252
    3c04:	88 23       	and	r24, r24
    3c06:	a1 f4       	brne	.+40     	; 0x3c30 <__vector_21+0x76>
      // debounce by taking a second reading 
      delay_ms(10);
    3c08:	8a e0       	ldi	r24, 0x0A	; 10
    3c0a:	90 e0       	ldi	r25, 0x00	; 0
    3c0c:	0e 94 0c 35 	call	0x6a18	; 0x6a18 <delay_ms>
      reading2 = readADC();
    3c10:	0e 94 a4 1d 	call	0x3b48	; 0x3b48 <readADC>
      if ( (reading2 > 735) || (reading2 < 610)) {
    3c14:	82 56       	subi	r24, 0x62	; 98
    3c16:	92 40       	sbci	r25, 0x02	; 2
    3c18:	8e 37       	cpi	r24, 0x7E	; 126
    3c1a:	91 05       	cpc	r25, r1
    3c1c:	b8 f5       	brcc	.+110    	; 0x3c8c <__vector_21+0xd2>
	// was a bounce, ignore it
	ADCSRA |= _BV(ADIE) | _BV(ADSC); // start next conversion  	
	return;
      }
      buttonholdcounter = 2;
    3c1e:	82 e0       	ldi	r24, 0x02	; 2
    3c20:	80 93 56 02 	sts	0x0256, r24
      last_buttonstate = 0x4;
    3c24:	84 e0       	ldi	r24, 0x04	; 4
    3c26:	80 93 52 02 	sts	0x0252, r24
      just_pressed = 0x4;
    3c2a:	80 93 54 02 	sts	0x0254, r24
    3c2e:	2e c0       	rjmp	.+92     	; 0x3c8c <__vector_21+0xd2>
	  ADCSRA |= _BV(ADIE) | _BV(ADSC); // start next conversion  	
	  return;
    } else {

      // the buttonholdcounter is decremented by a timer!
      if (buttonholdcounter) {
    3c30:	80 91 56 02 	lds	r24, 0x0256
    3c34:	88 23       	and	r24, r24
    3c36:	51 f5       	brne	.+84     	; 0x3c8c <__vector_21+0xd2>
	     ADCSRA |= _BV(ADIE) | _BV(ADSC); // start next conversion  	
	     return;
      }
      // 2 seconds later...
      pressed = 0x4;                 // The button was held down (fast advance)
    3c38:	84 e0       	ldi	r24, 0x04	; 4
    3c3a:	26 c0       	rjmp	.+76     	; 0x3c88 <__vector_21+0xce>
    }

  } else if (reading > 270) {
    3c3c:	8f 50       	subi	r24, 0x0F	; 15
    3c3e:	91 40       	sbci	r25, 0x01	; 1
    3c40:	88 f0       	brcs	.+34     	; 0x3c64 <__vector_21+0xaa>
    // button 2 "SET" pressed
    if (!last_buttonstate) { // was not pressed before
    3c42:	80 91 52 02 	lds	r24, 0x0252
    3c46:	88 23       	and	r24, r24
    3c48:	09 f5       	brne	.+66     	; 0x3c8c <__vector_21+0xd2>
      // debounce by taking a second reading 
      delay_ms(10);
    3c4a:	8a e0       	ldi	r24, 0x0A	; 10
    3c4c:	90 e0       	ldi	r25, 0x00	; 0
    3c4e:	0e 94 0c 35 	call	0x6a18	; 0x6a18 <delay_ms>
      reading2 = readADC();
    3c52:	0e 94 a4 1d 	call	0x3b48	; 0x3b48 <readADC>
      if ( (reading2 > 610) || (reading2 < 270)) {
    3c56:	8e 50       	subi	r24, 0x0E	; 14
    3c58:	91 40       	sbci	r25, 0x01	; 1
    3c5a:	85 55       	subi	r24, 0x55	; 85
    3c5c:	91 40       	sbci	r25, 0x01	; 1
    3c5e:	b0 f4       	brcc	.+44     	; 0x3c8c <__vector_21+0xd2>
	// was a bounce, ignore it
	ADCSRA |= _BV(ADIE) | _BV(ADSC); // start next conversion  	
	return;
      }
      DEBUG(putstring_nl("b2"));
      just_pressed = 0x2;
    3c60:	82 e0       	ldi	r24, 0x02	; 2
    3c62:	0e c0       	rjmp	.+28     	; 0x3c80 <__vector_21+0xc6>
      last_buttonstate = 0x2;
      pressed = 0x2;                 // held down
    }
  } else {
    // button 1 "MENU" pressed
    if (!last_buttonstate) { // was not pressed before
    3c64:	80 91 52 02 	lds	r24, 0x0252
    3c68:	88 23       	and	r24, r24
    3c6a:	81 f4       	brne	.+32     	; 0x3c8c <__vector_21+0xd2>
      // debounce by taking a second reading 
      delay_ms(10);
    3c6c:	8a e0       	ldi	r24, 0x0A	; 10
    3c6e:	90 e0       	ldi	r25, 0x00	; 0
    3c70:	0e 94 0c 35 	call	0x6a18	; 0x6a18 <delay_ms>
      reading2 = readADC();
    3c74:	0e 94 a4 1d 	call	0x3b48	; 0x3b48 <readADC>
      if (reading2 > 270) {
    3c78:	8f 50       	subi	r24, 0x0F	; 15
    3c7a:	91 40       	sbci	r25, 0x01	; 1
    3c7c:	38 f4       	brcc	.+14     	; 0x3c8c <__vector_21+0xd2>
	// was a bounce, ignore it
	ADCSRA |= _BV(ADIE) | _BV(ADSC); // start next conversion  	
	return;
      }
      DEBUG(putstring_nl("b1"));
      just_pressed = 0x1;
    3c7e:	81 e0       	ldi	r24, 0x01	; 1
    3c80:	80 93 54 02 	sts	0x0254, r24
      last_buttonstate = 0x1;
    3c84:	80 93 52 02 	sts	0x0252, r24
      pressed = 0x1;                 // held down
    3c88:	80 93 55 02 	sts	0x0255, r24
    }
  }
  ADCSRA |= _BV(ADIE) | _BV(ADSC); // start next conversion  
    3c8c:	80 91 7a 00 	lds	r24, 0x007A
    3c90:	88 64       	ori	r24, 0x48	; 72
    3c92:	80 93 7a 00 	sts	0x007A, r24
}
    3c96:	ff 91       	pop	r31
    3c98:	ef 91       	pop	r30
    3c9a:	bf 91       	pop	r27
    3c9c:	af 91       	pop	r26
    3c9e:	9f 91       	pop	r25
    3ca0:	8f 91       	pop	r24
    3ca2:	7f 91       	pop	r23
    3ca4:	6f 91       	pop	r22
    3ca6:	5f 91       	pop	r21
    3ca8:	4f 91       	pop	r20
    3caa:	3f 91       	pop	r19
    3cac:	2f 91       	pop	r18
    3cae:	0f 90       	pop	r0
    3cb0:	0f be       	out	0x3f, r0	; 63
    3cb2:	0f 90       	pop	r0
    3cb4:	1f 90       	pop	r1
    3cb6:	18 95       	reti

00003cb8 <print_style_setting>:
#endif
  STYLE_ABOUT, 'A','b','o','u','t',0,
  0xFF,
};

void print_style_setting(uint8_t inverted) {
    3cb8:	1f 93       	push	r17
    3cba:	18 2f       	mov	r17, r24
glcdSetAddress(43, 0);
    3cbc:	8b e2       	ldi	r24, 0x2B	; 43
    3cbe:	60 e0       	ldi	r22, 0x00	; 0
    3cc0:	0e 94 9c 2c 	call	0x5938	; 0x5938 <glcdSetAddress>
    3cc4:	20 e0       	ldi	r18, 0x00	; 0
    3cc6:	30 e0       	ldi	r19, 0x00	; 0
    3cc8:	90 e0       	ldi	r25, 0x00	; 0
    3cca:	06 c0       	rjmp	.+12     	; 0x3cd8 <print_style_setting+0x20>
  uint16_t i=0;
  uint8_t j=0;
  while((j!=displaystyle)&&(j!=0xFF))
    3ccc:	f9 01       	movw	r30, r18
    3cce:	e1 5c       	subi	r30, 0xC1	; 193
    3cd0:	fd 4f       	sbci	r31, 0xFD	; 253
  	  j=pgm_read_byte(&style_setting_str[i++]);
    3cd2:	2f 5f       	subi	r18, 0xFF	; 255
    3cd4:	3f 4f       	sbci	r19, 0xFF	; 255
    3cd6:	94 91       	lpm	r25, Z+

void print_style_setting(uint8_t inverted) {
glcdSetAddress(43, 0);
  uint16_t i=0;
  uint8_t j=0;
  while((j!=displaystyle)&&(j!=0xFF))
    3cd8:	80 91 69 03 	lds	r24, 0x0369
    3cdc:	98 17       	cp	r25, r24
    3cde:	19 f0       	breq	.+6      	; 0x3ce6 <print_style_setting+0x2e>
    3ce0:	9f 3f       	cpi	r25, 0xFF	; 255
    3ce2:	a1 f7       	brne	.-24     	; 0x3ccc <print_style_setting+0x14>
    3ce4:	08 c0       	rjmp	.+16     	; 0x3cf6 <print_style_setting+0x3e>
  	  j=pgm_read_byte(&style_setting_str[i++]);
  if(j==0xFF)
    3ce6:	9f 3f       	cpi	r25, 0xFF	; 255
    3ce8:	31 f0       	breq	.+12     	; 0x3cf6 <print_style_setting+0x3e>
  	  return;
  glcdPutStr_rom(&style_setting_str[i],inverted);
    3cea:	c9 01       	movw	r24, r18
    3cec:	81 5c       	subi	r24, 0xC1	; 193
    3cee:	9d 4f       	sbci	r25, 0xFD	; 253
    3cf0:	61 2f       	mov	r22, r17
    3cf2:	0e 94 dd 28 	call	0x51ba	; 0x51ba <glcdPutStr_rom>
}
    3cf6:	1f 91       	pop	r17
    3cf8:	08 95       	ret

00003cfa <print_region_setting>:
	"12h LONG DOW",
	"24h LONG DOW"
#endif
};

void print_region_setting(uint8_t inverted) {
    3cfa:	1f 93       	push	r17
    3cfc:	18 2f       	mov	r17, r24
  glcdSetAddress(MENU_INDENT, 4);
    3cfe:	88 e0       	ldi	r24, 0x08	; 8
    3d00:	64 e0       	ldi	r22, 0x04	; 4
    3d02:	0e 94 9c 2c 	call	0x5938	; 0x5938 <glcdSetAddress>
  glcdPutStr("Region: ", NORMAL);
    3d06:	85 e1       	ldi	r24, 0x15	; 21
    3d08:	93 e0       	ldi	r25, 0x03	; 3
    3d0a:	60 e0       	ldi	r22, 0x00	; 0
    3d0c:	0e 94 dd 28 	call	0x51ba	; 0x51ba <glcdPutStr_rom>
  glcdPutStr_rom(&region_setting_table[(region * 2) + time_format][0], inverted);
    3d10:	80 91 6f 03 	lds	r24, 0x036F
    3d14:	20 91 64 03 	lds	r18, 0x0364
    3d18:	90 e0       	ldi	r25, 0x00	; 0
    3d1a:	88 0f       	add	r24, r24
    3d1c:	99 1f       	adc	r25, r25
    3d1e:	82 0f       	add	r24, r18
    3d20:	91 1d       	adc	r25, r1
    3d22:	2d e0       	ldi	r18, 0x0D	; 13
    3d24:	30 e0       	ldi	r19, 0x00	; 0
    3d26:	ac 01       	movw	r20, r24
    3d28:	42 9f       	mul	r20, r18
    3d2a:	c0 01       	movw	r24, r0
    3d2c:	43 9f       	mul	r20, r19
    3d2e:	90 0d       	add	r25, r0
    3d30:	52 9f       	mul	r21, r18
    3d32:	90 0d       	add	r25, r0
    3d34:	11 24       	eor	r1, r1
    3d36:	85 5f       	subi	r24, 0xF5	; 245
    3d38:	9d 4f       	sbci	r25, 0xFD	; 253
    3d3a:	61 2f       	mov	r22, r17
    3d3c:	0e 94 dd 28 	call	0x51ba	; 0x51ba <glcdPutStr_rom>
}
    3d40:	1f 91       	pop	r17
    3d42:	08 95       	ret

00003d44 <print_alarmhour>:
    glcdWriteChar(' ', NORMAL);
    printnumber(h, inverted);
  }
}

void print_alarmhour(uint8_t h, uint8_t inverted) {
    3d44:	0f 93       	push	r16
    3d46:	1f 93       	push	r17
    3d48:	cf 93       	push	r28
    3d4a:	df 93       	push	r29
    3d4c:	18 2f       	mov	r17, r24
    3d4e:	06 2f       	mov	r16, r22
  if (time_format == TIME_12H) {
    3d50:	80 91 64 03 	lds	r24, 0x0364
    3d54:	88 23       	and	r24, r24
    3d56:	71 f5       	brne	.+92     	; 0x3db4 <print_alarmhour+0x70>
    glcdSetAddress(MENU_INDENT + 18*6, 1);
    3d58:	84 e7       	ldi	r24, 0x74	; 116
    3d5a:	61 e0       	ldi	r22, 0x01	; 1
    3d5c:	0e 94 9c 2c 	call	0x5938	; 0x5938 <glcdSetAddress>
    if (h >= 12) 
    3d60:	1c 30       	cpi	r17, 0x0C	; 12
    3d62:	10 f0       	brcs	.+4      	; 0x3d68 <print_alarmhour+0x24>
      glcdWriteChar('P', NORMAL);
    3d64:	80 e5       	ldi	r24, 0x50	; 80
    3d66:	01 c0       	rjmp	.+2      	; 0x3d6a <print_alarmhour+0x26>
    else
      glcdWriteChar('A', NORMAL);
    3d68:	81 e4       	ldi	r24, 0x41	; 65
    3d6a:	60 e0       	ldi	r22, 0x00	; 0
    3d6c:	0e 94 b3 28 	call	0x5166	; 0x5166 <glcdWriteChar>
    glcdWriteChar('M', NORMAL);
    3d70:	8d e4       	ldi	r24, 0x4D	; 77
    3d72:	60 e0       	ldi	r22, 0x00	; 0
    3d74:	0e 94 b3 28 	call	0x5166	; 0x5166 <glcdWriteChar>
    glcdSetAddress(MENU_INDENT + 12*6, 1);
    3d78:	80 e5       	ldi	r24, 0x50	; 80
    3d7a:	61 e0       	ldi	r22, 0x01	; 1
    3d7c:	0e 94 9c 2c 	call	0x5938	; 0x5938 <glcdSetAddress>

    if (((h + 23)%12 + 1) >= 10 ) {
    3d80:	81 2f       	mov	r24, r17
    3d82:	90 e0       	ldi	r25, 0x00	; 0
    3d84:	47 96       	adiw	r24, 0x17	; 23
    3d86:	6c e0       	ldi	r22, 0x0C	; 12
    3d88:	70 e0       	ldi	r23, 0x00	; 0
    3d8a:	0e 94 fe 39 	call	0x73fc	; 0x73fc <__divmodhi4>
    3d8e:	ec 01       	movw	r28, r24
    3d90:	89 30       	cpi	r24, 0x09	; 9
    3d92:	91 05       	cpc	r25, r1
    3d94:	24 f0       	brlt	.+8      	; 0x3d9e <print_alarmhour+0x5a>
      printnumber((h + 23)%12 + 1, inverted);
    3d96:	9c 01       	movw	r18, r24
    3d98:	2f 5f       	subi	r18, 0xFF	; 255
    3d9a:	82 2f       	mov	r24, r18
    3d9c:	10 c0       	rjmp	.+32     	; 0x3dbe <print_alarmhour+0x7a>
    } else {
      glcdWriteChar(' ', NORMAL);
    3d9e:	80 e2       	ldi	r24, 0x20	; 32
    3da0:	60 e0       	ldi	r22, 0x00	; 0
    3da2:	0e 94 b3 28 	call	0x5166	; 0x5166 <glcdWriteChar>
      glcdWriteChar('0' + (h + 23)%12 + 1, inverted);
    3da6:	9e 01       	movw	r18, r28
    3da8:	2f 5c       	subi	r18, 0xCF	; 207
    3daa:	82 2f       	mov	r24, r18
    3dac:	60 2f       	mov	r22, r16
    3dae:	0e 94 b3 28 	call	0x5166	; 0x5166 <glcdWriteChar>
    3db2:	08 c0       	rjmp	.+16     	; 0x3dc4 <print_alarmhour+0x80>
    }
   } else {
    glcdSetAddress(MENU_INDENT + 12*6, 1);
    3db4:	80 e5       	ldi	r24, 0x50	; 80
    3db6:	61 e0       	ldi	r22, 0x01	; 1
    3db8:	0e 94 9c 2c 	call	0x5938	; 0x5938 <glcdSetAddress>
    printnumber(h, inverted);
    3dbc:	81 2f       	mov	r24, r17
    3dbe:	60 2f       	mov	r22, r16
    3dc0:	0e 94 50 2e 	call	0x5ca0	; 0x5ca0 <printnumber>
  }
}
    3dc4:	df 91       	pop	r29
    3dc6:	cf 91       	pop	r28
    3dc8:	1f 91       	pop	r17
    3dca:	0f 91       	pop	r16
    3dcc:	08 95       	ret

00003dce <print_timehour>:
	delay_ms(200);
    }
  }
}

void print_timehour(uint8_t h, uint8_t inverted) {
    3dce:	0f 93       	push	r16
    3dd0:	1f 93       	push	r17
    3dd2:	cf 93       	push	r28
    3dd4:	df 93       	push	r29
    3dd6:	08 2f       	mov	r16, r24
    3dd8:	16 2f       	mov	r17, r22
  if (time_format == TIME_12H) {
    3dda:	80 91 64 03 	lds	r24, 0x0364
    3dde:	88 23       	and	r24, r24
    3de0:	d1 f4       	brne	.+52     	; 0x3e16 <print_timehour+0x48>
    if (((h + 23)%12 + 1) >= 10 ) {
    3de2:	80 2f       	mov	r24, r16
    3de4:	90 e0       	ldi	r25, 0x00	; 0
    3de6:	47 96       	adiw	r24, 0x17	; 23
    3de8:	6c e0       	ldi	r22, 0x0C	; 12
    3dea:	70 e0       	ldi	r23, 0x00	; 0
    3dec:	0e 94 fe 39 	call	0x73fc	; 0x73fc <__divmodhi4>
    3df0:	ec 01       	movw	r28, r24
    3df2:	89 30       	cpi	r24, 0x09	; 9
    3df4:	91 05       	cpc	r25, r1
    3df6:	24 f0       	brlt	.+8      	; 0x3e00 <print_timehour+0x32>
      printnumber((h + 23)%12 + 1, inverted);
    3df8:	9c 01       	movw	r18, r24
    3dfa:	2f 5f       	subi	r18, 0xFF	; 255
    3dfc:	82 2f       	mov	r24, r18
    3dfe:	14 c0       	rjmp	.+40     	; 0x3e28 <print_timehour+0x5a>
    } else {
      glcdWriteChar(' ', NORMAL);
    3e00:	80 e2       	ldi	r24, 0x20	; 32
    3e02:	60 e0       	ldi	r22, 0x00	; 0
    3e04:	0e 94 b3 28 	call	0x5166	; 0x5166 <glcdWriteChar>
      glcdWriteChar('0' + (h + 23)%12 + 1, inverted);
    3e08:	9e 01       	movw	r18, r28
    3e0a:	2f 5c       	subi	r18, 0xCF	; 207
    3e0c:	82 2f       	mov	r24, r18
    3e0e:	61 2f       	mov	r22, r17
    3e10:	0e 94 b3 28 	call	0x5166	; 0x5166 <glcdWriteChar>
    3e14:	0c c0       	rjmp	.+24     	; 0x3e2e <print_timehour+0x60>
    }
  } else {
    glcdWriteChar(' ', NORMAL);
    3e16:	80 e2       	ldi	r24, 0x20	; 32
    3e18:	60 e0       	ldi	r22, 0x00	; 0
    3e1a:	0e 94 b3 28 	call	0x5166	; 0x5166 <glcdWriteChar>
    glcdWriteChar(' ', NORMAL);
    3e1e:	80 e2       	ldi	r24, 0x20	; 32
    3e20:	60 e0       	ldi	r22, 0x00	; 0
    3e22:	0e 94 b3 28 	call	0x5166	; 0x5166 <glcdWriteChar>
    printnumber(h, inverted);
    3e26:	80 2f       	mov	r24, r16
    3e28:	61 2f       	mov	r22, r17
    3e2a:	0e 94 50 2e 	call	0x5ca0	; 0x5ca0 <printnumber>
  }
}
    3e2e:	df 91       	pop	r29
    3e30:	cf 91       	pop	r28
    3e32:	1f 91       	pop	r17
    3e34:	0f 91       	pop	r16
    3e36:	08 95       	ret

00003e38 <print_number_slash>:
}  
#endif

void print_number_slash(uint8_t number, uint8_t inverted)
{
	printnumber(number, inverted);
    3e38:	0e 94 50 2e 	call	0x5ca0	; 0x5ca0 <printnumber>
	glcdWriteChar('/', NORMAL);
    3e3c:	8f e2       	ldi	r24, 0x2F	; 47
    3e3e:	60 e0       	ldi	r22, 0x00	; 0
    3e40:	0e 94 b3 28 	call	0x5166	; 0x5166 <glcdWriteChar>
}
    3e44:	08 95       	ret

00003e46 <print_date>:
  #define MAX_ORDER 6
#else
  #define MAX_ORDER 2
#endif

void print_date(uint8_t month, uint8_t day, uint8_t year, uint8_t mode) {
    3e46:	ef 92       	push	r14
    3e48:	ff 92       	push	r15
    3e4a:	0f 93       	push	r16
    3e4c:	1f 93       	push	r17
    3e4e:	f8 2e       	mov	r15, r24
    3e50:	16 2f       	mov	r17, r22
    3e52:	e4 2e       	mov	r14, r20
    3e54:	02 2f       	mov	r16, r18
  glcdSetAddress(MENU_INDENT, 3);
    3e56:	88 e0       	ldi	r24, 0x08	; 8
    3e58:	63 e0       	ldi	r22, 0x03	; 3
    3e5a:	0e 94 9c 2c 	call	0x5938	; 0x5938 <glcdSetAddress>
  glcdPutStr("Date:", NORMAL);
    3e5e:	86 e6       	ldi	r24, 0x66	; 102
    3e60:	93 e0       	ldi	r25, 0x03	; 3
    3e62:	60 e0       	ldi	r22, 0x00	; 0
    3e64:	0e 94 dd 28 	call	0x51ba	; 0x51ba <glcdPutStr_rom>
  if (region == REGION_US) {
    3e68:	80 91 6f 03 	lds	r24, 0x036F
    3e6c:	88 23       	and	r24, r24
    3e6e:	91 f4       	brne	.+36     	; 0x3e94 <print_date+0x4e>
  	glcdPutStr("     ",NORMAL);
    3e70:	80 e6       	ldi	r24, 0x60	; 96
    3e72:	93 e0       	ldi	r25, 0x03	; 3
    3e74:	60 e0       	ldi	r22, 0x00	; 0
    3e76:	0e 94 dd 28 	call	0x51ba	; 0x51ba <glcdPutStr_rom>
  	print_number_slash(month,(mode == SET_MONTH)?INVERTED:NORMAL);
    3e7a:	60 e0       	ldi	r22, 0x00	; 0
    3e7c:	00 31       	cpi	r16, 0x10	; 16
    3e7e:	09 f4       	brne	.+2      	; 0x3e82 <print_date+0x3c>
    3e80:	61 e0       	ldi	r22, 0x01	; 1
    3e82:	8f 2d       	mov	r24, r15
    3e84:	0e 94 1c 1f 	call	0x3e38	; 0x3e38 <print_number_slash>
  	print_number_slash(day, (mode == SET_DAY)?INVERTED:NORMAL);
    3e88:	60 e0       	ldi	r22, 0x00	; 0
    3e8a:	01 31       	cpi	r16, 0x11	; 17
    3e8c:	09 f4       	brne	.+2      	; 0x3e90 <print_date+0x4a>
    3e8e:	61 e0       	ldi	r22, 0x01	; 1
    3e90:	81 2f       	mov	r24, r17
    3e92:	15 c0       	rjmp	.+42     	; 0x3ebe <print_date+0x78>
  } else if (region == REGION_EU) {
    3e94:	80 91 6f 03 	lds	r24, 0x036F
    3e98:	81 30       	cpi	r24, 0x01	; 1
    3e9a:	99 f4       	brne	.+38     	; 0x3ec2 <print_date+0x7c>
  	glcdPutStr("     ",NORMAL);
    3e9c:	8a e5       	ldi	r24, 0x5A	; 90
    3e9e:	93 e0       	ldi	r25, 0x03	; 3
    3ea0:	60 e0       	ldi	r22, 0x00	; 0
    3ea2:	0e 94 dd 28 	call	0x51ba	; 0x51ba <glcdPutStr_rom>
  	print_number_slash(day, (mode == SET_DAY)?INVERTED:NORMAL);
    3ea6:	60 e0       	ldi	r22, 0x00	; 0
    3ea8:	01 31       	cpi	r16, 0x11	; 17
    3eaa:	09 f4       	brne	.+2      	; 0x3eae <print_date+0x68>
    3eac:	61 e0       	ldi	r22, 0x01	; 1
    3eae:	81 2f       	mov	r24, r17
    3eb0:	0e 94 1c 1f 	call	0x3e38	; 0x3e38 <print_number_slash>
  	print_number_slash(month,(mode == SET_MONTH)?INVERTED:NORMAL);
    3eb4:	60 e0       	ldi	r22, 0x00	; 0
    3eb6:	00 31       	cpi	r16, 0x10	; 16
    3eb8:	09 f4       	brne	.+2      	; 0x3ebc <print_date+0x76>
    3eba:	61 e0       	ldi	r22, 0x01	; 1
    3ebc:	8f 2d       	mov	r24, r15
    3ebe:	0e 94 1c 1f 	call	0x3e38	; 0x3e38 <print_number_slash>
  	glcdWriteChar(' ', NORMAL);
  	printnumber(day, (mode == SET_DAY)?INVERTED:NORMAL);
  	glcdWriteChar(',', NORMAL);
  }
#endif
  printnumber(20,(mode == SET_YEAR)?INVERTED:NORMAL);
    3ec2:	10 e0       	ldi	r17, 0x00	; 0
    3ec4:	02 31       	cpi	r16, 0x12	; 18
    3ec6:	09 f4       	brne	.+2      	; 0x3eca <print_date+0x84>
    3ec8:	11 e0       	ldi	r17, 0x01	; 1
    3eca:	84 e1       	ldi	r24, 0x14	; 20
    3ecc:	61 2f       	mov	r22, r17
    3ece:	0e 94 50 2e 	call	0x5ca0	; 0x5ca0 <printnumber>
  printnumber(year, (mode == SET_YEAR)?INVERTED:NORMAL);
    3ed2:	8e 2d       	mov	r24, r14
    3ed4:	61 2f       	mov	r22, r17
    3ed6:	0e 94 50 2e 	call	0x5ca0	; 0x5ca0 <printnumber>
}
    3eda:	1f 91       	pop	r17
    3edc:	0f 91       	pop	r16
    3ede:	ff 90       	pop	r15
    3ee0:	ef 90       	pop	r14
    3ee2:	08 95       	ret

00003ee4 <print_backlight>:
    }
  }
}

void print_backlight(uint8_t mode)
{
    3ee4:	1f 93       	push	r17
    3ee6:	18 2f       	mov	r17, r24
  glcdSetAddress(MENU_INDENT, 5);
    3ee8:	88 e0       	ldi	r24, 0x08	; 8
    3eea:	65 e0       	ldi	r22, 0x05	; 5
    3eec:	0e 94 9c 2c 	call	0x5938	; 0x5938 <glcdSetAddress>
  glcdPutStr("Set Backlight: ", NORMAL);
    3ef0:	82 e7       	ldi	r24, 0x72	; 114
    3ef2:	93 e0       	ldi	r25, 0x03	; 3
    3ef4:	60 e0       	ldi	r22, 0x00	; 0
    3ef6:	0e 94 dd 28 	call	0x51ba	; 0x51ba <glcdPutStr_rom>
  printnumber(OCR2B>>OCR2B_BITSHIFT,((mode==SET_BRT)?INVERTED:NORMAL));
    3efa:	80 91 b4 00 	lds	r24, 0x00B4
    3efe:	60 e0       	ldi	r22, 0x00	; 0
    3f00:	19 36       	cpi	r17, 0x69	; 105
    3f02:	09 f4       	brne	.+2      	; 0x3f06 <print_backlight+0x22>
    3f04:	61 e0       	ldi	r22, 0x01	; 1
    3f06:	0e 94 50 2e 	call	0x5ca0	; 0x5ca0 <printnumber>
}
    3f0a:	1f 91       	pop	r17
    3f0c:	08 95       	ret

00003f0e <print_time>:
  glcdWriteChar(':', NORMAL);
  printnumber(alarm_m, ((mode==SET_MIN)?INVERTED:NORMAL));
}

void print_time(uint8_t hour, uint8_t min, uint8_t sec, uint8_t mode)
{
    3f0e:	df 92       	push	r13
    3f10:	ef 92       	push	r14
    3f12:	ff 92       	push	r15
    3f14:	0f 93       	push	r16
    3f16:	1f 93       	push	r17
    3f18:	e8 2e       	mov	r14, r24
    3f1a:	f6 2e       	mov	r15, r22
    3f1c:	d4 2e       	mov	r13, r20
    3f1e:	12 2f       	mov	r17, r18
  glcdSetAddress(MENU_INDENT, 2);
    3f20:	88 e0       	ldi	r24, 0x08	; 8
    3f22:	62 e0       	ldi	r22, 0x02	; 2
    3f24:	0e 94 9c 2c 	call	0x5938	; 0x5938 <glcdSetAddress>
  glcdPutStr("Set Time: ", NORMAL);
    3f28:	82 e8       	ldi	r24, 0x82	; 130
    3f2a:	93 e0       	ldi	r25, 0x03	; 3
    3f2c:	60 e0       	ldi	r22, 0x00	; 0
    3f2e:	0e 94 dd 28 	call	0x51ba	; 0x51ba <glcdPutStr_rom>
  print_timehour(hour, ((mode==SET_HOUR)?INVERTED:NORMAL));
    3f32:	00 e0       	ldi	r16, 0x00	; 0
    3f34:	15 36       	cpi	r17, 0x65	; 101
    3f36:	09 f4       	brne	.+2      	; 0x3f3a <print_time+0x2c>
    3f38:	01 e0       	ldi	r16, 0x01	; 1
    3f3a:	8e 2d       	mov	r24, r14
    3f3c:	60 2f       	mov	r22, r16
    3f3e:	0e 94 e7 1e 	call	0x3dce	; 0x3dce <print_timehour>
  glcdWriteChar(':', NORMAL);
    3f42:	8a e3       	ldi	r24, 0x3A	; 58
    3f44:	60 e0       	ldi	r22, 0x00	; 0
    3f46:	0e 94 b3 28 	call	0x5166	; 0x5166 <glcdWriteChar>
  printnumber(min, ((mode==SET_MIN)?INVERTED:NORMAL));
    3f4a:	60 e0       	ldi	r22, 0x00	; 0
    3f4c:	16 36       	cpi	r17, 0x66	; 102
    3f4e:	09 f4       	brne	.+2      	; 0x3f52 <print_time+0x44>
    3f50:	61 e0       	ldi	r22, 0x01	; 1
    3f52:	8f 2d       	mov	r24, r15
    3f54:	0e 94 50 2e 	call	0x5ca0	; 0x5ca0 <printnumber>
  glcdWriteChar(':', NORMAL);
    3f58:	8a e3       	ldi	r24, 0x3A	; 58
    3f5a:	60 e0       	ldi	r22, 0x00	; 0
    3f5c:	0e 94 b3 28 	call	0x5166	; 0x5166 <glcdWriteChar>
  printnumber(sec, ((mode==SET_SEC)?INVERTED:NORMAL));
    3f60:	60 e0       	ldi	r22, 0x00	; 0
    3f62:	17 36       	cpi	r17, 0x67	; 103
    3f64:	09 f4       	brne	.+2      	; 0x3f68 <print_time+0x5a>
    3f66:	61 e0       	ldi	r22, 0x01	; 1
    3f68:	8d 2d       	mov	r24, r13
    3f6a:	0e 94 50 2e 	call	0x5ca0	; 0x5ca0 <printnumber>
  if (time_format == TIME_12H) {
    3f6e:	80 91 64 03 	lds	r24, 0x0364
    3f72:	88 23       	and	r24, r24
    3f74:	69 f4       	brne	.+26     	; 0x3f90 <print_time+0x82>
    glcdWriteChar(' ', NORMAL);
    3f76:	80 e2       	ldi	r24, 0x20	; 32
    3f78:	60 e0       	ldi	r22, 0x00	; 0
    3f7a:	0e 94 b3 28 	call	0x5166	; 0x5166 <glcdWriteChar>
    if (hour >= 12) {
    3f7e:	8b e0       	ldi	r24, 0x0B	; 11
    3f80:	8e 15       	cp	r24, r14
    3f82:	10 f4       	brcc	.+4      	; 0x3f88 <print_time+0x7a>
      glcdWriteChar('P', ((mode==SET_HOUR)?INVERTED:NORMAL));
    3f84:	80 e5       	ldi	r24, 0x50	; 80
    3f86:	01 c0       	rjmp	.+2      	; 0x3f8a <print_time+0x7c>
    } else {
      glcdWriteChar('A', ((mode==SET_HOUR)?INVERTED:NORMAL));
    3f88:	81 e4       	ldi	r24, 0x41	; 65
    3f8a:	60 2f       	mov	r22, r16
    3f8c:	0e 94 b3 28 	call	0x5166	; 0x5166 <glcdWriteChar>
    }
  }
}
    3f90:	1f 91       	pop	r17
    3f92:	0f 91       	pop	r16
    3f94:	ff 90       	pop	r15
    3f96:	ef 90       	pop	r14
    3f98:	df 90       	pop	r13
    3f9a:	08 95       	ret

00003f9c <print_alarmline>:
void print_style_setting(uint8_t inverted);
void print_region_setting(uint8_t inverted);
//

void print_alarmline(uint8_t mode)
{
    3f9c:	1f 93       	push	r17
    3f9e:	18 2f       	mov	r17, r24
  glcdSetAddress(MENU_INDENT, 1);
    3fa0:	88 e0       	ldi	r24, 0x08	; 8
    3fa2:	61 e0       	ldi	r22, 0x01	; 1
    3fa4:	0e 94 9c 2c 	call	0x5938	; 0x5938 <glcdSetAddress>
  glcdPutStr("Set Alarm:  ", NORMAL);
    3fa8:	8d e8       	ldi	r24, 0x8D	; 141
    3faa:	93 e0       	ldi	r25, 0x03	; 3
    3fac:	60 e0       	ldi	r22, 0x00	; 0
    3fae:	0e 94 dd 28 	call	0x51ba	; 0x51ba <glcdPutStr_rom>
  print_alarmhour(alarm_h, ((mode==SET_HOUR)?INVERTED:NORMAL));
    3fb2:	80 91 70 03 	lds	r24, 0x0370
    3fb6:	60 e0       	ldi	r22, 0x00	; 0
    3fb8:	15 36       	cpi	r17, 0x65	; 101
    3fba:	09 f4       	brne	.+2      	; 0x3fbe <print_alarmline+0x22>
    3fbc:	61 e0       	ldi	r22, 0x01	; 1
    3fbe:	0e 94 a2 1e 	call	0x3d44	; 0x3d44 <print_alarmhour>
  glcdWriteChar(':', NORMAL);
    3fc2:	8a e3       	ldi	r24, 0x3A	; 58
    3fc4:	60 e0       	ldi	r22, 0x00	; 0
    3fc6:	0e 94 b3 28 	call	0x5166	; 0x5166 <glcdWriteChar>
  printnumber(alarm_m, ((mode==SET_MIN)?INVERTED:NORMAL));
    3fca:	80 91 66 03 	lds	r24, 0x0366
    3fce:	60 e0       	ldi	r22, 0x00	; 0
    3fd0:	16 36       	cpi	r17, 0x66	; 102
    3fd2:	09 f4       	brne	.+2      	; 0x3fd6 <print_alarmline+0x3a>
    3fd4:	61 e0       	ldi	r22, 0x01	; 1
    3fd6:	0e 94 50 2e 	call	0x5ca0	; 0x5ca0 <printnumber>
}
    3fda:	1f 91       	pop	r17
    3fdc:	08 95       	ret

00003fde <print_monthday_help>:
  printnumber(year, (mode == SET_YEAR)?INVERTED:NORMAL);
}

void print_monthday_help(uint8_t mode)
{
	if(mode == SET_MONTH)
    3fde:	80 31       	cpi	r24, 0x10	; 16
    3fe0:	29 f4       	brne	.+10     	; 0x3fec <print_monthday_help+0xe>
		print_menu_opts("change mon","set mon.");
    3fe2:	8f e4       	ldi	r24, 0x4F	; 79
    3fe4:	93 e0       	ldi	r25, 0x03	; 3
    3fe6:	66 e4       	ldi	r22, 0x46	; 70
    3fe8:	73 e0       	ldi	r23, 0x03	; 3
    3fea:	0d c0       	rjmp	.+26     	; 0x4006 <print_monthday_help+0x28>
	else if (mode == SET_DAY)
    3fec:	81 31       	cpi	r24, 0x11	; 17
    3fee:	29 f4       	brne	.+10     	; 0x3ffa <print_monthday_help+0x1c>
		print_menu_opts("change day","set date");
    3ff0:	8b e3       	ldi	r24, 0x3B	; 59
    3ff2:	93 e0       	ldi	r25, 0x03	; 3
    3ff4:	62 e3       	ldi	r22, 0x32	; 50
    3ff6:	73 e0       	ldi	r23, 0x03	; 3
    3ff8:	06 c0       	rjmp	.+12     	; 0x4006 <print_monthday_help+0x28>
	else if (mode == SET_YEAR)
    3ffa:	82 31       	cpi	r24, 0x12	; 18
    3ffc:	39 f4       	brne	.+14     	; 0x400c <print_monthday_help+0x2e>
		print_menu_opts("change yr.","set year");
    3ffe:	87 e2       	ldi	r24, 0x27	; 39
    4000:	93 e0       	ldi	r25, 0x03	; 3
    4002:	6e e1       	ldi	r22, 0x1E	; 30
    4004:	73 e0       	ldi	r23, 0x03	; 3
    4006:	0e 94 43 39 	call	0x7286	; 0x7286 <PRINT_MENU_OPTS>
    400a:	08 95       	ret
	else
		print_menu_advance();
    400c:	0e 94 5f 39 	call	0x72be	; 0x72be <print_menu_advance>
    4010:	08 95       	ret

00004012 <display_menu>:
  glcdSetAddress(MENU_INDENT, 5);
  glcdPutStr("Set Backlight: ", NORMAL);
  printnumber(OCR2B>>OCR2B_BITSHIFT,((mode==SET_BRT)?INVERTED:NORMAL));
}

void display_menu(uint8_t line) {
    4012:	1f 93       	push	r17
    4014:	18 2f       	mov	r17, r24
  DEBUGP("display menu");
  
  screenmutex++;
    4016:	80 91 58 02 	lds	r24, 0x0258
    401a:	8f 5f       	subi	r24, 0xFF	; 255
    401c:	80 93 58 02 	sts	0x0258, r24

  glcdClearScreen();
    4020:	0e 94 a6 2c 	call	0x594c	; 0x594c <glcdClearScreen>
  
  //Dataman - Mode Menu Option
  //glcdSetAddress(0, 0);
  //glcdPutStr("Configuration Menu", NORMAL);
  glcdSetAddress(MENU_INDENT, 0);
    4024:	88 e0       	ldi	r24, 0x08	; 8
    4026:	60 e0       	ldi	r22, 0x00	; 0
    4028:	0e 94 9c 2c 	call	0x5938	; 0x5938 <glcdSetAddress>
  glcdPutStr("Mode:", NORMAL);
    402c:	8c e6       	ldi	r24, 0x6C	; 108
    402e:	93 e0       	ldi	r25, 0x03	; 3
    4030:	60 e0       	ldi	r22, 0x00	; 0
    4032:	0e 94 dd 28 	call	0x51ba	; 0x51ba <glcdPutStr_rom>
  print_style_setting(NORMAL);
    4036:	80 e0       	ldi	r24, 0x00	; 0
    4038:	0e 94 5c 1e 	call	0x3cb8	; 0x3cb8 <print_style_setting>
 
  print_alarmline(SET_ALARM);
    403c:	84 e0       	ldi	r24, 0x04	; 4
    403e:	0e 94 ce 1f 	call	0x3f9c	; 0x3f9c <print_alarmline>
  
  print_time(time_h,time_m,time_s,SET_TIME);
    4042:	80 91 62 03 	lds	r24, 0x0362
    4046:	60 91 6c 03 	lds	r22, 0x036C
    404a:	40 91 77 03 	lds	r20, 0x0377
    404e:	23 e0       	ldi	r18, 0x03	; 3
    4050:	0e 94 87 1f 	call	0x3f0e	; 0x3f0e <print_time>
  print_date(date_m,date_d,date_y,SET_DATE);
    4054:	80 91 76 03 	lds	r24, 0x0376
    4058:	60 91 6b 03 	lds	r22, 0x036B
    405c:	40 91 65 03 	lds	r20, 0x0365
    4060:	25 e0       	ldi	r18, 0x05	; 5
    4062:	0e 94 23 1f 	call	0x3e46	; 0x3e46 <print_date>
  print_region_setting(NORMAL);
    4066:	80 e0       	ldi	r24, 0x00	; 0
    4068:	0e 94 7d 1e 	call	0x3cfa	; 0x3cfa <print_region_setting>
  
#ifdef BACKLIGHT_ADJUST
  print_backlight(SET_BRIGHTNESS);
    406c:	86 e0       	ldi	r24, 0x06	; 6
    406e:	0e 94 72 1f 	call	0x3ee4	; 0x3ee4 <print_backlight>

  if(displaymode == SET_BRIGHTNESS)
    4072:	80 91 72 03 	lds	r24, 0x0372
    4076:	86 30       	cpi	r24, 0x06	; 6
    4078:	19 f4       	brne	.+6      	; 0x4080 <display_menu+0x6e>
#else
  if(displaymode == SET_REGION)
#endif
  	  print_menu_exit();
    407a:	0e 94 54 39 	call	0x72a8	; 0x72a8 <print_menu_exit>
    407e:	02 c0       	rjmp	.+4      	; 0x4084 <display_menu+0x72>
  else
  	print_menu_advance();
    4080:	0e 94 5f 39 	call	0x72be	; 0x72be <print_menu_advance>

  drawArrow(0, (line*8)+3, MENU_INDENT -1);
    4084:	11 0f       	add	r17, r17
    4086:	11 0f       	add	r17, r17
    4088:	11 0f       	add	r17, r17
    408a:	1d 5f       	subi	r17, 0xFD	; 253
    408c:	80 e0       	ldi	r24, 0x00	; 0
    408e:	61 2f       	mov	r22, r17
    4090:	47 e0       	ldi	r20, 0x07	; 7
    4092:	0e 94 56 33 	call	0x66ac	; 0x66ac <drawArrow>
  screenmutex--;
    4096:	80 91 58 02 	lds	r24, 0x0258
    409a:	81 50       	subi	r24, 0x01	; 1
    409c:	80 93 58 02 	sts	0x0258, r24
}
    40a0:	1f 91       	pop	r17
    40a2:	08 95       	ret

000040a4 <init_set_menu>:

uint8_t init_set_menu(uint8_t line)
{
  display_menu(line);
    40a4:	0e 94 09 20 	call	0x4012	; 0x4012 <display_menu>
  timeoutcounter = INACTIVITYTIMEOUT;
    40a8:	8a e0       	ldi	r24, 0x0A	; 10
    40aa:	80 93 57 02 	sts	0x0257, r24
  return displaymode;
    40ae:	80 91 72 03 	lds	r24, 0x0372
}
    40b2:	08 95       	ret

000040b4 <set_time>:
	delay_ms(200);
    }
  }
}

void set_time(void) {
    40b4:	cf 92       	push	r12
    40b6:	df 92       	push	r13
    40b8:	ef 92       	push	r14
    40ba:	ff 92       	push	r15
    40bc:	0f 93       	push	r16
    40be:	1f 93       	push	r17
  uint8_t mode = init_set_menu(2);
    40c0:	82 e0       	ldi	r24, 0x02	; 2
    40c2:	0e 94 52 20 	call	0x40a4	; 0x40a4 <init_set_menu>
    40c6:	08 2f       	mov	r16, r24

  uint8_t hour, min, sec;
    
  hour = time_h;
    40c8:	10 91 62 03 	lds	r17, 0x0362
  min = time_m;
    40cc:	d0 90 6c 03 	lds	r13, 0x036C
  sec = time_s;
    40d0:	f0 90 77 03 	lds	r15, 0x0377
    40d4:	8d c0       	rjmp	.+282    	; 0x41f0 <set_time+0x13c>

  while (!check_timeout()) {
    
    if (just_pressed & 0x2) {
    40d6:	80 91 54 02 	lds	r24, 0x0254
    40da:	81 ff       	sbrs	r24, 1
    40dc:	45 c0       	rjmp	.+138    	; 0x4168 <set_time+0xb4>
      just_pressed = 0;
    40de:	10 92 54 02 	sts	0x0254, r1
      screenmutex++;
    40e2:	80 91 58 02 	lds	r24, 0x0258
    40e6:	8f 5f       	subi	r24, 0xFF	; 255
    40e8:	80 93 58 02 	sts	0x0258, r24

      if (mode == SET_TIME) {
    40ec:	03 30       	cpi	r16, 0x03	; 3
    40ee:	41 f4       	brne	.+16     	; 0x4100 <set_time+0x4c>
	DEBUG(putstring("Set time hour"));
	// ok now its selected
	mode = SET_HOUR;
	// display instructions below
        print_menu_opts("change hr","set hour");
    40f0:	83 ee       	ldi	r24, 0xE3	; 227
    40f2:	92 e0       	ldi	r25, 0x02	; 2
    40f4:	6a ed       	ldi	r22, 0xDA	; 218
    40f6:	72 e0       	ldi	r23, 0x02	; 2
    40f8:	0e 94 43 39 	call	0x7286	; 0x7286 <PRINT_MENU_OPTS>
    40fc:	05 e6       	ldi	r16, 0x65	; 101
    40fe:	29 c0       	rjmp	.+82     	; 0x4152 <set_time+0x9e>
      } else if (mode == SET_HOUR) {
    4100:	05 36       	cpi	r16, 0x65	; 101
    4102:	41 f4       	brne	.+16     	; 0x4114 <set_time+0x60>
	DEBUG(putstring("Set time min"));
	mode = SET_MIN;
	// display instructions below
        print_menu_opts("change min","set mins");
    4104:	8f ec       	ldi	r24, 0xCF	; 207
    4106:	92 e0       	ldi	r25, 0x02	; 2
    4108:	66 ec       	ldi	r22, 0xC6	; 198
    410a:	72 e0       	ldi	r23, 0x02	; 2
    410c:	0e 94 43 39 	call	0x7286	; 0x7286 <PRINT_MENU_OPTS>
    4110:	06 e6       	ldi	r16, 0x66	; 102
    4112:	1f c0       	rjmp	.+62     	; 0x4152 <set_time+0x9e>
      } else if (mode == SET_MIN) {
    4114:	06 36       	cpi	r16, 0x66	; 102
    4116:	41 f4       	brne	.+16     	; 0x4128 <set_time+0x74>
	DEBUG(putstring("Set time sec"));
	mode = SET_SEC;
	// display instructions below
        print_menu_opts("change sec","set secs");
    4118:	8b eb       	ldi	r24, 0xBB	; 187
    411a:	92 e0       	ldi	r25, 0x02	; 2
    411c:	62 eb       	ldi	r22, 0xB2	; 178
    411e:	72 e0       	ldi	r23, 0x02	; 2
    4120:	0e 94 43 39 	call	0x7286	; 0x7286 <PRINT_MENU_OPTS>
    4124:	07 e6       	ldi	r16, 0x67	; 103
    4126:	15 c0       	rjmp	.+42     	; 0x4152 <set_time+0x9e>
      } else {
	// done!
	DEBUG(putstring("done setting time"));
	mode = SET_TIME;
	// display instructions below
	print_menu_advance();
    4128:	0e 94 5f 39 	call	0x72be	; 0x72be <print_menu_advance>
	
	writei2ctime(sec, min, hour, 0, date_d, date_m, date_y);
    412c:	00 91 6b 03 	lds	r16, 0x036B
    4130:	e0 90 76 03 	lds	r14, 0x0376
    4134:	c0 90 65 03 	lds	r12, 0x0365
    4138:	8f 2d       	mov	r24, r15
    413a:	6d 2d       	mov	r22, r13
    413c:	41 2f       	mov	r20, r17
    413e:	20 e0       	ldi	r18, 0x00	; 0
    4140:	0e 94 98 30 	call	0x6130	; 0x6130 <writei2ctime>
	time_h = hour;
    4144:	10 93 62 03 	sts	0x0362, r17
	time_m = min;
    4148:	d0 92 6c 03 	sts	0x036C, r13
	time_s = sec;
    414c:	f0 92 77 03 	sts	0x0377, r15
    4150:	03 e0       	ldi	r16, 0x03	; 3
	
      }
      print_time(hour,min,sec,mode);
    4152:	81 2f       	mov	r24, r17
    4154:	6d 2d       	mov	r22, r13
    4156:	4f 2d       	mov	r20, r15
    4158:	20 2f       	mov	r18, r16
    415a:	0e 94 87 1f 	call	0x3f0e	; 0x3f0e <print_time>
      screenmutex--;
    415e:	80 91 58 02 	lds	r24, 0x0258
    4162:	81 50       	subi	r24, 0x01	; 1
    4164:	80 93 58 02 	sts	0x0258, r24
    }
    // was easter egg
    if ((just_pressed & 0x4) || (pressed & 0x4)) {
    4168:	80 91 54 02 	lds	r24, 0x0254
    416c:	82 fd       	sbrc	r24, 2
    416e:	04 c0       	rjmp	.+8      	; 0x4178 <set_time+0xc4>
    4170:	80 91 55 02 	lds	r24, 0x0255
    4174:	82 ff       	sbrs	r24, 2
    4176:	3c c0       	rjmp	.+120    	; 0x41f0 <set_time+0x13c>
      just_pressed = 0;
    4178:	10 92 54 02 	sts	0x0254, r1
      screenmutex++;
    417c:	80 91 58 02 	lds	r24, 0x0258
    4180:	8f 5f       	subi	r24, 0xFF	; 255
    4182:	80 93 58 02 	sts	0x0258, r24
      if (mode == SET_HOUR) {
    4186:	05 36       	cpi	r16, 0x65	; 101
    4188:	59 f4       	brne	.+22     	; 0x41a0 <set_time+0xec>
	hour = (hour+1) % 24;
    418a:	81 2f       	mov	r24, r17
    418c:	90 e0       	ldi	r25, 0x00	; 0
    418e:	01 96       	adiw	r24, 0x01	; 1
    4190:	68 e1       	ldi	r22, 0x18	; 24
    4192:	70 e0       	ldi	r23, 0x00	; 0
    4194:	0e 94 fe 39 	call	0x73fc	; 0x73fc <__divmodhi4>
    4198:	18 2f       	mov	r17, r24
	time_h = hour;
    419a:	80 93 62 03 	sts	0x0362, r24
    419e:	15 c0       	rjmp	.+42     	; 0x41ca <set_time+0x116>
      }
      if (mode == SET_MIN) {
    41a0:	06 36       	cpi	r16, 0x66	; 102
    41a2:	49 f4       	brne	.+18     	; 0x41b6 <set_time+0x102>
	min = (min+1) % 60;
    41a4:	8d 2d       	mov	r24, r13
    41a6:	90 e0       	ldi	r25, 0x00	; 0
    41a8:	01 96       	adiw	r24, 0x01	; 1
    41aa:	6c e3       	ldi	r22, 0x3C	; 60
    41ac:	70 e0       	ldi	r23, 0x00	; 0
    41ae:	0e 94 fe 39 	call	0x73fc	; 0x73fc <__divmodhi4>
    41b2:	d8 2e       	mov	r13, r24
    41b4:	0a c0       	rjmp	.+20     	; 0x41ca <set_time+0x116>
      }
      if (mode == SET_SEC) {
    41b6:	07 36       	cpi	r16, 0x67	; 103
    41b8:	41 f4       	brne	.+16     	; 0x41ca <set_time+0x116>
	sec = (sec+1) % 60;
    41ba:	8f 2d       	mov	r24, r15
    41bc:	90 e0       	ldi	r25, 0x00	; 0
    41be:	01 96       	adiw	r24, 0x01	; 1
    41c0:	6c e3       	ldi	r22, 0x3C	; 60
    41c2:	70 e0       	ldi	r23, 0x00	; 0
    41c4:	0e 94 fe 39 	call	0x73fc	; 0x73fc <__divmodhi4>
    41c8:	f8 2e       	mov	r15, r24
      }
      print_time(hour,min,sec,mode);
    41ca:	81 2f       	mov	r24, r17
    41cc:	6d 2d       	mov	r22, r13
    41ce:	4f 2d       	mov	r20, r15
    41d0:	20 2f       	mov	r18, r16
    41d2:	0e 94 87 1f 	call	0x3f0e	; 0x3f0e <print_time>
      screenmutex--;
    41d6:	80 91 58 02 	lds	r24, 0x0258
    41da:	81 50       	subi	r24, 0x01	; 1
    41dc:	80 93 58 02 	sts	0x0258, r24
      if (pressed & 0x4)
    41e0:	80 91 55 02 	lds	r24, 0x0255
    41e4:	82 ff       	sbrs	r24, 2
    41e6:	04 c0       	rjmp	.+8      	; 0x41f0 <set_time+0x13c>
	delay_ms(200);
    41e8:	88 ec       	ldi	r24, 0xC8	; 200
    41ea:	90 e0       	ldi	r25, 0x00	; 0
    41ec:	0e 94 0c 35 	call	0x6a18	; 0x6a18 <delay_ms>
    
  hour = time_h;
  min = time_m;
  sec = time_s;

  while (!check_timeout()) {
    41f0:	0e 94 c2 38 	call	0x7184	; 0x7184 <check_timeout>
    41f4:	88 23       	and	r24, r24
    41f6:	09 f4       	brne	.+2      	; 0x41fa <set_time+0x146>
    41f8:	6e cf       	rjmp	.-292    	; 0x40d6 <set_time+0x22>
      screenmutex--;
      if (pressed & 0x4)
	delay_ms(200);
    }
  }
}
    41fa:	1f 91       	pop	r17
    41fc:	0f 91       	pop	r16
    41fe:	ff 90       	pop	r15
    4200:	ef 90       	pop	r14
    4202:	df 90       	pop	r13
    4204:	cf 90       	pop	r12
    4206:	08 95       	ret

00004208 <set_alarm>:
      }
    }
  }
}

void set_alarm(void) {
    4208:	1f 93       	push	r17
  uint8_t mode = init_set_menu(1);
    420a:	81 e0       	ldi	r24, 0x01	; 1
    420c:	0e 94 52 20 	call	0x40a4	; 0x40a4 <init_set_menu>
    4210:	18 2f       	mov	r17, r24
    4212:	6c c0       	rjmp	.+216    	; 0x42ec <set_alarm+0xe4>

  while (!check_timeout()) {
    
    if (just_pressed & 0x2) {
    4214:	80 91 54 02 	lds	r24, 0x0254
    4218:	81 ff       	sbrs	r24, 1
    421a:	26 c0       	rjmp	.+76     	; 0x4268 <set_alarm+0x60>
      just_pressed = 0;
    421c:	10 92 54 02 	sts	0x0254, r1
      screenmutex++;
    4220:	80 91 58 02 	lds	r24, 0x0258
    4224:	8f 5f       	subi	r24, 0xFF	; 255
    4226:	80 93 58 02 	sts	0x0258, r24

      if (mode == SET_ALARM) {
    422a:	14 30       	cpi	r17, 0x04	; 4
    422c:	41 f4       	brne	.+16     	; 0x423e <set_alarm+0x36>
	DEBUG(putstring("Set alarm hour"));
	// ok now its selected
	mode = SET_HOUR;
	// display instructions below
        print_menu_opts("change hr.","set hour");
    422e:	8a e0       	ldi	r24, 0x0A	; 10
    4230:	93 e0       	ldi	r25, 0x03	; 3
    4232:	61 e0       	ldi	r22, 0x01	; 1
    4234:	73 e0       	ldi	r23, 0x03	; 3
    4236:	0e 94 43 39 	call	0x7286	; 0x7286 <PRINT_MENU_OPTS>
    423a:	15 e6       	ldi	r17, 0x65	; 101
    423c:	0d c0       	rjmp	.+26     	; 0x4258 <set_alarm+0x50>
      } else if (mode == SET_HOUR) {
    423e:	15 36       	cpi	r17, 0x65	; 101
    4240:	41 f4       	brne	.+16     	; 0x4252 <set_alarm+0x4a>
	DEBUG(putstring("Set alarm min"));
	mode = SET_MIN;
	// print the hour normal
	// display instructions below
	print_menu_opts("change min","set mins");
    4242:	86 ef       	ldi	r24, 0xF6	; 246
    4244:	92 e0       	ldi	r25, 0x02	; 2
    4246:	6d ee       	ldi	r22, 0xED	; 237
    4248:	72 e0       	ldi	r23, 0x02	; 2
    424a:	0e 94 43 39 	call	0x7286	; 0x7286 <PRINT_MENU_OPTS>
    424e:	16 e6       	ldi	r17, 0x66	; 102
    4250:	03 c0       	rjmp	.+6      	; 0x4258 <set_alarm+0x50>
      } else {
	mode = SET_ALARM;
	// print the hour normal
	// display instructions below
	print_menu_advance();
    4252:	0e 94 5f 39 	call	0x72be	; 0x72be <print_menu_advance>
    4256:	14 e0       	ldi	r17, 0x04	; 4
      }
      print_alarmline(mode);
    4258:	81 2f       	mov	r24, r17
    425a:	0e 94 ce 1f 	call	0x3f9c	; 0x3f9c <print_alarmline>
      screenmutex--;
    425e:	80 91 58 02 	lds	r24, 0x0258
    4262:	81 50       	subi	r24, 0x01	; 1
    4264:	80 93 58 02 	sts	0x0258, r24
    }
    if ((just_pressed & 0x4) || (pressed & 0x4)) {
    4268:	80 91 54 02 	lds	r24, 0x0254
    426c:	82 fd       	sbrc	r24, 2
    426e:	04 c0       	rjmp	.+8      	; 0x4278 <set_alarm+0x70>
    4270:	80 91 55 02 	lds	r24, 0x0255
    4274:	82 ff       	sbrs	r24, 2
    4276:	3a c0       	rjmp	.+116    	; 0x42ec <set_alarm+0xe4>
      just_pressed = 0;
    4278:	10 92 54 02 	sts	0x0254, r1
      screenmutex++;
    427c:	80 91 58 02 	lds	r24, 0x0258
    4280:	8f 5f       	subi	r24, 0xFF	; 255
    4282:	80 93 58 02 	sts	0x0258, r24

      if (mode == SET_HOUR) {
    4286:	15 36       	cpi	r17, 0x65	; 101
    4288:	79 f4       	brne	.+30     	; 0x42a8 <set_alarm+0xa0>
	alarm_h = (alarm_h+1) % 24;
    428a:	80 91 70 03 	lds	r24, 0x0370
    428e:	90 e0       	ldi	r25, 0x00	; 0
    4290:	01 96       	adiw	r24, 0x01	; 1
    4292:	68 e1       	ldi	r22, 0x18	; 24
    4294:	70 e0       	ldi	r23, 0x00	; 0
    4296:	0e 94 fe 39 	call	0x73fc	; 0x73fc <__divmodhi4>
    429a:	80 93 70 03 	sts	0x0370, r24
	// print the hour inverted
	eeprom_write_byte(&EE_ALARM_HOUR, alarm_h);    
    429e:	60 91 70 03 	lds	r22, 0x0370
    42a2:	81 e0       	ldi	r24, 0x01	; 1
    42a4:	90 e0       	ldi	r25, 0x00	; 0
    42a6:	10 c0       	rjmp	.+32     	; 0x42c8 <set_alarm+0xc0>
      }
      if (mode == SET_MIN) {
    42a8:	16 36       	cpi	r17, 0x66	; 102
    42aa:	81 f4       	brne	.+32     	; 0x42cc <set_alarm+0xc4>
	alarm_m = (alarm_m+1) % 60;
    42ac:	80 91 66 03 	lds	r24, 0x0366
    42b0:	90 e0       	ldi	r25, 0x00	; 0
    42b2:	01 96       	adiw	r24, 0x01	; 1
    42b4:	6c e3       	ldi	r22, 0x3C	; 60
    42b6:	70 e0       	ldi	r23, 0x00	; 0
    42b8:	0e 94 fe 39 	call	0x73fc	; 0x73fc <__divmodhi4>
    42bc:	80 93 66 03 	sts	0x0366, r24
	eeprom_write_byte(&EE_ALARM_MIN, alarm_m);    
    42c0:	60 91 66 03 	lds	r22, 0x0366
    42c4:	82 e0       	ldi	r24, 0x02	; 2
    42c6:	90 e0       	ldi	r25, 0x00	; 0
    42c8:	0e 94 a2 3a 	call	0x7544	; 0x7544 <__eewr_byte_m328p>
      }
      print_alarmline(mode);
    42cc:	81 2f       	mov	r24, r17
    42ce:	0e 94 ce 1f 	call	0x3f9c	; 0x3f9c <print_alarmline>
      screenmutex--;
    42d2:	80 91 58 02 	lds	r24, 0x0258
    42d6:	81 50       	subi	r24, 0x01	; 1
    42d8:	80 93 58 02 	sts	0x0258, r24
      if (pressed & 0x4)
    42dc:	80 91 55 02 	lds	r24, 0x0255
    42e0:	82 ff       	sbrs	r24, 2
    42e2:	04 c0       	rjmp	.+8      	; 0x42ec <set_alarm+0xe4>
	delay_ms(200);
    42e4:	88 ec       	ldi	r24, 0xC8	; 200
    42e6:	90 e0       	ldi	r25, 0x00	; 0
    42e8:	0e 94 0c 35 	call	0x6a18	; 0x6a18 <delay_ms>
}

void set_alarm(void) {
  uint8_t mode = init_set_menu(1);

  while (!check_timeout()) {
    42ec:	0e 94 c2 38 	call	0x7184	; 0x7184 <check_timeout>
    42f0:	88 23       	and	r24, r24
    42f2:	09 f4       	brne	.+2      	; 0x42f6 <set_alarm+0xee>
    42f4:	8f cf       	rjmp	.-226    	; 0x4214 <set_alarm+0xc>
      screenmutex--;
      if (pressed & 0x4)
	delay_ms(200);
    }
  }
}
    42f6:	1f 91       	pop	r17
    42f8:	08 95       	ret

000042fa <set_backlight>:
  }

}

#ifdef BACKLIGHT_ADJUST
void set_backlight(void) {
    42fa:	1f 93       	push	r17
  uint8_t mode = init_set_menu(5);
    42fc:	85 e0       	ldi	r24, 0x05	; 5
    42fe:	0e 94 52 20 	call	0x40a4	; 0x40a4 <init_set_menu>
    4302:	18 2f       	mov	r17, r24
    4304:	46 c0       	rjmp	.+140    	; 0x4392 <set_backlight+0x98>
  while (!check_timeout()) {
    
  
    if (just_pressed & 0x2) {
    4306:	80 91 54 02 	lds	r24, 0x0254
    430a:	81 ff       	sbrs	r24, 1
    430c:	18 c0       	rjmp	.+48     	; 0x433e <set_backlight+0x44>
      just_pressed = 0;
    430e:	10 92 54 02 	sts	0x0254, r1
      screenmutex++;
    4312:	80 91 58 02 	lds	r24, 0x0258
    4316:	8f 5f       	subi	r24, 0xFF	; 255
    4318:	80 93 58 02 	sts	0x0258, r24

      if (mode == SET_BRIGHTNESS) {
    431c:	16 30       	cpi	r17, 0x06	; 6
    431e:	21 f4       	brne	.+8      	; 0x4328 <set_backlight+0x2e>
	DEBUG(putstring("Setting backlight"));
	// ok now its selected
	mode = SET_BRT;
	// print the region 
	// display instructions below
	print_menu_change();
    4320:	0e 94 4d 39 	call	0x729a	; 0x729a <print_menu_change>
    4324:	19 e6       	ldi	r17, 0x69	; 105
    4326:	03 c0       	rjmp	.+6      	; 0x432e <set_backlight+0x34>

      } else {
	mode = SET_BRIGHTNESS;
	// print the region normal
        print_menu_exit();
    4328:	0e 94 54 39 	call	0x72a8	; 0x72a8 <print_menu_exit>
    432c:	16 e0       	ldi	r17, 0x06	; 6
      }
      print_backlight(mode);
    432e:	81 2f       	mov	r24, r17
    4330:	0e 94 72 1f 	call	0x3ee4	; 0x3ee4 <print_backlight>
      screenmutex--;
    4334:	80 91 58 02 	lds	r24, 0x0258
    4338:	81 50       	subi	r24, 0x01	; 1
    433a:	80 93 58 02 	sts	0x0258, r24
    }
    if ((just_pressed & 0x4) || (pressed & 0x4)) {
    433e:	80 91 54 02 	lds	r24, 0x0254
    4342:	82 fd       	sbrc	r24, 2
    4344:	04 c0       	rjmp	.+8      	; 0x434e <set_backlight+0x54>
    4346:	80 91 55 02 	lds	r24, 0x0255
    434a:	82 ff       	sbrs	r24, 2
    434c:	22 c0       	rjmp	.+68     	; 0x4392 <set_backlight+0x98>
      just_pressed = 0;
    434e:	10 92 54 02 	sts	0x0254, r1
      
      if (mode == SET_BRT) {
    4352:	19 36       	cpi	r17, 0x69	; 105
    4354:	f1 f4       	brne	.+60     	; 0x4392 <set_backlight+0x98>
	    OCR2B += OCR2B_PLUS;
    4356:	80 91 b4 00 	lds	r24, 0x00B4
    435a:	8f 5f       	subi	r24, 0xFF	; 255
    435c:	80 93 b4 00 	sts	0x00B4, r24
	    if(OCR2B > OCR2A_VALUE)
    4360:	80 91 b4 00 	lds	r24, 0x00B4
    4364:	81 31       	cpi	r24, 0x11	; 17
    4366:	10 f0       	brcs	.+4      	; 0x436c <set_backlight+0x72>
	      OCR2B = 0;
    4368:	10 92 b4 00 	sts	0x00B4, r1
	screenmutex++;
    436c:	80 91 58 02 	lds	r24, 0x0258
    4370:	8f 5f       	subi	r24, 0xFF	; 255
    4372:	80 93 58 02 	sts	0x0258, r24
	print_backlight(mode);
    4376:	89 e6       	ldi	r24, 0x69	; 105
    4378:	0e 94 72 1f 	call	0x3ee4	; 0x3ee4 <print_backlight>
	screenmutex--;
    437c:	80 91 58 02 	lds	r24, 0x0258
    4380:	81 50       	subi	r24, 0x01	; 1
    4382:	80 93 58 02 	sts	0x0258, r24

	eeprom_write_byte(&EE_BRIGHT, OCR2B);
    4386:	60 91 b4 00 	lds	r22, 0x00B4
    438a:	83 e0       	ldi	r24, 0x03	; 3
    438c:	90 e0       	ldi	r25, 0x00	; 0
    438e:	0e 94 a2 3a 	call	0x7544	; 0x7544 <__eewr_byte_m328p>
}

#ifdef BACKLIGHT_ADJUST
void set_backlight(void) {
  uint8_t mode = init_set_menu(5);
  while (!check_timeout()) {
    4392:	0e 94 c2 38 	call	0x7184	; 0x7184 <check_timeout>
    4396:	88 23       	and	r24, r24
    4398:	09 f4       	brne	.+2      	; 0x439c <set_backlight+0xa2>
    439a:	b5 cf       	rjmp	.-150    	; 0x4306 <set_backlight+0xc>

	eeprom_write_byte(&EE_BRIGHT, OCR2B);
      }
    }
  }
}
    439c:	1f 91       	pop	r17
    439e:	08 95       	ret

000043a0 <set_date>:
	SET_YEAR,
	SET_YEAR
#endif
};

void set_date(void) {
    43a0:	8f 92       	push	r8
    43a2:	9f 92       	push	r9
    43a4:	af 92       	push	r10
    43a6:	bf 92       	push	r11
    43a8:	cf 92       	push	r12
    43aa:	ef 92       	push	r14
    43ac:	0f 93       	push	r16
    43ae:	1f 93       	push	r17
    43b0:	df 93       	push	r29
    43b2:	cf 93       	push	r28
    43b4:	00 d0       	rcall	.+0      	; 0x43b6 <set_date+0x16>
    43b6:	cd b7       	in	r28, 0x3d	; 61
    43b8:	de b7       	in	r29, 0x3e	; 62
  uint8_t mode = init_set_menu(3);
    43ba:	83 e0       	ldi	r24, 0x03	; 3
    43bc:	0e 94 52 20 	call	0x40a4	; 0x40a4 <init_set_menu>
    43c0:	08 2f       	mov	r16, r24
  uint8_t day, month, year;
    
  day = date_d;
    43c2:	80 91 6b 03 	lds	r24, 0x036B
    43c6:	89 83       	std	Y+1, r24	; 0x01
  month = date_m;
    43c8:	80 91 76 03 	lds	r24, 0x0376
    43cc:	8a 83       	std	Y+2, r24	; 0x02
  year = date_y;
    43ce:	10 91 65 03 	lds	r17, 0x0365
	day++;
      }
      if (mode == SET_YEAR) {
	year = (year+1) % 100;
      }
      add_month(&month, &day, year);
    43d2:	42 e0       	ldi	r20, 0x02	; 2
    43d4:	84 2e       	mov	r8, r20
    43d6:	91 2c       	mov	r9, r1
    43d8:	8c 0e       	add	r8, r28
    43da:	9d 1e       	adc	r9, r29
    43dc:	5e 01       	movw	r10, r28
    43de:	08 94       	sec
    43e0:	a1 1c       	adc	r10, r1
    43e2:	b1 1c       	adc	r11, r1
    43e4:	85 c0       	rjmp	.+266    	; 0x44f0 <set_date+0x150>
  day = date_d;
  month = date_m;
  year = date_y;
  while (!check_timeout()) {
    
    if (just_pressed & 0x2) {
    43e6:	80 91 54 02 	lds	r24, 0x0254
    43ea:	81 ff       	sbrs	r24, 1
    43ec:	43 c0       	rjmp	.+134    	; 0x4474 <set_date+0xd4>
      just_pressed = 0;
    43ee:	10 92 54 02 	sts	0x0254, r1
      screenmutex++;
    43f2:	80 91 58 02 	lds	r24, 0x0258
    43f6:	8f 5f       	subi	r24, 0xFF	; 255
    43f8:	80 93 58 02 	sts	0x0258, r24

      if (mode == SET_DATE) {
    43fc:	05 30       	cpi	r16, 0x05	; 5
    43fe:	31 f4       	brne	.+12     	; 0x440c <set_date+0x6c>
	DEBUG(putstring("Set date month/day, depending on region"));
	// ok now its selected
	mode = next_mode_setdate[region];
    4400:	e0 91 6f 03 	lds	r30, 0x036F
    4404:	f0 e0       	ldi	r31, 0x00	; 0
    4406:	e6 53       	subi	r30, 0x36	; 54
    4408:	fe 4f       	sbci	r31, 0xFE	; 254
    440a:	07 c0       	rjmp	.+14     	; 0x441a <set_date+0x7a>
	
      } else if (mode == SET_MONTH) {
    440c:	00 31       	cpi	r16, 0x10	; 16
    440e:	39 f4       	brne	.+14     	; 0x441e <set_date+0x7e>
	DEBUG(putstring("Set date day/year, depending on region"));
	mode = next_mode_setmonth[region];
    4410:	e0 91 6f 03 	lds	r30, 0x036F
    4414:	f0 e0       	ldi	r31, 0x00	; 0
    4416:	e4 53       	subi	r30, 0x34	; 52
    4418:	fe 4f       	sbci	r31, 0xFE	; 254
    441a:	00 81       	ld	r16, Z
    441c:	1d c0       	rjmp	.+58     	; 0x4458 <set_date+0xb8>
      } else if (mode == SET_DAY) {
    441e:	01 31       	cpi	r16, 0x11	; 17
    4420:	31 f4       	brne	.+12     	; 0x442e <set_date+0x8e>
	DEBUG(putstring("Set date month/year, depending on region"));
	mode = next_mode_setday[region];
    4422:	e0 91 6f 03 	lds	r30, 0x036F
    4426:	f0 e0       	ldi	r31, 0x00	; 0
    4428:	e2 53       	subi	r30, 0x32	; 50
    442a:	fe 4f       	sbci	r31, 0xFE	; 254
    442c:	f6 cf       	rjmp	.-20     	; 0x441a <set_date+0x7a>
	// done!
	DEBUG(putstring("done setting date"));
	mode = SET_DATE;
	
	//Update the DS1307 with set date.
	writei2ctime(time_s, time_m, time_h, 0, day, month, year);
    442e:	80 91 77 03 	lds	r24, 0x0377
    4432:	60 91 6c 03 	lds	r22, 0x036C
    4436:	40 91 62 03 	lds	r20, 0x0362
    443a:	20 e0       	ldi	r18, 0x00	; 0
    443c:	09 81       	ldd	r16, Y+1	; 0x01
    443e:	ea 80       	ldd	r14, Y+2	; 0x02
    4440:	c1 2e       	mov	r12, r17
    4442:	0e 94 98 30 	call	0x6130	; 0x6130 <writei2ctime>
	date_y = year;
    4446:	10 93 65 03 	sts	0x0365, r17
	date_m = month;
    444a:	8a 81       	ldd	r24, Y+2	; 0x02
    444c:	80 93 76 03 	sts	0x0376, r24
	date_d = day;
    4450:	89 81       	ldd	r24, Y+1	; 0x01
    4452:	80 93 6b 03 	sts	0x036B, r24
    4456:	05 e0       	ldi	r16, 0x05	; 5
	
      }
      //Print the instructions below
      print_monthday_help(mode);
    4458:	80 2f       	mov	r24, r16
    445a:	0e 94 ef 1f 	call	0x3fde	; 0x3fde <print_monthday_help>
      //Refresh the date.
      print_date(month,day,year,mode);
    445e:	8a 81       	ldd	r24, Y+2	; 0x02
    4460:	69 81       	ldd	r22, Y+1	; 0x01
    4462:	41 2f       	mov	r20, r17
    4464:	20 2f       	mov	r18, r16
    4466:	0e 94 23 1f 	call	0x3e46	; 0x3e46 <print_date>
      screenmutex--;
    446a:	80 91 58 02 	lds	r24, 0x0258
    446e:	81 50       	subi	r24, 0x01	; 1
    4470:	80 93 58 02 	sts	0x0258, r24
    }
    if ((just_pressed & 0x4) || (pressed & 0x4)) {
    4474:	80 91 54 02 	lds	r24, 0x0254
    4478:	82 fd       	sbrc	r24, 2
    447a:	04 c0       	rjmp	.+8      	; 0x4484 <set_date+0xe4>
    447c:	80 91 55 02 	lds	r24, 0x0255
    4480:	82 ff       	sbrs	r24, 2
    4482:	36 c0       	rjmp	.+108    	; 0x44f0 <set_date+0x150>
      just_pressed = 0;
    4484:	10 92 54 02 	sts	0x0254, r1

      screenmutex++;
    4488:	80 91 58 02 	lds	r24, 0x0258
    448c:	8f 5f       	subi	r24, 0xFF	; 255
    448e:	80 93 58 02 	sts	0x0258, r24

      if (mode == SET_MONTH) {
    4492:	00 31       	cpi	r16, 0x10	; 16
    4494:	21 f4       	brne	.+8      	; 0x449e <set_date+0xfe>
      month++;
    4496:	8a 81       	ldd	r24, Y+2	; 0x02
    4498:	8f 5f       	subi	r24, 0xFF	; 255
    449a:	8a 83       	std	Y+2, r24	; 0x02
    449c:	10 c0       	rjmp	.+32     	; 0x44be <set_date+0x11e>
      }
      if (mode == SET_DAY) {
    449e:	01 31       	cpi	r16, 0x11	; 17
    44a0:	21 f4       	brne	.+8      	; 0x44aa <set_date+0x10a>
	day++;
    44a2:	89 81       	ldd	r24, Y+1	; 0x01
    44a4:	8f 5f       	subi	r24, 0xFF	; 255
    44a6:	89 83       	std	Y+1, r24	; 0x01
    44a8:	0a c0       	rjmp	.+20     	; 0x44be <set_date+0x11e>
      }
      if (mode == SET_YEAR) {
    44aa:	02 31       	cpi	r16, 0x12	; 18
    44ac:	41 f4       	brne	.+16     	; 0x44be <set_date+0x11e>
	year = (year+1) % 100;
    44ae:	81 2f       	mov	r24, r17
    44b0:	90 e0       	ldi	r25, 0x00	; 0
    44b2:	01 96       	adiw	r24, 0x01	; 1
    44b4:	64 e6       	ldi	r22, 0x64	; 100
    44b6:	70 e0       	ldi	r23, 0x00	; 0
    44b8:	0e 94 fe 39 	call	0x73fc	; 0x73fc <__divmodhi4>
    44bc:	18 2f       	mov	r17, r24
      }
      add_month(&month, &day, year);
    44be:	c4 01       	movw	r24, r8
    44c0:	b5 01       	movw	r22, r10
    44c2:	41 2f       	mov	r20, r17
    44c4:	50 e0       	ldi	r21, 0x00	; 0
    44c6:	0e 94 89 38 	call	0x7112	; 0x7112 <add_month>
      print_date(month,day,year,mode);
    44ca:	8a 81       	ldd	r24, Y+2	; 0x02
    44cc:	69 81       	ldd	r22, Y+1	; 0x01
    44ce:	41 2f       	mov	r20, r17
    44d0:	20 2f       	mov	r18, r16
    44d2:	0e 94 23 1f 	call	0x3e46	; 0x3e46 <print_date>
      screenmutex--;
    44d6:	80 91 58 02 	lds	r24, 0x0258
    44da:	81 50       	subi	r24, 0x01	; 1
    44dc:	80 93 58 02 	sts	0x0258, r24

      if (pressed & 0x4)
    44e0:	80 91 55 02 	lds	r24, 0x0255
    44e4:	82 ff       	sbrs	r24, 2
    44e6:	04 c0       	rjmp	.+8      	; 0x44f0 <set_date+0x150>
	delay_ms(200);  
    44e8:	88 ec       	ldi	r24, 0xC8	; 200
    44ea:	90 e0       	ldi	r25, 0x00	; 0
    44ec:	0e 94 0c 35 	call	0x6a18	; 0x6a18 <delay_ms>
  uint8_t day, month, year;
    
  day = date_d;
  month = date_m;
  year = date_y;
  while (!check_timeout()) {
    44f0:	0e 94 c2 38 	call	0x7184	; 0x7184 <check_timeout>
    44f4:	88 23       	and	r24, r24
    44f6:	09 f4       	brne	.+2      	; 0x44fa <set_date+0x15a>
    44f8:	76 cf       	rjmp	.-276    	; 0x43e6 <set_date+0x46>
      if (pressed & 0x4)
	delay_ms(200);  
    }
  }

}
    44fa:	0f 90       	pop	r0
    44fc:	0f 90       	pop	r0
    44fe:	cf 91       	pop	r28
    4500:	df 91       	pop	r29
    4502:	1f 91       	pop	r17
    4504:	0f 91       	pop	r16
    4506:	ef 90       	pop	r14
    4508:	cf 90       	pop	r12
    450a:	bf 90       	pop	r11
    450c:	af 90       	pop	r10
    450e:	9f 90       	pop	r9
    4510:	8f 90       	pop	r8
    4512:	08 95       	ret

00004514 <set_region>:
  glcdSetAddress(MENU_INDENT, 4);
  glcdPutStr("Region: ", NORMAL);
  glcdPutStr_rom(&region_setting_table[(region * 2) + time_format][0], inverted);
}

void set_region(void) {
    4514:	1f 93       	push	r17
  uint8_t mode = init_set_menu(4);
    4516:	84 e0       	ldi	r24, 0x04	; 4
    4518:	0e 94 52 20 	call	0x40a4	; 0x40a4 <init_set_menu>
    451c:	18 2f       	mov	r17, r24
    451e:	60 c0       	rjmp	.+192    	; 0x45e0 <set_region+0xcc>

  while (!check_timeout()) {
    
  
    if (just_pressed & 0x2) {
    4520:	80 91 54 02 	lds	r24, 0x0254
    4524:	81 ff       	sbrs	r24, 1
    4526:	1b c0       	rjmp	.+54     	; 0x455e <set_region+0x4a>
      just_pressed = 0;
    4528:	10 92 54 02 	sts	0x0254, r1
      screenmutex++;
    452c:	80 91 58 02 	lds	r24, 0x0258
    4530:	8f 5f       	subi	r24, 0xFF	; 255
    4532:	80 93 58 02 	sts	0x0258, r24

      if (mode == SET_REGION) {
    4536:	18 30       	cpi	r17, 0x08	; 8
    4538:	39 f4       	brne	.+14     	; 0x4548 <set_region+0x34>
	DEBUG(putstring("Setting region"));
	// ok now its selected
	mode = SET_REG;
	// print the region 
	print_region_setting(INVERTED);
    453a:	81 e0       	ldi	r24, 0x01	; 1
    453c:	0e 94 7d 1e 	call	0x3cfa	; 0x3cfa <print_region_setting>
	// display instructions below
	print_menu_change();
    4540:	0e 94 4d 39 	call	0x729a	; 0x729a <print_menu_change>
    4544:	18 e6       	ldi	r17, 0x68	; 104
    4546:	06 c0       	rjmp	.+12     	; 0x4554 <set_region+0x40>
      } else {
	mode = SET_REGION;
	// print the region normal
	print_region_setting(NORMAL);
    4548:	80 e0       	ldi	r24, 0x00	; 0
    454a:	0e 94 7d 1e 	call	0x3cfa	; 0x3cfa <print_region_setting>
#ifdef BACKLIGHT_ADJUST
        print_menu_advance();
    454e:	0e 94 5f 39 	call	0x72be	; 0x72be <print_menu_advance>
    4552:	18 e0       	ldi	r17, 0x08	; 8
#else
	print_menu_exit();
#endif
      }
      screenmutex--;
    4554:	80 91 58 02 	lds	r24, 0x0258
    4558:	81 50       	subi	r24, 0x01	; 1
    455a:	80 93 58 02 	sts	0x0258, r24
    }
    if ((just_pressed & 0x4) || (pressed & 0x4)) {
    455e:	80 91 54 02 	lds	r24, 0x0254
    4562:	82 fd       	sbrc	r24, 2
    4564:	04 c0       	rjmp	.+8      	; 0x456e <set_region+0x5a>
    4566:	80 91 55 02 	lds	r24, 0x0255
    456a:	82 ff       	sbrs	r24, 2
    456c:	39 c0       	rjmp	.+114    	; 0x45e0 <set_region+0xcc>
      just_pressed = 0;
    456e:	10 92 54 02 	sts	0x0254, r1
      
      if (mode == SET_REG) {
    4572:	18 36       	cpi	r17, 0x68	; 104
    4574:	a9 f5       	brne	.+106    	; 0x45e0 <set_region+0xcc>
	    if(time_format) {        
    4576:	80 91 64 03 	lds	r24, 0x0364
    457a:	88 23       	and	r24, r24
    457c:	59 f0       	breq	.+22     	; 0x4594 <set_region+0x80>
	      region++;
    457e:	80 91 6f 03 	lds	r24, 0x036F
    4582:	8f 5f       	subi	r24, 0xFF	; 255
    4584:	80 93 6f 03 	sts	0x036F, r24
#ifdef OPTION_DOW_DATELONG
	      if(region > DATELONG_DOW)
#else
          if(region > REGION_EU)
    4588:	80 91 6f 03 	lds	r24, 0x036F
    458c:	82 30       	cpi	r24, 0x02	; 2
    458e:	10 f0       	brcs	.+4      	; 0x4594 <set_region+0x80>
#endif
	        region = 0;
    4590:	10 92 6f 03 	sts	0x036F, r1
		}
		time_format = !time_format;
    4594:	80 91 64 03 	lds	r24, 0x0364
    4598:	90 e0       	ldi	r25, 0x00	; 0
    459a:	88 23       	and	r24, r24
    459c:	09 f4       	brne	.+2      	; 0x45a0 <set_region+0x8c>
    459e:	91 e0       	ldi	r25, 0x01	; 1
    45a0:	90 93 64 03 	sts	0x0364, r25
	screenmutex++;
    45a4:	80 91 58 02 	lds	r24, 0x0258
    45a8:	8f 5f       	subi	r24, 0xFF	; 255
    45aa:	80 93 58 02 	sts	0x0258, r24
	display_menu(4);
    45ae:	84 e0       	ldi	r24, 0x04	; 4
    45b0:	0e 94 09 20 	call	0x4012	; 0x4012 <display_menu>
	print_menu_change();
    45b4:	0e 94 4d 39 	call	0x729a	; 0x729a <print_menu_change>

	print_region_setting(INVERTED);
    45b8:	81 e0       	ldi	r24, 0x01	; 1
    45ba:	0e 94 7d 1e 	call	0x3cfa	; 0x3cfa <print_region_setting>
	screenmutex--;
    45be:	80 91 58 02 	lds	r24, 0x0258
    45c2:	81 50       	subi	r24, 0x01	; 1
    45c4:	80 93 58 02 	sts	0x0258, r24

	eeprom_write_byte(&EE_REGION, region);
    45c8:	60 91 6f 03 	lds	r22, 0x036F
    45cc:	84 e0       	ldi	r24, 0x04	; 4
    45ce:	90 e0       	ldi	r25, 0x00	; 0
    45d0:	0e 94 a2 3a 	call	0x7544	; 0x7544 <__eewr_byte_m328p>
	eeprom_write_byte(&EE_TIME_FORMAT, time_format);    
    45d4:	60 91 64 03 	lds	r22, 0x0364
    45d8:	85 e0       	ldi	r24, 0x05	; 5
    45da:	90 e0       	ldi	r25, 0x00	; 0
    45dc:	0e 94 a2 3a 	call	0x7544	; 0x7544 <__eewr_byte_m328p>
}

void set_region(void) {
  uint8_t mode = init_set_menu(4);

  while (!check_timeout()) {
    45e0:	0e 94 c2 38 	call	0x7184	; 0x7184 <check_timeout>
    45e4:	88 23       	and	r24, r24
    45e6:	09 f4       	brne	.+2      	; 0x45ea <set_region+0xd6>
    45e8:	9b cf       	rjmp	.-202    	; 0x4520 <set_region+0xc>
	eeprom_write_byte(&EE_REGION, region);
	eeprom_write_byte(&EE_TIME_FORMAT, time_format);    
      }
    }
  }
}
    45ea:	1f 91       	pop	r17
    45ec:	08 95       	ret

000045ee <set_style>:
  return displaymode;
}


//Dataman - Handle setting style
void set_style(void) {
    45ee:	0f 93       	push	r16
    45f0:	1f 93       	push	r17
  displaystyle = eeprom_read_byte(&EE_STYLE);
    45f2:	87 e0       	ldi	r24, 0x07	; 7
    45f4:	90 e0       	ldi	r25, 0x00	; 0
    45f6:	0e 94 94 3a 	call	0x7528	; 0x7528 <__eerd_byte_m328p>
    45fa:	80 93 69 03 	sts	0x0369, r24
  uint8_t mode = init_set_menu(0);
    45fe:	80 e0       	ldi	r24, 0x00	; 0
    4600:	0e 94 52 20 	call	0x40a4	; 0x40a4 <init_set_menu>
    4604:	18 2f       	mov	r17, r24
    if ((just_pressed & 0x4) || (pressed & 0x4)) {
      just_pressed = 0;
      
      if (mode == SET_STL) {
	    displaystyle ++;
	    if (displaystyle>STYLE_ABOUT) displaystyle=STYLE_BASE + 1;
    4606:	02 ed       	ldi	r16, 0xD2	; 210
    4608:	5e c0       	rjmp	.+188    	; 0x46c6 <set_style+0xd8>
void set_style(void) {
  displaystyle = eeprom_read_byte(&EE_STYLE);
  uint8_t mode = init_set_menu(0);
  while (!check_timeout()) {
  
    if (just_pressed & 0x2) {
    460a:	80 91 54 02 	lds	r24, 0x0254
    460e:	81 ff       	sbrs	r24, 1
    4610:	29 c0       	rjmp	.+82     	; 0x4664 <set_style+0x76>
      just_pressed = 0;
    4612:	10 92 54 02 	sts	0x0254, r1
      screenmutex++;
    4616:	80 91 58 02 	lds	r24, 0x0258
    461a:	8f 5f       	subi	r24, 0xFF	; 255
    461c:	80 93 58 02 	sts	0x0258, r24

      if (mode == SET_STYLE) {
    4620:	18 3c       	cpi	r17, 0xC8	; 200
    4622:	61 f4       	brne	.+24     	; 0x463c <set_style+0x4e>
	DEBUG(putstring("Setting mode"));
	// ok now its selected
	mode = SET_STL;
	// print the region 
	print_style_setting(INVERTED);
    4624:	81 e0       	ldi	r24, 0x01	; 1
    4626:	0e 94 5c 1e 	call	0x3cb8	; 0x3cb8 <print_style_setting>
 	
	// display instructions below
	print_menu_change();
    462a:	0e 94 4d 39 	call	0x729a	; 0x729a <print_menu_change>
        RotateFlag = 0;
        displaymode = SHOW_TIME;
		if (displaystyle<=STYLE_ROTATE) eeprom_write_byte(&EE_STYLE,displaystyle);
        return;
      }
      screenmutex--;
    462e:	80 91 58 02 	lds	r24, 0x0258
    4632:	81 50       	subi	r24, 0x01	; 1
    4634:	80 93 58 02 	sts	0x0258, r24
    4638:	19 ec       	ldi	r17, 0xC9	; 201
    463a:	14 c0       	rjmp	.+40     	; 0x4664 <set_style+0x76>
	// display instructions below
	print_menu_change();
      } else {
	mode = SET_STYLE;
	// print the region normal
	print_style_setting(NORMAL);
    463c:	80 e0       	ldi	r24, 0x00	; 0
    463e:	0e 94 5c 1e 	call	0x3cb8	; 0x3cb8 <print_style_setting>
	print_menu_advance();
    4642:	0e 94 5f 39 	call	0x72be	; 0x72be <print_menu_advance>
        // faster return?
        RotateFlag = 0;
    4646:	10 92 75 03 	sts	0x0375, r1
        displaymode = SHOW_TIME;
    464a:	10 92 72 03 	sts	0x0372, r1
		if (displaystyle<=STYLE_ROTATE) eeprom_write_byte(&EE_STYLE,displaystyle);
    464e:	80 91 69 03 	lds	r24, 0x0369
    4652:	89 3d       	cpi	r24, 0xD9	; 217
    4654:	e8 f5       	brcc	.+122    	; 0x46d0 <set_style+0xe2>
    4656:	60 91 69 03 	lds	r22, 0x0369
    465a:	87 e0       	ldi	r24, 0x07	; 7
    465c:	90 e0       	ldi	r25, 0x00	; 0
    465e:	0e 94 a2 3a 	call	0x7544	; 0x7544 <__eewr_byte_m328p>
    4662:	36 c0       	rjmp	.+108    	; 0x46d0 <set_style+0xe2>
        return;
      }
      screenmutex--;
    }
    if ((just_pressed & 0x4) || (pressed & 0x4)) {
    4664:	80 91 54 02 	lds	r24, 0x0254
    4668:	82 fd       	sbrc	r24, 2
    466a:	04 c0       	rjmp	.+8      	; 0x4674 <set_style+0x86>
    466c:	80 91 55 02 	lds	r24, 0x0255
    4670:	82 ff       	sbrs	r24, 2
    4672:	29 c0       	rjmp	.+82     	; 0x46c6 <set_style+0xd8>
      just_pressed = 0;
    4674:	10 92 54 02 	sts	0x0254, r1
      
      if (mode == SET_STL) {
    4678:	19 3c       	cpi	r17, 0xC9	; 201
    467a:	29 f5       	brne	.+74     	; 0x46c6 <set_style+0xd8>
	    displaystyle ++;
    467c:	80 91 69 03 	lds	r24, 0x0369
    4680:	8f 5f       	subi	r24, 0xFF	; 255
    4682:	80 93 69 03 	sts	0x0369, r24
	    if (displaystyle>STYLE_ABOUT) displaystyle=STYLE_BASE + 1;
    4686:	80 91 69 03 	lds	r24, 0x0369
    468a:	8c 3d       	cpi	r24, 0xDC	; 220
    468c:	10 f0       	brcs	.+4      	; 0x4692 <set_style+0xa4>
    468e:	00 93 69 03 	sts	0x0369, r16
	screenmutex++;
    4692:	80 91 58 02 	lds	r24, 0x0258
    4696:	8f 5f       	subi	r24, 0xFF	; 255
    4698:	80 93 58 02 	sts	0x0258, r24
	display_menu(0);
    469c:	80 e0       	ldi	r24, 0x00	; 0
    469e:	0e 94 09 20 	call	0x4012	; 0x4012 <display_menu>
	print_menu_change();
    46a2:	0e 94 4d 39 	call	0x729a	; 0x729a <print_menu_change>

	// put a small arrow next to 'set 12h/24h'
	print_style_setting(INVERTED);
    46a6:	81 e0       	ldi	r24, 0x01	; 1
    46a8:	0e 94 5c 1e 	call	0x3cb8	; 0x3cb8 <print_style_setting>
 	
	screenmutex--;
    46ac:	80 91 58 02 	lds	r24, 0x0258
    46b0:	81 50       	subi	r24, 0x01	; 1
    46b2:	80 93 58 02 	sts	0x0258, r24
	if(pressed & 4)
    46b6:	80 91 55 02 	lds	r24, 0x0255
    46ba:	82 ff       	sbrs	r24, 2
    46bc:	04 c0       	rjmp	.+8      	; 0x46c6 <set_style+0xd8>
		delay_ms(200);
    46be:	88 ec       	ldi	r24, 0xC8	; 200
    46c0:	90 e0       	ldi	r25, 0x00	; 0
    46c2:	0e 94 0c 35 	call	0x6a18	; 0x6a18 <delay_ms>

//Dataman - Handle setting style
void set_style(void) {
  displaystyle = eeprom_read_byte(&EE_STYLE);
  uint8_t mode = init_set_menu(0);
  while (!check_timeout()) {
    46c6:	0e 94 c2 38 	call	0x7184	; 0x7184 <check_timeout>
    46ca:	88 23       	and	r24, r24
    46cc:	09 f4       	brne	.+2      	; 0x46d0 <set_style+0xe2>
    46ce:	9d cf       	rjmp	.-198    	; 0x460a <set_style+0x1c>

	//eeprom_write_byte(&EE_BRIGHT, OCR2B);
      }
    }
  }
}
    46d0:	1f 91       	pop	r17
    46d2:	0f 91       	pop	r16
    46d4:	08 95       	ret

000046d6 <is_leap_year>:


const uint8_t day_in_month[12] PROGMEM = {31,28,31,30,31,30,31,31,30,31,30,31};

uint8_t is_leap_year ( uint16_t year )
{
    46d6:	9c 01       	movw	r18, r24
  if ((year % 400) == 0)
    46d8:	60 e9       	ldi	r22, 0x90	; 144
    46da:	71 e0       	ldi	r23, 0x01	; 1
    46dc:	0e 94 ea 39 	call	0x73d4	; 0x73d4 <__udivmodhi4>
    46e0:	89 2b       	or	r24, r25
    46e2:	11 f4       	brne	.+4      	; 0x46e8 <is_leap_year+0x12>
    46e4:	81 e0       	ldi	r24, 0x01	; 1
    46e6:	08 95       	ret
    return 1;
  if ((year % 100) == 0)
    46e8:	c9 01       	movw	r24, r18
    46ea:	64 e6       	ldi	r22, 0x64	; 100
    46ec:	70 e0       	ldi	r23, 0x00	; 0
    46ee:	0e 94 ea 39 	call	0x73d4	; 0x73d4 <__udivmodhi4>
    46f2:	89 2b       	or	r24, r25
    46f4:	11 f4       	brne	.+4      	; 0x46fa <is_leap_year+0x24>
    46f6:	80 e0       	ldi	r24, 0x00	; 0
    46f8:	08 95       	ret
    46fa:	80 e0       	ldi	r24, 0x00	; 0
    46fc:	23 70       	andi	r18, 0x03	; 3
    46fe:	30 70       	andi	r19, 0x00	; 0
    4700:	23 2b       	or	r18, r19
    4702:	09 f4       	brne	.+2      	; 0x4706 <is_leap_year+0x30>
    4704:	81 e0       	ldi	r24, 0x01	; 1
    return 0;
  if ((year % 4) == 0)
    return 1;
  return 0;
}
    4706:	08 95       	ret

00004708 <date_diff>:

uint32_t date_diff ( uint8_t month1, uint8_t day1, uint8_t year1, uint8_t month2, uint8_t day2, uint8_t year2 )
{
    4708:	a0 e0       	ldi	r26, 0x00	; 0
    470a:	b0 e0       	ldi	r27, 0x00	; 0
    470c:	ea e8       	ldi	r30, 0x8A	; 138
    470e:	f3 e2       	ldi	r31, 0x23	; 35
    4710:	0c 94 50 3a 	jmp	0x74a0	; 0x74a0 <__prologue_saves__+0x4>
    4714:	38 2f       	mov	r19, r24
    4716:	56 2f       	mov	r21, r22
    4718:	94 2e       	mov	r9, r20
    471a:	52 2e       	mov	r5, r18
    471c:	40 2e       	mov	r4, r16
    471e:	8e 2c       	mov	r8, r14
  uint32_t diff = 0;
  int i;

  if((year2 < year1) || ((year2 == year1) && (month2 < month1)))
    4720:	e4 16       	cp	r14, r20
    4722:	20 f0       	brcs	.+8      	; 0x472c <date_diff+0x24>
    4724:	e4 16       	cp	r14, r20
    4726:	91 f4       	brne	.+36     	; 0x474c <date_diff+0x44>
    4728:	28 17       	cp	r18, r24
    472a:	80 f4       	brcc	.+32     	; 0x474c <date_diff+0x44>
    return date_diff( month2, day2, year2, month1, day1, year1 ) * -1;
    472c:	85 2d       	mov	r24, r5
    472e:	64 2d       	mov	r22, r4
    4730:	48 2d       	mov	r20, r8
    4732:	23 2f       	mov	r18, r19
    4734:	05 2f       	mov	r16, r21
    4736:	e9 2c       	mov	r14, r9
    4738:	0e 94 84 23 	call	0x4708	; 0x4708 <date_diff>
    473c:	22 27       	eor	r18, r18
    473e:	33 27       	eor	r19, r19
    4740:	a9 01       	movw	r20, r18
    4742:	26 1b       	sub	r18, r22
    4744:	37 0b       	sbc	r19, r23
    4746:	48 0b       	sbc	r20, r24
    4748:	59 0b       	sbc	r21, r25
    474a:	de c0       	rjmp	.+444    	; 0x4908 <date_diff+0x200>

  if((month1 == month2) && (year1 == year2))
    474c:	35 15       	cp	r19, r5
    474e:	69 f4       	brne	.+26     	; 0x476a <date_diff+0x62>
    4750:	98 14       	cp	r9, r8
    4752:	09 f0       	breq	.+2      	; 0x4756 <date_diff+0x4e>
    4754:	53 c0       	rjmp	.+166    	; 0x47fc <date_diff+0xf4>
    return day2 - day1;
    4756:	84 2d       	mov	r24, r4
    4758:	90 e0       	ldi	r25, 0x00	; 0
    475a:	85 1b       	sub	r24, r21
    475c:	91 09       	sbc	r25, r1
    475e:	9c 01       	movw	r18, r24
    4760:	44 27       	eor	r20, r20
    4762:	37 fd       	sbrc	r19, 7
    4764:	40 95       	com	r20
    4766:	54 2f       	mov	r21, r20
    4768:	cf c0       	rjmp	.+414    	; 0x4908 <date_diff+0x200>
  if(year1==year2)
    476a:	98 14       	cp	r9, r8
    476c:	09 f0       	breq	.+2      	; 0x4770 <date_diff+0x68>
    476e:	46 c0       	rjmp	.+140    	; 0x47fc <date_diff+0xf4>
  {
    diff = pgm_read_byte(&day_in_month[month1-1]) - day1;
    4770:	c3 2f       	mov	r28, r19
    4772:	d0 e0       	ldi	r29, 0x00	; 0
    4774:	fe 01       	movw	r30, r28
    4776:	ef 59       	subi	r30, 0x9F	; 159
    4778:	fb 4f       	sbci	r31, 0xFB	; 251
    477a:	e4 91       	lpm	r30, Z+
    477c:	8e 2f       	mov	r24, r30
    477e:	90 e0       	ldi	r25, 0x00	; 0
    4780:	85 1b       	sub	r24, r21
    4782:	91 09       	sbc	r25, r1
    4784:	7c 01       	movw	r14, r24
    4786:	00 27       	eor	r16, r16
    4788:	f7 fc       	sbrc	r15, 7
    478a:	00 95       	com	r16
    478c:	10 2f       	mov	r17, r16
    if(month1 == 2)
    478e:	32 30       	cpi	r19, 0x02	; 2
    4790:	41 f4       	brne	.+16     	; 0x47a2 <date_diff+0x9a>
      diff += is_leap_year(year1);
    4792:	89 2d       	mov	r24, r9
    4794:	90 e0       	ldi	r25, 0x00	; 0
    4796:	0e 94 6b 23 	call	0x46d6	; 0x46d6 <is_leap_year>
    479a:	e8 0e       	add	r14, r24
    479c:	f1 1c       	adc	r15, r1
    479e:	01 1d       	adc	r16, r1
    47a0:	11 1d       	adc	r17, r1
    47a2:	92 e6       	ldi	r25, 0x62	; 98
    47a4:	a9 2e       	mov	r10, r25
    47a6:	94 e0       	ldi	r25, 0x04	; 4
    47a8:	b9 2e       	mov	r11, r25
    47aa:	ac 0e       	add	r10, r28
    47ac:	bd 1e       	adc	r11, r29
    47ae:	cc 24       	eor	r12, r12
    47b0:	dd 24       	eor	r13, r13
    for(i=month1+1;i<month2;i++)
    {
      diff+=pgm_read_byte(&day_in_month[i-1]);
      if(i==2)
        diff+=is_leap_year(year1);
    47b2:	3e 01       	movw	r6, r28
    47b4:	08 94       	sec
    47b6:	61 1c       	adc	r6, r1
    47b8:	71 1c       	adc	r7, r1
  if(year1==year2)
  {
    diff = pgm_read_byte(&day_in_month[month1-1]) - day1;
    if(month1 == 2)
      diff += is_leap_year(year1);
    for(i=month1+1;i<month2;i++)
    47ba:	c5 2d       	mov	r28, r5
    47bc:	d0 e0       	ldi	r29, 0x00	; 0
    47be:	17 c0       	rjmp	.+46     	; 0x47ee <date_diff+0xe6>
    {
      diff+=pgm_read_byte(&day_in_month[i-1]);
    47c0:	f5 01       	movw	r30, r10
    47c2:	84 91       	lpm	r24, Z+
    47c4:	e8 0e       	add	r14, r24
    47c6:	f1 1c       	adc	r15, r1
    47c8:	01 1d       	adc	r16, r1
    47ca:	11 1d       	adc	r17, r1
      if(i==2)
    47cc:	22 30       	cpi	r18, 0x02	; 2
    47ce:	31 05       	cpc	r19, r1
    47d0:	41 f4       	brne	.+16     	; 0x47e2 <date_diff+0xda>
        diff+=is_leap_year(year1);
    47d2:	89 2d       	mov	r24, r9
    47d4:	90 e0       	ldi	r25, 0x00	; 0
    47d6:	0e 94 6b 23 	call	0x46d6	; 0x46d6 <is_leap_year>
    47da:	e8 0e       	add	r14, r24
    47dc:	f1 1c       	adc	r15, r1
    47de:	01 1d       	adc	r16, r1
    47e0:	11 1d       	adc	r17, r1
    47e2:	08 94       	sec
    47e4:	c1 1c       	adc	r12, r1
    47e6:	d1 1c       	adc	r13, r1
    47e8:	08 94       	sec
    47ea:	a1 1c       	adc	r10, r1
    47ec:	b1 1c       	adc	r11, r1
    47ee:	93 01       	movw	r18, r6
    47f0:	2c 0d       	add	r18, r12
    47f2:	3d 1d       	adc	r19, r13
  if(year1==year2)
  {
    diff = pgm_read_byte(&day_in_month[month1-1]) - day1;
    if(month1 == 2)
      diff += is_leap_year(year1);
    for(i=month1+1;i<month2;i++)
    47f4:	2c 17       	cp	r18, r28
    47f6:	3d 07       	cpc	r19, r29
    47f8:	1c f3       	brlt	.-58     	; 0x47c0 <date_diff+0xb8>
    47fa:	80 c0       	rjmp	.+256    	; 0x48fc <date_diff+0x1f4>
        diff+=is_leap_year(year1);
    }
    diff += day2;
    return diff;
  }
  diff = pgm_read_byte(&day_in_month[month1-1]) - day1;
    47fc:	c3 2f       	mov	r28, r19
    47fe:	d0 e0       	ldi	r29, 0x00	; 0
    4800:	fe 01       	movw	r30, r28
    4802:	ef 59       	subi	r30, 0x9F	; 159
    4804:	fb 4f       	sbci	r31, 0xFB	; 251
    4806:	e4 91       	lpm	r30, Z+
    4808:	8e 2f       	mov	r24, r30
    480a:	90 e0       	ldi	r25, 0x00	; 0
    480c:	85 1b       	sub	r24, r21
    480e:	91 09       	sbc	r25, r1
    4810:	7c 01       	movw	r14, r24
    4812:	00 27       	eor	r16, r16
    4814:	f7 fc       	sbrc	r15, 7
    4816:	00 95       	com	r16
    4818:	10 2f       	mov	r17, r16
  if(month1 == 2)
    481a:	32 30       	cpi	r19, 0x02	; 2
    481c:	41 f4       	brne	.+16     	; 0x482e <date_diff+0x126>
      diff+=is_leap_year(year1);
    481e:	89 2d       	mov	r24, r9
    4820:	90 e0       	ldi	r25, 0x00	; 0
    4822:	0e 94 6b 23 	call	0x46d6	; 0x46d6 <is_leap_year>
    4826:	e8 0e       	add	r14, r24
    4828:	f1 1c       	adc	r15, r1
    482a:	01 1d       	adc	r16, r1
    482c:	11 1d       	adc	r17, r1
    482e:	82 e6       	ldi	r24, 0x62	; 98
    4830:	a8 2e       	mov	r10, r24
    4832:	84 e0       	ldi	r24, 0x04	; 4
    4834:	b8 2e       	mov	r11, r24
    4836:	ac 0e       	add	r10, r28
    4838:	bd 1e       	adc	r11, r29
    483a:	cc 24       	eor	r12, r12
    483c:	dd 24       	eor	r13, r13
  for(i=month1+1;i<=12;i++)
  {
    diff+=pgm_read_byte(&day_in_month[i-1]);
    if(i==2)
      diff+=is_leap_year(year1);
    483e:	21 96       	adiw	r28, 0x01	; 1
    4840:	17 c0       	rjmp	.+46     	; 0x4870 <date_diff+0x168>
  diff = pgm_read_byte(&day_in_month[month1-1]) - day1;
  if(month1 == 2)
      diff+=is_leap_year(year1);
  for(i=month1+1;i<=12;i++)
  {
    diff+=pgm_read_byte(&day_in_month[i-1]);
    4842:	f5 01       	movw	r30, r10
    4844:	84 91       	lpm	r24, Z+
    4846:	e8 0e       	add	r14, r24
    4848:	f1 1c       	adc	r15, r1
    484a:	01 1d       	adc	r16, r1
    484c:	11 1d       	adc	r17, r1
    if(i==2)
    484e:	22 30       	cpi	r18, 0x02	; 2
    4850:	31 05       	cpc	r19, r1
    4852:	41 f4       	brne	.+16     	; 0x4864 <date_diff+0x15c>
      diff+=is_leap_year(year1);
    4854:	89 2d       	mov	r24, r9
    4856:	90 e0       	ldi	r25, 0x00	; 0
    4858:	0e 94 6b 23 	call	0x46d6	; 0x46d6 <is_leap_year>
    485c:	e8 0e       	add	r14, r24
    485e:	f1 1c       	adc	r15, r1
    4860:	01 1d       	adc	r16, r1
    4862:	11 1d       	adc	r17, r1
    4864:	08 94       	sec
    4866:	c1 1c       	adc	r12, r1
    4868:	d1 1c       	adc	r13, r1
    486a:	08 94       	sec
    486c:	a1 1c       	adc	r10, r1
    486e:	b1 1c       	adc	r11, r1
    4870:	9e 01       	movw	r18, r28
    4872:	2c 0d       	add	r18, r12
    4874:	3d 1d       	adc	r19, r13
    return diff;
  }
  diff = pgm_read_byte(&day_in_month[month1-1]) - day1;
  if(month1 == 2)
      diff+=is_leap_year(year1);
  for(i=month1+1;i<=12;i++)
    4876:	2d 30       	cpi	r18, 0x0D	; 13
    4878:	31 05       	cpc	r19, r1
    487a:	1c f3       	brlt	.-58     	; 0x4842 <date_diff+0x13a>
  {
    diff+=pgm_read_byte(&day_in_month[i-1]);
    if(i==2)
      diff+=is_leap_year(year1);
  }
  for(i=year1+1;i<year2;i++)
    487c:	89 2d       	mov	r24, r9
    487e:	90 e0       	ldi	r25, 0x00	; 0
    4880:	6c 01       	movw	r12, r24
    4882:	08 94       	sec
    4884:	c1 1c       	adc	r12, r1
    4886:	d1 1c       	adc	r13, r1
    4888:	c0 e0       	ldi	r28, 0x00	; 0
    488a:	d0 e0       	ldi	r29, 0x00	; 0
    488c:	3c 01       	movw	r6, r24
    488e:	a8 2c       	mov	r10, r8
    4890:	bb 24       	eor	r11, r11
    4892:	11 c0       	rjmp	.+34     	; 0x48b6 <date_diff+0x1ae>
    diff+=365+is_leap_year(i);
    4894:	c6 01       	movw	r24, r12
    4896:	0e 94 6b 23 	call	0x46d6	; 0x46d6 <is_leap_year>
    489a:	90 e0       	ldi	r25, 0x00	; 0
    489c:	83 59       	subi	r24, 0x93	; 147
    489e:	9e 4f       	sbci	r25, 0xFE	; 254
    48a0:	aa 27       	eor	r26, r26
    48a2:	97 fd       	sbrc	r25, 7
    48a4:	a0 95       	com	r26
    48a6:	ba 2f       	mov	r27, r26
    48a8:	e8 0e       	add	r14, r24
    48aa:	f9 1e       	adc	r15, r25
    48ac:	0a 1f       	adc	r16, r26
    48ae:	1b 1f       	adc	r17, r27
  {
    diff+=pgm_read_byte(&day_in_month[i-1]);
    if(i==2)
      diff+=is_leap_year(year1);
  }
  for(i=year1+1;i<year2;i++)
    48b0:	08 94       	sec
    48b2:	c1 1c       	adc	r12, r1
    48b4:	d1 1c       	adc	r13, r1
    48b6:	21 96       	adiw	r28, 0x01	; 1
    48b8:	ce 01       	movw	r24, r28
    48ba:	86 0d       	add	r24, r6
    48bc:	97 1d       	adc	r25, r7
    48be:	8a 15       	cp	r24, r10
    48c0:	9b 05       	cpc	r25, r11
    48c2:	44 f3       	brlt	.-48     	; 0x4894 <date_diff+0x18c>
    48c4:	c1 e0       	ldi	r28, 0x01	; 1
    48c6:	d0 e0       	ldi	r29, 0x00	; 0
    diff+=365+is_leap_year(i);
  for(i=1;i<month2;i++)
    48c8:	c5 2c       	mov	r12, r5
    48ca:	dd 24       	eor	r13, r13
    48cc:	14 c0       	rjmp	.+40     	; 0x48f6 <date_diff+0x1ee>
  {
    diff+=pgm_read_byte(&day_in_month[i-1]);
    48ce:	fe 01       	movw	r30, r28
    48d0:	ef 59       	subi	r30, 0x9F	; 159
    48d2:	fb 4f       	sbci	r31, 0xFB	; 251
    48d4:	e4 91       	lpm	r30, Z+
    48d6:	ee 0e       	add	r14, r30
    48d8:	f1 1c       	adc	r15, r1
    48da:	01 1d       	adc	r16, r1
    48dc:	11 1d       	adc	r17, r1
    if(i==2)
    48de:	c2 30       	cpi	r28, 0x02	; 2
    48e0:	d1 05       	cpc	r29, r1
    48e2:	41 f4       	brne	.+16     	; 0x48f4 <date_diff+0x1ec>
      diff+=is_leap_year(year2);
    48e4:	88 2d       	mov	r24, r8
    48e6:	90 e0       	ldi	r25, 0x00	; 0
    48e8:	0e 94 6b 23 	call	0x46d6	; 0x46d6 <is_leap_year>
    48ec:	e8 0e       	add	r14, r24
    48ee:	f1 1c       	adc	r15, r1
    48f0:	01 1d       	adc	r16, r1
    48f2:	11 1d       	adc	r17, r1
    if(i==2)
      diff+=is_leap_year(year1);
  }
  for(i=year1+1;i<year2;i++)
    diff+=365+is_leap_year(i);
  for(i=1;i<month2;i++)
    48f4:	21 96       	adiw	r28, 0x01	; 1
    48f6:	cc 15       	cp	r28, r12
    48f8:	dd 05       	cpc	r29, r13
    48fa:	4c f3       	brlt	.-46     	; 0x48ce <date_diff+0x1c6>
  {
    diff+=pgm_read_byte(&day_in_month[i-1]);
    if(i==2)
      diff+=is_leap_year(year2);
  }
  diff += day2;
    48fc:	a8 01       	movw	r20, r16
    48fe:	97 01       	movw	r18, r14
    4900:	24 0d       	add	r18, r4
    4902:	31 1d       	adc	r19, r1
    4904:	41 1d       	adc	r20, r1
    4906:	51 1d       	adc	r21, r1
  return diff;
}
    4908:	b9 01       	movw	r22, r18
    490a:	ca 01       	movw	r24, r20
    490c:	cd b7       	in	r28, 0x3d	; 61
    490e:	de b7       	in	r29, 0x3e	; 62
    4910:	e0 e1       	ldi	r30, 0x10	; 16
    4912:	0c 94 6c 3a 	jmp	0x74d8	; 0x74d8 <__epilogue_restores__+0x4>

00004916 <BodyMassIndex>:

uint8_t BodyMassIndex ( uint8_t unit, uint16_t height, uint16_t weight )
{
    4916:	ef 92       	push	r14
    4918:	ff 92       	push	r15
    491a:	0f 93       	push	r16
    491c:	1f 93       	push	r17
    491e:	7b 01       	movw	r14, r22
  uint32_t bmi;
  if ( unit == BMI_Imperial )
    4920:	88 23       	and	r24, r24
    4922:	41 f4       	brne	.+16     	; 0x4934 <BodyMassIndex+0x1e>
  {
    //Imperial, Weight in pounds, Height in inches
    //bmi = (weight * 703) / (height * height);
    bmi = weight;
    4924:	ba 01       	movw	r22, r20
    4926:	80 e0       	ldi	r24, 0x00	; 0
    4928:	90 e0       	ldi	r25, 0x00	; 0
    bmi *= 703;
    492a:	2f eb       	ldi	r18, 0xBF	; 191
    492c:	32 e0       	ldi	r19, 0x02	; 2
    492e:	40 e0       	ldi	r20, 0x00	; 0
    4930:	50 e0       	ldi	r21, 0x00	; 0
    4932:	09 c0       	rjmp	.+18     	; 0x4946 <BodyMassIndex+0x30>
    bmi /= height;
    bmi /= height;
    return (bmi > 255) ? 255 : bmi;
  }
  else if ( unit == BMI_Metric )
    4934:	81 30       	cpi	r24, 0x01	; 1
    4936:	11 f5       	brne	.+68     	; 0x497c <BodyMassIndex+0x66>
  {
    //Metric, Weight in Kilograms, Height in centimeters
    //bmi = (weight * 10000) / (height * height);
    bmi = weight;
    4938:	ba 01       	movw	r22, r20
    493a:	80 e0       	ldi	r24, 0x00	; 0
    493c:	90 e0       	ldi	r25, 0x00	; 0
    bmi *= 10000;
    493e:	20 e1       	ldi	r18, 0x10	; 16
    4940:	37 e2       	ldi	r19, 0x27	; 39
    4942:	40 e0       	ldi	r20, 0x00	; 0
    4944:	50 e0       	ldi	r21, 0x00	; 0
    4946:	0e 94 bf 39 	call	0x737e	; 0x737e <__mulsi3>
    bmi /= height;
    494a:	00 e0       	ldi	r16, 0x00	; 0
    494c:	10 e0       	ldi	r17, 0x00	; 0
    494e:	a8 01       	movw	r20, r16
    4950:	97 01       	movw	r18, r14
    4952:	0e 94 11 3a 	call	0x7422	; 0x7422 <__udivmodsi4>
    4956:	ca 01       	movw	r24, r20
    bmi /= height;
    return (bmi > 255) ? 255 : bmi;
    4958:	b9 01       	movw	r22, r18
    495a:	a8 01       	movw	r20, r16
    495c:	97 01       	movw	r18, r14
    495e:	0e 94 11 3a 	call	0x7422	; 0x7422 <__udivmodsi4>
    4962:	c9 01       	movw	r24, r18
    4964:	da 01       	movw	r26, r20
    4966:	8f 3f       	cpi	r24, 0xFF	; 255
    4968:	91 05       	cpc	r25, r1
    496a:	a1 05       	cpc	r26, r1
    496c:	b1 05       	cpc	r27, r1
    496e:	39 f0       	breq	.+14     	; 0x497e <BodyMassIndex+0x68>
    4970:	30 f0       	brcs	.+12     	; 0x497e <BodyMassIndex+0x68>
    4972:	8f ef       	ldi	r24, 0xFF	; 255
    4974:	90 e0       	ldi	r25, 0x00	; 0
    4976:	a0 e0       	ldi	r26, 0x00	; 0
    4978:	b0 e0       	ldi	r27, 0x00	; 0
    497a:	01 c0       	rjmp	.+2      	; 0x497e <BodyMassIndex+0x68>
  }
  else
  {
    //User knows their BMI, so it is entered directly.
    return weight & 0xFF;
    497c:	84 2f       	mov	r24, r20
  }
}
    497e:	1f 91       	pop	r17
    4980:	0f 91       	pop	r16
    4982:	ff 90       	pop	r15
    4984:	ef 90       	pop	r14
    4986:	08 95       	ret

00004988 <random_days>:

uint32_t random_days(uint8_t hour, uint8_t min, uint8_t sec, uint32_t base_days)
{
    4988:	ef 92       	push	r14
    498a:	ff 92       	push	r15
    498c:	0f 93       	push	r16
    498e:	1f 93       	push	r17
    4990:	78 01       	movw	r14, r16
    4992:	89 01       	movw	r16, r18
	init_crand_consistent(hour,min,sec);
    4994:	0e 94 9f 37 	call	0x6f3e	; 0x6f3e <init_crand_consistent>
	uint32_t random = (crand(0) * 1000) / 0x7FFF;
    4998:	80 e0       	ldi	r24, 0x00	; 0
    499a:	0e 94 0d 38 	call	0x701a	; 0x701a <crand>
    499e:	28 ee       	ldi	r18, 0xE8	; 232
    49a0:	33 e0       	ldi	r19, 0x03	; 3
    49a2:	ac 01       	movw	r20, r24
    49a4:	42 9f       	mul	r20, r18
    49a6:	c0 01       	movw	r24, r0
    49a8:	43 9f       	mul	r20, r19
    49aa:	90 0d       	add	r25, r0
    49ac:	52 9f       	mul	r21, r18
    49ae:	90 0d       	add	r25, r0
    49b0:	11 24       	eor	r1, r1
    49b2:	6f ef       	ldi	r22, 0xFF	; 255
    49b4:	7f e7       	ldi	r23, 0x7F	; 127
    49b6:	0e 94 ea 39 	call	0x73d4	; 0x73d4 <__udivmodhi4>
    49ba:	9b 01       	movw	r18, r22
    49bc:	40 e0       	ldi	r20, 0x00	; 0
    49be:	50 e0       	ldi	r21, 0x00	; 0
    49c0:	c8 01       	movw	r24, r16
    49c2:	b7 01       	movw	r22, r14
    49c4:	0e 94 bf 39 	call	0x737e	; 0x737e <__mulsi3>
    49c8:	28 ee       	ldi	r18, 0xE8	; 232
    49ca:	33 e0       	ldi	r19, 0x03	; 3
    49cc:	40 e0       	ldi	r20, 0x00	; 0
    49ce:	50 e0       	ldi	r21, 0x00	; 0
    49d0:	0e 94 11 3a 	call	0x7422	; 0x7422 <__udivmodsi4>
    49d4:	ca 01       	movw	r24, r20
	return (uint32_t)((base_days * random) / 1000);
}
    49d6:	b9 01       	movw	r22, r18
    49d8:	1f 91       	pop	r17
    49da:	0f 91       	pop	r16
    49dc:	ff 90       	pop	r15
    49de:	ef 90       	pop	r14
    49e0:	08 95       	ret

000049e2 <ETD>:
               uint8_t BMI, 
               uint8_t Smoker, 
               uint8_t hour,
               uint8_t min,
               uint8_t sec)
{
    49e2:	a0 e0       	ldi	r26, 0x00	; 0
    49e4:	b0 e0       	ldi	r27, 0x00	; 0
    49e6:	e7 ef       	ldi	r30, 0xF7	; 247
    49e8:	f4 e2       	ldi	r31, 0x24	; 36
    49ea:	0c 94 4e 3a 	jmp	0x749c	; 0x749c <__prologue_saves__>
    49ee:	9a 2c       	mov	r9, r10
    49f0:	3e 88       	ldd	r3, Y+22	; 0x16
    49f2:	2f 88       	ldd	r2, Y+23	; 0x17
  int y,i,bmi;
  uint32_t diff;
  uint32_t random;
  int32_t days;
  
  diff = date_diff(DOB_month,DOB_day,DOB_year,month,day,year);
    49f4:	0e 94 84 23 	call	0x4708	; 0x4708 <date_diff>
  y = (diff * 10) / 3653;
    49f8:	2a e0       	ldi	r18, 0x0A	; 10
    49fa:	30 e0       	ldi	r19, 0x00	; 0
    49fc:	40 e0       	ldi	r20, 0x00	; 0
    49fe:	50 e0       	ldi	r21, 0x00	; 0
    4a00:	0e 94 bf 39 	call	0x737e	; 0x737e <__mulsi3>
    4a04:	7b 01       	movw	r14, r22
    4a06:	8c 01       	movw	r16, r24
    4a08:	25 e4       	ldi	r18, 0x45	; 69
    4a0a:	3e e0       	ldi	r19, 0x0E	; 14
    4a0c:	40 e0       	ldi	r20, 0x00	; 0
    4a0e:	50 e0       	ldi	r21, 0x00	; 0
    4a10:	0e 94 11 3a 	call	0x7422	; 0x7422 <__udivmodsi4>
    4a14:	29 01       	movw	r4, r18
  
  days = days_table[(Mode * 2) + Gender];
    4a16:	6a 2c       	mov	r6, r10
    4a18:	77 24       	eor	r7, r7
    4a1a:	66 0c       	add	r6, r6
    4a1c:	77 1c       	adc	r7, r7
    4a1e:	6c 0c       	add	r6, r12
    4a20:	71 1c       	adc	r7, r1
  days -= diff*10;
    4a22:	f3 01       	movw	r30, r6
    4a24:	ee 0f       	add	r30, r30
    4a26:	ff 1f       	adc	r31, r31
    4a28:	ee 0f       	add	r30, r30
    4a2a:	ff 1f       	adc	r31, r31
    4a2c:	e0 51       	subi	r30, 0x10	; 16
    4a2e:	fe 4f       	sbci	r31, 0xFE	; 254
    4a30:	a0 80       	ld	r10, Z
    4a32:	b1 80       	ldd	r11, Z+1	; 0x01
    4a34:	c2 80       	ldd	r12, Z+2	; 0x02
    4a36:	d3 80       	ldd	r13, Z+3	; 0x03
    4a38:	ae 18       	sub	r10, r14
    4a3a:	bf 08       	sbc	r11, r15
    4a3c:	c0 0a       	sbc	r12, r16
    4a3e:	d1 0a       	sbc	r13, r17
  bmi = BMI;
    4a40:	e8 2c       	mov	r14, r8
    4a42:	ff 24       	eor	r15, r15
  if(bmi > 45)
    4a44:	0e e2       	ldi	r16, 0x2E	; 46
    4a46:	e0 16       	cp	r14, r16
    4a48:	f1 04       	cpc	r15, r1
    4a4a:	24 f0       	brlt	.+8      	; 0x4a54 <ETD+0x72>
    4a4c:	2d e2       	ldi	r18, 0x2D	; 45
    4a4e:	e2 2e       	mov	r14, r18
    4a50:	f1 2c       	mov	r15, r1
    4a52:	07 c0       	rjmp	.+14     	; 0x4a62 <ETD+0x80>
    bmi = 45;
  if(bmi < 26)
    4a54:	1a e1       	ldi	r17, 0x1A	; 26
    4a56:	e1 16       	cp	r14, r17
    4a58:	f1 04       	cpc	r15, r1
    4a5a:	1c f4       	brge	.+6      	; 0x4a62 <ETD+0x80>
    4a5c:	9a e1       	ldi	r25, 0x1A	; 26
    4a5e:	e9 2e       	mov	r14, r25
    4a60:	f1 2c       	mov	r15, r1
    bmi = 26;
  bmi -= 26;
  if (Mode == DC_mode_optimistic) {
    4a62:	22 e0       	ldi	r18, 0x02	; 2
    4a64:	92 16       	cp	r9, r18
    4a66:	81 f4       	brne	.+32     	; 0x4a88 <ETD+0xa6>
    days += random_days(hour,min,sec,54790);
    4a68:	83 2d       	mov	r24, r3
    4a6a:	62 2d       	mov	r22, r2
    4a6c:	48 8d       	ldd	r20, Y+24	; 0x18
    4a6e:	06 e0       	ldi	r16, 0x06	; 6
    4a70:	16 ed       	ldi	r17, 0xD6	; 214
    4a72:	20 e0       	ldi	r18, 0x00	; 0
    4a74:	30 e0       	ldi	r19, 0x00	; 0
    4a76:	0e 94 c4 24 	call	0x4988	; 0x4988 <random_days>
    4a7a:	ab 01       	movw	r20, r22
    4a7c:	bc 01       	movw	r22, r24
    4a7e:	4a 0d       	add	r20, r10
    4a80:	5b 1d       	adc	r21, r11
    4a82:	6c 1d       	adc	r22, r12
    4a84:	7d 1d       	adc	r23, r13
    4a86:	17 c0       	rjmp	.+46     	; 0x4ab6 <ETD+0xd4>
  } else if (Mode == DC_mode_pessimistic) {
    4a88:	31 e0       	ldi	r19, 0x01	; 1
    4a8a:	93 16       	cp	r9, r19
    4a8c:	19 f0       	breq	.+6      	; 0x4a94 <ETD+0xb2>
  
  diff = date_diff(DOB_month,DOB_day,DOB_year,month,day,year);
  y = (diff * 10) / 3653;
  
  days = days_table[(Mode * 2) + Gender];
  days -= diff*10;
    4a8e:	b6 01       	movw	r22, r12
    4a90:	a5 01       	movw	r20, r10
    4a92:	11 c0       	rjmp	.+34     	; 0x4ab6 <ETD+0xd4>
    bmi = 26;
  bmi -= 26;
  if (Mode == DC_mode_optimistic) {
    days += random_days(hour,min,sec,54790);
  } else if (Mode == DC_mode_pessimistic) {
    days -= random_days(hour,min,sec,36530);
    4a94:	83 2d       	mov	r24, r3
    4a96:	62 2d       	mov	r22, r2
    4a98:	48 8d       	ldd	r20, Y+24	; 0x18
    4a9a:	02 eb       	ldi	r16, 0xB2	; 178
    4a9c:	1e e8       	ldi	r17, 0x8E	; 142
    4a9e:	20 e0       	ldi	r18, 0x00	; 0
    4aa0:	30 e0       	ldi	r19, 0x00	; 0
    4aa2:	0e 94 c4 24 	call	0x4988	; 0x4988 <random_days>
    4aa6:	96 01       	movw	r18, r12
    4aa8:	85 01       	movw	r16, r10
    4aaa:	06 1b       	sub	r16, r22
    4aac:	17 0b       	sbc	r17, r23
    4aae:	28 0b       	sbc	r18, r24
    4ab0:	39 0b       	sbc	r19, r25
    4ab2:	b9 01       	movw	r22, r18
    4ab4:	a8 01       	movw	r20, r16
  }
  
  if(y>=20)
    4ab6:	14 e1       	ldi	r17, 0x14	; 20
    4ab8:	41 16       	cp	r4, r17
    4aba:	51 04       	cpc	r5, r1
    4abc:	0c f4       	brge	.+2      	; 0x4ac0 <ETD+0xde>
    4abe:	49 c0       	rjmp	.+146    	; 0x4b52 <ETD+0x170>
  {
  	  for(i=0;i<bmi_table_count[(Mode * 2) + Gender];i++)
    4ac0:	f3 01       	movw	r30, r6
    4ac2:	e8 52       	subi	r30, 0x28	; 40
    4ac4:	fe 4f       	sbci	r31, 0xFE	; 254
    4ac6:	80 81       	ld	r24, Z
    4ac8:	c8 2e       	mov	r12, r24
    4aca:	dd 24       	eor	r13, r13
    4acc:	20 e0       	ldi	r18, 0x00	; 0
    4ace:	30 e0       	ldi	r19, 0x00	; 0
  	  {
  	  	  if ( y < pgm_read_byte(&normal_bmi_male[bmi_table_offset[(Mode * 2) + Gender]+i][0]) )
    4ad0:	83 01       	movw	r16, r6
    4ad2:	00 53       	subi	r16, 0x30	; 48
    4ad4:	1e 4f       	sbci	r17, 0xFE	; 254
    4ad6:	8b e0       	ldi	r24, 0x0B	; 11
    4ad8:	a8 2e       	mov	r10, r24
    4ada:	b1 2c       	mov	r11, r1
    4adc:	36 c0       	rjmp	.+108    	; 0x4b4a <ETD+0x168>
    4ade:	f8 01       	movw	r30, r16
    4ae0:	80 81       	ld	r24, Z
    4ae2:	f9 01       	movw	r30, r18
    4ae4:	e8 0f       	add	r30, r24
    4ae6:	f1 1d       	adc	r31, r1
    4ae8:	ea 9d       	mul	r30, r10
    4aea:	d0 01       	movw	r26, r0
    4aec:	eb 9d       	mul	r30, r11
    4aee:	b0 0d       	add	r27, r0
    4af0:	fa 9d       	mul	r31, r10
    4af2:	b0 0d       	add	r27, r0
    4af4:	11 24       	eor	r1, r1
    4af6:	fd 01       	movw	r30, r26
    4af8:	e6 56       	subi	r30, 0x66	; 102
    4afa:	fc 4f       	sbci	r31, 0xFC	; 252
    4afc:	e4 91       	lpm	r30, Z+
    4afe:	8e 2f       	mov	r24, r30
    4b00:	90 e0       	ldi	r25, 0x00	; 0
    4b02:	48 16       	cp	r4, r24
    4b04:	59 06       	cpc	r5, r25
    4b06:	fc f4       	brge	.+62     	; 0x4b46 <ETD+0x164>
  bmi = BMI;
  if(bmi > 45)
    bmi = 45;
  if(bmi < 26)
    bmi = 26;
  bmi -= 26;
    4b08:	c7 01       	movw	r24, r14
    4b0a:	4a 97       	sbiw	r24, 0x1a	; 26
  {
  	  for(i=0;i<bmi_table_count[(Mode * 2) + Gender];i++)
  	  {
  	  	  if ( y < pgm_read_byte(&normal_bmi_male[bmi_table_offset[(Mode * 2) + Gender]+i][0]) )
          {
          	uint8_t temp = pgm_read_byte(&normal_bmi_male[bmi_table_offset[(Mode * 2) + Gender]+i][(bmi/2)+1]);
    4b0c:	fc 01       	movw	r30, r24
    4b0e:	f5 95       	asr	r31
    4b10:	e7 95       	ror	r30
    4b12:	ea 0f       	add	r30, r26
    4b14:	fb 1f       	adc	r31, r27
    4b16:	e5 56       	subi	r30, 0x65	; 101
    4b18:	fc 4f       	sbci	r31, 0xFC	; 252
    4b1a:	24 91       	lpm	r18, Z+
          	if(bmi&1)
    4b1c:	80 ff       	sbrs	r24, 0
          		temp &= 0x0F;
          	else
          		temp >>= 4;
    4b1e:	22 95       	swap	r18
    4b20:	2f 70       	andi	r18, 0x0F	; 15
            days -= (uint16_t)(temp * 3653);
    4b22:	30 e0       	ldi	r19, 0x00	; 0
    4b24:	85 e4       	ldi	r24, 0x45	; 69
    4b26:	9e e0       	ldi	r25, 0x0E	; 14
    4b28:	8c 01       	movw	r16, r24
    4b2a:	20 9f       	mul	r18, r16
    4b2c:	c0 01       	movw	r24, r0
    4b2e:	21 9f       	mul	r18, r17
    4b30:	90 0d       	add	r25, r0
    4b32:	30 9f       	mul	r19, r16
    4b34:	90 0d       	add	r25, r0
    4b36:	11 24       	eor	r1, r1
    4b38:	a0 e0       	ldi	r26, 0x00	; 0
    4b3a:	b0 e0       	ldi	r27, 0x00	; 0
    4b3c:	48 1b       	sub	r20, r24
    4b3e:	59 0b       	sbc	r21, r25
    4b40:	6a 0b       	sbc	r22, r26
    4b42:	7b 0b       	sbc	r23, r27
    4b44:	06 c0       	rjmp	.+12     	; 0x4b52 <ETD+0x170>
    days -= random_days(hour,min,sec,36530);
  }
  
  if(y>=20)
  {
  	  for(i=0;i<bmi_table_count[(Mode * 2) + Gender];i++)
    4b46:	2f 5f       	subi	r18, 0xFF	; 255
    4b48:	3f 4f       	sbci	r19, 0xFF	; 255
    4b4a:	2c 15       	cp	r18, r12
    4b4c:	3d 05       	cpc	r19, r13
    4b4e:	0c f4       	brge	.+2      	; 0x4b52 <ETD+0x170>
    4b50:	c6 cf       	rjmp	.-116    	; 0x4ade <ETD+0xfc>
            days -= (uint16_t)(temp * 3653);
            break;
          }
  	  }
  }
  if((y>=25)&&(Smoker == DC_smoker))
    4b52:	19 e1       	ldi	r17, 0x19	; 25
    4b54:	41 16       	cp	r4, r17
    4b56:	51 04       	cpc	r5, r1
    4b58:	94 f1       	brlt	.+100    	; 0x4bbe <ETD+0x1dc>
    4b5a:	8d 89       	ldd	r24, Y+21	; 0x15
    4b5c:	81 30       	cpi	r24, 0x01	; 1
    4b5e:	79 f5       	brne	.+94     	; 0x4bbe <ETD+0x1dc>
  {
      for(i=0;i<smoking_table_count[(Mode * 2) + Gender];i++)
    4b60:	f3 01       	movw	r30, r6
    4b62:	e8 51       	subi	r30, 0x18	; 24
    4b64:	fe 4f       	sbci	r31, 0xFE	; 254
    4b66:	80 81       	ld	r24, Z
    4b68:	e8 2e       	mov	r14, r24
    4b6a:	ff 24       	eor	r15, r15
    4b6c:	a0 e0       	ldi	r26, 0x00	; 0
    4b6e:	b0 e0       	ldi	r27, 0x00	; 0
      {
        if( y < pgm_read_byte(&normal_smoking_male[smoking_table_offset[(Mode * 2) + Gender]+i][0]) )
    4b70:	83 01       	movw	r16, r6
    4b72:	00 52       	subi	r16, 0x20	; 32
    4b74:	1e 4f       	sbci	r17, 0xFE	; 254
    4b76:	20 c0       	rjmp	.+64     	; 0x4bb8 <ETD+0x1d6>
    4b78:	f8 01       	movw	r30, r16
    4b7a:	80 81       	ld	r24, Z
    4b7c:	9d 01       	movw	r18, r26
    4b7e:	28 0f       	add	r18, r24
    4b80:	31 1d       	adc	r19, r1
    4b82:	22 0f       	add	r18, r18
    4b84:	33 1f       	adc	r19, r19
    4b86:	f9 01       	movw	r30, r18
    4b88:	ec 5c       	subi	r30, 0xCC	; 204
    4b8a:	fb 4f       	sbci	r31, 0xFB	; 251
    4b8c:	e4 91       	lpm	r30, Z+
    4b8e:	8e 2f       	mov	r24, r30
    4b90:	90 e0       	ldi	r25, 0x00	; 0
    4b92:	48 16       	cp	r4, r24
    4b94:	59 06       	cpc	r5, r25
    4b96:	7c f4       	brge	.+30     	; 0x4bb6 <ETD+0x1d4>
        {
          days -= (uint16_t)(pgm_read_byte(&normal_smoking_male[smoking_table_offset[(Mode * 2) + Gender]+i][1])*160);
    4b98:	2b 5c       	subi	r18, 0xCB	; 203
    4b9a:	3b 4f       	sbci	r19, 0xFB	; 251
    4b9c:	f9 01       	movw	r30, r18
    4b9e:	84 91       	lpm	r24, Z+
    4ba0:	20 ea       	ldi	r18, 0xA0	; 160
    4ba2:	82 9f       	mul	r24, r18
    4ba4:	c0 01       	movw	r24, r0
    4ba6:	11 24       	eor	r1, r1
    4ba8:	a0 e0       	ldi	r26, 0x00	; 0
    4baa:	b0 e0       	ldi	r27, 0x00	; 0
    4bac:	48 1b       	sub	r20, r24
    4bae:	59 0b       	sbc	r21, r25
    4bb0:	6a 0b       	sbc	r22, r26
    4bb2:	7b 0b       	sbc	r23, r27
    4bb4:	04 c0       	rjmp	.+8      	; 0x4bbe <ETD+0x1dc>
          }
  	  }
  }
  if((y>=25)&&(Smoker == DC_smoker))
  {
      for(i=0;i<smoking_table_count[(Mode * 2) + Gender];i++)
    4bb6:	11 96       	adiw	r26, 0x01	; 1
    4bb8:	ae 15       	cp	r26, r14
    4bba:	bf 05       	cpc	r27, r15
    4bbc:	ec f2       	brlt	.-70     	; 0x4b78 <ETD+0x196>
          days -= (uint16_t)(pgm_read_byte(&normal_smoking_male[smoking_table_offset[(Mode * 2) + Gender]+i][1])*160);
          break;
        }
      }
  }
  if (days < 0) return 0;
    4bbe:	77 ff       	sbrs	r23, 7
    4bc0:	05 c0       	rjmp	.+10     	; 0x4bcc <ETD+0x1ea>
    4bc2:	20 e0       	ldi	r18, 0x00	; 0
    4bc4:	30 e0       	ldi	r19, 0x00	; 0
    4bc6:	40 e0       	ldi	r20, 0x00	; 0
    4bc8:	50 e0       	ldi	r21, 0x00	; 0
    4bca:	0a c0       	rjmp	.+20     	; 0x4be0 <ETD+0x1fe>
  days *= 144;	//Convert Days into Minutes left.
  return days;
    4bcc:	cb 01       	movw	r24, r22
    4bce:	ba 01       	movw	r22, r20
    4bd0:	20 e9       	ldi	r18, 0x90	; 144
    4bd2:	30 e0       	ldi	r19, 0x00	; 0
    4bd4:	40 e0       	ldi	r20, 0x00	; 0
    4bd6:	50 e0       	ldi	r21, 0x00	; 0
    4bd8:	0e 94 bf 39 	call	0x737e	; 0x737e <__mulsi3>
    4bdc:	9b 01       	movw	r18, r22
    4bde:	ac 01       	movw	r20, r24
}
    4be0:	b9 01       	movw	r22, r18
    4be2:	ca 01       	movw	r24, r20
    4be4:	20 96       	adiw	r28, 0x00	; 0
    4be6:	e2 e1       	ldi	r30, 0x12	; 18
    4be8:	0c 94 6a 3a 	jmp	0x74d4	; 0x74d4 <__epilogue_restores__>

00004bec <load_raw_etd>:
  uint8_t EEMEM EE_SET_MIN = 05;
  uint8_t EEMEM EE_SET_SEC = 25;
*/
uint8_t eeprom_data[17];
uint32_t load_raw_etd(void)
{
    4bec:	8f 92       	push	r8
    4bee:	af 92       	push	r10
    4bf0:	cf 92       	push	r12
    4bf2:	ef 92       	push	r14
    4bf4:	0f 93       	push	r16
    4bf6:	cf 93       	push	r28
    4bf8:	df 93       	push	r29
    4bfa:	c0 e0       	ldi	r28, 0x00	; 0
    4bfc:	d0 e0       	ldi	r29, 0x00	; 0
  uint8_t i;
  for(i=0;i<17;i++)
  	  eeprom_data[i] = eeprom_read_byte(&EE_DOB_MONTH + i);
    4bfe:	ce 01       	movw	r24, r28
    4c00:	88 5f       	subi	r24, 0xF8	; 248
    4c02:	9f 4f       	sbci	r25, 0xFF	; 255
    4c04:	0e 94 94 3a 	call	0x7528	; 0x7528 <__eerd_byte_m328p>
    4c08:	fe 01       	movw	r30, r28
    4c0a:	ec 5b       	subi	r30, 0xBC	; 188
    4c0c:	fc 4f       	sbci	r31, 0xFC	; 252
    4c0e:	80 83       	st	Z, r24
    4c10:	21 96       	adiw	r28, 0x01	; 1
*/
uint8_t eeprom_data[17];
uint32_t load_raw_etd(void)
{
  uint8_t i;
  for(i=0;i<17;i++)
    4c12:	c1 31       	cpi	r28, 0x11	; 17
    4c14:	d1 05       	cpc	r29, r1
    4c16:	99 f7       	brne	.-26     	; 0x4bfe <load_raw_etd+0x12>
  	  eeprom_data[i] = eeprom_read_byte(&EE_DOB_MONTH + i);
  dc_mode = eeprom_data[7];
    4c18:	a0 90 4b 03 	lds	r10, 0x034B
    4c1c:	a0 92 5b 03 	sts	0x035B, r10
  return ETD(  eeprom_data[0],eeprom_data[1],eeprom_data[2]+1900,
    4c20:	70 91 4d 03 	lds	r23, 0x034D
    4c24:	60 e0       	ldi	r22, 0x00	; 0
    4c26:	80 91 4e 03 	lds	r24, 0x034E
    4c2a:	90 e0       	ldi	r25, 0x00	; 0
    4c2c:	68 2b       	or	r22, r24
    4c2e:	79 2b       	or	r23, r25
    4c30:	50 91 4f 03 	lds	r21, 0x034F
    4c34:	40 e0       	ldi	r20, 0x00	; 0
    4c36:	80 91 50 03 	lds	r24, 0x0350
    4c3a:	90 e0       	ldi	r25, 0x00	; 0
    4c3c:	48 2b       	or	r20, r24
    4c3e:	59 2b       	or	r21, r25
    4c40:	80 91 4c 03 	lds	r24, 0x034C
    4c44:	0e 94 8b 24 	call	0x4916	; 0x4916 <BodyMassIndex>
    4c48:	88 2e       	mov	r8, r24
    4c4a:	00 d0       	rcall	.+0      	; 0x4c4c <load_raw_etd+0x60>
    4c4c:	00 d0       	rcall	.+0      	; 0x4c4e <load_raw_etd+0x62>
    4c4e:	ed b7       	in	r30, 0x3d	; 61
    4c50:	fe b7       	in	r31, 0x3e	; 62
    4c52:	31 96       	adiw	r30, 0x01	; 1
    4c54:	40 91 46 03 	lds	r20, 0x0346
    4c58:	44 59       	subi	r20, 0x94	; 148
    4c5a:	90 91 49 03 	lds	r25, 0x0349
    4c5e:	94 59       	subi	r25, 0x94	; 148
    4c60:	80 91 51 03 	lds	r24, 0x0351
    4c64:	ad b7       	in	r26, 0x3d	; 61
    4c66:	be b7       	in	r27, 0x3e	; 62
    4c68:	11 96       	adiw	r26, 0x01	; 1
    4c6a:	8c 93       	st	X, r24
    4c6c:	80 91 52 03 	lds	r24, 0x0352
    4c70:	81 83       	std	Z+1, r24	; 0x01
    4c72:	80 91 53 03 	lds	r24, 0x0353
    4c76:	82 83       	std	Z+2, r24	; 0x02
    4c78:	80 91 54 03 	lds	r24, 0x0354
    4c7c:	83 83       	std	Z+3, r24	; 0x03
    4c7e:	80 91 44 03 	lds	r24, 0x0344
    4c82:	60 91 45 03 	lds	r22, 0x0345
    4c86:	20 91 47 03 	lds	r18, 0x0347
    4c8a:	00 91 48 03 	lds	r16, 0x0348
    4c8e:	e9 2e       	mov	r14, r25
    4c90:	c0 90 4a 03 	lds	r12, 0x034A
    4c94:	0e 94 f1 24 	call	0x49e2	; 0x49e2 <ETD>
    4c98:	0f 90       	pop	r0
    4c9a:	0f 90       	pop	r0
    4c9c:	0f 90       	pop	r0
    4c9e:	0f 90       	pop	r0
                              BodyMassIndex( eeprom_read_byte(&EE_BMI_UNIT), eeprom_read_word(&EE_BMI_HEIGHT), eeprom_read_word(&EE_BMI_WEIGHT)),
                              eeprom_read_byte(&EE_SMOKER),
                              eeprom_read_byte(&EE_SET_HOUR),
                              eeprom_read_byte(&EE_SET_MIN),
                              eeprom_read_byte(&EE_SET_SEC));*/
}
    4ca0:	df 91       	pop	r29
    4ca2:	cf 91       	pop	r28
    4ca4:	0f 91       	pop	r16
    4ca6:	ef 90       	pop	r14
    4ca8:	cf 90       	pop	r12
    4caa:	af 90       	pop	r10
    4cac:	8f 90       	pop	r8
    4cae:	08 95       	ret

00004cb0 <calc_death_date>:
  else
  	  reaper_tow_rip=0;
}

void calc_death_date(void)
{
    4cb0:	df 92       	push	r13
    4cb2:	ef 92       	push	r14
    4cb4:	ff 92       	push	r15
    4cb6:	0f 93       	push	r16
    4cb8:	1f 93       	push	r17
	uint32_t timeleft;
	death_m = eeprom_read_byte(&EE_SET_MONTH);
    4cba:	8b e0       	ldi	r24, 0x0B	; 11
    4cbc:	90 e0       	ldi	r25, 0x00	; 0
    4cbe:	0e 94 94 3a 	call	0x7528	; 0x7528 <__eerd_byte_m328p>
    4cc2:	80 93 56 03 	sts	0x0356, r24
	death_d = eeprom_read_byte(&EE_SET_DAY);
    4cc6:	8c e0       	ldi	r24, 0x0C	; 12
    4cc8:	90 e0       	ldi	r25, 0x00	; 0
    4cca:	0e 94 94 3a 	call	0x7528	; 0x7528 <__eerd_byte_m328p>
    4cce:	80 93 42 03 	sts	0x0342, r24
	death_y = eeprom_read_byte(&EE_SET_YEAR);
    4cd2:	8d e0       	ldi	r24, 0x0D	; 13
    4cd4:	90 e0       	ldi	r25, 0x00	; 0
    4cd6:	0e 94 94 3a 	call	0x7528	; 0x7528 <__eerd_byte_m328p>
    4cda:	80 93 55 03 	sts	0x0355, r24
	timeleft = load_raw_etd();
    4cde:	0e 94 f6 25 	call	0x4bec	; 0x4bec <load_raw_etd>
    4ce2:	7b 01       	movw	r14, r22
    4ce4:	8c 01       	movw	r16, r24
        death_d++;  
        if ((death_d > 31) ||
               ((death_d == 31) && ((death_m == 4)||(death_m == 6)||(death_m == 9)||(death_m == 11))) ||
               ((death_d == 30) && (death_m == 2)) ||
               ((death_d == 29) && (death_m == 2) && !leapyear(1900+death_y))) {
                 death_d = 1;
    4ce6:	dd 24       	eor	r13, r13
    4ce8:	d3 94       	inc	r13
    4cea:	50 c0       	rjmp	.+160    	; 0x4d8c <calc_death_date+0xdc>
	timeleft = load_raw_etd();
	
	while (timeleft >= 1440)
      {
        timeleft -= 1440;
        death_d++;  
    4cec:	80 91 42 03 	lds	r24, 0x0342
    4cf0:	8f 5f       	subi	r24, 0xFF	; 255
    4cf2:	80 93 42 03 	sts	0x0342, r24
        if ((death_d > 31) ||
    4cf6:	80 91 42 03 	lds	r24, 0x0342
    4cfa:	80 32       	cpi	r24, 0x20	; 32
    4cfc:	68 f5       	brcc	.+90     	; 0x4d58 <calc_death_date+0xa8>
    4cfe:	80 91 42 03 	lds	r24, 0x0342
    4d02:	8f 31       	cpi	r24, 0x1F	; 31
    4d04:	81 f4       	brne	.+32     	; 0x4d26 <calc_death_date+0x76>
    4d06:	80 91 56 03 	lds	r24, 0x0356
    4d0a:	84 30       	cpi	r24, 0x04	; 4
    4d0c:	29 f1       	breq	.+74     	; 0x4d58 <calc_death_date+0xa8>
    4d0e:	80 91 56 03 	lds	r24, 0x0356
    4d12:	86 30       	cpi	r24, 0x06	; 6
    4d14:	09 f1       	breq	.+66     	; 0x4d58 <calc_death_date+0xa8>
    4d16:	80 91 56 03 	lds	r24, 0x0356
    4d1a:	89 30       	cpi	r24, 0x09	; 9
    4d1c:	e9 f0       	breq	.+58     	; 0x4d58 <calc_death_date+0xa8>
    4d1e:	80 91 56 03 	lds	r24, 0x0356
    4d22:	8b 30       	cpi	r24, 0x0B	; 11
    4d24:	c9 f0       	breq	.+50     	; 0x4d58 <calc_death_date+0xa8>
    4d26:	80 91 42 03 	lds	r24, 0x0342
    4d2a:	8e 31       	cpi	r24, 0x1E	; 30
    4d2c:	21 f4       	brne	.+8      	; 0x4d36 <calc_death_date+0x86>
    4d2e:	80 91 56 03 	lds	r24, 0x0356
    4d32:	82 30       	cpi	r24, 0x02	; 2
    4d34:	89 f0       	breq	.+34     	; 0x4d58 <calc_death_date+0xa8>
    4d36:	80 91 42 03 	lds	r24, 0x0342
    4d3a:	8d 31       	cpi	r24, 0x1D	; 29
    4d3c:	a1 f4       	brne	.+40     	; 0x4d66 <calc_death_date+0xb6>
    4d3e:	80 91 56 03 	lds	r24, 0x0356
    4d42:	82 30       	cpi	r24, 0x02	; 2
    4d44:	81 f4       	brne	.+32     	; 0x4d66 <calc_death_date+0xb6>
    4d46:	80 91 55 03 	lds	r24, 0x0355
    4d4a:	90 e0       	ldi	r25, 0x00	; 0
    4d4c:	84 59       	subi	r24, 0x94	; 148
    4d4e:	98 4f       	sbci	r25, 0xF8	; 248
    4d50:	0e 94 0f 2e 	call	0x5c1e	; 0x5c1e <leapyear>
    4d54:	88 23       	and	r24, r24
    4d56:	39 f4       	brne	.+14     	; 0x4d66 <calc_death_date+0xb6>
               ((death_d == 31) && ((death_m == 4)||(death_m == 6)||(death_m == 9)||(death_m == 11))) ||
               ((death_d == 30) && (death_m == 2)) ||
               ((death_d == 29) && (death_m == 2) && !leapyear(1900+death_y))) {
                 death_d = 1;
    4d58:	d0 92 42 03 	sts	0x0342, r13
                 death_m++;
    4d5c:	80 91 56 03 	lds	r24, 0x0356
    4d60:	8f 5f       	subi	r24, 0xFF	; 255
    4d62:	80 93 56 03 	sts	0x0356, r24
            }
            if(death_m > 12)
    4d66:	80 91 56 03 	lds	r24, 0x0356
    4d6a:	8d 30       	cpi	r24, 0x0D	; 13
    4d6c:	38 f0       	brcs	.+14     	; 0x4d7c <calc_death_date+0xcc>
            {
              death_m=1;
    4d6e:	d0 92 56 03 	sts	0x0356, r13
              death_y++;
    4d72:	80 91 55 03 	lds	r24, 0x0355
    4d76:	8f 5f       	subi	r24, 0xFF	; 255
    4d78:	80 93 55 03 	sts	0x0355, r24
	death_y = eeprom_read_byte(&EE_SET_YEAR);
	timeleft = load_raw_etd();
	
	while (timeleft >= 1440)
      {
        timeleft -= 1440;
    4d7c:	80 e6       	ldi	r24, 0x60	; 96
    4d7e:	9a ef       	ldi	r25, 0xFA	; 250
    4d80:	af ef       	ldi	r26, 0xFF	; 255
    4d82:	bf ef       	ldi	r27, 0xFF	; 255
    4d84:	e8 0e       	add	r14, r24
    4d86:	f9 1e       	adc	r15, r25
    4d88:	0a 1f       	adc	r16, r26
    4d8a:	1b 1f       	adc	r17, r27
	death_m = eeprom_read_byte(&EE_SET_MONTH);
	death_d = eeprom_read_byte(&EE_SET_DAY);
	death_y = eeprom_read_byte(&EE_SET_YEAR);
	timeleft = load_raw_etd();
	
	while (timeleft >= 1440)
    4d8c:	90 ea       	ldi	r25, 0xA0	; 160
    4d8e:	e9 16       	cp	r14, r25
    4d90:	95 e0       	ldi	r25, 0x05	; 5
    4d92:	f9 06       	cpc	r15, r25
    4d94:	90 e0       	ldi	r25, 0x00	; 0
    4d96:	09 07       	cpc	r16, r25
    4d98:	90 e0       	ldi	r25, 0x00	; 0
    4d9a:	19 07       	cpc	r17, r25
    4d9c:	08 f0       	brcs	.+2      	; 0x4da0 <calc_death_date+0xf0>
    4d9e:	a6 cf       	rjmp	.-180    	; 0x4cec <calc_death_date+0x3c>
            {
              death_m=1;
              death_y++;
            } 
      }
}
    4da0:	1f 91       	pop	r17
    4da2:	0f 91       	pop	r16
    4da4:	ff 90       	pop	r15
    4da6:	ef 90       	pop	r14
    4da8:	df 90       	pop	r13
    4daa:	08 95       	ret

00004dac <load_etd>:
                              eeprom_read_byte(&EE_SET_MIN),
                              eeprom_read_byte(&EE_SET_SEC));*/
}

void load_etd(void)
{
    4dac:	a0 e0       	ldi	r26, 0x00	; 0
    4dae:	b0 e0       	ldi	r27, 0x00	; 0
    4db0:	ec ed       	ldi	r30, 0xDC	; 220
    4db2:	f6 e2       	ldi	r31, 0x26	; 38
    4db4:	0c 94 52 3a 	jmp	0x74a4	; 0x74a4 <__prologue_saves__+0x8>
  uint32_t result = load_raw_etd();
    4db8:	0e 94 f6 25 	call	0x4bec	; 0x4bec <load_raw_etd>
    4dbc:	5b 01       	movw	r10, r22
    4dbe:	6c 01       	movw	r12, r24
      result -= date_diff( eeprom_data[3],eeprom_data[4],eeprom_data[5]+1900,
    4dc0:	20 91 76 03 	lds	r18, 0x0376
    4dc4:	00 91 6b 03 	lds	r16, 0x036B
    4dc8:	90 91 65 03 	lds	r25, 0x0365
    4dcc:	40 91 49 03 	lds	r20, 0x0349
    4dd0:	44 59       	subi	r20, 0x94	; 148
    4dd2:	90 53       	subi	r25, 0x30	; 48
    4dd4:	80 91 47 03 	lds	r24, 0x0347
    4dd8:	60 91 48 03 	lds	r22, 0x0348
    4ddc:	e9 2e       	mov	r14, r25
    4dde:	0e 94 84 23 	call	0x4708	; 0x4708 <date_diff>
    4de2:	9b 01       	movw	r18, r22
    4de4:	ac 01       	movw	r20, r24
    4de6:	80 91 5b 03 	lds	r24, 0x035B
    4dea:	83 30       	cpi	r24, 0x03	; 3
    4dec:	31 f0       	breq	.+12     	; 0x4dfa <load_etd+0x4e>
    4dee:	f1 e0       	ldi	r31, 0x01	; 1
    4df0:	ef 2e       	mov	r14, r31
    4df2:	f1 2c       	mov	r15, r1
    4df4:	01 2d       	mov	r16, r1
    4df6:	11 2d       	mov	r17, r1
    4df8:	05 c0       	rjmp	.+10     	; 0x4e04 <load_etd+0x58>
    4dfa:	e4 e0       	ldi	r30, 0x04	; 4
    4dfc:	ee 2e       	mov	r14, r30
    4dfe:	f1 2c       	mov	r15, r1
    4e00:	01 2d       	mov	r16, r1
    4e02:	11 2d       	mov	r17, r1
      	  					/*eeprom_read_byte(&EE_SET_MONTH),
                           eeprom_read_byte(&EE_SET_DAY),
                           eeprom_read_byte(&EE_SET_YEAR)+1900, */
                           date_m,date_d,date_y+2000) * 1440l * ((dc_mode == DC_mode_sadistic)?4:1);
  result -= (time_h * 60) * ((dc_mode == DC_mode_sadistic)?4:1);
    4e04:	60 90 62 03 	lds	r6, 0x0362
    4e08:	80 91 5b 03 	lds	r24, 0x035B
    4e0c:	83 30       	cpi	r24, 0x03	; 3
    4e0e:	21 f0       	breq	.+8      	; 0x4e18 <load_etd+0x6c>
    4e10:	71 e0       	ldi	r23, 0x01	; 1
    4e12:	87 2e       	mov	r8, r23
    4e14:	91 2c       	mov	r9, r1
    4e16:	03 c0       	rjmp	.+6      	; 0x4e1e <load_etd+0x72>
    4e18:	64 e0       	ldi	r22, 0x04	; 4
    4e1a:	86 2e       	mov	r8, r22
    4e1c:	91 2c       	mov	r9, r1
  result -= (time_m) * ((dc_mode == DC_mode_sadistic)?4:1);
    4e1e:	70 90 6c 03 	lds	r7, 0x036C
    4e22:	80 91 5b 03 	lds	r24, 0x035B
    4e26:	83 30       	cpi	r24, 0x03	; 3
    4e28:	19 f0       	breq	.+6      	; 0x4e30 <load_etd+0x84>
    4e2a:	c1 e0       	ldi	r28, 0x01	; 1
    4e2c:	d0 e0       	ldi	r29, 0x00	; 0
    4e2e:	02 c0       	rjmp	.+4      	; 0x4e34 <load_etd+0x88>
    4e30:	c4 e0       	ldi	r28, 0x04	; 4
    4e32:	d0 e0       	ldi	r29, 0x00	; 0
}

void load_etd(void)
{
  uint32_t result = load_raw_etd();
      result -= date_diff( eeprom_data[3],eeprom_data[4],eeprom_data[5]+1900,
    4e34:	ca 01       	movw	r24, r20
    4e36:	b9 01       	movw	r22, r18
    4e38:	20 ea       	ldi	r18, 0xA0	; 160
    4e3a:	35 e0       	ldi	r19, 0x05	; 5
    4e3c:	40 e0       	ldi	r20, 0x00	; 0
    4e3e:	50 e0       	ldi	r21, 0x00	; 0
    4e40:	0e 94 bf 39 	call	0x737e	; 0x737e <__mulsi3>
    4e44:	a8 01       	movw	r20, r16
    4e46:	97 01       	movw	r18, r14
    4e48:	0e 94 bf 39 	call	0x737e	; 0x737e <__mulsi3>
    4e4c:	a6 1a       	sub	r10, r22
    4e4e:	b7 0a       	sbc	r11, r23
    4e50:	c8 0a       	sbc	r12, r24
    4e52:	d9 0a       	sbc	r13, r25
      	  					/*eeprom_read_byte(&EE_SET_MONTH),
                           eeprom_read_byte(&EE_SET_DAY),
                           eeprom_read_byte(&EE_SET_YEAR)+1900, */
                           date_m,date_d,date_y+2000) * 1440l * ((dc_mode == DC_mode_sadistic)?4:1);
  result -= (time_h * 60) * ((dc_mode == DC_mode_sadistic)?4:1);
    4e54:	8c e3       	ldi	r24, 0x3C	; 60
    4e56:	68 9e       	mul	r6, r24
    4e58:	c0 01       	movw	r24, r0
    4e5a:	11 24       	eor	r1, r1
    4e5c:	9c 01       	movw	r18, r24
    4e5e:	28 9d       	mul	r18, r8
    4e60:	c0 01       	movw	r24, r0
    4e62:	29 9d       	mul	r18, r9
    4e64:	90 0d       	add	r25, r0
    4e66:	38 9d       	mul	r19, r8
    4e68:	90 0d       	add	r25, r0
    4e6a:	11 24       	eor	r1, r1
    4e6c:	aa 27       	eor	r26, r26
    4e6e:	97 fd       	sbrc	r25, 7
    4e70:	a0 95       	com	r26
    4e72:	ba 2f       	mov	r27, r26
    4e74:	a8 1a       	sub	r10, r24
    4e76:	b9 0a       	sbc	r11, r25
    4e78:	ca 0a       	sbc	r12, r26
    4e7a:	db 0a       	sbc	r13, r27
  result -= (time_m) * ((dc_mode == DC_mode_sadistic)?4:1);
  minutes_left = (int32_t)result;
    4e7c:	87 2d       	mov	r24, r7
    4e7e:	90 e0       	ldi	r25, 0x00	; 0
    4e80:	9c 01       	movw	r18, r24
    4e82:	c2 9f       	mul	r28, r18
    4e84:	c0 01       	movw	r24, r0
    4e86:	c3 9f       	mul	r28, r19
    4e88:	90 0d       	add	r25, r0
    4e8a:	d2 9f       	mul	r29, r18
    4e8c:	90 0d       	add	r25, r0
    4e8e:	11 24       	eor	r1, r1
    4e90:	aa 27       	eor	r26, r26
    4e92:	97 fd       	sbrc	r25, 7
    4e94:	a0 95       	com	r26
    4e96:	ba 2f       	mov	r27, r26
    4e98:	a8 1a       	sub	r10, r24
    4e9a:	b9 0a       	sbc	r11, r25
    4e9c:	ca 0a       	sbc	r12, r26
    4e9e:	db 0a       	sbc	r13, r27
    4ea0:	a0 92 59 02 	sts	0x0259, r10
    4ea4:	b0 92 5a 02 	sts	0x025A, r11
    4ea8:	c0 92 5b 02 	sts	0x025B, r12
    4eac:	d0 92 5c 02 	sts	0x025C, r13
  calc_death_date();
    4eb0:	0e 94 58 26 	call	0x4cb0	; 0x4cb0 <calc_death_date>
  if(death_y < (date_y + 100))	//Bug fix for the rare cases where Minutes left is inadvertantly positive, when it should not be.
    4eb4:	80 91 65 03 	lds	r24, 0x0365
    4eb8:	20 91 55 03 	lds	r18, 0x0355
    4ebc:	90 e0       	ldi	r25, 0x00	; 0
    4ebe:	8d 59       	subi	r24, 0x9D	; 157
    4ec0:	9f 4f       	sbci	r25, 0xFF	; 255
    4ec2:	30 e0       	ldi	r19, 0x00	; 0
    4ec4:	82 17       	cp	r24, r18
    4ec6:	93 07       	cpc	r25, r19
    4ec8:	44 f5       	brge	.+80     	; 0x4f1a <load_etd+0x16e>
  	  minutes_left = 0;
  else if((death_y == (date_y + 100)) && (death_m < date_m))
    4eca:	20 91 55 03 	lds	r18, 0x0355
    4ece:	80 91 65 03 	lds	r24, 0x0365
    4ed2:	30 e0       	ldi	r19, 0x00	; 0
    4ed4:	90 e0       	ldi	r25, 0x00	; 0
    4ed6:	8c 59       	subi	r24, 0x9C	; 156
    4ed8:	9f 4f       	sbci	r25, 0xFF	; 255
    4eda:	28 17       	cp	r18, r24
    4edc:	39 07       	cpc	r19, r25
    4ede:	31 f4       	brne	.+12     	; 0x4eec <load_etd+0x140>
    4ee0:	90 91 56 03 	lds	r25, 0x0356
    4ee4:	80 91 76 03 	lds	r24, 0x0376
    4ee8:	98 17       	cp	r25, r24
    4eea:	b8 f0       	brcs	.+46     	; 0x4f1a <load_etd+0x16e>
  	  minutes_left = 0;
  else if ((death_y == (date_y + 100)) && (death_m == date_m) && (death_d < date_d))
    4eec:	20 91 55 03 	lds	r18, 0x0355
    4ef0:	80 91 65 03 	lds	r24, 0x0365
    4ef4:	30 e0       	ldi	r19, 0x00	; 0
    4ef6:	90 e0       	ldi	r25, 0x00	; 0
    4ef8:	8c 59       	subi	r24, 0x9C	; 156
    4efa:	9f 4f       	sbci	r25, 0xFF	; 255
    4efc:	28 17       	cp	r18, r24
    4efe:	39 07       	cpc	r19, r25
    4f00:	a1 f4       	brne	.+40     	; 0x4f2a <load_etd+0x17e>
    4f02:	90 91 56 03 	lds	r25, 0x0356
    4f06:	80 91 76 03 	lds	r24, 0x0376
    4f0a:	98 17       	cp	r25, r24
    4f0c:	71 f4       	brne	.+28     	; 0x4f2a <load_etd+0x17e>
    4f0e:	90 91 42 03 	lds	r25, 0x0342
    4f12:	80 91 6b 03 	lds	r24, 0x036B
    4f16:	98 17       	cp	r25, r24
    4f18:	40 f4       	brcc	.+16     	; 0x4f2a <load_etd+0x17e>
  	  minutes_left = 0;
    4f1a:	10 92 59 02 	sts	0x0259, r1
    4f1e:	10 92 5a 02 	sts	0x025A, r1
    4f22:	10 92 5b 02 	sts	0x025B, r1
    4f26:	10 92 5c 02 	sts	0x025C, r1
  if(minutes_left <= 0)
    4f2a:	80 91 59 02 	lds	r24, 0x0259
    4f2e:	90 91 5a 02 	lds	r25, 0x025A
    4f32:	a0 91 5b 02 	lds	r26, 0x025B
    4f36:	b0 91 5c 02 	lds	r27, 0x025C
    4f3a:	18 16       	cp	r1, r24
    4f3c:	19 06       	cpc	r1, r25
    4f3e:	1a 06       	cpc	r1, r26
    4f40:	1b 06       	cpc	r1, r27
    4f42:	24 f0       	brlt	.+8      	; 0x4f4c <load_etd+0x1a0>
  	  reaper_tow_rip=1;
    4f44:	81 e0       	ldi	r24, 0x01	; 1
    4f46:	80 93 43 03 	sts	0x0343, r24
    4f4a:	02 c0       	rjmp	.+4      	; 0x4f50 <load_etd+0x1a4>
  else
  	  reaper_tow_rip=0;
    4f4c:	10 92 43 03 	sts	0x0343, r1
}
    4f50:	cd b7       	in	r28, 0x3d	; 61
    4f52:	de b7       	in	r29, 0x3e	; 62
    4f54:	ee e0       	ldi	r30, 0x0E	; 14
    4f56:	0c 94 6e 3a 	jmp	0x74dc	; 0x74dc <__epilogue_restores__+0x8>

00004f5a <step>:
 }
}


void step(void) {
 switch (displaystyle) {
    4f5a:	80 91 69 03 	lds	r24, 0x0369
    4f5e:	84 3d       	cpi	r24, 0xD4	; 212
    4f60:	61 f0       	breq	.+24     	; 0x4f7a <step+0x20>
    4f62:	85 3d       	cpi	r24, 0xD5	; 213
    4f64:	28 f4       	brcc	.+10     	; 0x4f70 <step+0x16>
    4f66:	82 3d       	cpi	r24, 0xD2	; 210
    4f68:	59 f0       	breq	.+22     	; 0x4f80 <step+0x26>
    4f6a:	83 3d       	cpi	r24, 0xD3	; 211
    4f6c:	a1 f4       	brne	.+40     	; 0x4f96 <step+0x3c>
    4f6e:	0b c0       	rjmp	.+22     	; 0x4f86 <step+0x2c>
    4f70:	85 3d       	cpi	r24, 0xD5	; 213
    4f72:	61 f0       	breq	.+24     	; 0x4f8c <step+0x32>
    4f74:	86 3d       	cpi	r24, 0xD6	; 214
    4f76:	79 f4       	brne	.+30     	; 0x4f96 <step+0x3c>
    4f78:	0c c0       	rjmp	.+24     	; 0x4f92 <step+0x38>
#ifdef RATTCHRON
 case STYLE_RAT: step_rat();
    4f7a:	0e 94 ba 17 	call	0x2f74	; 0x2f74 <step_rat>
    4f7e:	08 95       	ret
                break;
#endif
#ifdef INTRUDERCHRON
 case STYLE_INT: step_int();
    4f80:	0e 94 72 13 	call	0x26e4	; 0x26e4 <step_int>
    4f84:	08 95       	ret
				break;
#endif
#ifdef SEVENCHRON
 case STYLE_SEV: step_sev(); 
    4f86:	0e 94 12 1a 	call	0x3424	; 0x3424 <step_sev>
    4f8a:	08 95       	ret
#ifdef XDALICHRON
 case STYLE_XDA: step_xda();
                 break;
#endif
#ifdef TSCHRON
 case STYLE_TS: step_ts();
    4f8c:	0e 94 cb 1b 	call	0x3796	; 0x3796 <step_ts>
    4f90:	08 95       	ret
                 break;
#endif
#ifdef DEATHCHRON
 case STYLE_DEATH: step_death(); break;
    4f92:	0e 94 13 0c 	call	0x1826	; 0x1826 <step_death>
    4f96:	08 95       	ret

00004f98 <initdisplay>:
 }
}


void initdisplay(uint8_t inverted) {
 switch (displaystyle) {
    4f98:	90 91 69 03 	lds	r25, 0x0369
    4f9c:	94 3d       	cpi	r25, 0xD4	; 212
    4f9e:	61 f0       	breq	.+24     	; 0x4fb8 <initdisplay+0x20>
    4fa0:	95 3d       	cpi	r25, 0xD5	; 213
    4fa2:	28 f4       	brcc	.+10     	; 0x4fae <initdisplay+0x16>
    4fa4:	92 3d       	cpi	r25, 0xD2	; 210
    4fa6:	59 f0       	breq	.+22     	; 0x4fbe <initdisplay+0x26>
    4fa8:	93 3d       	cpi	r25, 0xD3	; 211
    4faa:	a9 f4       	brne	.+42     	; 0x4fd6 <initdisplay+0x3e>
    4fac:	0b c0       	rjmp	.+22     	; 0x4fc4 <initdisplay+0x2c>
    4fae:	95 3d       	cpi	r25, 0xD5	; 213
    4fb0:	61 f0       	breq	.+24     	; 0x4fca <initdisplay+0x32>
    4fb2:	96 3d       	cpi	r25, 0xD6	; 214
    4fb4:	81 f4       	brne	.+32     	; 0x4fd6 <initdisplay+0x3e>
    4fb6:	0d c0       	rjmp	.+26     	; 0x4fd2 <initdisplay+0x3a>
#ifdef RATTCHRON
 case STYLE_RAT: initdisplay_rat(inverted);
    4fb8:	0e 94 83 19 	call	0x3306	; 0x3306 <initdisplay_rat>
    4fbc:	08 95       	ret
                break;
#endif
#ifdef INTRUDERCHRON
 case STYLE_INT: initdisplay_int(inverted);
    4fbe:	0e 94 7f 14 	call	0x28fe	; 0x28fe <initdisplay_int>
    4fc2:	08 95       	ret
				break;
#endif
#ifdef SEVENCHRON
 case STYLE_SEV: initdisplay_sev(inverted); 
    4fc4:	0e 94 98 1a 	call	0x3530	; 0x3530 <initdisplay_sev>
    4fc8:	08 95       	ret
#ifdef XDALICHRON
 case STYLE_XDA: initdisplay_xda(inverted);
                 break;
#endif
#ifdef TSCHRON
 case STYLE_TS: initdisplay_ts(inverted);
    4fca:	90 e0       	ldi	r25, 0x00	; 0
    4fcc:	0e 94 70 1d 	call	0x3ae0	; 0x3ae0 <initdisplay_ts>
    4fd0:	08 95       	ret
                break;
#endif
#ifdef DEATHCHRON
 case STYLE_DEATH: initdisplay_death(inverted); break;
    4fd2:	0e 94 a5 0a 	call	0x154a	; 0x154a <initdisplay_death>
    4fd6:	08 95       	ret

00004fd8 <initanim>:

extern volatile uint8_t displaystyle;
extern volatile uint8_t RotateFlag;
extern volatile uint8_t minute_changed, hour_changed;

void initanim(void){
    4fd8:	1f 93       	push	r17
                break;
#endif
#ifdef DEATHCHRON
 case STYLE_DEATH: initanim_death(); break;
#endif
 case STYLE_ROTATE: RotateFlag = ROTATEPERIOD;	//And fall into STYLE_RANDOM code next.
    4fda:	1f e0       	ldi	r17, 0x0F	; 15
extern volatile uint8_t displaystyle;
extern volatile uint8_t RotateFlag;
extern volatile uint8_t minute_changed, hour_changed;

void initanim(void){
 switch (displaystyle) {
    4fdc:	80 91 69 03 	lds	r24, 0x0369
    4fe0:	90 e0       	ldi	r25, 0x00	; 0
    4fe2:	fc 01       	movw	r30, r24
    4fe4:	e2 5d       	subi	r30, 0xD2	; 210
    4fe6:	f0 40       	sbci	r31, 0x00	; 0
    4fe8:	ea 30       	cpi	r30, 0x0A	; 10
    4fea:	f1 05       	cpc	r31, r1
    4fec:	50 f5       	brcc	.+84     	; 0x5042 <initanim+0x6a>
    4fee:	e4 5c       	subi	r30, 0xC4	; 196
    4ff0:	ff 4f       	sbci	r31, 0xFF	; 255
    4ff2:	0c 94 85 3a 	jmp	0x750a	; 0x750a <__tablejump2__>
#ifdef RATTCHRON
 case STYLE_RAT: initanim_rat();
    4ff6:	0e 94 e2 19 	call	0x33c4	; 0x33c4 <initanim_rat>
    4ffa:	23 c0       	rjmp	.+70     	; 0x5042 <initanim+0x6a>
                break;
#endif
#ifdef INTRUDERCHRON
 case STYLE_INT: initanim_int();
    4ffc:	0e 94 9b 14 	call	0x2936	; 0x2936 <initanim_int>
    5000:	20 c0       	rjmp	.+64     	; 0x5042 <initanim+0x6a>
				break;
#endif
#ifdef SEVENCHRON
 case STYLE_SEV: initanim_sev();
    5002:	0e 94 a2 1a 	call	0x3544	; 0x3544 <initanim_sev>
    5006:	1d c0       	rjmp	.+58     	; 0x5042 <initanim+0x6a>
#ifdef XDALICHRON
 case STYLE_XDA: initanim_xda();
                break;
#endif
#ifdef TSCHRON
 case STYLE_TS: initanim_ts();
    5008:	0e 94 85 1d 	call	0x3b0a	; 0x3b0a <initanim_ts>
    500c:	1a c0       	rjmp	.+52     	; 0x5042 <initanim+0x6a>
                break;
#endif
#ifdef DEATHCHRON
 case STYLE_DEATH: initanim_death(); break;
    500e:	0e 94 00 0d 	call	0x1a00	; 0x1a00 <initanim_death>
    5012:	17 c0       	rjmp	.+46     	; 0x5042 <initanim+0x6a>
#endif
 case STYLE_ROTATE: RotateFlag = ROTATEPERIOD;	//And fall into STYLE_RANDOM code next.
    5014:	10 93 75 03 	sts	0x0375, r17
 case STYLE_RANDOM: init_crand(); displaystyle = (STYLE_BASE + 1) + (crand(0) % (STYLE_RANDOM - (STYLE_BASE + 1))); initanim();
    5018:	0e 94 04 38 	call	0x7008	; 0x7008 <init_crand>
    501c:	80 e0       	ldi	r24, 0x00	; 0
    501e:	0e 94 0d 38 	call	0x701a	; 0x701a <crand>
    5022:	65 e0       	ldi	r22, 0x05	; 5
    5024:	70 e0       	ldi	r23, 0x00	; 0
    5026:	0e 94 ea 39 	call	0x73d4	; 0x73d4 <__udivmodhi4>
    502a:	8e 52       	subi	r24, 0x2E	; 46
    502c:	80 93 69 03 	sts	0x0369, r24
    5030:	d5 cf       	rjmp	.-86     	; 0x4fdc <initanim+0x4>
                break;
#ifdef DEATHCHRON
 case STYLE_DEATHCFG: initanim_deathcfg(); break;
    5032:	0e 94 6f 12 	call	0x24de	; 0x24de <initanim_deathcfg>
    5036:	05 c0       	rjmp	.+10     	; 0x5042 <initanim+0x6a>
#endif
#ifdef GPSENABLE
 case STYLE_GPS: initanim_GPS();
    5038:	0e 94 cc 12 	call	0x2598	; 0x2598 <initanim_GPS>
    503c:	02 c0       	rjmp	.+4      	; 0x5042 <initanim+0x6a>
               break;
#endif
 case STYLE_ABOUT: initanim_abo();
    503e:	0e 94 2b 05 	call	0xa56	; 0xa56 <initanim_abo>
                break;
 }
}
    5042:	1f 91       	pop	r17
    5044:	08 95       	ret

00005046 <drawdisplay>:
 case STYLE_DEATH: initdisplay_death(inverted); break;
#endif
 }
}

void drawdisplay(uint8_t inverted) {
    5046:	1f 93       	push	r17
    5048:	18 2f       	mov	r17, r24
 if (RotateFlag && ((minute_changed==1)||(hour_changed==1))) {
    504a:	80 91 75 03 	lds	r24, 0x0375
    504e:	88 23       	and	r24, r24
    5050:	81 f1       	breq	.+96     	; 0x50b2 <drawdisplay+0x6c>
    5052:	80 91 63 02 	lds	r24, 0x0263
    5056:	81 30       	cpi	r24, 0x01	; 1
    5058:	21 f0       	breq	.+8      	; 0x5062 <drawdisplay+0x1c>
    505a:	80 91 64 02 	lds	r24, 0x0264
    505e:	81 30       	cpi	r24, 0x01	; 1
    5060:	41 f5       	brne	.+80     	; 0x50b2 <drawdisplay+0x6c>
  if(minute_changed)
    5062:	80 91 63 02 	lds	r24, 0x0263
    5066:	88 23       	and	r24, r24
    5068:	19 f0       	breq	.+6      	; 0x5070 <drawdisplay+0x2a>
    minute_changed = 2;
    506a:	82 e0       	ldi	r24, 0x02	; 2
    506c:	80 93 63 02 	sts	0x0263, r24
  if(hour_changed)
    5070:	80 91 64 02 	lds	r24, 0x0264
    5074:	88 23       	and	r24, r24
    5076:	19 f0       	breq	.+6      	; 0x507e <drawdisplay+0x38>
  	hour_changed = 2;
    5078:	82 e0       	ldi	r24, 0x02	; 2
    507a:	80 93 64 02 	sts	0x0264, r24
  if (!--RotateFlag) {
    507e:	80 91 75 03 	lds	r24, 0x0375
    5082:	81 50       	subi	r24, 0x01	; 1
    5084:	80 93 75 03 	sts	0x0375, r24
    5088:	80 91 75 03 	lds	r24, 0x0375
    508c:	88 23       	and	r24, r24
    508e:	89 f4       	brne	.+34     	; 0x50b2 <drawdisplay+0x6c>
   RotateFlag = ROTATEPERIOD;
    5090:	8f e0       	ldi	r24, 0x0F	; 15
    5092:	80 93 75 03 	sts	0x0375, r24
   if (++displaystyle==STYLE_RANDOM) {displaystyle=STYLE_BASE+1;}
    5096:	80 91 69 03 	lds	r24, 0x0369
    509a:	8f 5f       	subi	r24, 0xFF	; 255
    509c:	80 93 69 03 	sts	0x0369, r24
    50a0:	80 91 69 03 	lds	r24, 0x0369
    50a4:	87 3d       	cpi	r24, 0xD7	; 215
    50a6:	19 f4       	brne	.+6      	; 0x50ae <drawdisplay+0x68>
    50a8:	82 ed       	ldi	r24, 0xD2	; 210
    50aa:	80 93 69 03 	sts	0x0369, r24
   initanim();
    50ae:	0e 94 ec 27 	call	0x4fd8	; 0x4fd8 <initanim>
  }
 }
 switch (displaystyle) {
    50b2:	80 91 69 03 	lds	r24, 0x0369
    50b6:	84 3d       	cpi	r24, 0xD4	; 212
    50b8:	61 f0       	breq	.+24     	; 0x50d2 <drawdisplay+0x8c>
    50ba:	85 3d       	cpi	r24, 0xD5	; 213
    50bc:	28 f4       	brcc	.+10     	; 0x50c8 <drawdisplay+0x82>
    50be:	82 3d       	cpi	r24, 0xD2	; 210
    50c0:	61 f0       	breq	.+24     	; 0x50da <drawdisplay+0x94>
    50c2:	83 3d       	cpi	r24, 0xD3	; 211
    50c4:	d1 f4       	brne	.+52     	; 0x50fa <drawdisplay+0xb4>
    50c6:	0d c0       	rjmp	.+26     	; 0x50e2 <drawdisplay+0x9c>
    50c8:	85 3d       	cpi	r24, 0xD5	; 213
    50ca:	79 f0       	breq	.+30     	; 0x50ea <drawdisplay+0xa4>
    50cc:	86 3d       	cpi	r24, 0xD6	; 214
    50ce:	a9 f4       	brne	.+42     	; 0x50fa <drawdisplay+0xb4>
    50d0:	11 c0       	rjmp	.+34     	; 0x50f4 <drawdisplay+0xae>
#ifdef RATTCHRON
 case STYLE_RAT: drawdisplay_rat(inverted);
    50d2:	81 2f       	mov	r24, r17
    50d4:	0e 94 0b 17 	call	0x2e16	; 0x2e16 <drawdisplay_rat>
    50d8:	10 c0       	rjmp	.+32     	; 0x50fa <drawdisplay+0xb4>
                break;
#endif
#ifdef INTRUDERCHRON
 case STYLE_INT: drawdisplay_int(inverted);
    50da:	81 2f       	mov	r24, r17
    50dc:	0e 94 67 14 	call	0x28ce	; 0x28ce <drawdisplay_int>
    50e0:	0c c0       	rjmp	.+24     	; 0x50fa <drawdisplay+0xb4>
				break;
#endif
#ifdef SEVENCHRON
 case STYLE_SEV: drawdisplay_sev(inverted); 
    50e2:	81 2f       	mov	r24, r17
    50e4:	0e 94 fb 1a 	call	0x35f6	; 0x35f6 <drawdisplay_sev>
    50e8:	08 c0       	rjmp	.+16     	; 0x50fa <drawdisplay+0xb4>
#ifdef XDALICHRON
 case STYLE_XDA: drawdisplay_xda(inverted);
                 break;
#endif
#ifdef TSCHRON
 case STYLE_TS: drawdisplay_ts(inverted);
    50ea:	81 2f       	mov	r24, r17
    50ec:	90 e0       	ldi	r25, 0x00	; 0
    50ee:	0e 94 08 1d 	call	0x3a10	; 0x3a10 <drawdisplay_ts>
    50f2:	03 c0       	rjmp	.+6      	; 0x50fa <drawdisplay+0xb4>
                 break;
#endif
#ifdef DEATHCHRON
 case STYLE_DEATH: drawdisplay_death(inverted); break;
    50f4:	81 2f       	mov	r24, r17
    50f6:	0e 94 4d 0b 	call	0x169a	; 0x169a <drawdisplay_death>
#endif
 }
}
    50fa:	1f 91       	pop	r17
    50fc:	08 95       	ret

000050fe <get_font>:
	}
}

uint8_t get_font(uint16_t addr)
{
	return eeprom_read_byte(&Font5x7[addr]);
    50fe:	8e 59       	subi	r24, 0x9E	; 158
    5100:	9f 4f       	sbci	r25, 0xFF	; 255
    5102:	0e 94 94 3a 	call	0x7528	; 0x7528 <__eerd_byte_m328p>
}
    5106:	08 95       	ret

00005108 <glcdWriteCharGr>:
	//cbi(GLCD_Control, GLCD_CS2);
	glcdStartLine(0);
}

void glcdWriteCharGr(u08 grCharIdx, uint8_t inverted)
{
    5108:	ff 92       	push	r15
    510a:	0f 93       	push	r16
    510c:	1f 93       	push	r17
    510e:	cf 93       	push	r28
    5110:	df 93       	push	r29
    5112:	48 2f       	mov	r20, r24
    5114:	f6 2e       	mov	r15, r22
    5116:	30 e0       	ldi	r19, 0x00	; 0
    5118:	20 e0       	ldi	r18, 0x00	; 0
    511a:	07 c0       	rjmp	.+14     	; 0x512a <glcdWriteCharGr+0x22>
	{
		// add this graphic's length to the startIdx
		// to get the startIdx of the next one
		// 2010-03-03 BUG Dataman/CRJONES There's a bug here:  Have to add 1 for the byte-cout.
		// grStartIdx += pgm_read_byte(FontGr+grStartIdx);
		grStartIdx += pgm_read_byte(&FontGr[grStartIdx])+1;
    511c:	81 59       	subi	r24, 0x91	; 145
    511e:	9b 4f       	sbci	r25, 0xFB	; 251
    5120:	fc 01       	movw	r30, r24
    5122:	84 91       	lpm	r24, Z+
    5124:	8f 5f       	subi	r24, 0xFF	; 255
    5126:	28 0f       	add	r18, r24
	u08 grLength;
	u08 grStartIdx = 0;
        u08 line;

	// get starting index of graphic bitmap
	for(idx=0; idx<grCharIdx; idx++)
    5128:	3f 5f       	subi	r19, 0xFF	; 255
    512a:	82 2f       	mov	r24, r18
    512c:	90 e0       	ldi	r25, 0x00	; 0
    512e:	34 17       	cp	r19, r20
    5130:	a8 f3       	brcs	.-22     	; 0x511c <glcdWriteCharGr+0x14>
		// 2010-03-03 BUG Dataman/CRJONES There's a bug here:  Have to add 1 for the byte-cout.
		// grStartIdx += pgm_read_byte(FontGr+grStartIdx);
		grStartIdx += pgm_read_byte(&FontGr[grStartIdx])+1;
		
	}
	grLength = pgm_read_byte(&FontGr[grStartIdx]);
    5132:	fc 01       	movw	r30, r24
    5134:	e1 59       	subi	r30, 0x91	; 145
    5136:	fb 4f       	sbci	r31, 0xFB	; 251
    5138:	04 91       	lpm	r16, Z+
    513a:	ec 01       	movw	r28, r24
    513c:	c0 59       	subi	r28, 0x90	; 144
    513e:	db 4f       	sbci	r29, 0xFB	; 251
    5140:	10 e0       	ldi	r17, 0x00	; 0
    5142:	0a c0       	rjmp	.+20     	; 0x5158 <glcdWriteCharGr+0x50>

	// write the lines of the desired graphic to the display
	for(idx=0; idx<grLength; idx++)
	{
		// write the line
                line = pgm_read_byte(&FontGr[(grStartIdx+1)+idx]);
    5144:	fe 01       	movw	r30, r28
    5146:	84 91       	lpm	r24, Z+
                if (inverted == INVERTED) line = 255-line;
    5148:	f1 e0       	ldi	r31, 0x01	; 1
    514a:	ff 16       	cp	r15, r31
    514c:	09 f4       	brne	.+2      	; 0x5150 <glcdWriteCharGr+0x48>
    514e:	80 95       	com	r24
		glcdDataWrite(line);
    5150:	0e 94 43 2c 	call	0x5886	; 0x5886 <glcdDataWrite>
		
	}
	grLength = pgm_read_byte(&FontGr[grStartIdx]);

	// write the lines of the desired graphic to the display
	for(idx=0; idx<grLength; idx++)
    5154:	1f 5f       	subi	r17, 0xFF	; 255
    5156:	21 96       	adiw	r28, 0x01	; 1
    5158:	10 17       	cp	r17, r16
    515a:	a0 f3       	brcs	.-24     	; 0x5144 <glcdWriteCharGr+0x3c>
		// write the line
                line = pgm_read_byte(&FontGr[(grStartIdx+1)+idx]);
                if (inverted == INVERTED) line = 255-line;
		glcdDataWrite(line);
	}
}
    515c:	cd b7       	in	r28, 0x3d	; 61
    515e:	de b7       	in	r29, 0x3e	; 62
    5160:	e5 e0       	ldi	r30, 0x05	; 5
    5162:	0c 94 77 3a 	jmp	0x74ee	; 0x74ee <__epilogue_restores__+0x1a>

00005166 <glcdWriteChar>:

// text routines

// write a character at the current position
void glcdWriteChar(unsigned char c, uint8_t inverted)
{
    5166:	ff 92       	push	r15
    5168:	0f 93       	push	r16
    516a:	1f 93       	push	r17
    516c:	cf 93       	push	r28
    516e:	df 93       	push	r29
    5170:	f6 2e       	mov	r15, r22
	u08 i = 0, j;

	for(i=0; i<5; i++)
	{
	  j = get_font(((c - 0x20) * 5) + i);
    5172:	95 e0       	ldi	r25, 0x05	; 5
    5174:	89 9f       	mul	r24, r25
    5176:	c0 01       	movw	r24, r0
    5178:	11 24       	eor	r1, r1
    517a:	ec 01       	movw	r28, r24
    517c:	ce 53       	subi	r28, 0x3E	; 62
    517e:	d0 40       	sbci	r29, 0x00	; 0
// write a character at the current position
void glcdWriteChar(unsigned char c, uint8_t inverted)
{
	u08 i = 0, j;

	for(i=0; i<5; i++)
    5180:	8c 01       	movw	r16, r24
    5182:	09 53       	subi	r16, 0x39	; 57
    5184:	10 40       	sbci	r17, 0x00	; 0
	}
}

uint8_t get_font(uint16_t addr)
{
	return eeprom_read_byte(&Font5x7[addr]);
    5186:	ce 01       	movw	r24, r28
    5188:	0e 94 94 3a 	call	0x7528	; 0x7528 <__eerd_byte_m328p>
	u08 i = 0, j;

	for(i=0; i<5; i++)
	{
	  j = get_font(((c - 0x20) * 5) + i);
	  if (inverted)
    518c:	f1 10       	cpse	r15, r1
	    j = ~j;
    518e:	80 95       	com	r24
	  glcdDataWrite(j);
    5190:	0e 94 43 2c 	call	0x5886	; 0x5886 <glcdDataWrite>
    5194:	21 96       	adiw	r28, 0x01	; 1
// write a character at the current position
void glcdWriteChar(unsigned char c, uint8_t inverted)
{
	u08 i = 0, j;

	for(i=0; i<5; i++)
    5196:	c0 17       	cp	r28, r16
    5198:	d1 07       	cpc	r29, r17
    519a:	a9 f7       	brne	.-22     	; 0x5186 <glcdWriteChar+0x20>
	    j = ~j;
	  glcdDataWrite(j);
	}

	// write a spacer line
	if (inverted) 
    519c:	ff 20       	and	r15, r15
    519e:	11 f0       	breq	.+4      	; 0x51a4 <glcdWriteChar+0x3e>
	  glcdDataWrite(0xFF);
    51a0:	8f ef       	ldi	r24, 0xFF	; 255
    51a2:	01 c0       	rjmp	.+2      	; 0x51a6 <glcdWriteChar+0x40>
	else 
	  glcdDataWrite(0x00);
    51a4:	80 e0       	ldi	r24, 0x00	; 0
    51a6:	0e 94 43 2c 	call	0x5886	; 0x5886 <glcdDataWrite>
	//else 
	//	glcdWriteData(0x00);

	//cbi(GLCD_Control, GLCD_CS1);
	//cbi(GLCD_Control, GLCD_CS2);
	glcdStartLine(0);
    51aa:	80 e0       	ldi	r24, 0x00	; 0
    51ac:	0e 94 8f 2c 	call	0x591e	; 0x591e <glcdStartLine>
}
    51b0:	cd b7       	in	r28, 0x3d	; 61
    51b2:	de b7       	in	r29, 0x3e	; 62
    51b4:	e5 e0       	ldi	r30, 0x05	; 5
    51b6:	0c 94 77 3a 	jmp	0x74ee	; 0x74ee <__epilogue_restores__+0x1a>

000051ba <glcdPutStr_rom>:
    data++;
  }
}

void glcdPutStr_rom(const char *data, uint8_t inverted)
{
    51ba:	0f 93       	push	r16
    51bc:	1f 93       	push	r17
    51be:	cf 93       	push	r28
    51c0:	df 93       	push	r29
    51c2:	ec 01       	movw	r28, r24
    51c4:	06 2f       	mov	r16, r22
    51c6:	10 e0       	ldi	r17, 0x00	; 0
    51c8:	04 c0       	rjmp	.+8      	; 0x51d2 <glcdPutStr_rom+0x18>
	uint8_t i,j;

	for (i=0; pgm_read_byte(&data[i]); i++) {
		glcdWriteChar(pgm_read_byte(&data[i]),inverted);
    51ca:	60 2f       	mov	r22, r16
    51cc:	0e 94 b3 28 	call	0x5166	; 0x5166 <glcdWriteChar>

void glcdPutStr_rom(const char *data, uint8_t inverted)
{
	uint8_t i,j;

	for (i=0; pgm_read_byte(&data[i]); i++) {
    51d0:	1f 5f       	subi	r17, 0xFF	; 255
    51d2:	fe 01       	movw	r30, r28
    51d4:	e1 0f       	add	r30, r17
    51d6:	f1 1d       	adc	r31, r1
    51d8:	84 91       	lpm	r24, Z+
    51da:	88 23       	and	r24, r24
    51dc:	b1 f7       	brne	.-20     	; 0x51ca <glcdPutStr_rom+0x10>
		glcdWriteChar(pgm_read_byte(&data[i]),inverted);
	}
}
    51de:	df 91       	pop	r29
    51e0:	cf 91       	pop	r28
    51e2:	1f 91       	pop	r17
    51e4:	0f 91       	pop	r16
    51e6:	08 95       	ret

000051e8 <glcdPutStr_ram>:
		glcdDataWrite(line);
	}
}

void glcdPutStr_ram(char *data, uint8_t inverted)
{
    51e8:	1f 93       	push	r17
    51ea:	cf 93       	push	r28
    51ec:	df 93       	push	r29
    51ee:	ec 01       	movw	r28, r24
    51f0:	16 2f       	mov	r17, r22
    51f2:	04 c0       	rjmp	.+8      	; 0x51fc <glcdPutStr_ram+0x14>
  while (*data) {
    glcdWriteChar(*data, inverted);
    51f4:	61 2f       	mov	r22, r17
    51f6:	0e 94 b3 28 	call	0x5166	; 0x5166 <glcdWriteChar>
    data++;
    51fa:	21 96       	adiw	r28, 0x01	; 1
	}
}

void glcdPutStr_ram(char *data, uint8_t inverted)
{
  while (*data) {
    51fc:	88 81       	ld	r24, Y
    51fe:	88 23       	and	r24, r24
    5200:	c9 f7       	brne	.-14     	; 0x51f4 <glcdPutStr_ram+0xc>
    glcdWriteChar(*data, inverted);
    data++;
  }
}
    5202:	df 91       	pop	r29
    5204:	cf 91       	pop	r28
    5206:	1f 91       	pop	r17
    5208:	08 95       	ret

0000520a <glcdFillRectangle>:
}*/


// draw filled rectangle
void glcdFillRectangle(u08 x, u08 y, u08 a, u08 b, u08 color)
{
    520a:	a0 e0       	ldi	r26, 0x00	; 0
    520c:	b0 e0       	ldi	r27, 0x00	; 0
    520e:	eb e0       	ldi	r30, 0x0B	; 11
    5210:	f9 e2       	ldi	r31, 0x29	; 41
    5212:	0c 94 4e 3a 	jmp	0x749c	; 0x749c <__prologue_saves__>
    5216:	28 2e       	mov	r2, r24
    5218:	16 2f       	mov	r17, r22
    521a:	34 2e       	mov	r3, r20
    521c:	f2 2e       	mov	r15, r18
    521e:	40 2e       	mov	r4, r16
    }
  }
  */

  // fastest!
  if (y%8) {
    5220:	c6 2f       	mov	r28, r22
    5222:	d0 e0       	ldi	r29, 0x00	; 0
    5224:	c7 70       	andi	r28, 0x07	; 7
    5226:	d0 70       	andi	r29, 0x00	; 0
    5228:	20 97       	sbiw	r28, 0x00	; 0
    522a:	09 f4       	brne	.+2      	; 0x522e <glcdFillRectangle+0x24>
    522c:	5b c0       	rjmp	.+182    	; 0x52e4 <glcdFillRectangle+0xda>
    for (i=0; i<a; i++) {
      glcdSetAddress(x+i, y/8);
    522e:	56 2e       	mov	r5, r22
    5230:	56 94       	lsr	r5
    5232:	56 94       	lsr	r5
    5234:	56 94       	lsr	r5
    5236:	ee 24       	eor	r14, r14
      temp = glcdDataRead();	// dummy read
      temp = glcdDataRead();	// read back current value
      // not on a perfect boundary
      for (k=(y%8); k < (y%8)+b && (k<8); k++) {
    5238:	37 e0       	ldi	r19, 0x07	; 7
    523a:	c3 2e       	mov	r12, r19
    523c:	c6 22       	and	r12, r22
	if (color == ON)
	  temp |= _BV(k);
	else
	  temp &= ~_BV(k);
    523e:	8c 2c       	mov	r8, r12
    5240:	99 24       	eor	r9, r9
    5242:	87 fc       	sbrc	r8, 7
    5244:	90 94       	com	r9
    for (i=0; i<a; i++) {
      glcdSetAddress(x+i, y/8);
      temp = glcdDataRead();	// dummy read
      temp = glcdDataRead();	// read back current value
      // not on a perfect boundary
      for (k=(y%8); k < (y%8)+b && (k<8); k++) {
    5246:	5e 01       	movw	r10, r28
    5248:	a2 0e       	add	r10, r18
    524a:	b1 1c       	adc	r11, r1
	if (color == ON)
	  temp |= _BV(k);
	else
	  temp &= ~_BV(k);
    524c:	21 e0       	ldi	r18, 0x01	; 1
    524e:	62 2e       	mov	r6, r18
    5250:	71 2c       	mov	r7, r1
    5252:	35 c0       	rjmp	.+106    	; 0x52be <glcdFillRectangle+0xb4>
  */

  // fastest!
  if (y%8) {
    for (i=0; i<a; i++) {
      glcdSetAddress(x+i, y/8);
    5254:	de 2c       	mov	r13, r14
    5256:	d2 0c       	add	r13, r2
    5258:	8d 2d       	mov	r24, r13
    525a:	65 2d       	mov	r22, r5
    525c:	0e 94 9c 2c 	call	0x5938	; 0x5938 <glcdSetAddress>
      temp = glcdDataRead();	// dummy read
    5260:	0e 94 f6 2b 	call	0x57ec	; 0x57ec <glcdDataRead>
      temp = glcdDataRead();	// read back current value
    5264:	0e 94 f6 2b 	call	0x57ec	; 0x57ec <glcdDataRead>
    5268:	08 2f       	mov	r16, r24
      // not on a perfect boundary
      for (k=(y%8); k < (y%8)+b && (k<8); k++) {
    526a:	40 e0       	ldi	r20, 0x00	; 0
    526c:	50 e0       	ldi	r21, 0x00	; 0
    526e:	15 c0       	rjmp	.+42     	; 0x529a <glcdFillRectangle+0x90>
	if (color == ON)
    5270:	81 e0       	ldi	r24, 0x01	; 1
    5272:	48 16       	cp	r4, r24
    5274:	41 f4       	brne	.+16     	; 0x5286 <glcdFillRectangle+0x7c>
	  temp |= _BV(k);
    5276:	c3 01       	movw	r24, r6
    5278:	02 c0       	rjmp	.+4      	; 0x527e <glcdFillRectangle+0x74>
    527a:	88 0f       	add	r24, r24
    527c:	99 1f       	adc	r25, r25
    527e:	2a 95       	dec	r18
    5280:	e2 f7       	brpl	.-8      	; 0x527a <glcdFillRectangle+0x70>
    5282:	08 2b       	or	r16, r24
    5284:	08 c0       	rjmp	.+16     	; 0x5296 <glcdFillRectangle+0x8c>
	else
	  temp &= ~_BV(k);
    5286:	c3 01       	movw	r24, r6
    5288:	02 c0       	rjmp	.+4      	; 0x528e <glcdFillRectangle+0x84>
    528a:	88 0f       	add	r24, r24
    528c:	99 1f       	adc	r25, r25
    528e:	2a 95       	dec	r18
    5290:	e2 f7       	brpl	.-8      	; 0x528a <glcdFillRectangle+0x80>
    5292:	80 95       	com	r24
    5294:	08 23       	and	r16, r24
    5296:	4f 5f       	subi	r20, 0xFF	; 255
    5298:	5f 4f       	sbci	r21, 0xFF	; 255
    529a:	9a 01       	movw	r18, r20
    529c:	28 0d       	add	r18, r8
    529e:	39 1d       	adc	r19, r9
    for (i=0; i<a; i++) {
      glcdSetAddress(x+i, y/8);
      temp = glcdDataRead();	// dummy read
      temp = glcdDataRead();	// read back current value
      // not on a perfect boundary
      for (k=(y%8); k < (y%8)+b && (k<8); k++) {
    52a0:	2a 15       	cp	r18, r10
    52a2:	3b 05       	cpc	r19, r11
    52a4:	24 f4       	brge	.+8      	; 0x52ae <glcdFillRectangle+0xa4>
    52a6:	8c 2d       	mov	r24, r12
    52a8:	84 0f       	add	r24, r20
    52aa:	88 30       	cpi	r24, 0x08	; 8
    52ac:	09 f7       	brne	.-62     	; 0x5270 <glcdFillRectangle+0x66>
	if (color == ON)
	  temp |= _BV(k);
	else
	  temp &= ~_BV(k);
      }
      glcdSetAddress(x+i, y/8);
    52ae:	8d 2d       	mov	r24, r13
    52b0:	65 2d       	mov	r22, r5
    52b2:	0e 94 9c 2c 	call	0x5938	; 0x5938 <glcdSetAddress>
      glcdDataWrite(temp);
    52b6:	80 2f       	mov	r24, r16
    52b8:	0e 94 43 2c 	call	0x5886	; 0x5886 <glcdDataWrite>
  }
  */

  // fastest!
  if (y%8) {
    for (i=0; i<a; i++) {
    52bc:	e3 94       	inc	r14
    52be:	e3 14       	cp	r14, r3
    52c0:	48 f2       	brcs	.-110    	; 0x5254 <glcdFillRectangle+0x4a>
      glcdSetAddress(x+i, y/8);
      glcdDataWrite(temp);
    } 
    // we did top section so remove it

    if (b > 8-(y%8))
    52c2:	2f 2d       	mov	r18, r15
    52c4:	30 e0       	ldi	r19, 0x00	; 0
    52c6:	88 e0       	ldi	r24, 0x08	; 8
    52c8:	90 e0       	ldi	r25, 0x00	; 0
    52ca:	8c 1b       	sub	r24, r28
    52cc:	9d 0b       	sbc	r25, r29
    52ce:	82 17       	cp	r24, r18
    52d0:	93 07       	cpc	r25, r19
    52d2:	14 f0       	brlt	.+4      	; 0x52d8 <glcdFillRectangle+0xce>
    52d4:	ff 24       	eor	r15, r15
    52d6:	04 c0       	rjmp	.+8      	; 0x52e0 <glcdFillRectangle+0xd6>
      b -= 8-(y%8);
    52d8:	81 2f       	mov	r24, r17
    52da:	87 70       	andi	r24, 0x07	; 7
    52dc:	88 50       	subi	r24, 0x08	; 8
    52de:	f8 0e       	add	r15, r24
    else 
      b = 0;
    y -= (y%8);
    52e0:	18 7f       	andi	r17, 0xF8	; 248
    y+=8;
    52e2:	18 5f       	subi	r17, 0xF8	; 248
  }
  // skip to next section
  for (j=(y/8); j < (y+b)/8; j++) {
    52e4:	e1 2e       	mov	r14, r17
    52e6:	e6 94       	lsr	r14
    52e8:	e6 94       	lsr	r14
    52ea:	e6 94       	lsr	r14
    52ec:	c1 2f       	mov	r28, r17
    52ee:	d0 e0       	ldi	r29, 0x00	; 0
    52f0:	cf 0d       	add	r28, r15
    52f2:	d1 1d       	adc	r29, r1
    52f4:	93 e0       	ldi	r25, 0x03	; 3
    52f6:	d5 95       	asr	r29
    52f8:	c7 95       	ror	r28
    52fa:	9a 95       	dec	r25
    52fc:	e1 f7       	brne	.-8      	; 0x52f6 <glcdFillRectangle+0xec>
    52fe:	12 c0       	rjmp	.+36     	; 0x5324 <glcdFillRectangle+0x11a>
    glcdSetAddress(x, j);
    5300:	82 2d       	mov	r24, r2
    5302:	6e 2d       	mov	r22, r14
    5304:	0e 94 9c 2c 	call	0x5938	; 0x5938 <glcdSetAddress>
    5308:	10 e0       	ldi	r17, 0x00	; 0
    530a:	09 c0       	rjmp	.+18     	; 0x531e <glcdFillRectangle+0x114>
    for (i=0; i<a; i++) {
      if (color == ON)
    530c:	81 e0       	ldi	r24, 0x01	; 1
    530e:	48 16       	cp	r4, r24
    5310:	11 f4       	brne	.+4      	; 0x5316 <glcdFillRectangle+0x10c>
	glcdDataWrite(0xFF);
    5312:	8f ef       	ldi	r24, 0xFF	; 255
    5314:	01 c0       	rjmp	.+2      	; 0x5318 <glcdFillRectangle+0x10e>
      else
	glcdDataWrite(0x00);
    5316:	80 e0       	ldi	r24, 0x00	; 0
    5318:	0e 94 43 2c 	call	0x5886	; 0x5886 <glcdDataWrite>
    y+=8;
  }
  // skip to next section
  for (j=(y/8); j < (y+b)/8; j++) {
    glcdSetAddress(x, j);
    for (i=0; i<a; i++) {
    531c:	1f 5f       	subi	r17, 0xFF	; 255
    531e:	13 15       	cp	r17, r3
    5320:	a8 f3       	brcs	.-22     	; 0x530c <glcdFillRectangle+0x102>
      b = 0;
    y -= (y%8);
    y+=8;
  }
  // skip to next section
  for (j=(y/8); j < (y+b)/8; j++) {
    5322:	e3 94       	inc	r14
    5324:	8e 2d       	mov	r24, r14
    5326:	90 e0       	ldi	r25, 0x00	; 0
    5328:	8c 17       	cp	r24, r28
    532a:	9d 07       	cpc	r25, r29
    532c:	4c f3       	brlt	.-46     	; 0x5300 <glcdFillRectangle+0xf6>
	glcdDataWrite(0xFF);
      else
	glcdDataWrite(0x00);
    }
  }
  b = b%8;
    532e:	2f 2d       	mov	r18, r15
    5330:	27 70       	andi	r18, 0x07	; 7
  // do remainder
  if (b) {
    5332:	c9 f1       	breq	.+114    	; 0x53a6 <glcdFillRectangle+0x19c>
    5334:	00 e0       	ldi	r16, 0x00	; 0
    for (i=0; i<a; i++) {
      glcdSetAddress(x+i, j);
      temp = glcdDataRead();	// dummy read
      temp = glcdDataRead();	// read back current value
      // not on a perfect boundary
      for (k=0; k < b; k++) {
    5336:	c2 2f       	mov	r28, r18
    5338:	d0 e0       	ldi	r29, 0x00	; 0
	if (color == ON)
	  temp |= _BV(k);
	else
	  temp &= ~_BV(k);
    533a:	81 e0       	ldi	r24, 0x01	; 1
    533c:	a8 2e       	mov	r10, r24
    533e:	b1 2c       	mov	r11, r1
    5340:	30 c0       	rjmp	.+96     	; 0x53a2 <glcdFillRectangle+0x198>
	glcdDataWrite(0x00);
    }
  }
  b = b%8;
  // do remainder
  if (b) {
    5342:	f0 2e       	mov	r15, r16
    5344:	f2 0c       	add	r15, r2
    for (i=0; i<a; i++) {
      glcdSetAddress(x+i, j);
    5346:	8f 2d       	mov	r24, r15
    5348:	6e 2d       	mov	r22, r14
    534a:	0e 94 9c 2c 	call	0x5938	; 0x5938 <glcdSetAddress>
      temp = glcdDataRead();	// dummy read
    534e:	0e 94 f6 2b 	call	0x57ec	; 0x57ec <glcdDataRead>
      temp = glcdDataRead();	// read back current value
    5352:	0e 94 f6 2b 	call	0x57ec	; 0x57ec <glcdDataRead>
    5356:	18 2f       	mov	r17, r24
    5358:	20 e0       	ldi	r18, 0x00	; 0
    535a:	30 e0       	ldi	r19, 0x00	; 0
    535c:	17 c0       	rjmp	.+46     	; 0x538c <glcdFillRectangle+0x182>
      // not on a perfect boundary
      for (k=0; k < b; k++) {
	if (color == ON)
    535e:	81 e0       	ldi	r24, 0x01	; 1
    5360:	48 16       	cp	r4, r24
    5362:	49 f4       	brne	.+18     	; 0x5376 <glcdFillRectangle+0x16c>
	  temp |= _BV(k);
    5364:	c5 01       	movw	r24, r10
    5366:	02 2e       	mov	r0, r18
    5368:	02 c0       	rjmp	.+4      	; 0x536e <glcdFillRectangle+0x164>
    536a:	88 0f       	add	r24, r24
    536c:	99 1f       	adc	r25, r25
    536e:	0a 94       	dec	r0
    5370:	e2 f7       	brpl	.-8      	; 0x536a <glcdFillRectangle+0x160>
    5372:	18 2b       	or	r17, r24
    5374:	09 c0       	rjmp	.+18     	; 0x5388 <glcdFillRectangle+0x17e>
	else
	  temp &= ~_BV(k);
    5376:	c5 01       	movw	r24, r10
    5378:	02 2e       	mov	r0, r18
    537a:	02 c0       	rjmp	.+4      	; 0x5380 <glcdFillRectangle+0x176>
    537c:	88 0f       	add	r24, r24
    537e:	99 1f       	adc	r25, r25
    5380:	0a 94       	dec	r0
    5382:	e2 f7       	brpl	.-8      	; 0x537c <glcdFillRectangle+0x172>
    5384:	80 95       	com	r24
    5386:	18 23       	and	r17, r24
    5388:	2f 5f       	subi	r18, 0xFF	; 255
    538a:	3f 4f       	sbci	r19, 0xFF	; 255
    for (i=0; i<a; i++) {
      glcdSetAddress(x+i, j);
      temp = glcdDataRead();	// dummy read
      temp = glcdDataRead();	// read back current value
      // not on a perfect boundary
      for (k=0; k < b; k++) {
    538c:	2c 17       	cp	r18, r28
    538e:	3d 07       	cpc	r19, r29
    5390:	34 f3       	brlt	.-52     	; 0x535e <glcdFillRectangle+0x154>
	if (color == ON)
	  temp |= _BV(k);
	else
	  temp &= ~_BV(k);
      }
      glcdSetAddress(x+i, j);
    5392:	8f 2d       	mov	r24, r15
    5394:	6e 2d       	mov	r22, r14
    5396:	0e 94 9c 2c 	call	0x5938	; 0x5938 <glcdSetAddress>
      glcdDataWrite(temp);
    539a:	81 2f       	mov	r24, r17
    539c:	0e 94 43 2c 	call	0x5886	; 0x5886 <glcdDataWrite>
    }
  }
  b = b%8;
  // do remainder
  if (b) {
    for (i=0; i<a; i++) {
    53a0:	0f 5f       	subi	r16, 0xFF	; 255
    53a2:	03 15       	cp	r16, r3
    53a4:	70 f2       	brcs	.-100    	; 0x5342 <glcdFillRectangle+0x138>
      }
      glcdSetAddress(x+i, j);
      glcdDataWrite(temp);
    }
  }
  glcdStartLine(0);
    53a6:	80 e0       	ldi	r24, 0x00	; 0
    53a8:	0e 94 8f 2c 	call	0x591e	; 0x591e <glcdStartLine>
}
    53ac:	cd b7       	in	r28, 0x3d	; 61
    53ae:	de b7       	in	r29, 0x3e	; 62
    53b0:	e2 e1       	ldi	r30, 0x12	; 18
    53b2:	0c 94 6a 3a 	jmp	0x74d4	; 0x74d4 <__epilogue_restores__>

000053b6 <glcdFillCircle>:
}*/


// draw circle
void glcdFillCircle(u08 xcenter, u08 ycenter, u08 radius, u08 color)
{
    53b6:	a3 e0       	ldi	r26, 0x03	; 3
    53b8:	b0 e0       	ldi	r27, 0x00	; 0
    53ba:	e1 ee       	ldi	r30, 0xE1	; 225
    53bc:	f9 e2       	ldi	r31, 0x29	; 41
    53be:	0c 94 4e 3a 	jmp	0x749c	; 0x749c <__prologue_saves__>
    53c2:	38 2e       	mov	r3, r24
    53c4:	46 2e       	mov	r4, r22
    53c6:	52 2e       	mov	r5, r18
  int tswitch, y, x = 0;
  unsigned char d;

  d = ycenter - xcenter;
    53c8:	26 2e       	mov	r2, r22
    53ca:	28 1a       	sub	r2, r24
  y = radius;
    53cc:	a4 2e       	mov	r10, r20
    53ce:	bb 24       	eor	r11, r11
  tswitch = 3 - 2 * radius;
    53d0:	c5 01       	movw	r24, r10
    53d2:	88 0f       	add	r24, r24
    53d4:	99 1f       	adc	r25, r25
    53d6:	22 27       	eor	r18, r18
    53d8:	33 27       	eor	r19, r19
    53da:	28 1b       	sub	r18, r24
    53dc:	39 0b       	sbc	r19, r25
    53de:	2d 5f       	subi	r18, 0xFD	; 253
    53e0:	3f 4f       	sbci	r19, 0xFF	; 255
    53e2:	3b 83       	std	Y+3, r19	; 0x03
    53e4:	2a 83       	std	Y+2, r18	; 0x02
    53e6:	88 24       	eor	r8, r8
    53e8:	99 24       	eor	r9, r9
    53ea:	66 24       	eor	r6, r6
    53ec:	77 24       	eor	r7, r7
  while (x <= y) {
    glcdFillRectangle(xcenter + x, ycenter - y, 1, y*2, color);
    glcdFillRectangle(xcenter - x, ycenter - y, 1, y*2, color);
    glcdFillRectangle(ycenter + y - d, ycenter - x, 1, x*2, color);
    53ee:	34 2d       	mov	r19, r4
    53f0:	32 19       	sub	r19, r2
    53f2:	39 83       	std	Y+1, r19	; 0x01
}*/


// draw circle
void glcdFillCircle(u08 xcenter, u08 ycenter, u08 radius, u08 color)
{
    53f4:	18 2d       	mov	r17, r8

  d = ycenter - xcenter;
  y = radius;
  tswitch = 3 - 2 * radius;
  while (x <= y) {
    glcdFillRectangle(xcenter + x, ycenter - y, 1, y*2, color);
    53f6:	ca 2c       	mov	r12, r10
    53f8:	d4 2c       	mov	r13, r4
    53fa:	da 18       	sub	r13, r10
    53fc:	75 01       	movw	r14, r10
    53fe:	ee 0c       	add	r14, r14
    5400:	ff 1c       	adc	r15, r15
    5402:	88 2d       	mov	r24, r8
    5404:	83 0d       	add	r24, r3
    5406:	6d 2d       	mov	r22, r13
    5408:	41 e0       	ldi	r20, 0x01	; 1
    540a:	2e 2d       	mov	r18, r14
    540c:	05 2d       	mov	r16, r5
    540e:	0e 94 05 29 	call	0x520a	; 0x520a <glcdFillRectangle>
    glcdFillRectangle(xcenter - x, ycenter - y, 1, y*2, color);
    5412:	83 2d       	mov	r24, r3
    5414:	88 19       	sub	r24, r8
    5416:	6d 2d       	mov	r22, r13
    5418:	41 e0       	ldi	r20, 0x01	; 1
    541a:	2e 2d       	mov	r18, r14
    541c:	0e 94 05 29 	call	0x520a	; 0x520a <glcdFillRectangle>
    5420:	f4 2c       	mov	r15, r4
    5422:	f8 18       	sub	r15, r8
    5424:	11 0f       	add	r17, r17
    glcdFillRectangle(ycenter + y - d, ycenter - x, 1, x*2, color);
    5426:	89 81       	ldd	r24, Y+1	; 0x01
    5428:	8a 0d       	add	r24, r10
    542a:	6f 2d       	mov	r22, r15
    542c:	41 e0       	ldi	r20, 0x01	; 1
    542e:	21 2f       	mov	r18, r17
    5430:	0e 94 05 29 	call	0x520a	; 0x520a <glcdFillRectangle>
    glcdFillRectangle(ycenter - y - d, ycenter - x, 1, x*2, color);   
    5434:	8d 2d       	mov	r24, r13
    5436:	82 19       	sub	r24, r2
    5438:	6f 2d       	mov	r22, r15
    543a:	41 e0       	ldi	r20, 0x01	; 1
    543c:	21 2f       	mov	r18, r17
    543e:	0e 94 05 29 	call	0x520a	; 0x520a <glcdFillRectangle>
    if (tswitch < 0) tswitch += (4 * x + 6);
    5442:	8a 81       	ldd	r24, Y+2	; 0x02
    5444:	9b 81       	ldd	r25, Y+3	; 0x03
    5446:	97 ff       	sbrs	r25, 7
    5448:	06 c0       	rjmp	.+12     	; 0x5456 <glcdFillCircle+0xa0>
    544a:	06 96       	adiw	r24, 0x06	; 6
    544c:	86 0d       	add	r24, r6
    544e:	97 1d       	adc	r25, r7
    5450:	9b 83       	std	Y+3, r25	; 0x03
    5452:	8a 83       	std	Y+2, r24	; 0x02
    5454:	11 c0       	rjmp	.+34     	; 0x5478 <glcdFillCircle+0xc2>
    else {
      tswitch += (4 * (x - y) + 10);
    5456:	ea 81       	ldd	r30, Y+2	; 0x02
    5458:	fb 81       	ldd	r31, Y+3	; 0x03
    545a:	3a 96       	adiw	r30, 0x0a	; 10
    545c:	c4 01       	movw	r24, r8
    545e:	8a 19       	sub	r24, r10
    5460:	9b 09       	sbc	r25, r11
    5462:	88 0f       	add	r24, r24
    5464:	99 1f       	adc	r25, r25
    5466:	88 0f       	add	r24, r24
    5468:	99 1f       	adc	r25, r25
    546a:	e8 0f       	add	r30, r24
    546c:	f9 1f       	adc	r31, r25
    546e:	fb 83       	std	Y+3, r31	; 0x03
    5470:	ea 83       	std	Y+2, r30	; 0x02
      y--;
    5472:	08 94       	sec
    5474:	a1 08       	sbc	r10, r1
    5476:	b1 08       	sbc	r11, r1
    }
    x++;
    5478:	08 94       	sec
    547a:	81 1c       	adc	r8, r1
    547c:	91 1c       	adc	r9, r1
    547e:	24 e0       	ldi	r18, 0x04	; 4
    5480:	30 e0       	ldi	r19, 0x00	; 0
    5482:	62 0e       	add	r6, r18
    5484:	73 1e       	adc	r7, r19
  unsigned char d;

  d = ycenter - xcenter;
  y = radius;
  tswitch = 3 - 2 * radius;
  while (x <= y) {
    5486:	a8 14       	cp	r10, r8
    5488:	b9 04       	cpc	r11, r9
    548a:	0c f0       	brlt	.+2      	; 0x548e <glcdFillCircle+0xd8>
    548c:	b3 cf       	rjmp	.-154    	; 0x53f4 <glcdFillCircle+0x3e>
      tswitch += (4 * (x - y) + 10);
      y--;
    }
    x++;
  }
}
    548e:	23 96       	adiw	r28, 0x03	; 3
    5490:	e2 e1       	ldi	r30, 0x12	; 18
    5492:	0c 94 6a 3a 	jmp	0x74d4	; 0x74d4 <__epilogue_restores__>

00005496 <glcdSetDot>:

// graphic routines

// set dot
void glcdSetDot(u08 x, u08 y)
{
    5496:	ef 92       	push	r14
    5498:	ff 92       	push	r15
    549a:	0f 93       	push	r16
    549c:	1f 93       	push	r17
    549e:	f8 2e       	mov	r15, r24
    54a0:	16 2f       	mov	r17, r22

	//putstring("->addr "); uart_putw_dec(x);
	//putstring(", "); uart_putw_dec(y/8);
	//putstring_nl(")");

	glcdSetAddress(x, y/8);
    54a2:	06 2f       	mov	r16, r22
    54a4:	06 95       	lsr	r16
    54a6:	06 95       	lsr	r16
    54a8:	06 95       	lsr	r16
    54aa:	60 2f       	mov	r22, r16
    54ac:	0e 94 9c 2c 	call	0x5938	; 0x5938 <glcdSetAddress>
	temp = glcdDataRead();	// dummy read
    54b0:	0e 94 f6 2b 	call	0x57ec	; 0x57ec <glcdDataRead>
	temp = glcdDataRead();	// read back current value
    54b4:	0e 94 f6 2b 	call	0x57ec	; 0x57ec <glcdDataRead>
    54b8:	e8 2e       	mov	r14, r24
	glcdSetAddress(x, y/8);
    54ba:	8f 2d       	mov	r24, r15
    54bc:	60 2f       	mov	r22, r16
    54be:	0e 94 9c 2c 	call	0x5938	; 0x5938 <glcdSetAddress>
	glcdDataWrite(temp | (1 << (y % 8)));
    54c2:	17 70       	andi	r17, 0x07	; 7
    54c4:	81 e0       	ldi	r24, 0x01	; 1
    54c6:	90 e0       	ldi	r25, 0x00	; 0
    54c8:	02 c0       	rjmp	.+4      	; 0x54ce <glcdSetDot+0x38>
    54ca:	88 0f       	add	r24, r24
    54cc:	99 1f       	adc	r25, r25
    54ce:	1a 95       	dec	r17
    54d0:	e2 f7       	brpl	.-8      	; 0x54ca <glcdSetDot+0x34>
    54d2:	8e 29       	or	r24, r14
    54d4:	0e 94 43 2c 	call	0x5886	; 0x5886 <glcdDataWrite>
	glcdStartLine(0);
    54d8:	80 e0       	ldi	r24, 0x00	; 0
    54da:	0e 94 8f 2c 	call	0x591e	; 0x591e <glcdStartLine>
}
    54de:	1f 91       	pop	r17
    54e0:	0f 91       	pop	r16
    54e2:	ff 90       	pop	r15
    54e4:	ef 90       	pop	r14
    54e6:	08 95       	ret

000054e8 <i2cInit>:
// functions
void i2cInit(void)
{
	// set pull-up resistors on I2C bus pins
	// TODO: should #ifdef these
	sbi(PORTC, 5);	// i2c SCL on ATmegaxx8
    54e8:	45 9a       	sbi	0x08, 5	; 8
	sbi(PORTC, 4);	// i2c SDA on ATmegaxx8
    54ea:	44 9a       	sbi	0x08, 4	; 8

	// clear SlaveReceive and SlaveTransmit handler to null
	i2cSlaveReceive = 0;
    54ec:	10 92 5f 02 	sts	0x025F, r1
    54f0:	10 92 5e 02 	sts	0x025E, r1
	i2cSlaveTransmit = 0;
    54f4:	10 92 61 02 	sts	0x0261, r1
    54f8:	10 92 60 02 	sts	0x0260, r1
	*/

	// calculate bitrate division	
	bitrate_div = (F_CPU/32)/bitrate;
	//outb(TWBR, bitrate_div);
	TWBR = 32;
    54fc:	80 e2       	ldi	r24, 0x20	; 32
    54fe:	80 93 b8 00 	sts	0x00B8, r24
	i2cSlaveReceive = 0;
	i2cSlaveTransmit = 0;
	// set i2c bit rate to 100KHz
	i2cSetBitrate(100);
	// enable TWI (two-wire interface)
	sbi(TWCR, TWEN);
    5502:	ec eb       	ldi	r30, 0xBC	; 188
    5504:	f0 e0       	ldi	r31, 0x00	; 0
    5506:	80 81       	ld	r24, Z
    5508:	84 60       	ori	r24, 0x04	; 4
    550a:	80 83       	st	Z, r24
	// set state
	I2cState = I2C_IDLE;
    550c:	10 92 5d 02 	sts	0x025D, r1
	// enable TWI interrupt and slave address ACK
	sbi(TWCR, TWIE);
    5510:	80 81       	ld	r24, Z
    5512:	81 60       	ori	r24, 0x01	; 1
    5514:	80 83       	st	Z, r24
	sbi(TWCR, TWEA);
    5516:	80 81       	ld	r24, Z
    5518:	80 64       	ori	r24, 0x40	; 64
    551a:	80 83       	st	Z, r24
	//outb(TWCR, (inb(TWCR)&TWCR_CMD_MASK)|BV(TWINT)|BV(TWEA));
	// enable interrupts
	sei();
    551c:	78 94       	sei
}
    551e:	08 95       	ret

00005520 <i2cSetBitrate>:
	*/

	// calculate bitrate division	
	bitrate_div = (F_CPU/32)/bitrate;
	//outb(TWBR, bitrate_div);
	TWBR = 32;
    5520:	80 e2       	ldi	r24, 0x20	; 32
    5522:	80 93 b8 00 	sts	0x00B8, r24
}
    5526:	08 95       	ret

00005528 <i2cSendStart>:
}*/

inline void i2cSendStart(void)
{
	// send start condition
	outb(TWCR, (inb(TWCR)&TWCR_CMD_MASK)|BV(TWINT)|BV(TWSTA));
    5528:	ec eb       	ldi	r30, 0xBC	; 188
    552a:	f0 e0       	ldi	r31, 0x00	; 0
    552c:	80 81       	ld	r24, Z
    552e:	8f 70       	andi	r24, 0x0F	; 15
    5530:	80 6a       	ori	r24, 0xA0	; 160
    5532:	80 83       	st	Z, r24
}
    5534:	08 95       	ret

00005536 <i2cSendStop>:

inline void i2cSendStop(void)
{
	// transmit stop condition
	// leave with TWEA on for slave receiving
	outb(TWCR, (inb(TWCR)&TWCR_CMD_MASK)|BV(TWINT)|BV(TWEA)|BV(TWSTO));
    5536:	ec eb       	ldi	r30, 0xBC	; 188
    5538:	f0 e0       	ldi	r31, 0x00	; 0
    553a:	80 81       	ld	r24, Z
    553c:	8f 70       	andi	r24, 0x0F	; 15
    553e:	80 6d       	ori	r24, 0xD0	; 208
    5540:	80 83       	st	Z, r24
}
    5542:	08 95       	ret

00005544 <i2cWaitForComplete>:

inline void i2cWaitForComplete(void)
{
	// wait for i2c interface to complete operation
	while( !(inb(TWCR) & BV(TWINT)) );
    5544:	80 91 bc 00 	lds	r24, 0x00BC
    5548:	87 ff       	sbrs	r24, 7
    554a:	fc cf       	rjmp	.-8      	; 0x5544 <i2cWaitForComplete>
}
    554c:	08 95       	ret

0000554e <i2cSendByte>:

inline void i2cSendByte(u08 data)
{
	// save data to the TWDR
	outb(TWDR, data);
    554e:	80 93 bb 00 	sts	0x00BB, r24
	// begin send
	outb(TWCR, (inb(TWCR)&TWCR_CMD_MASK)|BV(TWINT));
    5552:	ec eb       	ldi	r30, 0xBC	; 188
    5554:	f0 e0       	ldi	r31, 0x00	; 0
    5556:	80 81       	ld	r24, Z
    5558:	8f 70       	andi	r24, 0x0F	; 15
    555a:	80 68       	ori	r24, 0x80	; 128
    555c:	80 83       	st	Z, r24
}
    555e:	08 95       	ret

00005560 <i2cReceiveByte>:

inline void i2cReceiveByte(u08 ackFlag)
{
	// begin receive over i2c
	if( ackFlag )
    5560:	88 23       	and	r24, r24
    5562:	29 f0       	breq	.+10     	; 0x556e <i2cReceiveByte+0xe>
	{
		// ackFlag = TRUE: ACK the recevied data
		outb(TWCR, (inb(TWCR)&TWCR_CMD_MASK)|BV(TWINT)|BV(TWEA));
    5564:	80 91 bc 00 	lds	r24, 0x00BC
    5568:	8f 70       	andi	r24, 0x0F	; 15
    556a:	80 6c       	ori	r24, 0xC0	; 192
    556c:	04 c0       	rjmp	.+8      	; 0x5576 <i2cReceiveByte+0x16>
	}
	else
	{
		// ackFlag = FALSE: NACK the recevied data
		outb(TWCR, (inb(TWCR)&TWCR_CMD_MASK)|BV(TWINT));
    556e:	80 91 bc 00 	lds	r24, 0x00BC
    5572:	8f 70       	andi	r24, 0x0F	; 15
    5574:	80 68       	ori	r24, 0x80	; 128
    5576:	80 93 bc 00 	sts	0x00BC, r24
    557a:	08 95       	ret

0000557c <i2cGetReceivedByte>:
}

inline u08 i2cGetReceivedByte(void)
{
	// retieve received data byte from i2c TWDR
	return( inb(TWDR) );
    557c:	80 91 bb 00 	lds	r24, 0x00BB
}
    5580:	08 95       	ret

00005582 <i2cGetStatus>:

inline u08 i2cGetStatus(void)
{
	// retieve current i2c status from i2c TWSR
	return( inb(TWSR) );
    5582:	80 91 b9 00 	lds	r24, 0x00B9
}
    5586:	08 95       	ret

00005588 <i2cMasterSendNI>:
	for(i=0; i<length; i++)
	  *data++ = I2cReceiveData[i];
}*/

u08 i2cMasterSendNI(u08 deviceAddr, u08 length, u08* data)
{
    5588:	98 2f       	mov	r25, r24
    558a:	fa 01       	movw	r30, r20
	u08 retval = I2C_OK;

	// disable TWI interrupt
	cbi(TWCR, TWIE);
    558c:	80 91 bc 00 	lds	r24, 0x00BC
    5590:	8e 7f       	andi	r24, 0xFE	; 254
    5592:	80 93 bc 00 	sts	0x00BC, r24
}*/

inline void i2cSendStart(void)
{
	// send start condition
	outb(TWCR, (inb(TWCR)&TWCR_CMD_MASK)|BV(TWINT)|BV(TWSTA));
    5596:	80 91 bc 00 	lds	r24, 0x00BC
    559a:	8f 70       	andi	r24, 0x0F	; 15
    559c:	80 6a       	ori	r24, 0xA0	; 160
    559e:	80 93 bc 00 	sts	0x00BC, r24
}

inline void i2cWaitForComplete(void)
{
	// wait for i2c interface to complete operation
	while( !(inb(TWCR) & BV(TWINT)) );
    55a2:	80 91 bc 00 	lds	r24, 0x00BC
    55a6:	87 ff       	sbrs	r24, 7
    55a8:	fc cf       	rjmp	.-8      	; 0x55a2 <i2cMasterSendNI+0x1a>
	// send start condition
	i2cSendStart();
	i2cWaitForComplete();

	// send device address with write
	i2cSendByte( deviceAddr & 0xFE );
    55aa:	9e 7f       	andi	r25, 0xFE	; 254
}

inline void i2cSendByte(u08 data)
{
	// save data to the TWDR
	outb(TWDR, data);
    55ac:	90 93 bb 00 	sts	0x00BB, r25
	// begin send
	outb(TWCR, (inb(TWCR)&TWCR_CMD_MASK)|BV(TWINT));
    55b0:	80 91 bc 00 	lds	r24, 0x00BC
    55b4:	8f 70       	andi	r24, 0x0F	; 15
    55b6:	80 68       	ori	r24, 0x80	; 128
    55b8:	80 93 bc 00 	sts	0x00BC, r24
}

inline void i2cWaitForComplete(void)
{
	// wait for i2c interface to complete operation
	while( !(inb(TWCR) & BV(TWINT)) );
    55bc:	80 91 bc 00 	lds	r24, 0x00BC
    55c0:	87 ff       	sbrs	r24, 7
    55c2:	fc cf       	rjmp	.-8      	; 0x55bc <i2cMasterSendNI+0x34>
	// send device address with write
	i2cSendByte( deviceAddr & 0xFE );
	i2cWaitForComplete();

	// check if device is present and live
	if( inb(TWSR) == TW_MT_SLA_ACK)
    55c4:	80 91 b9 00 	lds	r24, 0x00B9
    55c8:	88 31       	cpi	r24, 0x18	; 24
    55ca:	89 f0       	breq	.+34     	; 0x55ee <i2cMasterSendNI+0x66>
    55cc:	91 e0       	ldi	r25, 0x01	; 1
    55ce:	12 c0       	rjmp	.+36     	; 0x55f4 <i2cMasterSendNI+0x6c>
	{
		// send data
		while(length)
		{
			i2cSendByte( *data++ );
    55d0:	80 81       	ld	r24, Z
}

inline void i2cSendByte(u08 data)
{
	// save data to the TWDR
	outb(TWDR, data);
    55d2:	80 93 bb 00 	sts	0x00BB, r24
	// begin send
	outb(TWCR, (inb(TWCR)&TWCR_CMD_MASK)|BV(TWINT));
    55d6:	80 91 bc 00 	lds	r24, 0x00BC
    55da:	8f 70       	andi	r24, 0x0F	; 15
    55dc:	80 68       	ori	r24, 0x80	; 128
    55de:	80 93 bc 00 	sts	0x00BC, r24
}

inline void i2cWaitForComplete(void)
{
	// wait for i2c interface to complete operation
	while( !(inb(TWCR) & BV(TWINT)) );
    55e2:	80 91 bc 00 	lds	r24, 0x00BC
    55e6:	87 ff       	sbrs	r24, 7
    55e8:	fc cf       	rjmp	.-8      	; 0x55e2 <i2cMasterSendNI+0x5a>
	if( inb(TWSR) == TW_MT_SLA_ACK)
	{
		// send data
		while(length)
		{
			i2cSendByte( *data++ );
    55ea:	31 96       	adiw	r30, 0x01	; 1
			i2cWaitForComplete();
			length--;
    55ec:	61 50       	subi	r22, 0x01	; 1

	// check if device is present and live
	if( inb(TWSR) == TW_MT_SLA_ACK)
	{
		// send data
		while(length)
    55ee:	66 23       	and	r22, r22
    55f0:	79 f7       	brne	.-34     	; 0x55d0 <i2cMasterSendNI+0x48>
    55f2:	90 e0       	ldi	r25, 0x00	; 0

inline void i2cSendStop(void)
{
	// transmit stop condition
	// leave with TWEA on for slave receiving
	outb(TWCR, (inb(TWCR)&TWCR_CMD_MASK)|BV(TWINT)|BV(TWEA)|BV(TWSTO));
    55f4:	80 91 bc 00 	lds	r24, 0x00BC
    55f8:	8f 70       	andi	r24, 0x0F	; 15
    55fa:	80 6d       	ori	r24, 0xD0	; 208
    55fc:	80 93 bc 00 	sts	0x00BC, r24
	}

	// transmit stop condition
	// leave with TWEA on for slave receiving
	i2cSendStop();
	while( !(inb(TWCR) & BV(TWSTO)) );
    5600:	80 91 bc 00 	lds	r24, 0x00BC
    5604:	84 ff       	sbrs	r24, 4
    5606:	fc cf       	rjmp	.-8      	; 0x5600 <i2cMasterSendNI+0x78>

	// enable TWI interrupt
	sbi(TWCR, TWIE);
    5608:	80 91 bc 00 	lds	r24, 0x00BC
    560c:	81 60       	ori	r24, 0x01	; 1
    560e:	80 93 bc 00 	sts	0x00BC, r24

	return retval;
}
    5612:	89 2f       	mov	r24, r25
    5614:	08 95       	ret

00005616 <i2cMasterReceiveNI>:

u08 i2cMasterReceiveNI(u08 deviceAddr, u08 length, u08 *data)
{
    5616:	1f 93       	push	r17
    5618:	cf 93       	push	r28
    561a:	df 93       	push	r29
    561c:	98 2f       	mov	r25, r24
    561e:	16 2f       	mov	r17, r22
    5620:	ea 01       	movw	r28, r20
	u08 retval = I2C_OK;

	// disable TWI interrupt
	cbi(TWCR, TWIE);
    5622:	80 91 bc 00 	lds	r24, 0x00BC
    5626:	8e 7f       	andi	r24, 0xFE	; 254
    5628:	80 93 bc 00 	sts	0x00BC, r24
}*/

inline void i2cSendStart(void)
{
	// send start condition
	outb(TWCR, (inb(TWCR)&TWCR_CMD_MASK)|BV(TWINT)|BV(TWSTA));
    562c:	80 91 bc 00 	lds	r24, 0x00BC
    5630:	8f 70       	andi	r24, 0x0F	; 15
    5632:	80 6a       	ori	r24, 0xA0	; 160
    5634:	80 93 bc 00 	sts	0x00BC, r24
}

inline void i2cWaitForComplete(void)
{
	// wait for i2c interface to complete operation
	while( !(inb(TWCR) & BV(TWINT)) );
    5638:	80 91 bc 00 	lds	r24, 0x00BC
    563c:	87 ff       	sbrs	r24, 7
    563e:	fc cf       	rjmp	.-8      	; 0x5638 <i2cMasterReceiveNI+0x22>
	// send start condition
	i2cSendStart();
	i2cWaitForComplete();

	// send device address with read
	i2cSendByte( deviceAddr | 0x01 );
    5640:	91 60       	ori	r25, 0x01	; 1
}

inline void i2cSendByte(u08 data)
{
	// save data to the TWDR
	outb(TWDR, data);
    5642:	90 93 bb 00 	sts	0x00BB, r25
	// begin send
	outb(TWCR, (inb(TWCR)&TWCR_CMD_MASK)|BV(TWINT));
    5646:	80 91 bc 00 	lds	r24, 0x00BC
    564a:	8f 70       	andi	r24, 0x0F	; 15
    564c:	80 68       	ori	r24, 0x80	; 128
    564e:	80 93 bc 00 	sts	0x00BC, r24
}

inline void i2cWaitForComplete(void)
{
	// wait for i2c interface to complete operation
	while( !(inb(TWCR) & BV(TWINT)) );
    5652:	80 91 bc 00 	lds	r24, 0x00BC
    5656:	87 ff       	sbrs	r24, 7
    5658:	fc cf       	rjmp	.-8      	; 0x5652 <i2cMasterReceiveNI+0x3c>
	// send device address with read
	i2cSendByte( deviceAddr | 0x01 );
	i2cWaitForComplete();

	// check if device is present and live
	if( inb(TWSR) == TW_MR_SLA_ACK)
    565a:	80 91 b9 00 	lds	r24, 0x00B9
    565e:	80 34       	cpi	r24, 0x40	; 64
    5660:	69 f0       	breq	.+26     	; 0x567c <i2cMasterReceiveNI+0x66>
    5662:	91 e0       	ldi	r25, 0x01	; 1
    5664:	18 c0       	rjmp	.+48     	; 0x5696 <i2cMasterReceiveNI+0x80>
	{
		// accept receive data and ack it
		while(length > 1)
		{
			i2cReceiveByte(TRUE);
    5666:	8f ef       	ldi	r24, 0xFF	; 255
    5668:	0e 94 b0 2a 	call	0x5560	; 0x5560 <i2cReceiveByte>
}

inline void i2cWaitForComplete(void)
{
	// wait for i2c interface to complete operation
	while( !(inb(TWCR) & BV(TWINT)) );
    566c:	80 91 bc 00 	lds	r24, 0x00BC
    5670:	87 ff       	sbrs	r24, 7
    5672:	fc cf       	rjmp	.-8      	; 0x566c <i2cMasterReceiveNI+0x56>
}

inline u08 i2cGetReceivedByte(void)
{
	// retieve received data byte from i2c TWDR
	return( inb(TWDR) );
    5674:	80 91 bb 00 	lds	r24, 0x00BB
		// accept receive data and ack it
		while(length > 1)
		{
			i2cReceiveByte(TRUE);
			i2cWaitForComplete();
			*data++ = i2cGetReceivedByte();
    5678:	89 93       	st	Y+, r24
			// decrement length
			length--;
    567a:	11 50       	subi	r17, 0x01	; 1

	// check if device is present and live
	if( inb(TWSR) == TW_MR_SLA_ACK)
	{
		// accept receive data and ack it
		while(length > 1)
    567c:	12 30       	cpi	r17, 0x02	; 2
    567e:	98 f7       	brcc	.-26     	; 0x5666 <i2cMasterReceiveNI+0x50>
			// decrement length
			length--;
		}

		// accept receive data and nack it (last-byte signal)
		i2cReceiveByte(FALSE);
    5680:	80 e0       	ldi	r24, 0x00	; 0
    5682:	0e 94 b0 2a 	call	0x5560	; 0x5560 <i2cReceiveByte>
}

inline void i2cWaitForComplete(void)
{
	// wait for i2c interface to complete operation
	while( !(inb(TWCR) & BV(TWINT)) );
    5686:	80 91 bc 00 	lds	r24, 0x00BC
    568a:	87 ff       	sbrs	r24, 7
    568c:	fc cf       	rjmp	.-8      	; 0x5686 <i2cMasterReceiveNI+0x70>
}

inline u08 i2cGetReceivedByte(void)
{
	// retieve received data byte from i2c TWDR
	return( inb(TWDR) );
    568e:	80 91 bb 00 	lds	r24, 0x00BB
		}

		// accept receive data and nack it (last-byte signal)
		i2cReceiveByte(FALSE);
		i2cWaitForComplete();
		*data++ = i2cGetReceivedByte();
    5692:	88 83       	st	Y, r24
    5694:	90 e0       	ldi	r25, 0x00	; 0

inline void i2cSendStop(void)
{
	// transmit stop condition
	// leave with TWEA on for slave receiving
	outb(TWCR, (inb(TWCR)&TWCR_CMD_MASK)|BV(TWINT)|BV(TWEA)|BV(TWSTO));
    5696:	80 91 bc 00 	lds	r24, 0x00BC
    569a:	8f 70       	andi	r24, 0x0F	; 15
    569c:	80 6d       	ori	r24, 0xD0	; 208
    569e:	80 93 bc 00 	sts	0x00BC, r24
	// transmit stop condition
	// leave with TWEA on for slave receiving
	i2cSendStop();

	// enable TWI interrupt
	sbi(TWCR, TWIE);
    56a2:	80 91 bc 00 	lds	r24, 0x00BC
    56a6:	81 60       	ori	r24, 0x01	; 1
    56a8:	80 93 bc 00 	sts	0x00BC, r24

	return retval;
}
    56ac:	89 2f       	mov	r24, r25
    56ae:	df 91       	pop	r29
    56b0:	cf 91       	pop	r28
    56b2:	1f 91       	pop	r17
    56b4:	08 95       	ret

000056b6 <glcdInitHW>:

	//TODO: make setup of chip select lines contingent on how
	// many controllers are actually in the display
	
	// initialize LCD control lines levels
	cbi(GLCD_CTRL_RS_PORT, GLCD_CTRL_RS);
    56b6:	2f 98       	cbi	0x05, 7	; 5
	cbi(GLCD_CTRL_RW_PORT, GLCD_CTRL_RW);
    56b8:	2d 98       	cbi	0x05, 5	; 5
	cbi(GLCD_CTRL_E_PORT, GLCD_CTRL_E);
    56ba:	2c 98       	cbi	0x05, 4	; 5
	cbi(GLCD_CTRL_CS0_PORT, GLCD_CTRL_CS0);
    56bc:	40 98       	cbi	0x08, 0	; 8
#ifdef GLCD_CTRL_CS1
	cbi(GLCD_CTRL_CS1_PORT, GLCD_CTRL_CS1);
    56be:	5a 98       	cbi	0x0b, 2	; 11
#endif
#ifdef GLCD_CTRL_RESET
	cbi(GLCD_CTRL_RESET_PORT, GLCD_CTRL_RESET);
#endif
	// initialize LCD control port to output
	sbi(GLCD_CTRL_RS_DDR, GLCD_CTRL_RS);
    56c0:	27 9a       	sbi	0x04, 7	; 4
	sbi(GLCD_CTRL_RW_DDR, GLCD_CTRL_RW);
    56c2:	25 9a       	sbi	0x04, 5	; 4
	sbi(GLCD_CTRL_E_DDR, GLCD_CTRL_E);
    56c4:	24 9a       	sbi	0x04, 4	; 4
	sbi(GLCD_CTRL_CS0_DDR, GLCD_CTRL_CS0);
    56c6:	38 9a       	sbi	0x07, 0	; 7
#ifdef GLCD_CTRL_CS1
	sbi(GLCD_CTRL_CS1_DDR, GLCD_CTRL_CS1);
    56c8:	52 9a       	sbi	0x0a, 2	; 10
#endif
#ifdef GLCD_CTRL_RESET
	sbi(GLCD_CTRL_RESET_DDR, GLCD_CTRL_RESET);
#endif
	// initialize LCD data
	GLCD_DATAH_PORT &= ~(0xF0);
    56ca:	8b b1       	in	r24, 0x0b	; 11
    56cc:	8f 70       	andi	r24, 0x0F	; 15
    56ce:	8b b9       	out	0x0b, r24	; 11
	GLCD_DATAL_PORT &= ~(0x0F);
    56d0:	85 b1       	in	r24, 0x05	; 5
    56d2:	80 7f       	andi	r24, 0xF0	; 240
    56d4:	85 b9       	out	0x05, r24	; 5
	//outb(GLCD_DATA_PORT, 0x00);
	// initialize LCD data port to output
	GLCD_DATAH_DDR |= 0xF0;
    56d6:	8a b1       	in	r24, 0x0a	; 10
    56d8:	80 6f       	ori	r24, 0xF0	; 240
    56da:	8a b9       	out	0x0a, r24	; 10
	GLCD_DATAL_DDR |= 0x0F;
    56dc:	84 b1       	in	r24, 0x04	; 4
    56de:	8f 60       	ori	r24, 0x0F	; 15
    56e0:	84 b9       	out	0x04, r24	; 4
	//outb(GLCD_DATA_DDR, 0xFF);
#endif
}
    56e2:	08 95       	ret

000056e4 <glcdControllerSelect>:
#ifdef GLCD_PORT_INTERFACE
	//TODO: make control of chip select lines contingent on how
	// many controllers are actually in the display

	// unselect all controllers
	cbi(GLCD_CTRL_CS0_PORT, GLCD_CTRL_CS0);	
    56e4:	40 98       	cbi	0x08, 0	; 8
#ifdef GLCD_CTRL_CS1
	cbi(GLCD_CTRL_CS1_PORT, GLCD_CTRL_CS1);
    56e6:	5a 98       	cbi	0x0b, 2	; 11
#ifdef GLCD_CTRL_CS3
	cbi(GLCD_CTRL_CS3_PORT, GLCD_CTRL_CS3);
#endif

	// select requested controller
	switch(controller)
    56e8:	88 23       	and	r24, r24
    56ea:	19 f0       	breq	.+6      	; 0x56f2 <glcdControllerSelect+0xe>
    56ec:	81 30       	cpi	r24, 0x01	; 1
    56ee:	21 f4       	brne	.+8      	; 0x56f8 <glcdControllerSelect+0x14>
    56f0:	02 c0       	rjmp	.+4      	; 0x56f6 <glcdControllerSelect+0x12>
	{
	case 0:	sbi(GLCD_CTRL_CS0_PORT, GLCD_CTRL_CS0); break;
    56f2:	40 9a       	sbi	0x08, 0	; 8
    56f4:	08 95       	ret
#ifdef GLCD_CTRL_CS1
	case 1:	sbi(GLCD_CTRL_CS1_PORT, GLCD_CTRL_CS1); break;
    56f6:	5a 9a       	sbi	0x0b, 2	; 11
    56f8:	08 95       	ret

000056fa <glcdBusyWait>:
}

void glcdBusyWait(u08 controller)
{
#ifdef GLCD_PORT_INTERFACE
	cli();
    56fa:	f8 94       	cli
	// wait until LCD busy bit goes to zero
	// select the controller chip
	glcdControllerSelect(controller);
    56fc:	0e 94 72 2b 	call	0x56e4	; 0x56e4 <glcdControllerSelect>
	// do a read from control register
	//outb(GLCD_DATA_PORT, 0xFF);
	GLCD_DATAH_PORT |= 0xF0;
    5700:	8b b1       	in	r24, 0x0b	; 11
    5702:	80 6f       	ori	r24, 0xF0	; 240
    5704:	8b b9       	out	0x0b, r24	; 11
	GLCD_DATAL_PORT |= 0x0F;
    5706:	85 b1       	in	r24, 0x05	; 5
    5708:	8f 60       	ori	r24, 0x0F	; 15
    570a:	85 b9       	out	0x05, r24	; 5

	cbi(GLCD_CTRL_RS_PORT, GLCD_CTRL_RS);
    570c:	2f 98       	cbi	0x05, 7	; 5
	//outb(GLCD_DATA_DDR, 0x00);
	GLCD_DATAH_DDR &= ~(0xF0);
    570e:	8a b1       	in	r24, 0x0a	; 10
    5710:	8f 70       	andi	r24, 0x0F	; 15
    5712:	8a b9       	out	0x0a, r24	; 10
	GLCD_DATAL_DDR &= ~(0x0F);
    5714:	84 b1       	in	r24, 0x04	; 4
    5716:	80 7f       	andi	r24, 0xF0	; 240
    5718:	84 b9       	out	0x04, r24	; 4
	sbi(GLCD_CTRL_RW_PORT, GLCD_CTRL_RW);
    571a:	2d 9a       	sbi	0x05, 5	; 5
	sbi(GLCD_CTRL_E_PORT, GLCD_CTRL_E);
    571c:	2c 9a       	sbi	0x05, 4	; 5
	asm volatile ("nop"); asm volatile ("nop");
    571e:	00 00       	nop
    5720:	00 00       	nop
    5722:	0a c0       	rjmp	.+20     	; 0x5738 <glcdBusyWait+0x3e>
	//while(inb(GLCD_DATA_PIN) & GLCD_STATUS_BUSY)
	while(((GLCD_DATAH_PIN & 0xF0) | (GLCD_DATAL_PIN & 0x0F)) & GLCD_STATUS_BUSY)
	{
		cbi(GLCD_CTRL_E_PORT, GLCD_CTRL_E);
    5724:	2c 98       	cbi	0x05, 4	; 5
	...
		asm volatile ("nop"); asm volatile ("nop");
		asm volatile ("nop"); asm volatile ("nop");
		sbi(GLCD_CTRL_E_PORT, GLCD_CTRL_E);
    572e:	2c 9a       	sbi	0x05, 4	; 5
	...
	GLCD_DATAL_DDR &= ~(0x0F);
	sbi(GLCD_CTRL_RW_PORT, GLCD_CTRL_RW);
	sbi(GLCD_CTRL_E_PORT, GLCD_CTRL_E);
	asm volatile ("nop"); asm volatile ("nop");
	//while(inb(GLCD_DATA_PIN) & GLCD_STATUS_BUSY)
	while(((GLCD_DATAH_PIN & 0xF0) | (GLCD_DATAL_PIN & 0x0F)) & GLCD_STATUS_BUSY)
    5738:	89 b1       	in	r24, 0x09	; 9
    573a:	93 b1       	in	r25, 0x03	; 3
    573c:	87 fd       	sbrc	r24, 7
    573e:	f2 cf       	rjmp	.-28     	; 0x5724 <glcdBusyWait+0x2a>
		asm volatile ("nop"); asm volatile ("nop");
		sbi(GLCD_CTRL_E_PORT, GLCD_CTRL_E);
		asm volatile ("nop"); asm volatile ("nop");
		asm volatile ("nop"); asm volatile ("nop");
	}
	cbi(GLCD_CTRL_E_PORT, GLCD_CTRL_E);
    5740:	2c 98       	cbi	0x05, 4	; 5
	cbi(GLCD_CTRL_RW_PORT, GLCD_CTRL_RW);
    5742:	2d 98       	cbi	0x05, 5	; 5
	//	outb(GLCD_DATA_DDR, 0xFF);
	GLCD_DATAH_DDR |= 0xF0;
    5744:	8a b1       	in	r24, 0x0a	; 10
    5746:	80 6f       	ori	r24, 0xF0	; 240
    5748:	8a b9       	out	0x0a, r24	; 10
	GLCD_DATAL_DDR |= 0x0F;
    574a:	84 b1       	in	r24, 0x04	; 4
    574c:	8f 60       	ori	r24, 0x0F	; 15
    574e:	84 b9       	out	0x04, r24	; 4
	sei();
    5750:	78 94       	sei
	// wait until LCD busy bit goes to zero
	while(*(volatile unsigned char *)
		(GLCD_CONTROLLER0_CTRL_ADDR + GLCD_CONTROLLER_ADDR_OFFSET*controller) & GLCD_STATUS_BUSY);
	// cbi(MCUCR, SRW);			// disable RAM waitstate
#endif
}
    5752:	08 95       	ret

00005754 <glcdControlWrite>:

void glcdControlWrite(u08 controller, u08 data)
{
    5754:	1f 93       	push	r17
    5756:	16 2f       	mov	r17, r22
#ifdef GLCD_PORT_INTERFACE
	cli();
    5758:	f8 94       	cli
	glcdBusyWait(controller);	// wait until LCD not busy
    575a:	0e 94 7d 2b 	call	0x56fa	; 0x56fa <glcdBusyWait>
	cbi(GLCD_CTRL_RS_PORT, GLCD_CTRL_RS);
    575e:	2f 98       	cbi	0x05, 7	; 5
	cbi(GLCD_CTRL_RW_PORT, GLCD_CTRL_RW);
    5760:	2d 98       	cbi	0x05, 5	; 5
	sbi(GLCD_CTRL_E_PORT, GLCD_CTRL_E);
    5762:	2c 9a       	sbi	0x05, 4	; 5
	//outb(GLCD_DATA_DDR, 0xFF);
	GLCD_DATAH_DDR |= 0xF0;
    5764:	8a b1       	in	r24, 0x0a	; 10
    5766:	80 6f       	ori	r24, 0xF0	; 240
    5768:	8a b9       	out	0x0a, r24	; 10
	GLCD_DATAL_DDR |= 0x0F;
    576a:	84 b1       	in	r24, 0x04	; 4
    576c:	8f 60       	ori	r24, 0x0F	; 15
    576e:	84 b9       	out	0x04, r24	; 4
	//outb(GLCD_DATA_PORT, data);
	GLCD_DATAH_PORT &= ~0xF0; // clear top nibble
    5770:	8b b1       	in	r24, 0x0b	; 11
    5772:	8f 70       	andi	r24, 0x0F	; 15
    5774:	8b b9       	out	0x0b, r24	; 11
	GLCD_DATAH_PORT |= data & 0xF0; // set top nibble
    5776:	9b b1       	in	r25, 0x0b	; 11
    5778:	81 2f       	mov	r24, r17
    577a:	80 7f       	andi	r24, 0xF0	; 240
    577c:	89 2b       	or	r24, r25
    577e:	8b b9       	out	0x0b, r24	; 11
	GLCD_DATAL_PORT &= ~0x0F; // clear bottom nibble
    5780:	85 b1       	in	r24, 0x05	; 5
    5782:	80 7f       	andi	r24, 0xF0	; 240
    5784:	85 b9       	out	0x05, r24	; 5
	GLCD_DATAL_PORT |= data & 0x0F; // set bottom nibble
    5786:	85 b1       	in	r24, 0x05	; 5
    5788:	1f 70       	andi	r17, 0x0F	; 15
    578a:	81 2b       	or	r24, r17
    578c:	85 b9       	out	0x05, r24	; 5
	...
	asm volatile ("nop"); asm volatile ("nop");
	asm volatile ("nop"); asm volatile ("nop");
	asm volatile ("nop"); asm volatile ("nop");
	asm volatile ("nop"); asm volatile ("nop");
	cbi(GLCD_CTRL_E_PORT, GLCD_CTRL_E);
    579e:	2c 98       	cbi	0x05, 4	; 5
	sei();
    57a0:	78 94       	sei
	//sbi(MCUCR, SRW);				// enable RAM waitstate
	glcdBusyWait(controller);		// wait until LCD not busy
	*(volatile unsigned char *) (GLCD_CONTROLLER0_CTRL_ADDR + GLCD_CONTROLLER_ADDR_OFFSET*controller) = data;
	//cbi(MCUCR, SRW);				// disable RAM waitstate
#endif
}
    57a2:	1f 91       	pop	r17
    57a4:	08 95       	ret

000057a6 <glcdControlRead>:

u08 glcdControlRead(u08 controller)
{
	register u08 data;
#ifdef GLCD_PORT_INTERFACE
	cli();
    57a6:	f8 94       	cli
	glcdBusyWait(controller);		// wait until LCD not busy
    57a8:	0e 94 7d 2b 	call	0x56fa	; 0x56fa <glcdBusyWait>
	cbi(GLCD_CTRL_RS_PORT, GLCD_CTRL_RS);
    57ac:	2f 98       	cbi	0x05, 7	; 5
	//outb(GLCD_DATA_DDR, 0x00);
	GLCD_DATAH_DDR &= ~(0xF0);
    57ae:	8a b1       	in	r24, 0x0a	; 10
    57b0:	8f 70       	andi	r24, 0x0F	; 15
    57b2:	8a b9       	out	0x0a, r24	; 10
	GLCD_DATAL_DDR &= ~(0x0F);
    57b4:	84 b1       	in	r24, 0x04	; 4
    57b6:	80 7f       	andi	r24, 0xF0	; 240
    57b8:	84 b9       	out	0x04, r24	; 4
	sbi(GLCD_CTRL_RW_PORT, GLCD_CTRL_RW);
    57ba:	2d 9a       	sbi	0x05, 5	; 5
	sbi(GLCD_CTRL_E_PORT, GLCD_CTRL_E);
    57bc:	2c 9a       	sbi	0x05, 4	; 5
	...
	asm volatile ("nop"); asm volatile ("nop");
	asm volatile ("nop"); asm volatile ("nop");
	asm volatile ("nop"); asm volatile ("nop");
	asm volatile ("nop"); asm volatile ("nop");
	//data = inb(GLCD_DATA_PIN);
	data = (GLCD_DATAH_PIN & 0xF0) | (GLCD_DATAL_PIN & 0x0F);
    57ce:	29 b1       	in	r18, 0x09	; 9
    57d0:	83 b1       	in	r24, 0x03	; 3
	cbi(GLCD_CTRL_E_PORT, GLCD_CTRL_E);
    57d2:	2c 98       	cbi	0x05, 4	; 5
	cbi(GLCD_CTRL_RW_PORT, GLCD_CTRL_RW);
    57d4:	2d 98       	cbi	0x05, 5	; 5
	//outb(GLCD_DATA_DDR, 0xFF);
	GLCD_DATAH_DDR |= 0xF0;
    57d6:	9a b1       	in	r25, 0x0a	; 10
    57d8:	90 6f       	ori	r25, 0xF0	; 240
    57da:	9a b9       	out	0x0a, r25	; 10
	GLCD_DATAL_DDR |= 0x0F;
    57dc:	94 b1       	in	r25, 0x04	; 4
    57de:	9f 60       	ori	r25, 0x0F	; 15
    57e0:	94 b9       	out	0x04, r25	; 4
	sei();
    57e2:	78 94       	sei
    57e4:	8f 70       	andi	r24, 0x0F	; 15
    57e6:	20 7f       	andi	r18, 0xF0	; 240
	glcdBusyWait(controller);		// wait until LCD not busy
	data = *(volatile unsigned char *) (GLCD_CONTROLLER0_CTRL_ADDR + GLCD_CONTROLLER_ADDR_OFFSET*controller);
	//cbi(MCUCR, SRW);				// disable RAM waitstate
#endif
	return data;
}
    57e8:	82 2b       	or	r24, r18
    57ea:	08 95       	ret

000057ec <glcdDataRead>:
u08 glcdDataRead(void)
{
	register u08 data;
	register u08 controller = (GrLcdState.lcdXAddr/GLCD_CONTROLLER_XPIXELS);
#ifdef GLCD_PORT_INTERFACE
	cli();
    57ec:	f8 94       	cli
	glcdBusyWait(controller);		// wait until LCD not busy
    57ee:	80 91 5c 03 	lds	r24, 0x035C
    57f2:	82 95       	swap	r24
    57f4:	86 95       	lsr	r24
    57f6:	86 95       	lsr	r24
    57f8:	83 70       	andi	r24, 0x03	; 3
    57fa:	0e 94 7d 2b 	call	0x56fa	; 0x56fa <glcdBusyWait>
	sbi(GLCD_CTRL_RS_PORT, GLCD_CTRL_RS);
    57fe:	2f 9a       	sbi	0x05, 7	; 5
	//outb(GLCD_DATA_DDR, 0x00);
	GLCD_DATAH_DDR &= ~(0xF0);
    5800:	8a b1       	in	r24, 0x0a	; 10
    5802:	8f 70       	andi	r24, 0x0F	; 15
    5804:	8a b9       	out	0x0a, r24	; 10
	GLCD_DATAL_DDR &= ~(0x0F);
    5806:	84 b1       	in	r24, 0x04	; 4
    5808:	80 7f       	andi	r24, 0xF0	; 240
    580a:	84 b9       	out	0x04, r24	; 4

	sbi(GLCD_CTRL_RW_PORT, GLCD_CTRL_RW);
    580c:	2d 9a       	sbi	0x05, 5	; 5
	sbi(GLCD_CTRL_E_PORT, GLCD_CTRL_E);
    580e:	2c 9a       	sbi	0x05, 4	; 5
	...
	asm volatile ("nop"); asm volatile ("nop");
	asm volatile ("nop"); asm volatile ("nop");
	asm volatile ("nop"); asm volatile ("nop");
	asm volatile ("nop"); asm volatile ("nop");
	//data = inb(GLCD_DATA_PIN);
	data = (GLCD_DATAH_PIN & 0xF0) | (GLCD_DATAL_PIN & 0x0F);
    5820:	99 b1       	in	r25, 0x09	; 9
    5822:	83 b1       	in	r24, 0x03	; 3

	cbi(GLCD_CTRL_E_PORT, GLCD_CTRL_E);
    5824:	2c 98       	cbi	0x05, 4	; 5
	cbi(GLCD_CTRL_RW_PORT, GLCD_CTRL_RW);
    5826:	2d 98       	cbi	0x05, 5	; 5
	sei();
    5828:	78 94       	sei
    582a:	8f 70       	andi	r24, 0x0F	; 15
    582c:	90 7f       	andi	r25, 0xF0	; 240
		GrLcdState.lcdYAddr++;
		glcdSetYAddress(GrLcdState.lcdYAddr);
		glcdSetXAddress(0);
		}*/
	return data;
}
    582e:	89 2b       	or	r24, r25
    5830:	08 95       	ret

00005832 <glcdReset>:
		cbi(GLCD_CTRL_RESET_PORT, GLCD_CTRL_RESET);
	else
		sbi(GLCD_CTRL_RESET_PORT, GLCD_CTRL_RESET);
#endif
#endif
}
    5832:	08 95       	ret

00005834 <glcdSetXAddress>:

void glcdSetXAddress(u08 xAddr)
{
	u08 i;
	// record address change locally
	GrLcdState.lcdXAddr = xAddr;
    5834:	80 93 5c 03 	sts	0x035C, r24
	
	// clear y (col) address on all controllers
	for(i=0; i<GLCD_NUM_CONTROLLERS; i++)
	{
		glcdControlWrite(i, GLCD_SET_Y_ADDR | 0x00);
    5838:	80 e0       	ldi	r24, 0x00	; 0
    583a:	60 e4       	ldi	r22, 0x40	; 64
    583c:	0e 94 aa 2b 	call	0x5754	; 0x5754 <glcdControlWrite>
		GrLcdState.ctrlr[i].xAddr = 0;
    5840:	10 92 5e 03 	sts	0x035E, r1
	GrLcdState.lcdXAddr = xAddr;
	
	// clear y (col) address on all controllers
	for(i=0; i<GLCD_NUM_CONTROLLERS; i++)
	{
		glcdControlWrite(i, GLCD_SET_Y_ADDR | 0x00);
    5844:	81 e0       	ldi	r24, 0x01	; 1
    5846:	60 e4       	ldi	r22, 0x40	; 64
    5848:	0e 94 aa 2b 	call	0x5754	; 0x5754 <glcdControlWrite>
		GrLcdState.ctrlr[i].xAddr = 0;
    584c:	10 92 60 03 	sts	0x0360, r1
	}

	// set y (col) address on destination controller
	glcdControlWrite((GrLcdState.lcdXAddr/GLCD_CONTROLLER_XPIXELS),
    5850:	80 91 5c 03 	lds	r24, 0x035C
    5854:	68 2f       	mov	r22, r24
    5856:	6f 73       	andi	r22, 0x3F	; 63
    5858:	60 64       	ori	r22, 0x40	; 64
    585a:	82 95       	swap	r24
    585c:	86 95       	lsr	r24
    585e:	86 95       	lsr	r24
    5860:	83 70       	andi	r24, 0x03	; 3
    5862:	0e 94 aa 2b 	call	0x5754	; 0x5754 <glcdControlWrite>
		GLCD_SET_Y_ADDR | (GrLcdState.lcdXAddr & 0x3F));
}
    5866:	08 95       	ret

00005868 <glcdSetYAddress>:

void glcdSetYAddress(u08 yAddr)
{
    5868:	1f 93       	push	r17
    586a:	18 2f       	mov	r17, r24
	u08 i;
	// record address change locally
	GrLcdState.lcdYAddr = yAddr;
    586c:	80 93 5d 03 	sts	0x035D, r24
	// set page address for all controllers
	for(i=0; i<GLCD_NUM_CONTROLLERS; i++)
	{
		glcdControlWrite(i, GLCD_SET_PAGE | yAddr);
    5870:	18 6b       	ori	r17, 0xB8	; 184
    5872:	80 e0       	ldi	r24, 0x00	; 0
    5874:	61 2f       	mov	r22, r17
    5876:	0e 94 aa 2b 	call	0x5754	; 0x5754 <glcdControlWrite>
    587a:	81 e0       	ldi	r24, 0x01	; 1
    587c:	61 2f       	mov	r22, r17
    587e:	0e 94 aa 2b 	call	0x5754	; 0x5754 <glcdControlWrite>
	}
}
    5882:	1f 91       	pop	r17
    5884:	08 95       	ret

00005886 <glcdDataWrite>:
#endif
	return data;
}

void glcdDataWrite(u08 data)
{
    5886:	0f 93       	push	r16
    5888:	1f 93       	push	r17
    588a:	18 2f       	mov	r17, r24
	register u08 controller = (GrLcdState.lcdXAddr/GLCD_CONTROLLER_XPIXELS);
    588c:	00 91 5c 03 	lds	r16, 0x035C
    5890:	02 95       	swap	r16
    5892:	06 95       	lsr	r16
    5894:	06 95       	lsr	r16
    5896:	03 70       	andi	r16, 0x03	; 3
#ifdef GLCD_PORT_INTERFACE
	cli();
    5898:	f8 94       	cli
	glcdBusyWait(controller);		// wait until LCD not busy
    589a:	80 2f       	mov	r24, r16
    589c:	0e 94 7d 2b 	call	0x56fa	; 0x56fa <glcdBusyWait>
	sbi(GLCD_CTRL_RS_PORT, GLCD_CTRL_RS);
    58a0:	2f 9a       	sbi	0x05, 7	; 5
	cbi(GLCD_CTRL_RW_PORT, GLCD_CTRL_RW);
    58a2:	2d 98       	cbi	0x05, 5	; 5
	sbi(GLCD_CTRL_E_PORT, GLCD_CTRL_E);
    58a4:	2c 9a       	sbi	0x05, 4	; 5
	//outb(GLCD_DATA_DDR, 0xFF);
	GLCD_DATAH_DDR |= 0xF0;
    58a6:	8a b1       	in	r24, 0x0a	; 10
    58a8:	80 6f       	ori	r24, 0xF0	; 240
    58aa:	8a b9       	out	0x0a, r24	; 10
	GLCD_DATAL_DDR |= 0x0F;
    58ac:	84 b1       	in	r24, 0x04	; 4
    58ae:	8f 60       	ori	r24, 0x0F	; 15
    58b0:	84 b9       	out	0x04, r24	; 4

	//outb(GLCD_DATA_PORT, data);
	GLCD_DATAH_PORT &= ~0xF0; // clear top nibble
    58b2:	8b b1       	in	r24, 0x0b	; 11
    58b4:	8f 70       	andi	r24, 0x0F	; 15
    58b6:	8b b9       	out	0x0b, r24	; 11
	GLCD_DATAH_PORT |= data & 0xF0; // set top nibble
    58b8:	9b b1       	in	r25, 0x0b	; 11
    58ba:	81 2f       	mov	r24, r17
    58bc:	80 7f       	andi	r24, 0xF0	; 240
    58be:	89 2b       	or	r24, r25
    58c0:	8b b9       	out	0x0b, r24	; 11
	GLCD_DATAL_PORT &= ~0x0F; // clear bottom nibble
    58c2:	85 b1       	in	r24, 0x05	; 5
    58c4:	80 7f       	andi	r24, 0xF0	; 240
    58c6:	85 b9       	out	0x05, r24	; 5
	GLCD_DATAL_PORT |= data & 0x0F; // set bottom nibble
    58c8:	85 b1       	in	r24, 0x05	; 5
    58ca:	1f 70       	andi	r17, 0x0F	; 15
    58cc:	81 2b       	or	r24, r17
    58ce:	85 b9       	out	0x05, r24	; 5
	...

	asm volatile ("nop"); asm volatile ("nop");
	asm volatile ("nop"); asm volatile ("nop");
	asm volatile ("nop"); asm volatile ("nop");
	asm volatile ("nop"); asm volatile ("nop");
	cbi(GLCD_CTRL_E_PORT, GLCD_CTRL_E);
    58e0:	2c 98       	cbi	0x05, 4	; 5
	sei();
    58e2:	78 94       	sei
	*(volatile unsigned char *) (GLCD_CONTROLLER0_CTRL_ADDR + GLCD_CONTROLLER_ADDR_OFFSET*controller) = data;
	//cbi(MCUCR, SRW);				// disable RAM waitstate
#endif
	
	// increment our local address counter
	GrLcdState.ctrlr[controller].xAddr++;
    58e4:	e0 2f       	mov	r30, r16
    58e6:	f0 e0       	ldi	r31, 0x00	; 0
    58e8:	ee 0f       	add	r30, r30
    58ea:	ff 1f       	adc	r31, r31
    58ec:	e2 5a       	subi	r30, 0xA2	; 162
    58ee:	fc 4f       	sbci	r31, 0xFC	; 252
    58f0:	80 81       	ld	r24, Z
    58f2:	8f 5f       	subi	r24, 0xFF	; 255
    58f4:	80 83       	st	Z, r24
	GrLcdState.lcdXAddr++;
    58f6:	80 91 5c 03 	lds	r24, 0x035C
    58fa:	8f 5f       	subi	r24, 0xFF	; 255
    58fc:	80 93 5c 03 	sts	0x035C, r24
	if(GrLcdState.lcdXAddr >= GLCD_XPIXELS)
    5900:	87 ff       	sbrs	r24, 7
    5902:	0a c0       	rjmp	.+20     	; 0x5918 <glcdDataWrite+0x92>
	{
	  GrLcdState.lcdYAddr++;
    5904:	80 91 5d 03 	lds	r24, 0x035D
    5908:	8f 5f       	subi	r24, 0xFF	; 255
    590a:	80 93 5d 03 	sts	0x035D, r24
	  glcdSetYAddress(GrLcdState.lcdYAddr);
    590e:	0e 94 34 2c 	call	0x5868	; 0x5868 <glcdSetYAddress>
	  glcdSetXAddress(0);
    5912:	80 e0       	ldi	r24, 0x00	; 0
    5914:	0e 94 1a 2c 	call	0x5834	; 0x5834 <glcdSetXAddress>
	}
}
    5918:	1f 91       	pop	r17
    591a:	0f 91       	pop	r16
    591c:	08 95       	ret

0000591e <glcdStartLine>:
		}
	}
}

void glcdStartLine(u08 start)
{
    591e:	1f 93       	push	r17
	glcdControlWrite(0, GLCD_START_LINE | start);
    5920:	18 2f       	mov	r17, r24
    5922:	10 6c       	ori	r17, 0xC0	; 192
    5924:	80 e0       	ldi	r24, 0x00	; 0
    5926:	61 2f       	mov	r22, r17
    5928:	0e 94 aa 2b 	call	0x5754	; 0x5754 <glcdControlWrite>
	glcdControlWrite(1, GLCD_START_LINE | start);
    592c:	81 e0       	ldi	r24, 0x01	; 1
    592e:	61 2f       	mov	r22, r17
    5930:	0e 94 aa 2b 	call	0x5754	; 0x5754 <glcdControlWrite>
}
    5934:	1f 91       	pop	r17
    5936:	08 95       	ret

00005938 <glcdSetAddress>:

void glcdSetAddress(u08 x, u08 yLine)
{
    5938:	1f 93       	push	r17
    593a:	18 2f       	mov	r17, r24
    593c:	86 2f       	mov	r24, r22
	// set addresses
	glcdSetYAddress(yLine);
    593e:	0e 94 34 2c 	call	0x5868	; 0x5868 <glcdSetYAddress>
	glcdSetXAddress(x);
    5942:	81 2f       	mov	r24, r17
    5944:	0e 94 1a 2c 	call	0x5834	; 0x5834 <glcdSetXAddress>
}
    5948:	1f 91       	pop	r17
    594a:	08 95       	ret

0000594c <glcdClearScreen>:
		GrLcdState.ctrlr[i].yAddr = 0;
	}
}

void glcdClearScreen(void)
{
    594c:	0f 93       	push	r16
    594e:	1f 93       	push	r17
    5950:	00 e0       	ldi	r16, 0x00	; 0
	// clear LCD
	// loop through all pages
	for(pageAddr=0; pageAddr<(GLCD_YPIXELS>>3); pageAddr++)
	{
		// set page address
		glcdSetAddress(0, pageAddr);
    5952:	80 e0       	ldi	r24, 0x00	; 0
    5954:	60 2f       	mov	r22, r16
    5956:	0e 94 9c 2c 	call	0x5938	; 0x5938 <glcdSetAddress>
    595a:	10 e0       	ldi	r17, 0x00	; 0
		// clear all lines of this page of display memory
		for(xAddr=0; xAddr<GLCD_XPIXELS; xAddr++)
		{
			glcdDataWrite(0x00);
    595c:	80 e0       	ldi	r24, 0x00	; 0
    595e:	0e 94 43 2c 	call	0x5886	; 0x5886 <glcdDataWrite>
	for(pageAddr=0; pageAddr<(GLCD_YPIXELS>>3); pageAddr++)
	{
		// set page address
		glcdSetAddress(0, pageAddr);
		// clear all lines of this page of display memory
		for(xAddr=0; xAddr<GLCD_XPIXELS; xAddr++)
    5962:	1f 5f       	subi	r17, 0xFF	; 255
    5964:	10 38       	cpi	r17, 0x80	; 128
    5966:	d1 f7       	brne	.-12     	; 0x595c <glcdClearScreen+0x10>
	u08 pageAddr;
	u08 xAddr;

	// clear LCD
	// loop through all pages
	for(pageAddr=0; pageAddr<(GLCD_YPIXELS>>3); pageAddr++)
    5968:	0f 5f       	subi	r16, 0xFF	; 255
    596a:	08 30       	cpi	r16, 0x08	; 8
    596c:	91 f7       	brne	.-28     	; 0x5952 <glcdClearScreen+0x6>
		for(xAddr=0; xAddr<GLCD_XPIXELS; xAddr++)
		{
			glcdDataWrite(0x00);
		}
	}
}
    596e:	1f 91       	pop	r17
    5970:	0f 91       	pop	r16
    5972:	08 95       	ret

00005974 <glcdHome>:

void glcdHome(void)
{
	u08 i;
	// initialize addresses/positions
	glcdStartLine(0);
    5974:	80 e0       	ldi	r24, 0x00	; 0
    5976:	0e 94 8f 2c 	call	0x591e	; 0x591e <glcdStartLine>
	glcdSetAddress(0,0);
    597a:	80 e0       	ldi	r24, 0x00	; 0
    597c:	60 e0       	ldi	r22, 0x00	; 0
    597e:	0e 94 9c 2c 	call	0x5938	; 0x5938 <glcdSetAddress>
	// initialize local data structures
	for(i=0; i<GLCD_NUM_CONTROLLERS; i++)
	{
		GrLcdState.ctrlr[i].xAddr = 0;
    5982:	10 92 5e 03 	sts	0x035E, r1
		GrLcdState.ctrlr[i].yAddr = 0;
    5986:	10 92 5f 03 	sts	0x035F, r1
	glcdStartLine(0);
	glcdSetAddress(0,0);
	// initialize local data structures
	for(i=0; i<GLCD_NUM_CONTROLLERS; i++)
	{
		GrLcdState.ctrlr[i].xAddr = 0;
    598a:	10 92 60 03 	sts	0x0360, r1
		GrLcdState.ctrlr[i].yAddr = 0;
    598e:	10 92 61 03 	sts	0x0361, r1
	}
}
    5992:	08 95       	ret

00005994 <glcdInit>:

void glcdInit()
{
	u08 i;
	// initialize hardware
	glcdInitHW();
    5994:	0e 94 5b 2b 	call	0x56b6	; 0x56b6 <glcdInitHW>
	// bring lcd out of reset
	glcdReset(FALSE);
	// Turn on LCD
	for(i=0; i<GLCD_NUM_CONTROLLERS; i++)
	{
		glcdControlWrite(i, GLCD_ON_CTRL | GLCD_ON_DISPLAY);
    5998:	80 e0       	ldi	r24, 0x00	; 0
    599a:	6f e3       	ldi	r22, 0x3F	; 63
    599c:	0e 94 aa 2b 	call	0x5754	; 0x5754 <glcdControlWrite>
    59a0:	81 e0       	ldi	r24, 0x01	; 1
    59a2:	6f e3       	ldi	r22, 0x3F	; 63
    59a4:	0e 94 aa 2b 	call	0x5754	; 0x5754 <glcdControlWrite>
	}
	// clear lcd
	glcdClearScreen();
    59a8:	0e 94 a6 2c 	call	0x594c	; 0x594c <glcdClearScreen>
	// initialize positions
	glcdHome();
    59ac:	0e 94 ba 2c 	call	0x5974	; 0x5974 <glcdHome>
}
    59b0:	08 95       	ret

000059b2 <glcdGotoChar>:
	glcdSetYAddress(yLine);
	glcdSetXAddress(x);
}

void glcdGotoChar(u08 line, u08 col)
{
    59b2:	98 2f       	mov	r25, r24
	glcdSetAddress(col*6, line);
    59b4:	86 e0       	ldi	r24, 0x06	; 6
    59b6:	68 9f       	mul	r22, r24
    59b8:	80 2d       	mov	r24, r0
    59ba:	11 24       	eor	r1, r1
    59bc:	69 2f       	mov	r22, r25
    59be:	0e 94 9c 2c 	call	0x5938	; 0x5938 <glcdSetAddress>
}
    59c2:	08 95       	ret

000059c4 <glcdDelay>:
	unsigned char j; 			// 1000-5,8ms ...5000-29ms
								// 10000-56ms ...30000-170ms
								// 50000-295ms...60000-345ms
//	for (i = 0; i < p; i++) for (j = 0; j < 10; j++) asm volatile ("nop");
	for (i = 0; i < p; i++) for (j = 0; j < 10; j++);
}
    59c4:	08 95       	ret

000059c6 <__vector_18>:
    rx_buffer->head = i;
  }
}

SIGNAL(USART_RX_vect)
{
    59c6:	1f 92       	push	r1
    59c8:	0f 92       	push	r0
    59ca:	0f b6       	in	r0, 0x3f	; 63
    59cc:	0f 92       	push	r0
    59ce:	11 24       	eor	r1, r1
    59d0:	2f 93       	push	r18
    59d2:	3f 93       	push	r19
    59d4:	4f 93       	push	r20
    59d6:	5f 93       	push	r21
    59d8:	6f 93       	push	r22
    59da:	7f 93       	push	r23
    59dc:	8f 93       	push	r24
    59de:	9f 93       	push	r25
    59e0:	af 93       	push	r26
    59e2:	bf 93       	push	r27
    59e4:	ef 93       	push	r30
    59e6:	ff 93       	push	r31
  unsigned char c = UDR0;
    59e8:	40 91 c6 00 	lds	r20, 0x00C6

struct ring_buffer rx_buffer = { { 0 }, 0, 0 };

inline void store_char(unsigned char c, struct ring_buffer *rx_buffer)
{
  int i = (rx_buffer->head + 1) % RX_BUFFER_SIZE;
    59ec:	e0 91 ec 02 	lds	r30, 0x02EC
    59f0:	f0 91 ed 02 	lds	r31, 0x02ED
    59f4:	cf 01       	movw	r24, r30
    59f6:	01 96       	adiw	r24, 0x01	; 1
    59f8:	60 e8       	ldi	r22, 0x80	; 128
    59fa:	70 e0       	ldi	r23, 0x00	; 0
    59fc:	0e 94 fe 39 	call	0x73fc	; 0x73fc <__divmodhi4>
    5a00:	9c 01       	movw	r18, r24

  // if we should be storing the received character into the location
  // just before the tail (meaning that the head would advance to the
  // current location of the tail), we're about to overflow the buffer
  // and so we don't write the character or advance the head.
  if (i != rx_buffer->tail) {
    5a02:	80 91 ee 02 	lds	r24, 0x02EE
    5a06:	90 91 ef 02 	lds	r25, 0x02EF
    5a0a:	28 17       	cp	r18, r24
    5a0c:	39 07       	cpc	r19, r25
    5a0e:	39 f0       	breq	.+14     	; 0x5a1e <__vector_18+0x58>
    rx_buffer->buffer[rx_buffer->head] = c;
    5a10:	e4 59       	subi	r30, 0x94	; 148
    5a12:	fd 4f       	sbci	r31, 0xFD	; 253
    5a14:	40 83       	st	Z, r20
    rx_buffer->head = i;
    5a16:	30 93 ed 02 	sts	0x02ED, r19
    5a1a:	20 93 ec 02 	sts	0x02EC, r18

SIGNAL(USART_RX_vect)
{
  unsigned char c = UDR0;
  store_char(c, &rx_buffer);
}
    5a1e:	ff 91       	pop	r31
    5a20:	ef 91       	pop	r30
    5a22:	bf 91       	pop	r27
    5a24:	af 91       	pop	r26
    5a26:	9f 91       	pop	r25
    5a28:	8f 91       	pop	r24
    5a2a:	7f 91       	pop	r23
    5a2c:	6f 91       	pop	r22
    5a2e:	5f 91       	pop	r21
    5a30:	4f 91       	pop	r20
    5a32:	3f 91       	pop	r19
    5a34:	2f 91       	pop	r18
    5a36:	0f 90       	pop	r0
    5a38:	0f be       	out	0x3f, r0	; 63
    5a3a:	0f 90       	pop	r0
    5a3c:	1f 90       	pop	r1
    5a3e:	18 95       	reti

00005a40 <char_available>:

uint8_t char_available(void)
{
    5a40:	80 91 ec 02 	lds	r24, 0x02EC
    5a44:	90 91 ed 02 	lds	r25, 0x02ED
    5a48:	80 58       	subi	r24, 0x80	; 128
    5a4a:	9f 4f       	sbci	r25, 0xFF	; 255
    5a4c:	20 91 ee 02 	lds	r18, 0x02EE
    5a50:	30 91 ef 02 	lds	r19, 0x02EF
    5a54:	82 1b       	sub	r24, r18
    5a56:	93 0b       	sbc	r25, r19
    5a58:	60 e8       	ldi	r22, 0x80	; 128
    5a5a:	70 e0       	ldi	r23, 0x00	; 0
    5a5c:	0e 94 fe 39 	call	0x73fc	; 0x73fc <__divmodhi4>
  return (RX_BUFFER_SIZE + rx_buffer.head - rx_buffer.tail) % RX_BUFFER_SIZE;
}
    5a60:	08 95       	ret

00005a62 <char_read>:

int char_read(void)
{
  // if the head isn't ahead of the tail, we don't have any characters
  if (rx_buffer.head == rx_buffer.tail) {
    5a62:	40 91 ee 02 	lds	r20, 0x02EE
    5a66:	50 91 ef 02 	lds	r21, 0x02EF
    5a6a:	80 91 ec 02 	lds	r24, 0x02EC
    5a6e:	90 91 ed 02 	lds	r25, 0x02ED
    5a72:	84 17       	cp	r24, r20
    5a74:	95 07       	cpc	r25, r21
    5a76:	19 f4       	brne	.+6      	; 0x5a7e <char_read+0x1c>
    5a78:	2f ef       	ldi	r18, 0xFF	; 255
    5a7a:	3f ef       	ldi	r19, 0xFF	; 255
    5a7c:	0f c0       	rjmp	.+30     	; 0x5a9c <char_read+0x3a>
    return -1;
  } else {
    unsigned char c = rx_buffer.buffer[rx_buffer.tail];
    5a7e:	fa 01       	movw	r30, r20
    5a80:	e4 59       	subi	r30, 0x94	; 148
    5a82:	fd 4f       	sbci	r31, 0xFD	; 253
    5a84:	20 81       	ld	r18, Z
    rx_buffer.tail = (rx_buffer.tail + 1) % RX_BUFFER_SIZE;
    5a86:	ca 01       	movw	r24, r20
    5a88:	01 96       	adiw	r24, 0x01	; 1
    5a8a:	60 e8       	ldi	r22, 0x80	; 128
    5a8c:	70 e0       	ldi	r23, 0x00	; 0
    5a8e:	0e 94 fe 39 	call	0x73fc	; 0x73fc <__divmodhi4>
    5a92:	90 93 ef 02 	sts	0x02EF, r25
    5a96:	80 93 ee 02 	sts	0x02EE, r24
    return c;
    5a9a:	30 e0       	ldi	r19, 0x00	; 0
  }
}
    5a9c:	c9 01       	movw	r24, r18
    5a9e:	08 95       	ret

00005aa0 <__vector_13>:
extern volatile uint8_t timeoutcounter;

// How long we have been snoozing
uint16_t snoozetimer = 0;

SIGNAL(TIMER1_OVF_vect) {
    5aa0:	1f 92       	push	r1
    5aa2:	0f 92       	push	r0
    5aa4:	0f b6       	in	r0, 0x3f	; 63
    5aa6:	0f 92       	push	r0
    5aa8:	11 24       	eor	r1, r1
    5aaa:	8f 93       	push	r24
    5aac:	9f 93       	push	r25
  PIEZO_PORT ^= _BV(PIEZO);
    5aae:	88 b1       	in	r24, 0x08	; 8
    5ab0:	98 e0       	ldi	r25, 0x08	; 8
    5ab2:	89 27       	eor	r24, r25
    5ab4:	88 b9       	out	0x08, r24	; 8
}
    5ab6:	9f 91       	pop	r25
    5ab8:	8f 91       	pop	r24
    5aba:	0f 90       	pop	r0
    5abc:	0f be       	out	0x3f, r0	; 63
    5abe:	0f 90       	pop	r0
    5ac0:	1f 90       	pop	r1
    5ac2:	18 95       	reti

00005ac4 <__vector_14>:

volatile uint16_t millis = 0;
volatile uint16_t animticker, alarmticker;
SIGNAL(TIMER0_COMPA_vect) {
    5ac4:	1f 92       	push	r1
    5ac6:	0f 92       	push	r0
    5ac8:	0f b6       	in	r0, 0x3f	; 63
    5aca:	0f 92       	push	r0
    5acc:	11 24       	eor	r1, r1
    5ace:	8f 93       	push	r24
    5ad0:	9f 93       	push	r25
  if (millis)
    5ad2:	80 91 f2 02 	lds	r24, 0x02F2
    5ad6:	90 91 f3 02 	lds	r25, 0x02F3
    5ada:	89 2b       	or	r24, r25
    5adc:	49 f0       	breq	.+18     	; 0x5af0 <__vector_14+0x2c>
    millis--;
    5ade:	80 91 f2 02 	lds	r24, 0x02F2
    5ae2:	90 91 f3 02 	lds	r25, 0x02F3
    5ae6:	01 97       	sbiw	r24, 0x01	; 1
    5ae8:	90 93 f3 02 	sts	0x02F3, r25
    5aec:	80 93 f2 02 	sts	0x02F2, r24
  if (animticker)
    5af0:	80 91 73 03 	lds	r24, 0x0373
    5af4:	90 91 74 03 	lds	r25, 0x0374
    5af8:	89 2b       	or	r24, r25
    5afa:	49 f0       	breq	.+18     	; 0x5b0e <__vector_14+0x4a>
    animticker--;
    5afc:	80 91 73 03 	lds	r24, 0x0373
    5b00:	90 91 74 03 	lds	r25, 0x0374
    5b04:	01 97       	sbiw	r24, 0x01	; 1
    5b06:	90 93 74 03 	sts	0x0374, r25
    5b0a:	80 93 73 03 	sts	0x0373, r24

  if (alarming && !snoozetimer) {
    5b0e:	80 91 71 03 	lds	r24, 0x0371
    5b12:	88 23       	and	r24, r24
    5b14:	89 f1       	breq	.+98     	; 0x5b78 <__vector_14+0xb4>
    5b16:	80 91 f0 02 	lds	r24, 0x02F0
    5b1a:	90 91 f1 02 	lds	r25, 0x02F1
    5b1e:	89 2b       	or	r24, r25
    5b20:	59 f5       	brne	.+86     	; 0x5b78 <__vector_14+0xb4>
    if (alarmticker == 0) {
    5b22:	80 91 67 03 	lds	r24, 0x0367
    5b26:	90 91 68 03 	lds	r25, 0x0368
    5b2a:	89 2b       	or	r24, r25
    5b2c:	e1 f4       	brne	.+56     	; 0x5b66 <__vector_14+0xa2>
      alarmticker = 300;
    5b2e:	8c e2       	ldi	r24, 0x2C	; 44
    5b30:	91 e0       	ldi	r25, 0x01	; 1
    5b32:	90 93 68 03 	sts	0x0368, r25
    5b36:	80 93 67 03 	sts	0x0367, r24
      if (TCCR1B == 0) {
    5b3a:	80 91 81 00 	lds	r24, 0x0081
    5b3e:	88 23       	and	r24, r24
    5b40:	79 f4       	brne	.+30     	; 0x5b60 <__vector_14+0x9c>
	TCCR1A = 0; 
    5b42:	10 92 80 00 	sts	0x0080, r1
	TCCR1B =  _BV(WGM12) | _BV(CS10); // CTC with fastest timer
    5b46:	89 e0       	ldi	r24, 0x09	; 9
    5b48:	80 93 81 00 	sts	0x0081, r24
	TIMSK1 = _BV(TOIE1) | _BV(OCIE1A);
    5b4c:	83 e0       	ldi	r24, 0x03	; 3
    5b4e:	80 93 6f 00 	sts	0x006F, r24
	OCR1A = (F_CPU / ALARM_FREQ) / 2;
    5b52:	88 ee       	ldi	r24, 0xE8	; 232
    5b54:	93 e0       	ldi	r25, 0x03	; 3
    5b56:	90 93 89 00 	sts	0x0089, r25
    5b5a:	80 93 88 00 	sts	0x0088, r24
    5b5e:	03 c0       	rjmp	.+6      	; 0x5b66 <__vector_14+0xa2>
      } else {
	TCCR1B = 0;
    5b60:	10 92 81 00 	sts	0x0081, r1
	// turn off piezo
	PIEZO_PORT &= ~_BV(PIEZO);
    5b64:	43 98       	cbi	0x08, 3	; 8
      }
    }
    alarmticker--;    
    5b66:	80 91 67 03 	lds	r24, 0x0367
    5b6a:	90 91 68 03 	lds	r25, 0x0368
    5b6e:	01 97       	sbiw	r24, 0x01	; 1
    5b70:	90 93 68 03 	sts	0x0368, r25
    5b74:	80 93 67 03 	sts	0x0367, r24
  }
}
    5b78:	9f 91       	pop	r25
    5b7a:	8f 91       	pop	r24
    5b7c:	0f 90       	pop	r0
    5b7e:	0f be       	out	0x3f, r0	; 63
    5b80:	0f 90       	pop	r0
    5b82:	1f 90       	pop	r1
    5b84:	18 95       	reti

00005b86 <__vector_11>:

  halt();
}


SIGNAL(TIMER1_COMPA_vect) {
    5b86:	1f 92       	push	r1
    5b88:	0f 92       	push	r0
    5b8a:	0f b6       	in	r0, 0x3f	; 63
    5b8c:	0f 92       	push	r0
    5b8e:	11 24       	eor	r1, r1
    5b90:	8f 93       	push	r24
    5b92:	9f 93       	push	r25
  PIEZO_PORT ^= _BV(PIEZO);
    5b94:	88 b1       	in	r24, 0x08	; 8
    5b96:	98 e0       	ldi	r25, 0x08	; 8
    5b98:	89 27       	eor	r24, r25
    5b9a:	88 b9       	out	0x08, r24	; 8
}
    5b9c:	9f 91       	pop	r25
    5b9e:	8f 91       	pop	r24
    5ba0:	0f 90       	pop	r0
    5ba2:	0f be       	out	0x3f, r0	; 63
    5ba4:	0f 90       	pop	r0
    5ba6:	1f 90       	pop	r1
    5ba8:	18 95       	reti

00005baa <setalarmstate>:

// This turns on/off the alarm when the switch has been
// set. It also displays the alarm time
void setalarmstate(void) {
  DEBUGP("a");
  if (ALARM_PIN & _BV(ALARM)) { 
    5baa:	1e 9b       	sbis	0x03, 6	; 3
    5bac:	16 c0       	rjmp	.+44     	; 0x5bda <setalarmstate+0x30>
    if (alarm_on) {
    5bae:	80 91 6e 03 	lds	r24, 0x036E
    5bb2:	88 23       	and	r24, r24
    5bb4:	99 f1       	breq	.+102    	; 0x5c1c <setalarmstate+0x72>
      // turn off the alarm
      alarm_on = 0;
    5bb6:	10 92 6e 03 	sts	0x036E, r1
      alarm_tripped = 0;
    5bba:	10 92 78 03 	sts	0x0378, r1
      snoozetimer = 0;
    5bbe:	10 92 f1 02 	sts	0x02F1, r1
    5bc2:	10 92 f0 02 	sts	0x02F0, r1
      if (alarming) {
    5bc6:	80 91 71 03 	lds	r24, 0x0371
    5bca:	88 23       	and	r24, r24
    5bcc:	39 f1       	breq	.+78     	; 0x5c1c <setalarmstate+0x72>
	// if the alarm is going off, we should turn it off
	// and quiet the speaker
	DEBUGP("alarm off");
	alarming = 0;
    5bce:	10 92 71 03 	sts	0x0371, r1
	TCCR1B = 0;
    5bd2:	10 92 81 00 	sts	0x0081, r1
	// turn off piezo
	PIEZO_PORT &= ~_BV(PIEZO);
    5bd6:	43 98       	cbi	0x08, 3	; 8
    5bd8:	08 95       	ret
      } 
    }
  } else {
    // Don't display the alarm/beep if we already have
    if  (!alarm_on) {
    5bda:	80 91 6e 03 	lds	r24, 0x036E
    5bde:	88 23       	and	r24, r24
    5be0:	e9 f4       	brne	.+58     	; 0x5c1c <setalarmstate+0x72>
      // alarm on!
      alarm_on = 1;
    5be2:	81 e0       	ldi	r24, 0x01	; 1
    5be4:	80 93 6e 03 	sts	0x036E, r24
      // reset snoozing
      snoozetimer = 0;
    5be8:	10 92 f1 02 	sts	0x02F1, r1
    5bec:	10 92 f0 02 	sts	0x02F0, r1
#ifdef DEATHCHRON
	  if (displaystyle == STYLE_DEATH) {
    5bf0:	80 91 69 03 	lds	r24, 0x0369
    5bf4:	86 3d       	cpi	r24, 0xD6	; 214
    5bf6:	31 f4       	brne	.+12     	; 0x5c04 <setalarmstate+0x5a>
	    if(score_mode >= SCORE_MODE_DEATH_TIME)
    5bf8:	80 91 67 02 	lds	r24, 0x0267
    5bfc:	84 30       	cpi	r24, 0x04	; 4
    5bfe:	10 f0       	brcs	.+4      	; 0x5c04 <setalarmstate+0x5a>
	      score_mode = SCORE_MODE_DEATH_ALARM;
    5c00:	87 e0       	ldi	r24, 0x07	; 7
    5c02:	01 c0       	rjmp	.+2      	; 0x5c06 <setalarmstate+0x5c>
	    else
	      score_mode = SCORE_MODE_ALARM;
	  }
	  else
#endif
	    score_mode = SCORE_MODE_ALARM;
    5c04:	83 e0       	ldi	r24, 0x03	; 3
    5c06:	80 93 67 02 	sts	0x0267, r24
	  score_mode_timeout = SCORE_MODE_TIMEOUT;
    5c0a:	80 91 69 03 	lds	r24, 0x0369
    5c0e:	81 30       	cpi	r24, 0x01	; 1
    5c10:	11 f0       	breq	.+4      	; 0x5c16 <setalarmstate+0x6c>
    5c12:	83 e0       	ldi	r24, 0x03	; 3
    5c14:	01 c0       	rjmp	.+2      	; 0x5c18 <setalarmstate+0x6e>
    5c16:	85 e0       	ldi	r24, 0x05	; 5
    5c18:	80 93 66 02 	sts	0x0266, r24
    5c1c:	08 95       	ret

00005c1e <leapyear>:
  if (timeoutcounter) {
    timeoutcounter--;
  }
}

uint8_t leapyear(uint16_t y) {
    5c1e:	fc 01       	movw	r30, r24
  return ( (!(y % 4) && (y % 100)) || !(y % 400));
    5c20:	83 70       	andi	r24, 0x03	; 3
    5c22:	90 70       	andi	r25, 0x00	; 0
    5c24:	89 2b       	or	r24, r25
    5c26:	39 f4       	brne	.+14     	; 0x5c36 <leapyear+0x18>
    5c28:	cf 01       	movw	r24, r30
    5c2a:	64 e6       	ldi	r22, 0x64	; 100
    5c2c:	70 e0       	ldi	r23, 0x00	; 0
    5c2e:	0e 94 ea 39 	call	0x73d4	; 0x73d4 <__udivmodhi4>
    5c32:	89 2b       	or	r24, r25
    5c34:	49 f4       	brne	.+18     	; 0x5c48 <leapyear+0x2a>
    5c36:	20 e0       	ldi	r18, 0x00	; 0
    5c38:	30 e0       	ldi	r19, 0x00	; 0
    5c3a:	cf 01       	movw	r24, r30
    5c3c:	60 e9       	ldi	r22, 0x90	; 144
    5c3e:	71 e0       	ldi	r23, 0x01	; 1
    5c40:	0e 94 ea 39 	call	0x73d4	; 0x73d4 <__udivmodhi4>
    5c44:	89 2b       	or	r24, r25
    5c46:	11 f4       	brne	.+4      	; 0x5c4c <leapyear+0x2e>
    5c48:	21 e0       	ldi	r18, 0x01	; 1
    5c4a:	30 e0       	ldi	r19, 0x00	; 0
}
    5c4c:	82 2f       	mov	r24, r18
    5c4e:	08 95       	ret

00005c50 <tick>:

void tick(void) {


}
    5c50:	08 95       	ret

00005c52 <i2bcd>:



inline uint8_t i2bcd(uint8_t x) {
    5c52:	48 2f       	mov	r20, r24
    5c54:	6a e0       	ldi	r22, 0x0A	; 10
    5c56:	0e 94 de 39 	call	0x73bc	; 0x73bc <__udivmodqi4>
    5c5a:	28 2f       	mov	r18, r24
    5c5c:	30 e0       	ldi	r19, 0x00	; 0
    5c5e:	84 e0       	ldi	r24, 0x04	; 4
    5c60:	22 0f       	add	r18, r18
    5c62:	33 1f       	adc	r19, r19
    5c64:	8a 95       	dec	r24
    5c66:	e1 f7       	brne	.-8      	; 0x5c60 <i2bcd+0xe>
    5c68:	84 2f       	mov	r24, r20
    5c6a:	0e 94 de 39 	call	0x73bc	; 0x73bc <__udivmodqi4>
  return ((x/10)<<4) | (x%10);
}
    5c6e:	89 2f       	mov	r24, r25
    5c70:	82 2b       	or	r24, r18
    5c72:	08 95       	ret

00005c74 <setsnooze>:
}

void setsnooze(void) {
  //snoozetimer = eeprom_read_byte(&EE_SNOOZE);
  //snoozetimer *= 60; // convert minutes to seconds
  snoozetimer = MAXSNOOZE;
    5c74:	88 e5       	ldi	r24, 0x58	; 88
    5c76:	92 e0       	ldi	r25, 0x02	; 2
    5c78:	90 93 f1 02 	sts	0x02F1, r25
    5c7c:	80 93 f0 02 	sts	0x02F0, r24
  TCCR1B = 0;
    5c80:	10 92 81 00 	sts	0x0081, r1
  // turn off piezo
  PIEZO_PORT &= ~_BV(PIEZO);
    5c84:	43 98       	cbi	0x08, 3	; 8
  DEBUGP("snooze");
  //displaymode = SHOW_SNOOZE;
  //delay_ms(1000);
  displaymode = SHOW_TIME;
    5c86:	10 92 72 03 	sts	0x0372, r1
}
    5c8a:	08 95       	ret

00005c8c <DecodeGPSBuffer>:
 } 
}


// Decodes a 2 char number to uint8
uint8_t DecodeGPSBuffer(char *cBuffer) {
    5c8c:	fc 01       	movw	r30, r24
    5c8e:	81 81       	ldd	r24, Z+1	; 0x01
    5c90:	80 51       	subi	r24, 0x10	; 16
    5c92:	20 81       	ld	r18, Z
    5c94:	9a e0       	ldi	r25, 0x0A	; 10
    5c96:	29 9f       	mul	r18, r25
    5c98:	90 01       	movw	r18, r0
    5c9a:	11 24       	eor	r1, r1
 return ((cBuffer[0]-48)*10) + (cBuffer[1]-48);
}
    5c9c:	82 0f       	add	r24, r18
    5c9e:	08 95       	ret

00005ca0 <printnumber>:
  glcdSetDot(x+l-3,y-2);
  glcdSetDot(x+l-3,y+2);
}


void printnumber(uint8_t n, uint8_t inverted) {
    5ca0:	0f 93       	push	r16
    5ca2:	1f 93       	push	r17
    5ca4:	18 2f       	mov	r17, r24
    5ca6:	06 2f       	mov	r16, r22
  glcdWriteChar(n/10+'0', inverted);
    5ca8:	6a e0       	ldi	r22, 0x0A	; 10
    5caa:	0e 94 de 39 	call	0x73bc	; 0x73bc <__udivmodqi4>
    5cae:	80 5d       	subi	r24, 0xD0	; 208
    5cb0:	60 2f       	mov	r22, r16
    5cb2:	0e 94 b3 28 	call	0x5166	; 0x5166 <glcdWriteChar>
  glcdWriteChar(n%10+'0', inverted);
    5cb6:	81 2f       	mov	r24, r17
    5cb8:	6a e0       	ldi	r22, 0x0A	; 10
    5cba:	0e 94 de 39 	call	0x73bc	; 0x73bc <__udivmodqi4>
    5cbe:	89 2f       	mov	r24, r25
    5cc0:	80 5d       	subi	r24, 0xD0	; 208
    5cc2:	60 2f       	mov	r22, r16
    5cc4:	0e 94 b3 28 	call	0x5166	; 0x5166 <glcdWriteChar>
}
    5cc8:	1f 91       	pop	r17
    5cca:	0f 91       	pop	r16
    5ccc:	08 95       	ret

00005cce <GPSRead>:
  displaymode = SHOW_TIME;
}

#ifdef GPSENABLE

uint8_t GPSRead(uint8_t debugmode) {
    5cce:	ac e0       	ldi	r26, 0x0C	; 12
    5cd0:	b0 e0       	ldi	r27, 0x00	; 0
    5cd2:	ed e6       	ldi	r30, 0x6D	; 109
    5cd4:	fe e2       	ldi	r31, 0x2E	; 46
    5cd6:	0c 94 57 3a 	jmp	0x74ae	; 0x74ae <__prologue_saves__+0x12>
    5cda:	08 2f       	mov	r16, r24
 static uint8_t blen=0;
 static char buffer[11];
 static int8_t dadjflag =0;
 static uint8_t scrpos=0;
 char ch=0;
 timezone=(int8_t)eeprom_read_byte(&EE_TIMEZONE);
    5cdc:	89 e1       	ldi	r24, 0x19	; 25
    5cde:	90 e0       	ldi	r25, 0x00	; 0
    5ce0:	0e 94 94 3a 	call	0x7528	; 0x7528 <__eerd_byte_m328p>
    5ce4:	80 93 69 02 	sts	0x0269, r24
 timezonehour=TIMEZONEHOUR;
    5ce8:	80 91 69 02 	lds	r24, 0x0269
    5cec:	99 27       	eor	r25, r25
    5cee:	87 fd       	sbrc	r24, 7
    5cf0:	90 95       	com	r25
    5cf2:	97 ff       	sbrs	r25, 7
    5cf4:	03 c0       	rjmp	.+6      	; 0x5cfc <GPSRead+0x2e>
    5cf6:	90 95       	com	r25
    5cf8:	81 95       	neg	r24
    5cfa:	9f 4f       	sbci	r25, 0xFF	; 255
    5cfc:	95 95       	asr	r25
    5cfe:	87 95       	ror	r24
    5d00:	95 95       	asr	r25
    5d02:	87 95       	ror	r24
    5d04:	80 93 6a 02 	sts	0x026A, r24
 timezonemin=TIMEZONEMIN;
    5d08:	80 91 69 02 	lds	r24, 0x0269
    5d0c:	99 27       	eor	r25, r25
    5d0e:	87 fd       	sbrc	r24, 7
    5d10:	90 95       	com	r25
    5d12:	97 ff       	sbrs	r25, 7
    5d14:	03 c0       	rjmp	.+6      	; 0x5d1c <GPSRead+0x4e>
    5d16:	90 95       	com	r25
    5d18:	81 95       	neg	r24
    5d1a:	9f 4f       	sbci	r25, 0xFF	; 255
    5d1c:	83 70       	andi	r24, 0x03	; 3
    5d1e:	90 70       	andi	r25, 0x00	; 0
    5d20:	9c 01       	movw	r18, r24
    5d22:	44 e0       	ldi	r20, 0x04	; 4
    5d24:	22 0f       	add	r18, r18
    5d26:	33 1f       	adc	r19, r19
    5d28:	4a 95       	dec	r20
    5d2a:	e1 f7       	brne	.-8      	; 0x5d24 <GPSRead+0x56>
    5d2c:	28 1b       	sub	r18, r24
    5d2e:	39 0b       	sbc	r19, r25
    5d30:	20 93 6b 02 	sts	0x026B, r18
 if(timezone<0) {
    5d34:	80 91 69 02 	lds	r24, 0x0269
    5d38:	87 ff       	sbrs	r24, 7
    5d3a:	0a c0       	rjmp	.+20     	; 0x5d50 <GPSRead+0x82>
  timezonehour*=-1;
    5d3c:	80 91 6a 02 	lds	r24, 0x026A
    5d40:	81 95       	neg	r24
    5d42:	80 93 6a 02 	sts	0x026A, r24
  timezonemin*=-1;
    5d46:	80 91 6b 02 	lds	r24, 0x026B
    5d4a:	81 95       	neg	r24
    5d4c:	80 93 6b 02 	sts	0x026B, r24
 }
 
 //                     JA FE MA AP MA JU JL AU SE OC NO DE
 uint8_t monthmath[] = {31,28,31,30,31,30,31,31,30,31,30,31};
    5d50:	de 01       	movw	r26, r28
    5d52:	11 96       	adiw	r26, 0x01	; 1
    5d54:	e5 e2       	ldi	r30, 0x25	; 37
    5d56:	f2 e0       	ldi	r31, 0x02	; 2
    5d58:	8c e0       	ldi	r24, 0x0C	; 12
    5d5a:	01 90       	ld	r0, Z+
    5d5c:	0d 92       	st	X+, r0
    5d5e:	81 50       	subi	r24, 0x01	; 1
    5d60:	e1 f7       	brne	.-8      	; 0x5d5a <GPSRead+0x8c>
    5d62:	aa c1       	rjmp	.+852    	; 0x60b8 <GPSRead+0x3ea>
 //if(!uart_getch()) return 0;
 //ch = uart_getchar();
 while(char_available()) {
   ch = char_read();
    5d64:	0e 94 31 2d 	call	0x5a62	; 0x5a62 <char_read>
    5d68:	18 2f       	mov	r17, r24
 if (ch<32 || ch>127) continue;
    5d6a:	80 52       	subi	r24, 0x20	; 32
    5d6c:	80 36       	cpi	r24, 0x60	; 96
    5d6e:	08 f0       	brcs	.+2      	; 0x5d72 <GPSRead+0xa4>
    5d70:	ad c1       	rjmp	.+858    	; 0x60cc <GPSRead+0x3fe>
 if (debugmode) {
    5d72:	00 23       	and	r16, r16
    5d74:	d1 f0       	breq	.+52     	; 0x5daa <GPSRead+0xdc>
  glcdSetAddress(6 * scrpos++, 6); 
    5d76:	80 91 f6 02 	lds	r24, 0x02F6
    5d7a:	8f 5f       	subi	r24, 0xFF	; 255
    5d7c:	80 93 f6 02 	sts	0x02F6, r24
    5d80:	81 50       	subi	r24, 0x01	; 1
    5d82:	8c 9d       	mul	r24, r12
    5d84:	80 2d       	mov	r24, r0
    5d86:	11 24       	eor	r1, r1
    5d88:	66 e0       	ldi	r22, 0x06	; 6
    5d8a:	0e 94 9c 2c 	call	0x5938	; 0x5938 <glcdSetAddress>
  glcdWriteChar(ch, NORMAL); 
    5d8e:	81 2f       	mov	r24, r17
    5d90:	60 e0       	ldi	r22, 0x00	; 0
    5d92:	0e 94 b3 28 	call	0x5166	; 0x5166 <glcdWriteChar>
  glcdWriteChar(32, NORMAL); 
    5d96:	80 e2       	ldi	r24, 0x20	; 32
    5d98:	60 e0       	ldi	r22, 0x00	; 0
    5d9a:	0e 94 b3 28 	call	0x5166	; 0x5166 <glcdWriteChar>
  if (scrpos>19) {scrpos=0;}
    5d9e:	80 91 f6 02 	lds	r24, 0x02F6
    5da2:	84 31       	cpi	r24, 0x14	; 20
    5da4:	10 f0       	brcs	.+4      	; 0x5daa <GPSRead+0xdc>
    5da6:	10 92 f6 02 	sts	0x02F6, r1
 }
 // Check for start of sentence
 if (ch=='$') { 
    5daa:	14 32       	cpi	r17, 0x24	; 36
    5dac:	29 f4       	brne	.+10     	; 0x5db8 <GPSRead+0xea>
  soh=1; 
    5dae:	e0 92 04 03 	sts	0x0304, r14
  blen=0; 
    5db2:	10 92 03 03 	sts	0x0303, r1
    5db6:	8a c1       	rjmp	.+788    	; 0x60cc <GPSRead+0x3fe>
  continue;
 }
 // If inside a sentence...
 if (soh>0) {
    5db8:	80 91 04 03 	lds	r24, 0x0304
    5dbc:	88 23       	and	r24, r24
    5dbe:	09 f4       	brne	.+2      	; 0x5dc2 <GPSRead+0xf4>
    5dc0:	85 c1       	rjmp	.+778    	; 0x60cc <GPSRead+0x3fe>
    5dc2:	90 91 03 03 	lds	r25, 0x0303

  // check for next field
  if (ch == ',') {
    5dc6:	1c 32       	cpi	r17, 0x2C	; 44
    5dc8:	51 f4       	brne	.+20     	; 0x5dde <GPSRead+0x110>
   soh++; 
    5dca:	8f 5f       	subi	r24, 0xFF	; 255
    5dcc:	80 93 04 03 	sts	0x0304, r24
   if (blen==0) {buffer[0]=0;}  
    5dd0:	99 23       	and	r25, r25
    5dd2:	11 f4       	brne	.+4      	; 0x5dd8 <GPSRead+0x10a>
    5dd4:	10 92 f8 02 	sts	0x02F8, r1
   blen=0;
    5dd8:	10 92 03 03 	sts	0x0303, r1
    5ddc:	0f c0       	rjmp	.+30     	; 0x5dfc <GPSRead+0x12e>
  }
  // otherwise, add character to buffer
  else { 
   if (blen<10) {
    5dde:	9a 30       	cpi	r25, 0x0A	; 10
    5de0:	68 f4       	brcc	.+26     	; 0x5dfc <GPSRead+0x12e>
    buffer[blen++]=ch;
    5de2:	e9 2f       	mov	r30, r25
    5de4:	f0 e0       	ldi	r31, 0x00	; 0
    5de6:	e8 50       	subi	r30, 0x08	; 8
    5de8:	fd 4f       	sbci	r31, 0xFD	; 253
    5dea:	10 83       	st	Z, r17
    5dec:	e9 2f       	mov	r30, r25
    5dee:	ef 5f       	subi	r30, 0xFF	; 255
    5df0:	e0 93 03 03 	sts	0x0303, r30
    buffer[blen]=0;
    5df4:	f0 e0       	ldi	r31, 0x00	; 0
    5df6:	e8 50       	subi	r30, 0x08	; 8
    5df8:	fd 4f       	sbci	r31, 0xFD	; 253
    5dfa:	10 82       	st	Z, r1
   } 
  }

  // Process: Command
  if (soh==2) {
    5dfc:	80 91 04 03 	lds	r24, 0x0304
    5e00:	82 30       	cpi	r24, 0x02	; 2
    5e02:	99 f4       	brne	.+38     	; 0x5e2a <GPSRead+0x15c>
   if (!strcmp(buffer,"GPRMC")) {soh=3; blen=0; buffer[0]=0;}
    5e04:	88 ef       	ldi	r24, 0xF8	; 248
    5e06:	92 e0       	ldi	r25, 0x02	; 2
    5e08:	60 e1       	ldi	r22, 0x10	; 16
    5e0a:	72 e0       	ldi	r23, 0x02	; 2
    5e0c:	0e 94 8b 3a 	call	0x7516	; 0x7516 <strcmp>
    5e10:	00 97       	sbiw	r24, 0x00	; 0
    5e12:	41 f4       	brne	.+16     	; 0x5e24 <GPSRead+0x156>
    5e14:	83 e0       	ldi	r24, 0x03	; 3
    5e16:	80 93 04 03 	sts	0x0304, r24
    5e1a:	10 92 03 03 	sts	0x0303, r1
    5e1e:	10 92 f8 02 	sts	0x02F8, r1
    5e22:	54 c1       	rjmp	.+680    	; 0x60cc <GPSRead+0x3fe>
   else {soh=0;}
    5e24:	10 92 04 03 	sts	0x0304, r1
    5e28:	51 c1       	rjmp	.+674    	; 0x60cc <GPSRead+0x3fe>
   continue;
  }
  
  // Process: Time
  if (soh==4) { // Time Word
    5e2a:	84 30       	cpi	r24, 0x04	; 4
    5e2c:	09 f0       	breq	.+2      	; 0x5e30 <GPSRead+0x162>
    5e2e:	a2 c0       	rjmp	.+324    	; 0x5f74 <GPSRead+0x2a6>
   soh++;
    5e30:	b0 92 04 03 	sts	0x0304, r11
   if (debugmode) {
    5e34:	00 23       	and	r16, r16
    5e36:	61 f0       	breq	.+24     	; 0x5e50 <GPSRead+0x182>
    buffer[6]=0; 
    5e38:	10 92 fe 02 	sts	0x02FE, r1
    glcdSetAddress(MENU_INDENT+60, 5); 
    5e3c:	84 e4       	ldi	r24, 0x44	; 68
    5e3e:	65 e0       	ldi	r22, 0x05	; 5
    5e40:	0e 94 9c 2c 	call	0x5938	; 0x5938 <glcdSetAddress>
    glcdPutStr_ram(buffer, NORMAL); 
    5e44:	88 ef       	ldi	r24, 0xF8	; 248
    5e46:	92 e0       	ldi	r25, 0x02	; 2
    5e48:	60 e0       	ldi	r22, 0x00	; 0
    5e4a:	0e 94 f4 28 	call	0x51e8	; 0x51e8 <glcdPutStr_ram>
    5e4e:	3e c1       	rjmp	.+636    	; 0x60cc <GPSRead+0x3fe>
    continue;
   }
   cli();
    5e50:	f8 94       	cli
}


// Decodes a 2 char number to uint8
uint8_t DecodeGPSBuffer(char *cBuffer) {
 return ((cBuffer[0]-48)*10) + (cBuffer[1]-48);
    5e52:	20 91 fd 02 	lds	r18, 0x02FD
    5e56:	20 51       	subi	r18, 0x10	; 16
    5e58:	80 91 fc 02 	lds	r24, 0x02FC
    5e5c:	8f 9d       	mul	r24, r15
    5e5e:	c0 01       	movw	r24, r0
    5e60:	11 24       	eor	r1, r1
    5e62:	28 0f       	add	r18, r24
    glcdSetAddress(MENU_INDENT+60, 5); 
    glcdPutStr_ram(buffer, NORMAL); 
    continue;
   }
   cli();
   time_s = DecodeGPSBuffer((char *)&buffer[4]); 
    5e64:	20 93 77 03 	sts	0x0377, r18
}


// Decodes a 2 char number to uint8
uint8_t DecodeGPSBuffer(char *cBuffer) {
 return ((cBuffer[0]-48)*10) + (cBuffer[1]-48);
    5e68:	20 91 fb 02 	lds	r18, 0x02FB
    5e6c:	20 51       	subi	r18, 0x10	; 16
    5e6e:	80 91 fa 02 	lds	r24, 0x02FA
    5e72:	8f 9d       	mul	r24, r15
    5e74:	c0 01       	movw	r24, r0
    5e76:	11 24       	eor	r1, r1
    5e78:	28 0f       	add	r18, r24
    glcdPutStr_ram(buffer, NORMAL); 
    continue;
   }
   cli();
   time_s = DecodeGPSBuffer((char *)&buffer[4]); 
   time_m = DecodeGPSBuffer((char *)&buffer[2]);
    5e7a:	20 93 6c 03 	sts	0x036C, r18
}


// Decodes a 2 char number to uint8
uint8_t DecodeGPSBuffer(char *cBuffer) {
 return ((cBuffer[0]-48)*10) + (cBuffer[1]-48);
    5e7e:	20 91 f9 02 	lds	r18, 0x02F9
    5e82:	20 51       	subi	r18, 0x10	; 16
    5e84:	80 91 f8 02 	lds	r24, 0x02F8
    5e88:	8f 9d       	mul	r24, r15
    5e8a:	c0 01       	movw	r24, r0
    5e8c:	11 24       	eor	r1, r1
    5e8e:	28 0f       	add	r18, r24
    continue;
   }
   cli();
   time_s = DecodeGPSBuffer((char *)&buffer[4]); 
   time_m = DecodeGPSBuffer((char *)&buffer[2]);
   time_h = DecodeGPSBuffer(buffer);
    5e90:	20 93 62 03 	sts	0x0362, r18
   // Adjust hour by time zone offset
   // have to be careful because uint8's underflow back to 255, not -1
   dadjflag =0;
    5e94:	10 92 f7 02 	sts	0x02F7, r1
   if (timezonemin<0 && abs(timezonemin) > time_m) {
    5e98:	80 91 6b 02 	lds	r24, 0x026B
    5e9c:	87 ff       	sbrs	r24, 7
    5e9e:	20 c0       	rjmp	.+64     	; 0x5ee0 <GPSRead+0x212>
    5ea0:	80 91 6b 02 	lds	r24, 0x026B
    5ea4:	90 91 6c 03 	lds	r25, 0x036C
    5ea8:	28 2f       	mov	r18, r24
    5eaa:	33 27       	eor	r19, r19
    5eac:	27 fd       	sbrc	r18, 7
    5eae:	30 95       	com	r19
    5eb0:	37 ff       	sbrs	r19, 7
    5eb2:	03 c0       	rjmp	.+6      	; 0x5eba <GPSRead+0x1ec>
    5eb4:	30 95       	com	r19
    5eb6:	21 95       	neg	r18
    5eb8:	3f 4f       	sbci	r19, 0xFF	; 255
    5eba:	89 2f       	mov	r24, r25
    5ebc:	90 e0       	ldi	r25, 0x00	; 0
    5ebe:	82 17       	cp	r24, r18
    5ec0:	93 07       	cpc	r25, r19
    5ec2:	74 f4       	brge	.+28     	; 0x5ee0 <GPSRead+0x212>
    timezonehour--;
    5ec4:	80 91 6a 02 	lds	r24, 0x026A
    5ec8:	81 50       	subi	r24, 0x01	; 1
    5eca:	80 93 6a 02 	sts	0x026A, r24
    time_m = 60 + time_m + timezonemin;
    5ece:	80 91 6c 03 	lds	r24, 0x036C
    5ed2:	90 91 6b 02 	lds	r25, 0x026B
    5ed6:	84 5c       	subi	r24, 0xC4	; 196
    5ed8:	89 0f       	add	r24, r25
    5eda:	80 93 6c 03 	sts	0x036C, r24
    5ede:	15 c0       	rjmp	.+42     	; 0x5f0a <GPSRead+0x23c>
   }
   else {
    time_m+=timezonemin;
    5ee0:	80 91 6c 03 	lds	r24, 0x036C
    5ee4:	90 91 6b 02 	lds	r25, 0x026B
    5ee8:	98 0f       	add	r25, r24
    5eea:	90 93 6c 03 	sts	0x036C, r25
    if (time_m>60) { // Remind us to add a day...
    5eee:	80 91 6c 03 	lds	r24, 0x036C
    5ef2:	8d 33       	cpi	r24, 0x3D	; 61
    5ef4:	50 f0       	brcs	.+20     	; 0x5f0a <GPSRead+0x23c>
     time_m-=60; 
    5ef6:	80 91 6c 03 	lds	r24, 0x036C
    5efa:	8c 53       	subi	r24, 0x3C	; 60
    5efc:	80 93 6c 03 	sts	0x036C, r24
     timezonehour++;
    5f00:	80 91 6a 02 	lds	r24, 0x026A
    5f04:	8f 5f       	subi	r24, 0xFF	; 255
    5f06:	80 93 6a 02 	sts	0x026A, r24
    }
   }
   if (timezonehour<0 && abs(timezonehour) > time_h) {
    5f0a:	80 91 6a 02 	lds	r24, 0x026A
    5f0e:	87 ff       	sbrs	r24, 7
    5f10:	1d c0       	rjmp	.+58     	; 0x5f4c <GPSRead+0x27e>
    5f12:	80 91 6a 02 	lds	r24, 0x026A
    5f16:	90 91 62 03 	lds	r25, 0x0362
    5f1a:	28 2f       	mov	r18, r24
    5f1c:	33 27       	eor	r19, r19
    5f1e:	27 fd       	sbrc	r18, 7
    5f20:	30 95       	com	r19
    5f22:	37 ff       	sbrs	r19, 7
    5f24:	03 c0       	rjmp	.+6      	; 0x5f2c <GPSRead+0x25e>
    5f26:	30 95       	com	r19
    5f28:	21 95       	neg	r18
    5f2a:	3f 4f       	sbci	r19, 0xFF	; 255
    5f2c:	89 2f       	mov	r24, r25
    5f2e:	90 e0       	ldi	r25, 0x00	; 0
    5f30:	82 17       	cp	r24, r18
    5f32:	93 07       	cpc	r25, r19
    5f34:	5c f4       	brge	.+22     	; 0x5f4c <GPSRead+0x27e>
    dadjflag=-1; // Remind us to subtract a day... 
    5f36:	d0 92 f7 02 	sts	0x02F7, r13
    time_h = 24 + time_h + timezonehour;
    5f3a:	80 91 62 03 	lds	r24, 0x0362
    5f3e:	90 91 6a 02 	lds	r25, 0x026A
    5f42:	88 5e       	subi	r24, 0xE8	; 232
    5f44:	89 0f       	add	r24, r25
    5f46:	80 93 62 03 	sts	0x0362, r24
    5f4a:	c0 c0       	rjmp	.+384    	; 0x60cc <GPSRead+0x3fe>
   }
   else {
    time_h+=timezonehour;
    5f4c:	80 91 62 03 	lds	r24, 0x0362
    5f50:	90 91 6a 02 	lds	r25, 0x026A
    5f54:	98 0f       	add	r25, r24
    5f56:	90 93 62 03 	sts	0x0362, r25
    if (time_h>24) { // Remind us to add a day...
    5f5a:	80 91 62 03 	lds	r24, 0x0362
    5f5e:	89 31       	cpi	r24, 0x19	; 25
    5f60:	08 f4       	brcc	.+2      	; 0x5f64 <GPSRead+0x296>
    5f62:	b4 c0       	rjmp	.+360    	; 0x60cc <GPSRead+0x3fe>
     time_h-=24; 
    5f64:	80 91 62 03 	lds	r24, 0x0362
    5f68:	88 51       	subi	r24, 0x18	; 24
    5f6a:	80 93 62 03 	sts	0x0362, r24
     dadjflag=1;
    5f6e:	e0 92 f7 02 	sts	0x02F7, r14
    5f72:	ac c0       	rjmp	.+344    	; 0x60cc <GPSRead+0x3fe>
    }
   }
   continue;
  }

  if (soh==6) { // LAT WORD
    5f74:	86 30       	cpi	r24, 0x06	; 6
    5f76:	b9 f4       	brne	.+46     	; 0x5fa6 <GPSRead+0x2d8>
    if (debugmode) {
    5f78:	00 23       	and	r16, r16
    5f7a:	81 f0       	breq	.+32     	; 0x5f9c <GPSRead+0x2ce>
     glcdSetAddress(MENU_INDENT+60, 3); 
    5f7c:	84 e4       	ldi	r24, 0x44	; 68
    5f7e:	63 e0       	ldi	r22, 0x03	; 3
    5f80:	0e 94 9c 2c 	call	0x5938	; 0x5938 <glcdSetAddress>
     glcdPutStr_ram((!buffer[0] ? "NOLOCK" : "LOCKED"), NORMAL);
    5f84:	80 91 f8 02 	lds	r24, 0x02F8
    5f88:	88 23       	and	r24, r24
    5f8a:	19 f0       	breq	.+6      	; 0x5f92 <GPSRead+0x2c4>
    5f8c:	86 e1       	ldi	r24, 0x16	; 22
    5f8e:	92 e0       	ldi	r25, 0x02	; 2
    5f90:	02 c0       	rjmp	.+4      	; 0x5f96 <GPSRead+0x2c8>
    5f92:	8d e1       	ldi	r24, 0x1D	; 29
    5f94:	92 e0       	ldi	r25, 0x02	; 2
    5f96:	60 e0       	ldi	r22, 0x00	; 0
    5f98:	0e 94 f4 28 	call	0x51e8	; 0x51e8 <glcdPutStr_ram>
    }
    if (!buffer[0]) return 0;
    5f9c:	80 91 f8 02 	lds	r24, 0x02F8
    5fa0:	88 23       	and	r24, r24
    5fa2:	09 f4       	brne	.+2      	; 0x5fa6 <GPSRead+0x2d8>
    5fa4:	98 c0       	rjmp	.+304    	; 0x60d6 <GPSRead+0x408>
  }
  
  // Process: Date
  if (soh==13) {// Date Word
    5fa6:	80 91 04 03 	lds	r24, 0x0304
    5faa:	8d 30       	cpi	r24, 0x0D	; 13
    5fac:	09 f0       	breq	.+2      	; 0x5fb0 <GPSRead+0x2e2>
    5fae:	8e c0       	rjmp	.+284    	; 0x60cc <GPSRead+0x3fe>
   if (debugmode) {
    5fb0:	00 23       	and	r16, r16
    5fb2:	61 f0       	breq	.+24     	; 0x5fcc <GPSRead+0x2fe>
    glcdSetAddress(MENU_INDENT+60, 4); 
    5fb4:	84 e4       	ldi	r24, 0x44	; 68
    5fb6:	64 e0       	ldi	r22, 0x04	; 4
    5fb8:	0e 94 9c 2c 	call	0x5938	; 0x5938 <glcdSetAddress>
    glcdPutStr_ram(buffer, NORMAL); 
    5fbc:	88 ef       	ldi	r24, 0xF8	; 248
    5fbe:	92 e0       	ldi	r25, 0x02	; 2
    5fc0:	60 e0       	ldi	r22, 0x00	; 0
    5fc2:	0e 94 f4 28 	call	0x51e8	; 0x51e8 <glcdPutStr_ram>
    soh=0; 
    5fc6:	10 92 04 03 	sts	0x0304, r1
    5fca:	87 c0       	rjmp	.+270    	; 0x60da <GPSRead+0x40c>
    return 1;
   }
   // Joy, datemath...
   cli();
    5fcc:	f8 94       	cli
}


// Decodes a 2 char number to uint8
uint8_t DecodeGPSBuffer(char *cBuffer) {
 return ((cBuffer[0]-48)*10) + (cBuffer[1]-48);
    5fce:	20 91 f9 02 	lds	r18, 0x02F9
    5fd2:	20 51       	subi	r18, 0x10	; 16
    5fd4:	80 91 f8 02 	lds	r24, 0x02F8
    5fd8:	3a e0       	ldi	r19, 0x0A	; 10
    5fda:	83 9f       	mul	r24, r19
    5fdc:	c0 01       	movw	r24, r0
    5fde:	11 24       	eor	r1, r1
    5fe0:	28 0f       	add	r18, r24
    soh=0; 
    return 1;
   }
   // Joy, datemath...
   cli();
   date_d = DecodeGPSBuffer(buffer);  
    5fe2:	20 93 6b 03 	sts	0x036B, r18
}


// Decodes a 2 char number to uint8
uint8_t DecodeGPSBuffer(char *cBuffer) {
 return ((cBuffer[0]-48)*10) + (cBuffer[1]-48);
    5fe6:	20 91 fb 02 	lds	r18, 0x02FB
    5fea:	20 51       	subi	r18, 0x10	; 16
    5fec:	80 91 fa 02 	lds	r24, 0x02FA
    5ff0:	83 9f       	mul	r24, r19
    5ff2:	c0 01       	movw	r24, r0
    5ff4:	11 24       	eor	r1, r1
    5ff6:	28 0f       	add	r18, r24
    return 1;
   }
   // Joy, datemath...
   cli();
   date_d = DecodeGPSBuffer(buffer);  
   date_m = DecodeGPSBuffer((char *)&buffer[2]); 
    5ff8:	20 93 76 03 	sts	0x0376, r18
}


// Decodes a 2 char number to uint8
uint8_t DecodeGPSBuffer(char *cBuffer) {
 return ((cBuffer[0]-48)*10) + (cBuffer[1]-48);
    5ffc:	20 91 fd 02 	lds	r18, 0x02FD
    6000:	20 51       	subi	r18, 0x10	; 16
    6002:	80 91 fc 02 	lds	r24, 0x02FC
    6006:	83 9f       	mul	r24, r19
    6008:	c0 01       	movw	r24, r0
    600a:	11 24       	eor	r1, r1
    600c:	28 0f       	add	r18, r24
   }
   // Joy, datemath...
   cli();
   date_d = DecodeGPSBuffer(buffer);  
   date_m = DecodeGPSBuffer((char *)&buffer[2]); 
   date_y = DecodeGPSBuffer((char *)&buffer[4]);
    600e:	20 93 65 03 	sts	0x0365, r18
   monthmath[2-1] = (((date_y%4)==0) ? 29 : 28);	//Account for leap year for month 2. 
    6012:	80 91 65 03 	lds	r24, 0x0365
    6016:	90 e0       	ldi	r25, 0x00	; 0
    6018:	83 70       	andi	r24, 0x03	; 3
    601a:	90 70       	andi	r25, 0x00	; 0
    601c:	89 2b       	or	r24, r25
    601e:	11 f0       	breq	.+4      	; 0x6024 <GPSRead+0x356>
    6020:	8c e1       	ldi	r24, 0x1C	; 28
    6022:	01 c0       	rjmp	.+2      	; 0x6026 <GPSRead+0x358>
    6024:	8d e1       	ldi	r24, 0x1D	; 29
   // dadjflag is set by the time routine to remember to add or subtract a day...
   if (dadjflag) {
    6026:	90 91 f7 02 	lds	r25, 0x02F7
    602a:	99 23       	and	r25, r25
    602c:	09 f4       	brne	.+2      	; 0x6030 <GPSRead+0x362>
    602e:	55 c0       	rjmp	.+170    	; 0x60da <GPSRead+0x40c>
   // Joy, datemath...
   cli();
   date_d = DecodeGPSBuffer(buffer);  
   date_m = DecodeGPSBuffer((char *)&buffer[2]); 
   date_y = DecodeGPSBuffer((char *)&buffer[4]);
   monthmath[2-1] = (((date_y%4)==0) ? 29 : 28);	//Account for leap year for month 2. 
    6030:	8a 83       	std	Y+2, r24	; 0x02
   // dadjflag is set by the time routine to remember to add or subtract a day...
   if (dadjflag) {
    date_d += dadjflag;
    6032:	80 91 6b 03 	lds	r24, 0x036B
    6036:	98 0f       	add	r25, r24
    6038:	90 93 6b 03 	sts	0x036B, r25
    if (!date_d) { // Subtracted to Day=0
    603c:	80 91 6b 03 	lds	r24, 0x036B
    6040:	88 23       	and	r24, r24
    6042:	e1 f4       	brne	.+56     	; 0x607c <GPSRead+0x3ae>
     if (!--date_m) {
    6044:	80 91 76 03 	lds	r24, 0x0376
    6048:	81 50       	subi	r24, 0x01	; 1
    604a:	80 93 76 03 	sts	0x0376, r24
    604e:	80 91 76 03 	lds	r24, 0x0376
    6052:	88 23       	and	r24, r24
    6054:	51 f4       	brne	.+20     	; 0x606a <GPSRead+0x39c>
      date_y--;
    6056:	80 91 65 03 	lds	r24, 0x0365
    605a:	81 50       	subi	r24, 0x01	; 1
    605c:	80 93 65 03 	sts	0x0365, r24
      date_m = 12;
    6060:	8c e0       	ldi	r24, 0x0C	; 12
    6062:	80 93 76 03 	sts	0x0376, r24
      date_d = 31;
    6066:	8f e1       	ldi	r24, 0x1F	; 31
    6068:	06 c0       	rjmp	.+12     	; 0x6076 <GPSRead+0x3a8>
     }
     else {
     date_d = monthmath[date_m-1];
    606a:	80 91 76 03 	lds	r24, 0x0376
    606e:	fe 01       	movw	r30, r28
    6070:	e8 0f       	add	r30, r24
    6072:	f1 1d       	adc	r31, r1
    6074:	80 81       	ld	r24, Z
    6076:	80 93 6b 03 	sts	0x036B, r24
    607a:	2f c0       	rjmp	.+94     	; 0x60da <GPSRead+0x40c>
     }     
    }
    else { // check for date > end of month (including leap year calc)
     if (date_d > monthmath[date_m-1]) {
    607c:	90 91 6b 03 	lds	r25, 0x036B
    6080:	80 91 76 03 	lds	r24, 0x0376
    6084:	fe 01       	movw	r30, r28
    6086:	e8 0f       	add	r30, r24
    6088:	f1 1d       	adc	r31, r1
    608a:	80 81       	ld	r24, Z
    608c:	89 17       	cp	r24, r25
    608e:	28 f5       	brcc	.+74     	; 0x60da <GPSRead+0x40c>
      date_d = 1;
    6090:	91 e0       	ldi	r25, 0x01	; 1
    6092:	90 93 6b 03 	sts	0x036B, r25
      date_m++;
    6096:	80 91 76 03 	lds	r24, 0x0376
    609a:	8f 5f       	subi	r24, 0xFF	; 255
    609c:	80 93 76 03 	sts	0x0376, r24
      if (date_m>12) {
    60a0:	80 91 76 03 	lds	r24, 0x0376
    60a4:	8d 30       	cpi	r24, 0x0D	; 13
    60a6:	c8 f0       	brcs	.+50     	; 0x60da <GPSRead+0x40c>
       date_y++; 
    60a8:	80 91 65 03 	lds	r24, 0x0365
    60ac:	8f 5f       	subi	r24, 0xFF	; 255
    60ae:	80 93 65 03 	sts	0x0365, r24
       date_m=1;
    60b2:	90 93 76 03 	sts	0x0376, r25
    60b6:	11 c0       	rjmp	.+34     	; 0x60da <GPSRead+0x40c>
   continue;
  }
  
  // Process: Time
  if (soh==4) { // Time Word
   soh++;
    60b8:	35 e0       	ldi	r19, 0x05	; 5
    60ba:	b3 2e       	mov	r11, r19
}


// Decodes a 2 char number to uint8
uint8_t DecodeGPSBuffer(char *cBuffer) {
 return ((cBuffer[0]-48)*10) + (cBuffer[1]-48);
    60bc:	2a e0       	ldi	r18, 0x0A	; 10
    60be:	f2 2e       	mov	r15, r18
   }
   else {
    time_h+=timezonehour;
    if (time_h>24) { // Remind us to add a day...
     time_h-=24; 
     dadjflag=1;
    60c0:	ee 24       	eor	r14, r14
    60c2:	e3 94       	inc	r14
     time_m-=60; 
     timezonehour++;
    }
   }
   if (timezonehour<0 && abs(timezonehour) > time_h) {
    dadjflag=-1; // Remind us to subtract a day... 
    60c4:	dd 24       	eor	r13, r13
    60c6:	da 94       	dec	r13
 //ch = uart_getchar();
 while(char_available()) {
   ch = char_read();
 if (ch<32 || ch>127) continue;
 if (debugmode) {
  glcdSetAddress(6 * scrpos++, 6); 
    60c8:	96 e0       	ldi	r25, 0x06	; 6
    60ca:	c9 2e       	mov	r12, r25
 
 //                     JA FE MA AP MA JU JL AU SE OC NO DE
 uint8_t monthmath[] = {31,28,31,30,31,30,31,31,30,31,30,31};
 //if(!uart_getch()) return 0;
 //ch = uart_getchar();
 while(char_available()) {
    60cc:	0e 94 20 2d 	call	0x5a40	; 0x5a40 <char_available>
    60d0:	88 23       	and	r24, r24
    60d2:	09 f0       	breq	.+2      	; 0x60d6 <GPSRead+0x408>
    60d4:	47 ce       	rjmp	.-882    	; 0x5d64 <GPSRead+0x96>
    60d6:	80 e0       	ldi	r24, 0x00	; 0
    60d8:	01 c0       	rjmp	.+2      	; 0x60dc <GPSRead+0x40e>
    60da:	81 e0       	ldi	r24, 0x01	; 1
  }
  }
 }

 return 0;
}
    60dc:	2c 96       	adiw	r28, 0x0c	; 12
    60de:	e9 e0       	ldi	r30, 0x09	; 9
    60e0:	0c 94 73 3a 	jmp	0x74e6	; 0x74e6 <__epilogue_restores__+0x12>

000060e4 <beep>:

SIGNAL(TIMER1_COMPA_vect) {
  PIEZO_PORT ^= _BV(PIEZO);
}

void beep(uint16_t freq, uint8_t duration) {
    60e4:	ff 92       	push	r15
    60e6:	0f 93       	push	r16
    60e8:	1f 93       	push	r17
    60ea:	f6 2e       	mov	r15, r22
  // use timer 1 for the piezo/buzzer 
  TCCR1A = 0; 
    60ec:	10 92 80 00 	sts	0x0080, r1
  TCCR1B =  _BV(WGM12) | _BV(CS10); // CTC with fastest timer
    60f0:	01 e8       	ldi	r16, 0x81	; 129
    60f2:	10 e0       	ldi	r17, 0x00	; 0
    60f4:	29 e0       	ldi	r18, 0x09	; 9
    60f6:	f8 01       	movw	r30, r16
    60f8:	20 83       	st	Z, r18
  TIMSK1 = _BV(TOIE1) | _BV(OCIE1A);
    60fa:	23 e0       	ldi	r18, 0x03	; 3
    60fc:	20 93 6f 00 	sts	0x006F, r18
  OCR1A = (F_CPU / freq) / 2;
    6100:	9c 01       	movw	r18, r24
    6102:	40 e0       	ldi	r20, 0x00	; 0
    6104:	50 e0       	ldi	r21, 0x00	; 0
    6106:	60 e0       	ldi	r22, 0x00	; 0
    6108:	79 e0       	ldi	r23, 0x09	; 9
    610a:	8d e3       	ldi	r24, 0x3D	; 61
    610c:	90 e0       	ldi	r25, 0x00	; 0
    610e:	0e 94 33 3a 	call	0x7466	; 0x7466 <__divmodsi4>
    6112:	30 93 89 00 	sts	0x0089, r19
    6116:	20 93 88 00 	sts	0x0088, r18
  delay_ms(duration);
    611a:	8f 2d       	mov	r24, r15
    611c:	90 e0       	ldi	r25, 0x00	; 0
    611e:	0e 94 0c 35 	call	0x6a18	; 0x6a18 <delay_ms>
  TCCR1B = 0;
    6122:	f8 01       	movw	r30, r16
    6124:	10 82       	st	Z, r1
  // turn off piezo
  PIEZO_PORT &= ~_BV(PIEZO);
    6126:	43 98       	cbi	0x08, 3	; 8
}
    6128:	1f 91       	pop	r17
    612a:	0f 91       	pop	r16
    612c:	ff 90       	pop	r15
    612e:	08 95       	ret

00006130 <writei2ctime>:
  date_y = ((clockdata[6] >> 4) & 0xF)*10 + (clockdata[6] & 0xF);
  return clockdata[0] & 0x80;
}

void writei2ctime(uint8_t sec, uint8_t min, uint8_t hr, uint8_t day,
		  uint8_t date, uint8_t mon, uint8_t yr) {
    6130:	a8 e0       	ldi	r26, 0x08	; 8
    6132:	b0 e0       	ldi	r27, 0x00	; 0
    6134:	ee e9       	ldi	r30, 0x9E	; 158
    6136:	f0 e3       	ldi	r31, 0x30	; 48
    6138:	0c 94 58 3a 	jmp	0x74b0	; 0x74b0 <__prologue_saves__+0x14>
    613c:	16 2f       	mov	r17, r22
    613e:	f4 2e       	mov	r15, r20
    6140:	d2 2e       	mov	r13, r18
  uint8_t clockdata[8] = {0,0,0,0,0,0,0,0};
    6142:	fe 01       	movw	r30, r28
    6144:	31 96       	adiw	r30, 0x01	; 1
    6146:	98 e0       	ldi	r25, 0x08	; 8
    6148:	df 01       	movw	r26, r30
    614a:	1d 92       	st	X+, r1
    614c:	9a 95       	dec	r25
    614e:	e9 f7       	brne	.-6      	; 0x614a <writei2ctime+0x1a>

  clockdata[0] = 0; // address
    6150:	19 82       	std	Y+1, r1	; 0x01
  clockdata[1] = i2bcd(sec);  // s
    6152:	0e 94 29 2e 	call	0x5c52	; 0x5c52 <i2bcd>
    6156:	8a 83       	std	Y+2, r24	; 0x02
  clockdata[2] = i2bcd(min);  // m
    6158:	81 2f       	mov	r24, r17
    615a:	0e 94 29 2e 	call	0x5c52	; 0x5c52 <i2bcd>
    615e:	8b 83       	std	Y+3, r24	; 0x03
  clockdata[3] = i2bcd(hr); // h
    6160:	8f 2d       	mov	r24, r15
    6162:	0e 94 29 2e 	call	0x5c52	; 0x5c52 <i2bcd>
    6166:	8c 83       	std	Y+4, r24	; 0x04
  clockdata[4] = i2bcd(day);  // day
    6168:	8d 2d       	mov	r24, r13
    616a:	0e 94 29 2e 	call	0x5c52	; 0x5c52 <i2bcd>
    616e:	8d 83       	std	Y+5, r24	; 0x05
  clockdata[5] = i2bcd(date);  // date
    6170:	80 2f       	mov	r24, r16
    6172:	0e 94 29 2e 	call	0x5c52	; 0x5c52 <i2bcd>
    6176:	8e 83       	std	Y+6, r24	; 0x06
  clockdata[6] = i2bcd(mon);  // month
    6178:	8e 2d       	mov	r24, r14
    617a:	0e 94 29 2e 	call	0x5c52	; 0x5c52 <i2bcd>
    617e:	8f 83       	std	Y+7, r24	; 0x07
  clockdata[7] = i2bcd(yr); // year
    6180:	8c 2d       	mov	r24, r12
    6182:	0e 94 29 2e 	call	0x5c52	; 0x5c52 <i2bcd>
    6186:	88 87       	std	Y+8, r24	; 0x08
  
  cli();
    6188:	f8 94       	cli
  uint8_t r = i2cMasterSendNI(0xD0, 8, &clockdata[0]);
    618a:	80 ed       	ldi	r24, 0xD0	; 208
    618c:	68 e0       	ldi	r22, 0x08	; 8
    618e:	ae 01       	movw	r20, r28
    6190:	4f 5f       	subi	r20, 0xFF	; 255
    6192:	5f 4f       	sbci	r21, 0xFF	; 255
    6194:	0e 94 c4 2a 	call	0x5588	; 0x5588 <i2cMasterSendNI>
  sei();
    6198:	78 94       	sei

  //DEBUG(putstring("Writing i2c data: ")); DEBUG(uart_putw_dec()); DEBUG(putstring_nl(""));

  if (r != 0) {
    619a:	88 23       	and	r24, r24
    619c:	99 f0       	breq	.+38     	; 0x61c4 <writei2ctime+0x94>
    while(1) {
      beep(4000, 100);
    619e:	80 ea       	ldi	r24, 0xA0	; 160
    61a0:	9f e0       	ldi	r25, 0x0F	; 15
    61a2:	64 e6       	ldi	r22, 0x64	; 100
    61a4:	0e 94 72 30 	call	0x60e4	; 0x60e4 <beep>
      delay_ms(100);
    61a8:	84 e6       	ldi	r24, 0x64	; 100
    61aa:	90 e0       	ldi	r25, 0x00	; 0
    61ac:	0e 94 0c 35 	call	0x6a18	; 0x6a18 <delay_ms>
      beep(4000, 100);
    61b0:	80 ea       	ldi	r24, 0xA0	; 160
    61b2:	9f e0       	ldi	r25, 0x0F	; 15
    61b4:	64 e6       	ldi	r22, 0x64	; 100
    61b6:	0e 94 72 30 	call	0x60e4	; 0x60e4 <beep>
      delay_ms(1000);
    61ba:	88 ee       	ldi	r24, 0xE8	; 232
    61bc:	93 e0       	ldi	r25, 0x03	; 3
    61be:	0e 94 0c 35 	call	0x6a18	; 0x6a18 <delay_ms>
    61c2:	ed cf       	rjmp	.-38     	; 0x619e <writei2ctime+0x6e>
    }
  }

}
    61c4:	28 96       	adiw	r28, 0x08	; 8
    61c6:	e8 e0       	ldi	r30, 0x08	; 8
    61c8:	0c 94 74 3a 	jmp	0x74e8	; 0x74e8 <__epilogue_restores__+0x14>

000061cc <GPSCheck>:
 }

 return 0;
}

void GPSCheck(uint8_t mode) {
    61cc:	cf 92       	push	r12
    61ce:	df 92       	push	r13
    61d0:	ef 92       	push	r14
    61d2:	ff 92       	push	r15
    61d4:	0f 93       	push	r16
    61d6:	1f 93       	push	r17
    61d8:	18 2f       	mov	r17, r24
 if (GPSRead(mode) && !mode) {
    61da:	0e 94 67 2e 	call	0x5cce	; 0x5cce <GPSRead>
    61de:	88 23       	and	r24, r24
    61e0:	e9 f0       	breq	.+58     	; 0x621c <GPSCheck+0x50>
    61e2:	11 23       	and	r17, r17
    61e4:	d9 f4       	brne	.+54     	; 0x621c <GPSCheck+0x50>
  writei2ctime(time_s, time_m, time_h, dotw(date_m, date_d, date_y), date_d, date_m, date_y);
    61e6:	10 91 77 03 	lds	r17, 0x0377
    61ea:	f0 90 6c 03 	lds	r15, 0x036C
    61ee:	d0 90 62 03 	lds	r13, 0x0362
    61f2:	80 91 76 03 	lds	r24, 0x0376
    61f6:	60 91 6b 03 	lds	r22, 0x036B
    61fa:	40 91 65 03 	lds	r20, 0x0365
    61fe:	0e 94 86 36 	call	0x6d0c	; 0x6d0c <dotw>
    6202:	28 2f       	mov	r18, r24
    6204:	00 91 6b 03 	lds	r16, 0x036B
    6208:	e0 90 76 03 	lds	r14, 0x0376
    620c:	c0 90 65 03 	lds	r12, 0x0365
    6210:	81 2f       	mov	r24, r17
    6212:	6f 2d       	mov	r22, r15
    6214:	4d 2d       	mov	r20, r13
    6216:	0e 94 98 30 	call	0x6130	; 0x6130 <writei2ctime>
  sei();
    621a:	78 94       	sei
 } 
}
    621c:	1f 91       	pop	r17
    621e:	0f 91       	pop	r16
    6220:	ff 90       	pop	r15
    6222:	ef 90       	pop	r14
    6224:	df 90       	pop	r13
    6226:	cf 90       	pop	r12
    6228:	08 95       	ret

0000622a <init_eeprom>:
extern uint8_t EE_SNOOZE;
extern uint8_t EE_STYLE;


void init_eeprom(void) {	//Set eeprom to a default state.
 if (eeprom_read_byte(&EE_INIT) != pgm_read_byte(&EE_DATA[0])) {
    622a:	80 e0       	ldi	r24, 0x00	; 0
    622c:	90 e0       	ldi	r25, 0x00	; 0
    622e:	0e 94 94 3a 	call	0x7528	; 0x7528 <__eerd_byte_m328p>
    6232:	ee e6       	ldi	r30, 0x6E	; 110
    6234:	f4 e0       	ldi	r31, 0x04	; 4
    6236:	e4 91       	lpm	r30, Z+
    6238:	8e 17       	cp	r24, r30
    623a:	e1 f0       	breq	.+56     	; 0x6274 <init_eeprom+0x4a>
    DEBUG(putstring("Error with EEPROM data. Clock cannot function without it. Please reprogram.")); 
    DEBUG(uart_putw_dec(eeprom_read_byte(&EE_INIT))); DEBUG(putstring_nl(""));
    while(1) {
      beep(4000, 100);
    623c:	80 ea       	ldi	r24, 0xA0	; 160
    623e:	9f e0       	ldi	r25, 0x0F	; 15
    6240:	64 e6       	ldi	r22, 0x64	; 100
    6242:	0e 94 72 30 	call	0x60e4	; 0x60e4 <beep>
      delay_ms(100);
    6246:	84 e6       	ldi	r24, 0x64	; 100
    6248:	90 e0       	ldi	r25, 0x00	; 0
    624a:	0e 94 0c 35 	call	0x6a18	; 0x6a18 <delay_ms>
      beep(4000, 100);
    624e:	80 ea       	ldi	r24, 0xA0	; 160
    6250:	9f e0       	ldi	r25, 0x0F	; 15
    6252:	64 e6       	ldi	r22, 0x64	; 100
    6254:	0e 94 72 30 	call	0x60e4	; 0x60e4 <beep>
      delay_ms(100);
    6258:	84 e6       	ldi	r24, 0x64	; 100
    625a:	90 e0       	ldi	r25, 0x00	; 0
    625c:	0e 94 0c 35 	call	0x6a18	; 0x6a18 <delay_ms>
      beep(4000, 100);
    6260:	80 ea       	ldi	r24, 0xA0	; 160
    6262:	9f e0       	ldi	r25, 0x0F	; 15
    6264:	64 e6       	ldi	r22, 0x64	; 100
    6266:	0e 94 72 30 	call	0x60e4	; 0x60e4 <beep>
      delay_ms(1000);
    626a:	88 ee       	ldi	r24, 0xE8	; 232
    626c:	93 e0       	ldi	r25, 0x03	; 3
    626e:	0e 94 0c 35 	call	0x6a18	; 0x6a18 <delay_ms>
    6272:	e4 cf       	rjmp	.-56     	; 0x623c <init_eeprom+0x12>
    6274:	08 95       	ret

00006276 <readi2ctime>:
void printnumber(uint8_t n, uint8_t inverted) {
  glcdWriteChar(n/10+'0', inverted);
  glcdWriteChar(n%10+'0', inverted);
}

uint8_t readi2ctime(void) {
    6276:	a9 e0       	ldi	r26, 0x09	; 9
    6278:	b0 e0       	ldi	r27, 0x00	; 0
    627a:	e1 e4       	ldi	r30, 0x41	; 65
    627c:	f1 e3       	ldi	r31, 0x31	; 49
    627e:	0c 94 5e 3a 	jmp	0x74bc	; 0x74bc <__prologue_saves__+0x20>
  uint8_t regaddr = 0, r;
    6282:	19 82       	std	Y+1, r1	; 0x01
  uint8_t clockdata[8];
  
  // check the time from the RTC
  cli();
    6284:	f8 94       	cli
  r = i2cMasterSendNI(0xD0, 1, &regaddr);
    6286:	80 ed       	ldi	r24, 0xD0	; 208
    6288:	61 e0       	ldi	r22, 0x01	; 1
    628a:	ae 01       	movw	r20, r28
    628c:	4f 5f       	subi	r20, 0xFF	; 255
    628e:	5f 4f       	sbci	r21, 0xFF	; 255
    6290:	0e 94 c4 2a 	call	0x5588	; 0x5588 <i2cMasterSendNI>

  if (r != 0) {
    6294:	88 23       	and	r24, r24
    6296:	a1 f0       	breq	.+40     	; 0x62c0 <readi2ctime+0x4a>
    DEBUG(putstring("Reading i2c data: ")); DEBUG(uart_putw_dec(r)); DEBUG(putstring_nl(""));
    while(1) {
      sei();
    6298:	78 94       	sei
      beep(4000, 100);
    629a:	80 ea       	ldi	r24, 0xA0	; 160
    629c:	9f e0       	ldi	r25, 0x0F	; 15
    629e:	64 e6       	ldi	r22, 0x64	; 100
    62a0:	0e 94 72 30 	call	0x60e4	; 0x60e4 <beep>
      delay_ms(100);
    62a4:	84 e6       	ldi	r24, 0x64	; 100
    62a6:	90 e0       	ldi	r25, 0x00	; 0
    62a8:	0e 94 0c 35 	call	0x6a18	; 0x6a18 <delay_ms>
      beep(4000, 100);
    62ac:	80 ea       	ldi	r24, 0xA0	; 160
    62ae:	9f e0       	ldi	r25, 0x0F	; 15
    62b0:	64 e6       	ldi	r22, 0x64	; 100
    62b2:	0e 94 72 30 	call	0x60e4	; 0x60e4 <beep>
      delay_ms(1000);
    62b6:	88 ee       	ldi	r24, 0xE8	; 232
    62b8:	93 e0       	ldi	r25, 0x03	; 3
    62ba:	0e 94 0c 35 	call	0x6a18	; 0x6a18 <delay_ms>
    62be:	ec cf       	rjmp	.-40     	; 0x6298 <readi2ctime+0x22>
    }
  }

  r = i2cMasterReceiveNI(0xD0, 7, &clockdata[0]);
    62c0:	80 ed       	ldi	r24, 0xD0	; 208
    62c2:	67 e0       	ldi	r22, 0x07	; 7
    62c4:	ae 01       	movw	r20, r28
    62c6:	4e 5f       	subi	r20, 0xFE	; 254
    62c8:	5f 4f       	sbci	r21, 0xFF	; 255
    62ca:	0e 94 0b 2b 	call	0x5616	; 0x5616 <i2cMasterReceiveNI>
  sei();
    62ce:	78 94       	sei

  if (r != 0) {
    62d0:	88 23       	and	r24, r24
    62d2:	99 f0       	breq	.+38     	; 0x62fa <readi2ctime+0x84>
    DEBUG(putstring("Reading i2c data: ")); DEBUG(uart_putw_dec(r)); DEBUG(putstring_nl(""));
    while(1) {
      beep(4000, 100);
    62d4:	80 ea       	ldi	r24, 0xA0	; 160
    62d6:	9f e0       	ldi	r25, 0x0F	; 15
    62d8:	64 e6       	ldi	r22, 0x64	; 100
    62da:	0e 94 72 30 	call	0x60e4	; 0x60e4 <beep>
      delay_ms(100);
    62de:	84 e6       	ldi	r24, 0x64	; 100
    62e0:	90 e0       	ldi	r25, 0x00	; 0
    62e2:	0e 94 0c 35 	call	0x6a18	; 0x6a18 <delay_ms>
      beep(4000, 100);
    62e6:	80 ea       	ldi	r24, 0xA0	; 160
    62e8:	9f e0       	ldi	r25, 0x0F	; 15
    62ea:	64 e6       	ldi	r22, 0x64	; 100
    62ec:	0e 94 72 30 	call	0x60e4	; 0x60e4 <beep>
      delay_ms(1000);
    62f0:	88 ee       	ldi	r24, 0xE8	; 232
    62f2:	93 e0       	ldi	r25, 0x03	; 3
    62f4:	0e 94 0c 35 	call	0x6a18	; 0x6a18 <delay_ms>
    62f8:	ed cf       	rjmp	.-38     	; 0x62d4 <readi2ctime+0x5e>
    }
  }

  time_s = ((clockdata[0] >> 4) & 0x7)*10 + (clockdata[0] & 0xF);
    62fa:	7a 81       	ldd	r23, Y+2	; 0x02
    62fc:	87 2f       	mov	r24, r23
    62fe:	82 95       	swap	r24
    6300:	8f 70       	andi	r24, 0x0F	; 15
    6302:	90 e0       	ldi	r25, 0x00	; 0
    6304:	87 70       	andi	r24, 0x07	; 7
    6306:	90 70       	andi	r25, 0x00	; 0
    6308:	9c 01       	movw	r18, r24
    630a:	f3 e0       	ldi	r31, 0x03	; 3
    630c:	22 0f       	add	r18, r18
    630e:	33 1f       	adc	r19, r19
    6310:	fa 95       	dec	r31
    6312:	e1 f7       	brne	.-8      	; 0x630c <readi2ctime+0x96>
    6314:	88 0f       	add	r24, r24
    6316:	99 1f       	adc	r25, r25
    6318:	28 0f       	add	r18, r24
    631a:	39 1f       	adc	r19, r25
    631c:	87 2f       	mov	r24, r23
    631e:	8f 70       	andi	r24, 0x0F	; 15
    6320:	82 0f       	add	r24, r18
    6322:	80 93 77 03 	sts	0x0377, r24
  time_m = ((clockdata[1] >> 4) & 0x7)*10 + (clockdata[1] & 0xF);
    6326:	4b 81       	ldd	r20, Y+3	; 0x03
    6328:	84 2f       	mov	r24, r20
    632a:	82 95       	swap	r24
    632c:	8f 70       	andi	r24, 0x0F	; 15
    632e:	90 e0       	ldi	r25, 0x00	; 0
    6330:	87 70       	andi	r24, 0x07	; 7
    6332:	90 70       	andi	r25, 0x00	; 0
    6334:	9c 01       	movw	r18, r24
    6336:	63 e0       	ldi	r22, 0x03	; 3
    6338:	22 0f       	add	r18, r18
    633a:	33 1f       	adc	r19, r19
    633c:	6a 95       	dec	r22
    633e:	e1 f7       	brne	.-8      	; 0x6338 <readi2ctime+0xc2>
    6340:	88 0f       	add	r24, r24
    6342:	99 1f       	adc	r25, r25
    6344:	28 0f       	add	r18, r24
    6346:	39 1f       	adc	r19, r25
    6348:	4f 70       	andi	r20, 0x0F	; 15
    634a:	42 0f       	add	r20, r18
    634c:	40 93 6c 03 	sts	0x036C, r20
  if (clockdata[2] & _BV(6)) {
    6350:	8c 81       	ldd	r24, Y+4	; 0x04
    6352:	48 2f       	mov	r20, r24
    6354:	42 95       	swap	r20
    6356:	4f 70       	andi	r20, 0x0F	; 15
    6358:	68 2f       	mov	r22, r24
    635a:	6f 70       	andi	r22, 0x0F	; 15
    635c:	86 ff       	sbrs	r24, 6
    635e:	22 c0       	rjmp	.+68     	; 0x63a4 <readi2ctime+0x12e>
    // "12 hr" mode
    time_h = ((clockdata[2] >> 5) & 0x1)*12 + 
    6360:	82 95       	swap	r24
    6362:	86 95       	lsr	r24
    6364:	87 70       	andi	r24, 0x07	; 7
    6366:	90 e0       	ldi	r25, 0x00	; 0
    6368:	81 70       	andi	r24, 0x01	; 1
    636a:	90 70       	andi	r25, 0x00	; 0
    636c:	9c 01       	movw	r18, r24
    636e:	22 0f       	add	r18, r18
    6370:	33 1f       	adc	r19, r19
    6372:	28 0f       	add	r18, r24
    6374:	39 1f       	adc	r19, r25
    6376:	22 0f       	add	r18, r18
    6378:	33 1f       	adc	r19, r19
    637a:	22 0f       	add	r18, r18
    637c:	33 1f       	adc	r19, r19
    637e:	84 2f       	mov	r24, r20
    6380:	90 e0       	ldi	r25, 0x00	; 0
    6382:	81 70       	andi	r24, 0x01	; 1
    6384:	90 70       	andi	r25, 0x00	; 0
    6386:	ac 01       	movw	r20, r24
    6388:	f3 e0       	ldi	r31, 0x03	; 3
    638a:	44 0f       	add	r20, r20
    638c:	55 1f       	adc	r21, r21
    638e:	fa 95       	dec	r31
    6390:	e1 f7       	brne	.-8      	; 0x638a <readi2ctime+0x114>
    6392:	88 0f       	add	r24, r24
    6394:	99 1f       	adc	r25, r25
    6396:	48 0f       	add	r20, r24
    6398:	59 1f       	adc	r21, r25
    639a:	24 0f       	add	r18, r20
    639c:	26 0f       	add	r18, r22
    639e:	20 93 62 03 	sts	0x0362, r18
    63a2:	11 c0       	rjmp	.+34     	; 0x63c6 <readi2ctime+0x150>
      ((clockdata[2] >> 4) & 0x1)*10 + (clockdata[2] & 0xF);
  } else {
    time_h = ((clockdata[2] >> 4) & 0x3)*10 + (clockdata[2] & 0xF);
    63a4:	84 2f       	mov	r24, r20
    63a6:	90 e0       	ldi	r25, 0x00	; 0
    63a8:	83 70       	andi	r24, 0x03	; 3
    63aa:	90 70       	andi	r25, 0x00	; 0
    63ac:	9c 01       	movw	r18, r24
    63ae:	43 e0       	ldi	r20, 0x03	; 3
    63b0:	22 0f       	add	r18, r18
    63b2:	33 1f       	adc	r19, r19
    63b4:	4a 95       	dec	r20
    63b6:	e1 f7       	brne	.-8      	; 0x63b0 <readi2ctime+0x13a>
    63b8:	88 0f       	add	r24, r24
    63ba:	99 1f       	adc	r25, r25
    63bc:	28 0f       	add	r18, r24
    63be:	39 1f       	adc	r19, r25
    63c0:	62 0f       	add	r22, r18
    63c2:	60 93 62 03 	sts	0x0362, r22
  }
  
  date_d = ((clockdata[4] >> 4) & 0x3)*10 + (clockdata[4] & 0xF);
    63c6:	4e 81       	ldd	r20, Y+6	; 0x06
    63c8:	84 2f       	mov	r24, r20
    63ca:	82 95       	swap	r24
    63cc:	8f 70       	andi	r24, 0x0F	; 15
    63ce:	90 e0       	ldi	r25, 0x00	; 0
    63d0:	83 70       	andi	r24, 0x03	; 3
    63d2:	90 70       	andi	r25, 0x00	; 0
    63d4:	9c 01       	movw	r18, r24
    63d6:	a3 e0       	ldi	r26, 0x03	; 3
    63d8:	22 0f       	add	r18, r18
    63da:	33 1f       	adc	r19, r19
    63dc:	aa 95       	dec	r26
    63de:	e1 f7       	brne	.-8      	; 0x63d8 <readi2ctime+0x162>
    63e0:	88 0f       	add	r24, r24
    63e2:	99 1f       	adc	r25, r25
    63e4:	28 0f       	add	r18, r24
    63e6:	39 1f       	adc	r19, r25
    63e8:	4f 70       	andi	r20, 0x0F	; 15
    63ea:	42 0f       	add	r20, r18
    63ec:	40 93 6b 03 	sts	0x036B, r20
  date_m = ((clockdata[5] >> 4) & 0x1)*10 + (clockdata[5] & 0xF);
    63f0:	4f 81       	ldd	r20, Y+7	; 0x07
    63f2:	84 2f       	mov	r24, r20
    63f4:	82 95       	swap	r24
    63f6:	8f 70       	andi	r24, 0x0F	; 15
    63f8:	90 e0       	ldi	r25, 0x00	; 0
    63fa:	81 70       	andi	r24, 0x01	; 1
    63fc:	90 70       	andi	r25, 0x00	; 0
    63fe:	9c 01       	movw	r18, r24
    6400:	e3 e0       	ldi	r30, 0x03	; 3
    6402:	22 0f       	add	r18, r18
    6404:	33 1f       	adc	r19, r19
    6406:	ea 95       	dec	r30
    6408:	e1 f7       	brne	.-8      	; 0x6402 <readi2ctime+0x18c>
    640a:	88 0f       	add	r24, r24
    640c:	99 1f       	adc	r25, r25
    640e:	28 0f       	add	r18, r24
    6410:	39 1f       	adc	r19, r25
    6412:	4f 70       	andi	r20, 0x0F	; 15
    6414:	42 0f       	add	r20, r18
    6416:	40 93 76 03 	sts	0x0376, r20
  date_y = ((clockdata[6] >> 4) & 0xF)*10 + (clockdata[6] & 0xF);
    641a:	28 85       	ldd	r18, Y+8	; 0x08
    641c:	82 2f       	mov	r24, r18
    641e:	82 95       	swap	r24
    6420:	8f 70       	andi	r24, 0x0F	; 15
    6422:	3a e0       	ldi	r19, 0x0A	; 10
    6424:	83 9f       	mul	r24, r19
    6426:	c0 01       	movw	r24, r0
    6428:	11 24       	eor	r1, r1
    642a:	2f 70       	andi	r18, 0x0F	; 15
    642c:	28 0f       	add	r18, r24
    642e:	20 93 65 03 	sts	0x0365, r18
  return clockdata[0] & 0x80;
}
    6432:	87 2f       	mov	r24, r23
    6434:	80 78       	andi	r24, 0x80	; 128
    6436:	29 96       	adiw	r28, 0x09	; 9
    6438:	e2 e0       	ldi	r30, 0x02	; 2
    643a:	0c 94 7a 3a 	jmp	0x74f4	; 0x74f4 <__epilogue_restores__+0x20>

0000643e <clock_init>:
inline uint8_t i2bcd(uint8_t x) {
  return ((x/10)<<4) | (x%10);
}


void clock_init(void) {
    643e:	cf 92       	push	r12
    6440:	ef 92       	push	r14
    6442:	0f 93       	push	r16
  // talk to clock
  i2cInit();
    6444:	0e 94 74 2a 	call	0x54e8	; 0x54e8 <i2cInit>


  if (readi2ctime()) {
    6448:	0e 94 3b 31 	call	0x6276	; 0x6276 <readi2ctime>
    644c:	88 23       	and	r24, r24
    644e:	59 f0       	breq	.+22     	; 0x6466 <clock_init+0x28>
    DEBUGP("uh oh, RTC was off, lets reset it!");
    writei2ctime(0, 0, 12, 0, 1, 1, 9); // noon 1/1/2009
    6450:	80 e0       	ldi	r24, 0x00	; 0
    6452:	60 e0       	ldi	r22, 0x00	; 0
    6454:	4c e0       	ldi	r20, 0x0C	; 12
    6456:	20 e0       	ldi	r18, 0x00	; 0
    6458:	01 e0       	ldi	r16, 0x01	; 1
    645a:	ee 24       	eor	r14, r14
    645c:	e3 94       	inc	r14
    645e:	a9 e0       	ldi	r26, 0x09	; 9
    6460:	ca 2e       	mov	r12, r26
    6462:	0e 94 98 30 	call	0x6130	; 0x6130 <writei2ctime>
   }

  readi2ctime();
    6466:	0e 94 3b 31 	call	0x6276	; 0x6276 <readi2ctime>
  DEBUG(uart_putw_dec(date_m));
  DEBUG(uart_putchar('/'));
  DEBUG(uart_putw_dec(date_y));
  DEBUG(putstring_nl(""));

  alarm_m = eeprom_read_byte(&EE_ALARM_MIN) % 60;
    646a:	82 e0       	ldi	r24, 0x02	; 2
    646c:	90 e0       	ldi	r25, 0x00	; 0
    646e:	0e 94 94 3a 	call	0x7528	; 0x7528 <__eerd_byte_m328p>
    6472:	6c e3       	ldi	r22, 0x3C	; 60
    6474:	0e 94 de 39 	call	0x73bc	; 0x73bc <__udivmodqi4>
    6478:	90 93 66 03 	sts	0x0366, r25
  alarm_h = eeprom_read_byte(&EE_ALARM_HOUR) % 24;
    647c:	81 e0       	ldi	r24, 0x01	; 1
    647e:	90 e0       	ldi	r25, 0x00	; 0
    6480:	0e 94 94 3a 	call	0x7528	; 0x7528 <__eerd_byte_m328p>
    6484:	68 e1       	ldi	r22, 0x18	; 24
    6486:	0e 94 de 39 	call	0x73bc	; 0x73bc <__udivmodqi4>
    648a:	90 93 70 03 	sts	0x0370, r25


  //ASSR |= _BV(AS2); // use crystal

  TCCR2B = _BV(CS22) | _BV(CS21) | _BV(CS20); // div by 1024
    648e:	87 e0       	ldi	r24, 0x07	; 7
    6490:	80 93 b1 00 	sts	0x00B1, r24
  // overflow ~30Hz = 8MHz/(255 * 1024)

  // enable interrupt
  TIMSK2 = _BV(TOIE2);
    6494:	81 e0       	ldi	r24, 0x01	; 1
    6496:	80 93 70 00 	sts	0x0070, r24

  sei();
    649a:	78 94       	sei
}
    649c:	0f 91       	pop	r16
    649e:	ef 90       	pop	r14
    64a0:	cf 90       	pop	r12
    64a2:	08 95       	ret

000064a4 <__vector_9>:

}

// runs at about 30 hz
uint8_t t2divider1 = 0, t2divider2 = 0;
SIGNAL (TIMER2_OVF_vect) {
    64a4:	1f 92       	push	r1
    64a6:	0f 92       	push	r0
    64a8:	0f b6       	in	r0, 0x3f	; 63
    64aa:	0f 92       	push	r0
    64ac:	11 24       	eor	r1, r1
    64ae:	ff 92       	push	r15
    64b0:	0f 93       	push	r16
    64b2:	1f 93       	push	r17
    64b4:	2f 93       	push	r18
    64b6:	3f 93       	push	r19
    64b8:	4f 93       	push	r20
    64ba:	5f 93       	push	r21
    64bc:	6f 93       	push	r22
    64be:	7f 93       	push	r23
    64c0:	8f 93       	push	r24
    64c2:	9f 93       	push	r25
    64c4:	af 93       	push	r26
    64c6:	bf 93       	push	r27
    64c8:	ef 93       	push	r30
    64ca:	ff 93       	push	r31
  wdt_reset();
    64cc:	a8 95       	wdr
#ifdef BACKLIGHT_ADJUST
  if (t2divider1 == TIMER2_RETURN) {
    64ce:	80 91 f4 02 	lds	r24, 0x02F4
    64d2:	80 35       	cpi	r24, 0x50	; 80
    64d4:	89 f4       	brne	.+34     	; 0x64f8 <__vector_9+0x54>
#else
  if (t2divider1 == 5) {
#endif
    t2divider1 = 0;
    64d6:	10 92 f4 02 	sts	0x02F4, r1
    return;
  }

  //This occurs at 6 Hz

  uint8_t last_s = time_s;
    64da:	10 91 77 03 	lds	r17, 0x0377
  uint8_t last_m = time_m;
    64de:	00 91 6c 03 	lds	r16, 0x036C
  uint8_t last_h = time_h;
    64e2:	f0 90 62 03 	lds	r15, 0x0362

  readi2ctime();
    64e6:	0e 94 3b 31 	call	0x6276	; 0x6276 <readi2ctime>
#ifdef GPSENABLE
  //Hooking time reading, and thus time_changed here.
  GPSCheck((displaystyle==STYLE_GPS) && (displaymode == SHOW_TIME));	
    64ea:	80 91 69 03 	lds	r24, 0x0369
    64ee:	8a 3d       	cpi	r24, 0xDA	; 218
    64f0:	39 f0       	breq	.+14     	; 0x6500 <__vector_9+0x5c>
    64f2:	80 e0       	ldi	r24, 0x00	; 0
    64f4:	90 e0       	ldi	r25, 0x00	; 0
    64f6:	0d c0       	rjmp	.+26     	; 0x6512 <__vector_9+0x6e>
#else
  if (t2divider1 == 5) {
#endif
    t2divider1 = 0;
  } else {
    t2divider1++;
    64f8:	8f 5f       	subi	r24, 0xFF	; 255
    64fa:	80 93 f4 02 	sts	0x02F4, r24
    64fe:	c2 c0       	rjmp	.+388    	; 0x6684 <__vector_9+0x1e0>
  uint8_t last_h = time_h;

  readi2ctime();
#ifdef GPSENABLE
  //Hooking time reading, and thus time_changed here.
  GPSCheck((displaystyle==STYLE_GPS) && (displaymode == SHOW_TIME));	
    6500:	80 91 72 03 	lds	r24, 0x0372
    6504:	90 e0       	ldi	r25, 0x00	; 0
    6506:	81 11       	cpse	r24, r1
    6508:	91 e0       	ldi	r25, 0x01	; 1
    650a:	81 e0       	ldi	r24, 0x01	; 1
    650c:	98 27       	eor	r25, r24
    650e:	89 2f       	mov	r24, r25
    6510:	90 e0       	ldi	r25, 0x00	; 0
    6512:	0e 94 e6 30 	call	0x61cc	; 0x61cc <GPSCheck>
#endif
#ifdef DEATHCHRON
  border_tick++;
    6516:	80 91 32 02 	lds	r24, 0x0232
    651a:	8f 5f       	subi	r24, 0xFF	; 255
    651c:	80 93 32 02 	sts	0x0232, r24
#endif
  
  if (time_h != last_h) {
    6520:	80 91 62 03 	lds	r24, 0x0362
    6524:	8f 15       	cp	r24, r15
    6526:	31 f0       	breq	.+12     	; 0x6534 <__vector_9+0x90>
    hour_changed = 1; 
    6528:	81 e0       	ldi	r24, 0x01	; 1
    652a:	80 93 64 02 	sts	0x0264, r24
    old_h = last_h;
    652e:	f0 92 6d 03 	sts	0x036D, r15
    6532:	07 c0       	rjmp	.+14     	; 0x6542 <__vector_9+0x9e>
    old_m = last_m;
  } else if (time_m != last_m) {
    6534:	80 91 6c 03 	lds	r24, 0x036C
    6538:	80 17       	cp	r24, r16
    653a:	31 f0       	breq	.+12     	; 0x6548 <__vector_9+0xa4>
    minute_changed = 1;
    653c:	81 e0       	ldi	r24, 0x01	; 1
    653e:	80 93 63 02 	sts	0x0263, r24
    old_m = last_m;
    6542:	00 93 63 03 	sts	0x0363, r16
    6546:	09 c0       	rjmp	.+18     	; 0x655a <__vector_9+0xb6>
  } else if (time_s != last_s) {
    6548:	80 91 77 03 	lds	r24, 0x0377
    654c:	81 17       	cp	r24, r17
    654e:	29 f0       	breq	.+10     	; 0x655a <__vector_9+0xb6>
    second_changed = 1;
    6550:	81 e0       	ldi	r24, 0x01	; 1
    6552:	80 93 65 02 	sts	0x0265, r24
    old_s = last_s;
    6556:	10 93 79 03 	sts	0x0379, r17
  }


  if (time_s != last_s) {
    655a:	80 91 77 03 	lds	r24, 0x0377
    655e:	81 17       	cp	r24, r17
    6560:	09 f4       	brne	.+2      	; 0x6564 <__vector_9+0xc0>
    6562:	4b c0       	rjmp	.+150    	; 0x65fa <__vector_9+0x156>
    if(alarming && snoozetimer)
    6564:	80 91 71 03 	lds	r24, 0x0371
    6568:	88 23       	and	r24, r24
    656a:	59 f0       	breq	.+22     	; 0x6582 <__vector_9+0xde>
    656c:	80 91 f0 02 	lds	r24, 0x02F0
    6570:	90 91 f1 02 	lds	r25, 0x02F1
    6574:	00 97       	sbiw	r24, 0x00	; 0
    6576:	29 f0       	breq	.+10     	; 0x6582 <__vector_9+0xde>
	  snoozetimer--;
    6578:	01 97       	sbiw	r24, 0x01	; 1
    657a:	90 93 f1 02 	sts	0x02F1, r25
    657e:	80 93 f0 02 	sts	0x02F0, r24

    if(score_mode_timeout) {
    6582:	80 91 66 02 	lds	r24, 0x0266
    6586:	88 23       	and	r24, r24
    6588:	c1 f1       	breq	.+112    	; 0x65fa <__vector_9+0x156>
	  score_mode_timeout--;
    658a:	80 91 66 02 	lds	r24, 0x0266
    658e:	81 50       	subi	r24, 0x01	; 1
    6590:	80 93 66 02 	sts	0x0266, r24
	  if(!score_mode_timeout) {
    6594:	80 91 66 02 	lds	r24, 0x0266
    6598:	88 23       	and	r24, r24
    659a:	79 f5       	brne	.+94     	; 0x65fa <__vector_9+0x156>
	  	last_score_mode = score_mode;
    659c:	80 91 67 02 	lds	r24, 0x0267
    65a0:	80 93 34 02 	sts	0x0234, r24
#ifdef DEATHCHRON
	  if (displaystyle == STYLE_DEATH) {
    65a4:	80 91 69 03 	lds	r24, 0x0369
    65a8:	86 3d       	cpi	r24, 0xD6	; 214
    65aa:	41 f4       	brne	.+16     	; 0x65bc <__vector_9+0x118>
	    if(score_mode >= SCORE_MODE_DEATH_TIME)
    65ac:	80 91 67 02 	lds	r24, 0x0267
    65b0:	84 30       	cpi	r24, 0x04	; 4
    65b2:	20 f0       	brcs	.+8      	; 0x65bc <__vector_9+0x118>
	      score_mode = SCORE_MODE_DEATH_TIME;
    65b4:	84 e0       	ldi	r24, 0x04	; 4
    65b6:	80 93 67 02 	sts	0x0267, r24
    65ba:	02 c0       	rjmp	.+4      	; 0x65c0 <__vector_9+0x11c>
	    else
	      score_mode = SCORE_MODE_TIME;
	  }
	  else
#endif
	    score_mode = SCORE_MODE_TIME;
    65bc:	10 92 67 02 	sts	0x0267, r1
	    if(hour_changed) {
    65c0:	80 91 64 02 	lds	r24, 0x0264
    65c4:	88 23       	and	r24, r24
    65c6:	29 f0       	breq	.+10     	; 0x65d2 <__vector_9+0x12e>
	      time_h = old_h;
    65c8:	80 91 6d 03 	lds	r24, 0x036D
    65cc:	80 93 62 03 	sts	0x0362, r24
    65d0:	04 c0       	rjmp	.+8      	; 0x65da <__vector_9+0x136>
	      time_m = old_m;
	    } else if (minute_changed) {
    65d2:	80 91 63 02 	lds	r24, 0x0263
    65d6:	88 23       	and	r24, r24
    65d8:	21 f0       	breq	.+8      	; 0x65e2 <__vector_9+0x13e>
	      time_m = old_m;
    65da:	80 91 63 03 	lds	r24, 0x0363
    65de:	80 93 6c 03 	sts	0x036C, r24
	    }
	    if(hour_changed || minute_changed) {
    65e2:	80 91 64 02 	lds	r24, 0x0264
    65e6:	88 23       	and	r24, r24
    65e8:	21 f4       	brne	.+8      	; 0x65f2 <__vector_9+0x14e>
    65ea:	80 91 63 02 	lds	r24, 0x0263
    65ee:	88 23       	and	r24, r24
    65f0:	21 f0       	breq	.+8      	; 0x65fa <__vector_9+0x156>
	      time_h = last_h;
    65f2:	f0 92 62 03 	sts	0x0362, r15
	      time_m = last_m;
    65f6:	00 93 6c 03 	sts	0x036C, r16
    DEBUG(uart_putw_dec(time_s));
    DEBUG(putstring_nl("****"));*/
  }

  // check if we have an alarm set
  if (alarm_on && (time_s == 0) && (time_m == alarm_m) && (time_h == alarm_h)) {
    65fa:	80 91 6e 03 	lds	r24, 0x036E
    65fe:	88 23       	and	r24, r24
    6600:	99 f0       	breq	.+38     	; 0x6628 <__vector_9+0x184>
    6602:	80 91 77 03 	lds	r24, 0x0377
    6606:	88 23       	and	r24, r24
    6608:	79 f4       	brne	.+30     	; 0x6628 <__vector_9+0x184>
    660a:	90 91 6c 03 	lds	r25, 0x036C
    660e:	80 91 66 03 	lds	r24, 0x0366
    6612:	98 17       	cp	r25, r24
    6614:	49 f4       	brne	.+18     	; 0x6628 <__vector_9+0x184>
    6616:	90 91 62 03 	lds	r25, 0x0362
    661a:	80 91 70 03 	lds	r24, 0x0370
    661e:	98 17       	cp	r25, r24
    6620:	19 f4       	brne	.+6      	; 0x6628 <__vector_9+0x184>
    DEBUG(putstring_nl("ALARM TRIPPED!!!"));
    alarm_tripped = 1;
    6622:	81 e0       	ldi	r24, 0x01	; 1
    6624:	80 93 78 03 	sts	0x0378, r24
  }
  
  //And wait till the score changes to actually set the alarm off.
  if(!minute_changed && !hour_changed && alarm_tripped) {
    6628:	80 91 63 02 	lds	r24, 0x0263
    662c:	88 23       	and	r24, r24
    662e:	69 f4       	brne	.+26     	; 0x664a <__vector_9+0x1a6>
    6630:	80 91 64 02 	lds	r24, 0x0264
    6634:	88 23       	and	r24, r24
    6636:	49 f4       	brne	.+18     	; 0x664a <__vector_9+0x1a6>
    6638:	80 91 78 03 	lds	r24, 0x0378
    663c:	88 23       	and	r24, r24
    663e:	29 f0       	breq	.+10     	; 0x664a <__vector_9+0x1a6>
  	 DEBUG(putstring_nl("ALARM GOING!!!!"));
  	 alarming = 1;
    6640:	81 e0       	ldi	r24, 0x01	; 1
    6642:	80 93 71 03 	sts	0x0371, r24
  	 alarm_tripped = 0;
    6646:	10 92 78 03 	sts	0x0378, r1
  }

  if (t2divider2 == 6) {
    664a:	80 91 f5 02 	lds	r24, 0x02F5
    664e:	86 30       	cpi	r24, 0x06	; 6
    6650:	39 f4       	brne	.+14     	; 0x6660 <__vector_9+0x1bc>
    t2divider2 = 0;
    6652:	10 92 f5 02 	sts	0x02F5, r1
  } else {
    t2divider2++;
    return;
  }

  if (buttonholdcounter) {
    6656:	80 91 56 02 	lds	r24, 0x0256
    665a:	88 23       	and	r24, r24
    665c:	29 f4       	brne	.+10     	; 0x6668 <__vector_9+0x1c4>
    665e:	09 c0       	rjmp	.+18     	; 0x6672 <__vector_9+0x1ce>
  }

  if (t2divider2 == 6) {
    t2divider2 = 0;
  } else {
    t2divider2++;
    6660:	8f 5f       	subi	r24, 0xFF	; 255
    6662:	80 93 f5 02 	sts	0x02F5, r24
    6666:	0e c0       	rjmp	.+28     	; 0x6684 <__vector_9+0x1e0>
    return;
  }

  if (buttonholdcounter) {
    buttonholdcounter--;
    6668:	80 91 56 02 	lds	r24, 0x0256
    666c:	81 50       	subi	r24, 0x01	; 1
    666e:	80 93 56 02 	sts	0x0256, r24
  }

  if (timeoutcounter) {
    6672:	80 91 57 02 	lds	r24, 0x0257
    6676:	88 23       	and	r24, r24
    6678:	29 f0       	breq	.+10     	; 0x6684 <__vector_9+0x1e0>
    timeoutcounter--;
    667a:	80 91 57 02 	lds	r24, 0x0257
    667e:	81 50       	subi	r24, 0x01	; 1
    6680:	80 93 57 02 	sts	0x0257, r24
  }
}
    6684:	ff 91       	pop	r31
    6686:	ef 91       	pop	r30
    6688:	bf 91       	pop	r27
    668a:	af 91       	pop	r26
    668c:	9f 91       	pop	r25
    668e:	8f 91       	pop	r24
    6690:	7f 91       	pop	r23
    6692:	6f 91       	pop	r22
    6694:	5f 91       	pop	r21
    6696:	4f 91       	pop	r20
    6698:	3f 91       	pop	r19
    669a:	2f 91       	pop	r18
    669c:	1f 91       	pop	r17
    669e:	0f 91       	pop	r16
    66a0:	ff 90       	pop	r15
    66a2:	0f 90       	pop	r0
    66a4:	0f be       	out	0x3f, r0	; 63
    66a6:	0f 90       	pop	r0
    66a8:	1f 90       	pop	r1
    66aa:	18 95       	reti

000066ac <drawArrow>:
    }   
  }
}


void drawArrow(uint8_t x, uint8_t y, uint8_t l) {
    66ac:	ef 92       	push	r14
    66ae:	ff 92       	push	r15
    66b0:	0f 93       	push	r16
    66b2:	1f 93       	push	r17
    66b4:	f8 2e       	mov	r15, r24
    66b6:	16 2f       	mov	r17, r22
    66b8:	e4 2e       	mov	r14, r20
  glcdFillRectangle(x, y, l, 1, ON);
    66ba:	21 e0       	ldi	r18, 0x01	; 1
    66bc:	01 e0       	ldi	r16, 0x01	; 1
    66be:	0e 94 05 29 	call	0x520a	; 0x520a <glcdFillRectangle>
  glcdSetDot(x+l-2,y-1);
    66c2:	fe 0c       	add	r15, r14
    66c4:	0f 2d       	mov	r16, r15
    66c6:	02 50       	subi	r16, 0x02	; 2
    66c8:	11 50       	subi	r17, 0x01	; 1
    66ca:	80 2f       	mov	r24, r16
    66cc:	61 2f       	mov	r22, r17
    66ce:	0e 94 4b 2a 	call	0x5496	; 0x5496 <glcdSetDot>
  glcdSetDot(x+l-2,y+1);
    66d2:	1e 5f       	subi	r17, 0xFE	; 254
    66d4:	80 2f       	mov	r24, r16
    66d6:	61 2f       	mov	r22, r17
    66d8:	0e 94 4b 2a 	call	0x5496	; 0x5496 <glcdSetDot>
  glcdSetDot(x+l-3,y-2);
    66dc:	01 50       	subi	r16, 0x01	; 1
    66de:	13 50       	subi	r17, 0x03	; 3
    66e0:	80 2f       	mov	r24, r16
    66e2:	61 2f       	mov	r22, r17
    66e4:	0e 94 4b 2a 	call	0x5496	; 0x5496 <glcdSetDot>
  glcdSetDot(x+l-3,y+2);
    66e8:	1c 5f       	subi	r17, 0xFC	; 252
    66ea:	80 2f       	mov	r24, r16
    66ec:	61 2f       	mov	r22, r17
    66ee:	0e 94 4b 2a 	call	0x5496	; 0x5496 <glcdSetDot>
}
    66f2:	1f 91       	pop	r17
    66f4:	0f 91       	pop	r16
    66f6:	ff 90       	pop	r15
    66f8:	ef 90       	pop	r14
    66fa:	08 95       	ret

000066fc <main>:
  //Because of this, and because we are storing some data there, bad things will happen if the
  //eeprom is NOT initialized. This is why we error out with infinite triple beeps if it is
  //not initialized.
}

int main(void) {
    66fc:	a0 e0       	ldi	r26, 0x00	; 0
    66fe:	b0 e0       	ldi	r27, 0x00	; 0
    6700:	e4 e8       	ldi	r30, 0x84	; 132
    6702:	f3 e3       	ldi	r31, 0x33	; 51
    6704:	0c 94 52 3a 	jmp	0x74a4	; 0x74a4 <__prologue_saves__+0x8>
  uint8_t inverted = 0;
  uint8_t mcustate;
  uint8_t display_date = 0;

  // check if we were reset
  mcustate = MCUSR;
    6708:	84 b7       	in	r24, 0x34	; 52
  MCUSR = 0;
    670a:	14 be       	out	0x34, r1	; 52
  
  //Just in case we were reset inside of the glcd init function
  //which would happen if the lcd is not plugged in. The end result
  //of that, is it will beep, pause, for as long as there is no lcd
  //plugged in.
  wdt_disable();
    670c:	88 e1       	ldi	r24, 0x18	; 24
    670e:	0f b6       	in	r0, 0x3f	; 63
    6710:	f8 94       	cli
    6712:	80 93 60 00 	sts	0x0060, r24
    6716:	10 92 60 00 	sts	0x0060, r1
    671a:	0f be       	out	0x3f, r0	; 63

  // setup uart
  uart_init(BRRL_4800);
    671c:	87 e6       	ldi	r24, 0x67	; 103
    671e:	90 e0       	ldi	r25, 0x00	; 0
    6720:	0e 94 f5 34 	call	0x69ea	; 0x69ea <uart_init>
#ifdef GPSENABLE
  UCSR0B |= _BV(TXEN0) | _BV(RXEN0) | _BV(RXCIE0);
    6724:	80 91 c1 00 	lds	r24, 0x00C1
    6728:	88 69       	ori	r24, 0x98	; 152
    672a:	80 93 c1 00 	sts	0x00C1, r24
  //HardwareSerial Serial(&rx_buffer, &UBRR0H, &UBRR0L, &UCSR0A, &UCSR0B, &UDR0, RXEN0, TXEN0, RXCIE0, UDRE0, U2X0);
#endif
  DEBUGP("RATT Clock");

  // set up piezo
  PIEZO_DDR |= _BV(PIEZO);
    672e:	3b 9a       	sbi	0x07, 3	; 7

  DEBUGP("clock!");
  clock_init();
    6730:	0e 94 1f 32 	call	0x643e	; 0x643e <clock_init>
  //beep(4000, 100);
  

  init_eeprom();
    6734:	0e 94 15 31 	call	0x622a	; 0x622a <init_eeprom>
  
  region = eeprom_read_byte(&EE_REGION);
    6738:	84 e0       	ldi	r24, 0x04	; 4
    673a:	90 e0       	ldi	r25, 0x00	; 0
    673c:	0e 94 94 3a 	call	0x7528	; 0x7528 <__eerd_byte_m328p>
    6740:	80 93 6f 03 	sts	0x036F, r24
  time_format = eeprom_read_byte(&EE_TIME_FORMAT);
    6744:	85 e0       	ldi	r24, 0x05	; 5
    6746:	90 e0       	ldi	r25, 0x00	; 0
    6748:	0e 94 94 3a 	call	0x7528	; 0x7528 <__eerd_byte_m328p>
    674c:	80 93 64 03 	sts	0x0364, r24
  DEBUGP("buttons!");
  initbuttons();
    6750:	0e 94 8d 1d 	call	0x3b1a	; 0x3b1a <initbuttons>

  setalarmstate();
    6754:	0e 94 d5 2d 	call	0x5baa	; 0x5baa <setalarmstate>

  // setup 1ms timer on timer0
  TCCR0A = _BV(WGM01);
    6758:	82 e0       	ldi	r24, 0x02	; 2
    675a:	84 bd       	out	0x24, r24	; 36
  TCCR0B = _BV(CS01) | _BV(CS00);
    675c:	83 e0       	ldi	r24, 0x03	; 3
    675e:	85 bd       	out	0x25, r24	; 37
  OCR0A = 125;
    6760:	8d e7       	ldi	r24, 0x7D	; 125
    6762:	87 bd       	out	0x27, r24	; 39
  TIMSK0 |= _BV(OCIE0A);
    6764:	80 91 6e 00 	lds	r24, 0x006E
    6768:	82 60       	ori	r24, 0x02	; 2
    676a:	80 93 6e 00 	sts	0x006E, r24

  // turn backlight on
  DDRD |= _BV(3);
    676e:	53 9a       	sbi	0x0a, 3	; 10
#ifndef BACKLIGHT_ADJUST
  PORTD |= _BV(3);
#else
  TCCR2A = _BV(COM2B1); // PWM output on pin D3
    6770:	80 e2       	ldi	r24, 0x20	; 32
    6772:	80 93 b0 00 	sts	0x00B0, r24
  TCCR2A |= _BV(WGM21) | _BV(WGM20); // fast PWM
    6776:	80 91 b0 00 	lds	r24, 0x00B0
    677a:	83 60       	ori	r24, 0x03	; 3
    677c:	80 93 b0 00 	sts	0x00B0, r24
  TCCR2B |= _BV(WGM22);
    6780:	80 91 b1 00 	lds	r24, 0x00B1
    6784:	88 60       	ori	r24, 0x08	; 8
    6786:	80 93 b1 00 	sts	0x00B1, r24
  OCR2A = OCR2A_VALUE;
    678a:	80 e1       	ldi	r24, 0x10	; 16
    678c:	80 93 b3 00 	sts	0x00B3, r24
  OCR2B = eeprom_read_byte(&EE_BRIGHT);
    6790:	83 e0       	ldi	r24, 0x03	; 3
    6792:	90 e0       	ldi	r25, 0x00	; 0
    6794:	0e 94 94 3a 	call	0x7528	; 0x7528 <__eerd_byte_m328p>
    6798:	80 93 b4 00 	sts	0x00B4, r24
#endif

  DDRB |= _BV(5);
    679c:	25 9a       	sbi	0x04, 5	; 4
  beep(4000, 100);
    679e:	80 ea       	ldi	r24, 0xA0	; 160
    67a0:	9f e0       	ldi	r25, 0x0F	; 15
    67a2:	64 e6       	ldi	r22, 0x64	; 100
    67a4:	0e 94 72 30 	call	0x60e4	; 0x60e4 <beep>
  
  //glcdInit locks and disables interrupts in one of its functions.  If the LCD is not
  //plugged in, glcd will run forever.  For good reason, it would be desirable to know
  //that the LCD is plugged in and working correctly as a result.  This is why we are
  //using a watch dog timer.  The lcd should initialized in way less than 500 ms.
  wdt_enable(WDTO_2S);
    67a8:	2f e0       	ldi	r18, 0x0F	; 15
    67aa:	88 e1       	ldi	r24, 0x18	; 24
    67ac:	90 e0       	ldi	r25, 0x00	; 0
    67ae:	0f b6       	in	r0, 0x3f	; 63
    67b0:	f8 94       	cli
    67b2:	a8 95       	wdr
    67b4:	80 93 60 00 	sts	0x0060, r24
    67b8:	0f be       	out	0x3f, r0	; 63
    67ba:	20 93 60 00 	sts	0x0060, r18
  glcdInit();
    67be:	0e 94 ca 2c 	call	0x5994	; 0x5994 <glcdInit>
  glcdClearScreen();
    67c2:	0e 94 a6 2c 	call	0x594c	; 0x594c <glcdClearScreen>

  
  //Dataman - InitiAmin now init displays(0) as well.
  //initdisplay(0);
  displaystyle = eeprom_read_byte(&EE_STYLE);
    67c6:	87 e0       	ldi	r24, 0x07	; 7
    67c8:	90 e0       	ldi	r25, 0x00	; 0
    67ca:	0e 94 94 3a 	call	0x7528	; 0x7528 <__eerd_byte_m328p>
    67ce:	80 93 69 03 	sts	0x0369, r24
  if(displaystyle >= STYLE_ABOUT) {
    67d2:	80 91 69 03 	lds	r24, 0x0369
    67d6:	8b 3d       	cpi	r24, 0xDB	; 219
    67d8:	48 f0       	brcs	.+18     	; 0x67ec <main+0xf0>
    displaystyle = STYLE_ROTATE;
    67da:	88 ed       	ldi	r24, 0xD8	; 216
    67dc:	80 93 69 03 	sts	0x0369, r24
    eeprom_write_byte(&EE_STYLE,displaystyle);
    67e0:	60 91 69 03 	lds	r22, 0x0369
    67e4:	87 e0       	ldi	r24, 0x07	; 7
    67e6:	90 e0       	ldi	r25, 0x00	; 0
    67e8:	0e 94 a2 3a 	call	0x7544	; 0x7544 <__eewr_byte_m328p>
  }
  RotateFlag = 0;
    67ec:	10 92 75 03 	sts	0x0375, r1
  initanim();
    67f0:	0e 94 ec 27 	call	0x4fd8	; 0x4fd8 <initanim>
    67f4:	00 e0       	ldi	r16, 0x00	; 0
    67f6:	10 e0       	ldi	r17, 0x00	; 0
  
  while (1) {
    animticker = ANIMTICK_MS;
    67f8:	6b e4       	ldi	r22, 0x4B	; 75
    67fa:	c6 2e       	mov	r12, r22
    67fc:	d1 2c       	mov	r13, r1
}

void setsnooze(void) {
  //snoozetimer = eeprom_read_byte(&EE_SNOOZE);
  //snoozetimer *= 60; // convert minutes to seconds
  snoozetimer = MAXSNOOZE;
    67fe:	c8 e5       	ldi	r28, 0x58	; 88
    6800:	d2 e0       	ldi	r29, 0x02	; 2
	      score_mode = SCORE_MODE_YEAR;
	  }
	  else
#endif
		   score_mode = SCORE_MODE_YEAR;
	    score_mode_timeout = SCORE_MODE_TIMEOUT;
    6802:	55 e0       	ldi	r21, 0x05	; 5
    6804:	95 2e       	mov	r9, r21
    6806:	43 e0       	ldi	r20, 0x03	; 3
    6808:	64 2e       	mov	r6, r20
	    else
	      score_mode = SCORE_MODE_YEAR;
	  }
	  else
#endif
		   score_mode = SCORE_MODE_YEAR;
    680a:	32 e0       	ldi	r19, 0x02	; 2
    680c:	f3 2e       	mov	r15, r19
	{
		display_date=0;
#ifdef DEATHCHRON
	  if (displaystyle == STYLE_DEATH) {
	    if(score_mode >= SCORE_MODE_DEATH_TIME)
	      score_mode = SCORE_MODE_DEATH_YEAR;
    680e:	26 e0       	ldi	r18, 0x06	; 6
    6810:	b2 2e       	mov	r11, r18
    if(just_pressed & 0x4) {
#ifdef DEATHCHRON
	  if (displaystyle == STYLE_DEATH) {
	    just_pressed = 0;
	    if(score_mode < SCORE_MODE_DEATH_TIME)
	      score_mode = SCORE_MODE_DEATH_TIME;
    6812:	94 e0       	ldi	r25, 0x04	; 4
    6814:	a9 2e       	mov	r10, r25
	    else
	      score_mode = SCORE_MODE_DATE;
	  }
	  else
#endif
	  	score_mode = SCORE_MODE_DATE;
    6816:	ee 24       	eor	r14, r14
    6818:	e3 94       	inc	r14
      case SET_TIME:
	displaymode = SET_DATE;
	set_date();
	break;
      case SET_DATE:
	displaymode = SET_REGION;
    681a:	88 e0       	ldi	r24, 0x08	; 8
    681c:	88 2e       	mov	r8, r24
      //drawdisplay();
      switch(displaymode) {
      case (SHOW_TIME):
      case (CFG_MENU):	//Returning from a configuration menu module.
	// DATAMAN - ADD STYLE MENU
	displaymode = SET_STYLE;
    681e:	b8 ec       	ldi	r27, 0xC8	; 200
    6820:	7b 2e       	mov	r7, r27
  }
  RotateFlag = 0;
  initanim();
  
  while (1) {
    animticker = ANIMTICK_MS;
    6822:	d0 92 74 03 	sts	0x0374, r13
    6826:	c0 92 73 03 	sts	0x0373, r12

    // check buttons to see if we have interaction stuff to deal with
	if(just_pressed && alarming)
    682a:	80 91 54 02 	lds	r24, 0x0254
    682e:	88 23       	and	r24, r24
    6830:	79 f0       	breq	.+30     	; 0x6850 <main+0x154>
    6832:	80 91 71 03 	lds	r24, 0x0371
    6836:	88 23       	and	r24, r24
    6838:	59 f0       	breq	.+22     	; 0x6850 <main+0x154>
	{
	  just_pressed = 0;
    683a:	10 92 54 02 	sts	0x0254, r1
}

void setsnooze(void) {
  //snoozetimer = eeprom_read_byte(&EE_SNOOZE);
  //snoozetimer *= 60; // convert minutes to seconds
  snoozetimer = MAXSNOOZE;
    683e:	d0 93 f1 02 	sts	0x02F1, r29
    6842:	c0 93 f0 02 	sts	0x02F0, r28
  TCCR1B = 0;
    6846:	10 92 81 00 	sts	0x0081, r1
  // turn off piezo
  PIEZO_PORT &= ~_BV(PIEZO);
    684a:	43 98       	cbi	0x08, 3	; 8
  DEBUGP("snooze");
  //displaymode = SHOW_SNOOZE;
  //delay_ms(1000);
  displaymode = SHOW_TIME;
    684c:	10 92 72 03 	sts	0x0372, r1
	{
	  just_pressed = 0;
	  setsnooze();
	}
	
	if(display_date==3 && !score_mode_timeout)
    6850:	13 30       	cpi	r17, 0x03	; 3
    6852:	d9 f4       	brne	.+54     	; 0x688a <main+0x18e>
    6854:	80 91 66 02 	lds	r24, 0x0266
    6858:	88 23       	and	r24, r24
    685a:	b9 f4       	brne	.+46     	; 0x688a <main+0x18e>
	{
		display_date=0;
#ifdef DEATHCHRON
	  if (displaystyle == STYLE_DEATH) {
    685c:	80 91 69 03 	lds	r24, 0x0369
    6860:	86 3d       	cpi	r24, 0xD6	; 214
    6862:	39 f4       	brne	.+14     	; 0x6872 <main+0x176>
	    if(score_mode >= SCORE_MODE_DEATH_TIME)
    6864:	80 91 67 02 	lds	r24, 0x0267
    6868:	84 30       	cpi	r24, 0x04	; 4
    686a:	18 f0       	brcs	.+6      	; 0x6872 <main+0x176>
	      score_mode = SCORE_MODE_DEATH_YEAR;
    686c:	b0 92 67 02 	sts	0x0267, r11
    6870:	02 c0       	rjmp	.+4      	; 0x6876 <main+0x17a>
	    else
	      score_mode = SCORE_MODE_YEAR;
	  }
	  else
#endif
		   score_mode = SCORE_MODE_YEAR;
    6872:	f0 92 67 02 	sts	0x0267, r15
	    score_mode_timeout = SCORE_MODE_TIMEOUT;
    6876:	80 91 69 03 	lds	r24, 0x0369
    687a:	81 30       	cpi	r24, 0x01	; 1
    687c:	11 f0       	breq	.+4      	; 0x6882 <main+0x186>
    687e:	83 e0       	ldi	r24, 0x03	; 3
    6880:	01 c0       	rjmp	.+2      	; 0x6884 <main+0x188>
    6882:	85 e0       	ldi	r24, 0x05	; 5
    6884:	80 93 66 02 	sts	0x0266, r24
    6888:	10 e0       	ldi	r17, 0x00	; 0
    //Was formally set for just the + button.  However, because the Set button was never
    //accounted for, If the alarm was turned on, and ONLY the set button was pushed since then,
    //the alarm would not sound at alarm time, but go into a snooze immediately after going off.
    //This could potentially make you late for work, and had to be fixed.

    if(just_pressed & 0x4) {
    688a:	80 91 54 02 	lds	r24, 0x0254
    688e:	82 ff       	sbrs	r24, 2
    6890:	12 c0       	rjmp	.+36     	; 0x68b6 <main+0x1ba>
#ifdef DEATHCHRON
	  if (displaystyle == STYLE_DEATH) {
    6892:	80 91 69 03 	lds	r24, 0x0369
    6896:	86 3d       	cpi	r24, 0xD6	; 214
    6898:	61 f4       	brne	.+24     	; 0x68b2 <main+0x1b6>
	    just_pressed = 0;
    689a:	10 92 54 02 	sts	0x0254, r1
	    if(score_mode < SCORE_MODE_DEATH_TIME)
    689e:	80 91 67 02 	lds	r24, 0x0267
    68a2:	84 30       	cpi	r24, 0x04	; 4
    68a4:	18 f4       	brcc	.+6      	; 0x68ac <main+0x1b0>
	      score_mode = SCORE_MODE_DEATH_TIME;
    68a6:	a0 92 67 02 	sts	0x0267, r10
    68aa:	05 c0       	rjmp	.+10     	; 0x68b6 <main+0x1ba>
	    else
	      score_mode = SCORE_MODE_TIME;
    68ac:	10 92 67 02 	sts	0x0267, r1
    68b0:	02 c0       	rjmp	.+4      	; 0x68b6 <main+0x1ba>
	  }
	  else
#endif
	    just_pressed = 2;
    68b2:	f0 92 54 02 	sts	0x0254, r15
	}
    
	if (just_pressed & 0x2) {
    68b6:	80 91 54 02 	lds	r24, 0x0254
    68ba:	81 ff       	sbrs	r24, 1
    68bc:	19 c0       	rjmp	.+50     	; 0x68f0 <main+0x1f4>
	  just_pressed = 0;
    68be:	10 92 54 02 	sts	0x0254, r1
#ifdef OPTION_DOW_DATELONG
	  if((region == REGION_US) || (region == REGION_EU)) {
#endif
	  	display_date = 3;
#ifdef DEATHCHRON
	  if (displaystyle == STYLE_DEATH) {
    68c2:	80 91 69 03 	lds	r24, 0x0369
    68c6:	86 3d       	cpi	r24, 0xD6	; 214
    68c8:	39 f4       	brne	.+14     	; 0x68d8 <main+0x1dc>
	    if(score_mode >= SCORE_MODE_DEATH_TIME)
    68ca:	80 91 67 02 	lds	r24, 0x0267
    68ce:	84 30       	cpi	r24, 0x04	; 4
    68d0:	18 f0       	brcs	.+6      	; 0x68d8 <main+0x1dc>
	      score_mode = SCORE_MODE_DEATH_DATE;
    68d2:	90 92 67 02 	sts	0x0267, r9
    68d6:	02 c0       	rjmp	.+4      	; 0x68dc <main+0x1e0>
	    else
	      score_mode = SCORE_MODE_DATE;
	  }
	  else
#endif
	  	score_mode = SCORE_MODE_DATE;
    68d8:	e0 92 67 02 	sts	0x0267, r14
	  else {
	  	display_date = 1;
	  	score_mode = SCORE_MODE_DOW;
	  }
#endif
	  score_mode_timeout = SCORE_MODE_TIMEOUT;
    68dc:	80 91 69 03 	lds	r24, 0x0369
    68e0:	81 30       	cpi	r24, 0x01	; 1
    68e2:	11 f0       	breq	.+4      	; 0x68e8 <main+0x1ec>
    68e4:	83 e0       	ldi	r24, 0x03	; 3
    68e6:	01 c0       	rjmp	.+2      	; 0x68ea <main+0x1ee>
    68e8:	85 e0       	ldi	r24, 0x05	; 5
    68ea:	80 93 66 02 	sts	0x0266, r24
    68ee:	13 e0       	ldi	r17, 0x03	; 3
	  //drawdisplay();
	}

    if (just_pressed & 0x1) {
    68f0:	80 91 54 02 	lds	r24, 0x0254
    68f4:	80 ff       	sbrs	r24, 0
    68f6:	45 c0       	rjmp	.+138    	; 0x6982 <main+0x286>
      just_pressed = 0;
    68f8:	10 92 54 02 	sts	0x0254, r1
      display_date = 0;
      score_mode = SCORE_MODE_TIME;
    68fc:	10 92 67 02 	sts	0x0267, r1
      score_mode_timeout = 0;
    6900:	10 92 66 02 	sts	0x0266, r1
      //drawdisplay();
      switch(displaymode) {
    6904:	80 91 72 03 	lds	r24, 0x0372
    6908:	85 30       	cpi	r24, 0x05	; 5
    690a:	31 f1       	breq	.+76     	; 0x6958 <main+0x25c>
    690c:	86 30       	cpi	r24, 0x06	; 6
    690e:	38 f4       	brcc	.+14     	; 0x691e <main+0x222>
    6910:	83 30       	cpi	r24, 0x03	; 3
    6912:	e9 f0       	breq	.+58     	; 0x694e <main+0x252>
    6914:	84 30       	cpi	r24, 0x04	; 4
    6916:	a0 f4       	brcc	.+40     	; 0x6940 <main+0x244>
    6918:	88 23       	and	r24, r24
    691a:	41 f0       	breq	.+16     	; 0x692c <main+0x230>
    691c:	27 c0       	rjmp	.+78     	; 0x696c <main+0x270>
    691e:	82 36       	cpi	r24, 0x62	; 98
    6920:	29 f0       	breq	.+10     	; 0x692c <main+0x230>
    6922:	88 3c       	cpi	r24, 0xC8	; 200
    6924:	41 f0       	breq	.+16     	; 0x6936 <main+0x23a>
    6926:	88 30       	cpi	r24, 0x08	; 8
    6928:	09 f5       	brne	.+66     	; 0x696c <main+0x270>
    692a:	1b c0       	rjmp	.+54     	; 0x6962 <main+0x266>
      case (SHOW_TIME):
      case (CFG_MENU):	//Returning from a configuration menu module.
	// DATAMAN - ADD STYLE MENU
	displaymode = SET_STYLE;
    692c:	70 92 72 03 	sts	0x0372, r7
	set_style();
    6930:	0e 94 f7 22 	call	0x45ee	; 0x45ee <set_style>
    6934:	1d c0       	rjmp	.+58     	; 0x6970 <main+0x274>
	break; 
	case SET_STYLE:
	// END ADD STYLE MENU
	displaymode = SET_ALARM;
    6936:	a0 92 72 03 	sts	0x0372, r10
	set_alarm();
    693a:	0e 94 04 21 	call	0x4208	; 0x4208 <set_alarm>
    693e:	18 c0       	rjmp	.+48     	; 0x6970 <main+0x274>
	break;
      case (SET_ALARM):
	displaymode = SET_TIME;
    6940:	60 92 72 03 	sts	0x0372, r6
	set_time();
    6944:	0e 94 5a 20 	call	0x40b4	; 0x40b4 <set_time>
	timeunknown = 0;
    6948:	10 92 24 02 	sts	0x0224, r1
    694c:	11 c0       	rjmp	.+34     	; 0x6970 <main+0x274>
	break;
      case SET_TIME:
	displaymode = SET_DATE;
    694e:	90 92 72 03 	sts	0x0372, r9
	set_date();
    6952:	0e 94 d0 21 	call	0x43a0	; 0x43a0 <set_date>
    6956:	0c c0       	rjmp	.+24     	; 0x6970 <main+0x274>
	break;
      case SET_DATE:
	displaymode = SET_REGION;
    6958:	80 92 72 03 	sts	0x0372, r8
	set_region();
    695c:	0e 94 8a 22 	call	0x4514	; 0x4514 <set_region>
    6960:	07 c0       	rjmp	.+14     	; 0x6970 <main+0x274>
	break;
#ifdef BACKLIGHT_ADJUST
	  case SET_REGION:
	displaymode = SET_BRIGHTNESS;
    6962:	b0 92 72 03 	sts	0x0372, r11
	set_backlight();
    6966:	0e 94 7d 21 	call	0x42fa	; 0x42fa <set_backlight>
    696a:	02 c0       	rjmp	.+4      	; 0x6970 <main+0x274>
	break;
#endif
      default:
	displaymode = SHOW_TIME;
    696c:	10 92 72 03 	sts	0x0372, r1
	//Dataman - Changing initdisplays to initanims, need to make sure as animation may have changed.
	//initdisplay(0);
	//initanim();
      }

      if (displaymode == SHOW_TIME) {
    6970:	80 91 72 03 	lds	r24, 0x0372
    6974:	88 23       	and	r24, r24
    6976:	21 f4       	brne	.+8      	; 0x6980 <main+0x284>
	glcdClearScreen();
    6978:	0e 94 a6 2c 	call	0x594c	; 0x594c <glcdClearScreen>
	//Dataman - Changing initdisplays to initanims, need to make sure as animation may have changed.
	//initdisplay(0);
	initanim();
    697c:	0e 94 ec 27 	call	0x4fd8	; 0x4fd8 <initanim>
    6980:	10 e0       	ldi	r17, 0x00	; 0
      }
    }

    step();
    6982:	0e 94 ad 27 	call	0x4f5a	; 0x4f5a <step>
    if (displaymode == SHOW_TIME) {
    6986:	80 91 72 03 	lds	r24, 0x0372
    698a:	88 23       	and	r24, r24
    698c:	39 f5       	brne	.+78     	; 0x69dc <main+0x2e0>
      if (! inverted && alarming && (time_s & 0x1)) {
    698e:	00 23       	and	r16, r16
    6990:	69 f4       	brne	.+26     	; 0x69ac <main+0x2b0>
    6992:	80 91 71 03 	lds	r24, 0x0371
    6996:	88 23       	and	r24, r24
    6998:	69 f0       	breq	.+26     	; 0x69b4 <main+0x2b8>
    699a:	80 91 77 03 	lds	r24, 0x0377
    699e:	80 ff       	sbrs	r24, 0
    69a0:	09 c0       	rjmp	.+18     	; 0x69b4 <main+0x2b8>
	inverted = 1;
	initdisplay(inverted);
    69a2:	81 e0       	ldi	r24, 0x01	; 1
    69a4:	0e 94 cc 27 	call	0x4f98	; 0x4f98 <initdisplay>
    69a8:	01 e0       	ldi	r16, 0x01	; 1
    69aa:	18 c0       	rjmp	.+48     	; 0x69dc <main+0x2e0>
      }
      else if ((inverted && ! alarming) || (alarming && inverted && !(time_s & 0x1))) {
    69ac:	80 91 71 03 	lds	r24, 0x0371
    69b0:	88 23       	and	r24, r24
    69b2:	51 f0       	breq	.+20     	; 0x69c8 <main+0x2cc>
    69b4:	80 91 71 03 	lds	r24, 0x0371
    69b8:	88 23       	and	r24, r24
    69ba:	59 f0       	breq	.+22     	; 0x69d2 <main+0x2d6>
    69bc:	00 23       	and	r16, r16
    69be:	49 f0       	breq	.+18     	; 0x69d2 <main+0x2d6>
    69c0:	80 91 77 03 	lds	r24, 0x0377
    69c4:	80 fd       	sbrc	r24, 0
    69c6:	05 c0       	rjmp	.+10     	; 0x69d2 <main+0x2d6>
	inverted = 0;
	initdisplay(0);
    69c8:	80 e0       	ldi	r24, 0x00	; 0
    69ca:	0e 94 cc 27 	call	0x4f98	; 0x4f98 <initdisplay>
    69ce:	00 e0       	ldi	r16, 0x00	; 0
    69d0:	05 c0       	rjmp	.+10     	; 0x69dc <main+0x2e0>
      } else {
	PORTB |= _BV(5);
    69d2:	2d 9a       	sbi	0x05, 5	; 5
	drawdisplay(inverted);
    69d4:	80 2f       	mov	r24, r16
    69d6:	0e 94 23 28 	call	0x5046	; 0x5046 <drawdisplay>
	PORTB &= ~_BV(5);
    69da:	2d 98       	cbi	0x05, 5	; 5
      }
    }
  
    while (animticker);
    69dc:	80 91 73 03 	lds	r24, 0x0373
    69e0:	90 91 74 03 	lds	r25, 0x0374
    69e4:	89 2b       	or	r24, r25
    69e6:	d1 f7       	brne	.-12     	; 0x69dc <main+0x2e0>
    69e8:	1c cf       	rjmp	.-456    	; 0x6822 <main+0x126>

000069ea <uart_init>:


// Creates a 8N1 UART connect
// remember that the BBR is #defined for each F_CPU in util.h
void uart_init(uint16_t BRR) {
  UBRR0 = BRR;               // set baudrate counter
    69ea:	90 93 c5 00 	sts	0x00C5, r25
    69ee:	80 93 c4 00 	sts	0x00C4, r24

  UCSR0B = _BV(RXEN0) | _BV(TXEN0);
    69f2:	88 e1       	ldi	r24, 0x18	; 24
    69f4:	80 93 c1 00 	sts	0x00C1, r24
  UCSR0C = _BV(USBS0) | (3<<UCSZ00);
    69f8:	8e e0       	ldi	r24, 0x0E	; 14
    69fa:	80 93 c2 00 	sts	0x00C2, r24
  DDRD |= _BV(1);
    69fe:	51 9a       	sbi	0x0a, 1	; 10
  DDRD &= ~_BV(0);
    6a00:	50 98       	cbi	0x0a, 0	; 10
}
    6a02:	08 95       	ret

00006a04 <delay_10us>:

// Some basic delays...
void delay_10us(uint8_t ns)
{
    6a04:	06 c0       	rjmp	.+12     	; 0x6a12 <delay_10us+0xe>
  uint8_t i;

  while (ns != 0) {
    6a06:	90 e0       	ldi	r25, 0x00	; 0
    ns--;
    for (i=0; i< 30; i++) {
      nop;
    6a08:	00 00       	nop
{
  uint8_t i;

  while (ns != 0) {
    ns--;
    for (i=0; i< 30; i++) {
    6a0a:	9f 5f       	subi	r25, 0xFF	; 255
    6a0c:	9e 31       	cpi	r25, 0x1E	; 30
    6a0e:	e1 f7       	brne	.-8      	; 0x6a08 <delay_10us+0x4>
void delay_10us(uint8_t ns)
{
  uint8_t i;

  while (ns != 0) {
    ns--;
    6a10:	81 50       	subi	r24, 0x01	; 1
// Some basic delays...
void delay_10us(uint8_t ns)
{
  uint8_t i;

  while (ns != 0) {
    6a12:	88 23       	and	r24, r24
    6a14:	c1 f7       	brne	.-16     	; 0x6a06 <delay_10us+0x2>
    ns--;
    for (i=0; i< 30; i++) {
      nop;
    }
  }
}
    6a16:	08 95       	ret

00006a18 <delay_ms>:
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    6a18:	20 e2       	ldi	r18, 0x20	; 32
    6a1a:	3e e4       	ldi	r19, 0x4E	; 78
    6a1c:	07 c0       	rjmp	.+14     	; 0x6a2c <delay_ms+0x14>
    6a1e:	f9 01       	movw	r30, r18
    6a20:	31 97       	sbiw	r30, 0x01	; 1
    6a22:	f1 f7       	brne	.-4      	; 0x6a20 <delay_ms+0x8>
{
	uint16_t temp = ms;
	while(temp)
	{
		_delay_ms(10);
		if(temp >= 10)
    6a24:	8a 30       	cpi	r24, 0x0A	; 10
    6a26:	91 05       	cpc	r25, r1
    6a28:	18 f0       	brcs	.+6      	; 0x6a30 <delay_ms+0x18>
			temp-=10;
    6a2a:	0a 97       	sbiw	r24, 0x0a	; 10
}

void delay_ms(uint16_t ms)
{
	uint16_t temp = ms;
	while(temp)
    6a2c:	00 97       	sbiw	r24, 0x00	; 0
    6a2e:	b9 f7       	brne	.-18     	; 0x6a1e <delay_ms+0x6>
    6a30:	08 95       	ret

00006a32 <delay_s>:
    6a32:	40 e2       	ldi	r20, 0x20	; 32
    6a34:	5e e4       	ldi	r21, 0x4E	; 78
    6a36:	0c c0       	rjmp	.+24     	; 0x6a50 <delay_s+0x1e>
			temp=0;
	}
}

void delay_s(uint8_t s) {
  while (s--) {
    6a38:	28 ee       	ldi	r18, 0xE8	; 232
    6a3a:	33 e0       	ldi	r19, 0x03	; 3
    6a3c:	fa 01       	movw	r30, r20
    6a3e:	31 97       	sbiw	r30, 0x01	; 1
    6a40:	f1 f7       	brne	.-4      	; 0x6a3e <delay_s+0xc>
{
	uint16_t temp = ms;
	while(temp)
	{
		_delay_ms(10);
		if(temp >= 10)
    6a42:	2a 30       	cpi	r18, 0x0A	; 10
    6a44:	31 05       	cpc	r19, r1
    6a46:	18 f0       	brcs	.+6      	; 0x6a4e <delay_s+0x1c>
			temp-=10;
    6a48:	2a 50       	subi	r18, 0x0A	; 10
    6a4a:	30 40       	sbci	r19, 0x00	; 0
}

void delay_ms(uint16_t ms)
{
	uint16_t temp = ms;
	while(temp)
    6a4c:	b9 f7       	brne	.-18     	; 0x6a3c <delay_s+0xa>
    6a4e:	81 50       	subi	r24, 0x01	; 1
			temp=0;
	}
}

void delay_s(uint8_t s) {
  while (s--) {
    6a50:	88 23       	and	r24, r24
    6a52:	91 f7       	brne	.-28     	; 0x6a38 <delay_s+0x6>
    delay_ms(1000);
  }
}
    6a54:	08 95       	ret

00006a56 <uart_putchar>:

// Some uart functions for debugging help
int uart_putchar(char c)
{
    6a56:	98 2f       	mov	r25, r24
  loop_until_bit_is_set(UCSR0A, UDRE0);
    6a58:	80 91 c0 00 	lds	r24, 0x00C0
    6a5c:	85 ff       	sbrs	r24, 5
    6a5e:	fc cf       	rjmp	.-8      	; 0x6a58 <uart_putchar+0x2>
  UDR0 = c;
    6a60:	90 93 c6 00 	sts	0x00C6, r25
  return 0;
}
    6a64:	80 e0       	ldi	r24, 0x00	; 0
    6a66:	90 e0       	ldi	r25, 0x00	; 0
    6a68:	08 95       	ret

00006a6a <uart_getchar>:

char uart_getchar(void) {
  while (!(UCSR0A & _BV(RXC0)));
    6a6a:	80 91 c0 00 	lds	r24, 0x00C0
    6a6e:	87 ff       	sbrs	r24, 7
    6a70:	fc cf       	rjmp	.-8      	; 0x6a6a <uart_getchar>
  return UDR0;
    6a72:	80 91 c6 00 	lds	r24, 0x00C6
}
    6a76:	08 95       	ret

00006a78 <uart_getch>:

char uart_getch(void) {
  return (UCSR0A & _BV(RXC0));
    6a78:	80 91 c0 00 	lds	r24, 0x00C0
}
    6a7c:	80 78       	andi	r24, 0x80	; 128
    6a7e:	08 95       	ret

00006a80 <ROM_putstring>:

void ROM_putstring(const char *str, uint8_t nl) {
    6a80:	ac 01       	movw	r20, r24
    6a82:	20 e0       	ldi	r18, 0x00	; 0
    6a84:	07 c0       	rjmp	.+14     	; 0x6a94 <ROM_putstring+0x14>
}

// Some uart functions for debugging help
int uart_putchar(char c)
{
  loop_until_bit_is_set(UCSR0A, UDRE0);
    6a86:	80 91 c0 00 	lds	r24, 0x00C0
    6a8a:	85 ff       	sbrs	r24, 5
    6a8c:	fc cf       	rjmp	.-8      	; 0x6a86 <ROM_putstring+0x6>
  UDR0 = c;
    6a8e:	30 93 c6 00 	sts	0x00C6, r19
}

void ROM_putstring(const char *str, uint8_t nl) {
  uint8_t i;

  for (i=0; pgm_read_byte(&str[i]); i++) {
    6a92:	2f 5f       	subi	r18, 0xFF	; 255
    6a94:	fa 01       	movw	r30, r20
    6a96:	e2 0f       	add	r30, r18
    6a98:	f1 1d       	adc	r31, r1
    6a9a:	34 91       	lpm	r19, Z+
    6a9c:	33 23       	and	r19, r19
    6a9e:	99 f7       	brne	.-26     	; 0x6a86 <ROM_putstring+0x6>
    uart_putchar(pgm_read_byte(&str[i]));
  }
  if (nl) {
    6aa0:	66 23       	and	r22, r22
    6aa2:	71 f0       	breq	.+28     	; 0x6ac0 <ROM_putstring+0x40>
}

// Some uart functions for debugging help
int uart_putchar(char c)
{
  loop_until_bit_is_set(UCSR0A, UDRE0);
    6aa4:	80 91 c0 00 	lds	r24, 0x00C0
    6aa8:	85 ff       	sbrs	r24, 5
    6aaa:	fc cf       	rjmp	.-8      	; 0x6aa4 <ROM_putstring+0x24>
  UDR0 = c;
    6aac:	8a e0       	ldi	r24, 0x0A	; 10
    6aae:	80 93 c6 00 	sts	0x00C6, r24
}

// Some uart functions for debugging help
int uart_putchar(char c)
{
  loop_until_bit_is_set(UCSR0A, UDRE0);
    6ab2:	80 91 c0 00 	lds	r24, 0x00C0
    6ab6:	85 ff       	sbrs	r24, 5
    6ab8:	fc cf       	rjmp	.-8      	; 0x6ab2 <ROM_putstring+0x32>
  UDR0 = c;
    6aba:	8d e0       	ldi	r24, 0x0D	; 13
    6abc:	80 93 c6 00 	sts	0x00C6, r24
    6ac0:	08 95       	ret

00006ac2 <uart_puts>:
    uart_putchar('\n'); uart_putchar('\r');
  }
}

void uart_puts(const char* str)
{
    6ac2:	fc 01       	movw	r30, r24
    6ac4:	07 c0       	rjmp	.+14     	; 0x6ad4 <uart_puts+0x12>
}

// Some uart functions for debugging help
int uart_putchar(char c)
{
  loop_until_bit_is_set(UCSR0A, UDRE0);
    6ac6:	80 91 c0 00 	lds	r24, 0x00C0
    6aca:	85 ff       	sbrs	r24, 5
    6acc:	fc cf       	rjmp	.-8      	; 0x6ac6 <uart_puts+0x4>
}

void uart_puts(const char* str)
{
  while(*str)
    uart_putc(*str++);
    6ace:	31 96       	adiw	r30, 0x01	; 1

// Some uart functions for debugging help
int uart_putchar(char c)
{
  loop_until_bit_is_set(UCSR0A, UDRE0);
  UDR0 = c;
    6ad0:	90 93 c6 00 	sts	0x00C6, r25
  }
}

void uart_puts(const char* str)
{
  while(*str)
    6ad4:	90 81       	ld	r25, Z
    6ad6:	99 23       	and	r25, r25
    6ad8:	b1 f7       	brne	.-20     	; 0x6ac6 <uart_puts+0x4>
    uart_putc(*str++);
}
    6ada:	08 95       	ret

00006adc <uart_putc_hex>:


void uart_putc_hex(uint8_t b)
{
    6adc:	28 2f       	mov	r18, r24
  /* upper nibble */
  if((b >> 4) < 0x0a)
    6ade:	98 2f       	mov	r25, r24
    6ae0:	92 95       	swap	r25
    6ae2:	9f 70       	andi	r25, 0x0F	; 15
    6ae4:	9a 30       	cpi	r25, 0x0A	; 10
    6ae6:	30 f4       	brcc	.+12     	; 0x6af4 <uart_putc_hex+0x18>
}

// Some uart functions for debugging help
int uart_putchar(char c)
{
  loop_until_bit_is_set(UCSR0A, UDRE0);
    6ae8:	80 91 c0 00 	lds	r24, 0x00C0
    6aec:	85 ff       	sbrs	r24, 5
    6aee:	fc cf       	rjmp	.-8      	; 0x6ae8 <uart_putc_hex+0xc>

void uart_putc_hex(uint8_t b)
{
  /* upper nibble */
  if((b >> 4) < 0x0a)
    uart_putc((b >> 4) + '0');
    6af0:	90 5d       	subi	r25, 0xD0	; 208
    6af2:	05 c0       	rjmp	.+10     	; 0x6afe <uart_putc_hex+0x22>
}

// Some uart functions for debugging help
int uart_putchar(char c)
{
  loop_until_bit_is_set(UCSR0A, UDRE0);
    6af4:	80 91 c0 00 	lds	r24, 0x00C0
    6af8:	85 ff       	sbrs	r24, 5
    6afa:	fc cf       	rjmp	.-8      	; 0x6af4 <uart_putc_hex+0x18>
{
  /* upper nibble */
  if((b >> 4) < 0x0a)
    uart_putc((b >> 4) + '0');
  else
    uart_putc((b >> 4) - 0x0a + 'a');
    6afc:	99 5a       	subi	r25, 0xA9	; 169

// Some uart functions for debugging help
int uart_putchar(char c)
{
  loop_until_bit_is_set(UCSR0A, UDRE0);
  UDR0 = c;
    6afe:	90 93 c6 00 	sts	0x00C6, r25
    uart_putc((b >> 4) + '0');
  else
    uart_putc((b >> 4) - 0x0a + 'a');

  /* lower nibble */
  if((b & 0x0f) < 0x0a)
    6b02:	82 2f       	mov	r24, r18
    6b04:	90 e0       	ldi	r25, 0x00	; 0
    6b06:	8f 70       	andi	r24, 0x0F	; 15
    6b08:	90 70       	andi	r25, 0x00	; 0
    6b0a:	0a 97       	sbiw	r24, 0x0a	; 10
    6b0c:	3c f4       	brge	.+14     	; 0x6b1c <uart_putc_hex+0x40>
}

// Some uart functions for debugging help
int uart_putchar(char c)
{
  loop_until_bit_is_set(UCSR0A, UDRE0);
    6b0e:	80 91 c0 00 	lds	r24, 0x00C0
    6b12:	85 ff       	sbrs	r24, 5
    6b14:	fc cf       	rjmp	.-8      	; 0x6b0e <uart_putc_hex+0x32>
  else
    uart_putc((b >> 4) - 0x0a + 'a');

  /* lower nibble */
  if((b & 0x0f) < 0x0a)
    uart_putc((b & 0x0f) + '0');
    6b16:	2f 70       	andi	r18, 0x0F	; 15
    6b18:	20 5d       	subi	r18, 0xD0	; 208
    6b1a:	06 c0       	rjmp	.+12     	; 0x6b28 <uart_putc_hex+0x4c>
}

// Some uart functions for debugging help
int uart_putchar(char c)
{
  loop_until_bit_is_set(UCSR0A, UDRE0);
    6b1c:	80 91 c0 00 	lds	r24, 0x00C0
    6b20:	85 ff       	sbrs	r24, 5
    6b22:	fc cf       	rjmp	.-8      	; 0x6b1c <uart_putc_hex+0x40>

  /* lower nibble */
  if((b & 0x0f) < 0x0a)
    uart_putc((b & 0x0f) + '0');
  else
    uart_putc((b & 0x0f) - 0x0a + 'a');
    6b24:	2f 70       	andi	r18, 0x0F	; 15
    6b26:	29 5a       	subi	r18, 0xA9	; 169

// Some uart functions for debugging help
int uart_putchar(char c)
{
  loop_until_bit_is_set(UCSR0A, UDRE0);
  UDR0 = c;
    6b28:	20 93 c6 00 	sts	0x00C6, r18
    6b2c:	08 95       	ret

00006b2e <uart_putw_hex>:
  else
    uart_putc((b & 0x0f) - 0x0a + 'a');
}

void uart_putw_hex(uint16_t w)
{
    6b2e:	1f 93       	push	r17
    6b30:	18 2f       	mov	r17, r24
  uart_putc_hex((uint8_t) (w >> 8));
    6b32:	89 2f       	mov	r24, r25
    6b34:	0e 94 6e 35 	call	0x6adc	; 0x6adc <uart_putc_hex>
  uart_putc_hex((uint8_t) (w & 0xff));
    6b38:	81 2f       	mov	r24, r17
    6b3a:	0e 94 6e 35 	call	0x6adc	; 0x6adc <uart_putc_hex>
}
    6b3e:	1f 91       	pop	r17
    6b40:	08 95       	ret

00006b42 <uart_putdw_hex>:

void uart_putdw_hex(uint32_t dw)
{
    6b42:	ef 92       	push	r14
    6b44:	ff 92       	push	r15
    6b46:	0f 93       	push	r16
    6b48:	1f 93       	push	r17
    6b4a:	7b 01       	movw	r14, r22
    6b4c:	8c 01       	movw	r16, r24
  uart_putw_hex((uint16_t) (dw >> 16));
    6b4e:	c8 01       	movw	r24, r16
    6b50:	aa 27       	eor	r26, r26
    6b52:	bb 27       	eor	r27, r27
    6b54:	0e 94 97 35 	call	0x6b2e	; 0x6b2e <uart_putw_hex>
  uart_putw_hex((uint16_t) (dw & 0xffff));
    6b58:	c7 01       	movw	r24, r14
    6b5a:	0e 94 97 35 	call	0x6b2e	; 0x6b2e <uart_putw_hex>
}
    6b5e:	1f 91       	pop	r17
    6b60:	0f 91       	pop	r16
    6b62:	ff 90       	pop	r15
    6b64:	ef 90       	pop	r14
    6b66:	08 95       	ret

00006b68 <uart_putw_dec>:

void uart_putw_dec(uint16_t w)
{
    6b68:	0f 93       	push	r16
    6b6a:	1f 93       	push	r17
    6b6c:	cf 93       	push	r28
    6b6e:	df 93       	push	r29
    6b70:	8c 01       	movw	r16, r24
    6b72:	e0 e1       	ldi	r30, 0x10	; 16
    6b74:	f7 e2       	ldi	r31, 0x27	; 39
    6b76:	40 e0       	ldi	r20, 0x00	; 0
    6b78:	c0 e0       	ldi	r28, 0x00	; 0
    6b7a:	d0 e0       	ldi	r29, 0x00	; 0
  uint16_t num = 10000;
  uint8_t started = 0;

  while(num > 0)
    {
      uint8_t b = w / num;
    6b7c:	c8 01       	movw	r24, r16
    6b7e:	bf 01       	movw	r22, r30
    6b80:	0e 94 ea 39 	call	0x73d4	; 0x73d4 <__udivmodhi4>
    6b84:	26 2f       	mov	r18, r22
      if(b > 0 || started || num == 1)
    6b86:	66 23       	and	r22, r22
    6b88:	29 f4       	brne	.+10     	; 0x6b94 <uart_putw_dec+0x2c>
    6b8a:	44 23       	and	r20, r20
    6b8c:	19 f4       	brne	.+6      	; 0x6b94 <uart_putw_dec+0x2c>
    6b8e:	e1 30       	cpi	r30, 0x01	; 1
    6b90:	f1 05       	cpc	r31, r1
    6b92:	49 f4       	brne	.+18     	; 0x6ba6 <uart_putw_dec+0x3e>
}

// Some uart functions for debugging help
int uart_putchar(char c)
{
  loop_until_bit_is_set(UCSR0A, UDRE0);
    6b94:	80 91 c0 00 	lds	r24, 0x00C0
    6b98:	85 ff       	sbrs	r24, 5
    6b9a:	fc cf       	rjmp	.-8      	; 0x6b94 <uart_putw_dec+0x2c>
  while(num > 0)
    {
      uint8_t b = w / num;
      if(b > 0 || started || num == 1)
	{
	  uart_putc('0' + b);
    6b9c:	20 5d       	subi	r18, 0xD0	; 208

// Some uart functions for debugging help
int uart_putchar(char c)
{
  loop_until_bit_is_set(UCSR0A, UDRE0);
  UDR0 = c;
    6b9e:	20 93 c6 00 	sts	0x00C6, r18
    6ba2:	20 53       	subi	r18, 0x30	; 48
    6ba4:	41 e0       	ldi	r20, 0x01	; 1
	  uart_putc('0' + b);
	  started = 1;
	}
      w -= b * num;

      num /= 10;
    6ba6:	cf 01       	movw	r24, r30
    6ba8:	6a e0       	ldi	r22, 0x0A	; 10
    6baa:	70 e0       	ldi	r23, 0x00	; 0
    6bac:	0e 94 ea 39 	call	0x73d4	; 0x73d4 <__udivmodhi4>
    6bb0:	21 96       	adiw	r28, 0x01	; 1
void uart_putw_dec(uint16_t w)
{
  uint16_t num = 10000;
  uint8_t started = 0;

  while(num > 0)
    6bb2:	c5 30       	cpi	r28, 0x05	; 5
    6bb4:	d1 05       	cpc	r29, r1
    6bb6:	71 f0       	breq	.+28     	; 0x6bd4 <uart_putw_dec+0x6c>
      if(b > 0 || started || num == 1)
	{
	  uart_putc('0' + b);
	  started = 1;
	}
      w -= b * num;
    6bb8:	82 2f       	mov	r24, r18
    6bba:	90 e0       	ldi	r25, 0x00	; 0
    6bbc:	9c 01       	movw	r18, r24
    6bbe:	2e 9f       	mul	r18, r30
    6bc0:	c0 01       	movw	r24, r0
    6bc2:	2f 9f       	mul	r18, r31
    6bc4:	90 0d       	add	r25, r0
    6bc6:	3e 9f       	mul	r19, r30
    6bc8:	90 0d       	add	r25, r0
    6bca:	11 24       	eor	r1, r1
    6bcc:	08 1b       	sub	r16, r24
    6bce:	19 0b       	sbc	r17, r25
    6bd0:	fb 01       	movw	r30, r22
    6bd2:	d4 cf       	rjmp	.-88     	; 0x6b7c <uart_putw_dec+0x14>

      num /= 10;
    }
}
    6bd4:	df 91       	pop	r29
    6bd6:	cf 91       	pop	r28
    6bd8:	1f 91       	pop	r17
    6bda:	0f 91       	pop	r16
    6bdc:	08 95       	ret

00006bde <uart_put_dec>:

void uart_put_dec(int8_t w)
{
    6bde:	1f 93       	push	r17
    6be0:	cf 93       	push	r28
    6be2:	df 93       	push	r29
    6be4:	48 2f       	mov	r20, r24
  uint16_t num = 100;
  uint8_t started = 0;

  if (w <0 ) {
    6be6:	87 ff       	sbrs	r24, 7
    6be8:	08 c0       	rjmp	.+16     	; 0x6bfa <uart_put_dec+0x1c>
}

// Some uart functions for debugging help
int uart_putchar(char c)
{
  loop_until_bit_is_set(UCSR0A, UDRE0);
    6bea:	80 91 c0 00 	lds	r24, 0x00C0
    6bee:	85 ff       	sbrs	r24, 5
    6bf0:	fc cf       	rjmp	.-8      	; 0x6bea <uart_put_dec+0xc>
  UDR0 = c;
    6bf2:	8d e2       	ldi	r24, 0x2D	; 45
    6bf4:	80 93 c6 00 	sts	0x00C6, r24
  uint16_t num = 100;
  uint8_t started = 0;

  if (w <0 ) {
    uart_putc('-');
    w *= -1;
    6bf8:	41 95       	neg	r20
    6bfa:	e4 e6       	ldi	r30, 0x64	; 100
    6bfc:	f0 e0       	ldi	r31, 0x00	; 0
    6bfe:	10 e0       	ldi	r17, 0x00	; 0
    6c00:	c0 e0       	ldi	r28, 0x00	; 0
    6c02:	d0 e0       	ldi	r29, 0x00	; 0
  }
  while(num > 0)
    {
      int8_t b = w / num;
    6c04:	84 2f       	mov	r24, r20
    6c06:	99 27       	eor	r25, r25
    6c08:	87 fd       	sbrc	r24, 7
    6c0a:	90 95       	com	r25
    6c0c:	bf 01       	movw	r22, r30
    6c0e:	0e 94 ea 39 	call	0x73d4	; 0x73d4 <__udivmodhi4>
    6c12:	26 2f       	mov	r18, r22
      if(b > 0 || started || num == 1)
    6c14:	16 16       	cp	r1, r22
    6c16:	2c f0       	brlt	.+10     	; 0x6c22 <uart_put_dec+0x44>
    6c18:	11 23       	and	r17, r17
    6c1a:	19 f4       	brne	.+6      	; 0x6c22 <uart_put_dec+0x44>
    6c1c:	e1 30       	cpi	r30, 0x01	; 1
    6c1e:	f1 05       	cpc	r31, r1
    6c20:	49 f4       	brne	.+18     	; 0x6c34 <uart_put_dec+0x56>
}

// Some uart functions for debugging help
int uart_putchar(char c)
{
  loop_until_bit_is_set(UCSR0A, UDRE0);
    6c22:	80 91 c0 00 	lds	r24, 0x00C0
    6c26:	85 ff       	sbrs	r24, 5
    6c28:	fc cf       	rjmp	.-8      	; 0x6c22 <uart_put_dec+0x44>
  while(num > 0)
    {
      int8_t b = w / num;
      if(b > 0 || started || num == 1)
	{
	  uart_putc('0' + b);
    6c2a:	20 5d       	subi	r18, 0xD0	; 208

// Some uart functions for debugging help
int uart_putchar(char c)
{
  loop_until_bit_is_set(UCSR0A, UDRE0);
  UDR0 = c;
    6c2c:	20 93 c6 00 	sts	0x00C6, r18
    6c30:	20 53       	subi	r18, 0x30	; 48
    6c32:	11 e0       	ldi	r17, 0x01	; 1
	  uart_putc('0' + b);
	  started = 1;
	}
      w -= b * num;

      num /= 10;
    6c34:	cf 01       	movw	r24, r30
    6c36:	6a e0       	ldi	r22, 0x0A	; 10
    6c38:	70 e0       	ldi	r23, 0x00	; 0
    6c3a:	0e 94 ea 39 	call	0x73d4	; 0x73d4 <__udivmodhi4>
    6c3e:	21 96       	adiw	r28, 0x01	; 1

  if (w <0 ) {
    uart_putc('-');
    w *= -1;
  }
  while(num > 0)
    6c40:	c3 30       	cpi	r28, 0x03	; 3
    6c42:	d1 05       	cpc	r29, r1
    6c44:	31 f0       	breq	.+12     	; 0x6c52 <uart_put_dec+0x74>
      if(b > 0 || started || num == 1)
	{
	  uart_putc('0' + b);
	  started = 1;
	}
      w -= b * num;
    6c46:	2e 9f       	mul	r18, r30
    6c48:	80 2d       	mov	r24, r0
    6c4a:	11 24       	eor	r1, r1
    6c4c:	48 1b       	sub	r20, r24
    6c4e:	fb 01       	movw	r30, r22
    6c50:	d9 cf       	rjmp	.-78     	; 0x6c04 <uart_put_dec+0x26>

      num /= 10;
    }
}
    6c52:	df 91       	pop	r29
    6c54:	cf 91       	pop	r28
    6c56:	1f 91       	pop	r17
    6c58:	08 95       	ret

00006c5a <uart_putdw_dec>:

void uart_putdw_dec(uint32_t dw)
{
    6c5a:	a0 e0       	ldi	r26, 0x00	; 0
    6c5c:	b0 e0       	ldi	r27, 0x00	; 0
    6c5e:	e3 e3       	ldi	r30, 0x33	; 51
    6c60:	f6 e3       	ldi	r31, 0x36	; 54
    6c62:	0c 94 50 3a 	jmp	0x74a0	; 0x74a0 <__prologue_saves__+0x4>
    6c66:	4b 01       	movw	r8, r22
    6c68:	5c 01       	movw	r10, r24
    6c6a:	e1 2c       	mov	r14, r1
    6c6c:	9a ec       	ldi	r25, 0xCA	; 202
    6c6e:	f9 2e       	mov	r15, r25
    6c70:	9a e9       	ldi	r25, 0x9A	; 154
    6c72:	09 2f       	mov	r16, r25
    6c74:	9b e3       	ldi	r25, 0x3B	; 59
    6c76:	19 2f       	mov	r17, r25
    6c78:	44 24       	eor	r4, r4
    6c7a:	c0 e0       	ldi	r28, 0x00	; 0
    6c7c:	d0 e0       	ldi	r29, 0x00	; 0
  uint32_t num = 1000000000;
  uint8_t started = 0;

  while(num > 0)
    {
      uint8_t b = dw / num;
    6c7e:	c5 01       	movw	r24, r10
    6c80:	b4 01       	movw	r22, r8
    6c82:	a8 01       	movw	r20, r16
    6c84:	97 01       	movw	r18, r14
    6c86:	0e 94 11 3a 	call	0x7422	; 0x7422 <__udivmodsi4>
    6c8a:	d2 2e       	mov	r13, r18
      if(b > 0 || started || num == 1)
    6c8c:	22 23       	and	r18, r18
    6c8e:	41 f4       	brne	.+16     	; 0x6ca0 <uart_putdw_dec+0x46>
    6c90:	44 20       	and	r4, r4
    6c92:	31 f4       	brne	.+12     	; 0x6ca0 <uart_putdw_dec+0x46>
    6c94:	81 e0       	ldi	r24, 0x01	; 1
    6c96:	e8 16       	cp	r14, r24
    6c98:	f1 04       	cpc	r15, r1
    6c9a:	01 05       	cpc	r16, r1
    6c9c:	11 05       	cpc	r17, r1
    6c9e:	61 f4       	brne	.+24     	; 0x6cb8 <uart_putdw_dec+0x5e>
}

// Some uart functions for debugging help
int uart_putchar(char c)
{
  loop_until_bit_is_set(UCSR0A, UDRE0);
    6ca0:	80 91 c0 00 	lds	r24, 0x00C0
    6ca4:	85 ff       	sbrs	r24, 5
    6ca6:	fc cf       	rjmp	.-8      	; 0x6ca0 <uart_putdw_dec+0x46>
  while(num > 0)
    {
      uint8_t b = dw / num;
      if(b > 0 || started || num == 1)
	{
	  uart_putc('0' + b);
    6ca8:	80 e3       	ldi	r24, 0x30	; 48
    6caa:	d8 0e       	add	r13, r24

// Some uart functions for debugging help
int uart_putchar(char c)
{
  loop_until_bit_is_set(UCSR0A, UDRE0);
  UDR0 = c;
    6cac:	d0 92 c6 00 	sts	0x00C6, r13
    6cb0:	80 ed       	ldi	r24, 0xD0	; 208
    6cb2:	d8 0e       	add	r13, r24
    6cb4:	44 24       	eor	r4, r4
    6cb6:	43 94       	inc	r4
	  uart_putc('0' + b);
	  started = 1;
	}
      dw -= b * num;

      num /= 10;
    6cb8:	c8 01       	movw	r24, r16
    6cba:	b7 01       	movw	r22, r14
    6cbc:	2a e0       	ldi	r18, 0x0A	; 10
    6cbe:	30 e0       	ldi	r19, 0x00	; 0
    6cc0:	40 e0       	ldi	r20, 0x00	; 0
    6cc2:	50 e0       	ldi	r21, 0x00	; 0
    6cc4:	0e 94 11 3a 	call	0x7422	; 0x7422 <__udivmodsi4>
    6cc8:	c2 2e       	mov	r12, r18
    6cca:	73 2e       	mov	r7, r19
    6ccc:	64 2e       	mov	r6, r20
    6cce:	55 2e       	mov	r5, r21
    6cd0:	21 96       	adiw	r28, 0x01	; 1
void uart_putdw_dec(uint32_t dw)
{
  uint32_t num = 1000000000;
  uint8_t started = 0;

  while(num > 0)
    6cd2:	ca 30       	cpi	r28, 0x0A	; 10
    6cd4:	d1 05       	cpc	r29, r1
    6cd6:	a9 f0       	breq	.+42     	; 0x6d02 <uart_putdw_dec+0xa8>
      if(b > 0 || started || num == 1)
	{
	  uart_putc('0' + b);
	  started = 1;
	}
      dw -= b * num;
    6cd8:	6d 2d       	mov	r22, r13
    6cda:	70 e0       	ldi	r23, 0x00	; 0
    6cdc:	80 e0       	ldi	r24, 0x00	; 0
    6cde:	90 e0       	ldi	r25, 0x00	; 0
    6ce0:	a8 01       	movw	r20, r16
    6ce2:	97 01       	movw	r18, r14
    6ce4:	0e 94 bf 39 	call	0x737e	; 0x737e <__mulsi3>
    6ce8:	86 1a       	sub	r8, r22
    6cea:	97 0a       	sbc	r9, r23
    6cec:	a8 0a       	sbc	r10, r24
    6cee:	b9 0a       	sbc	r11, r25
    6cf0:	2c 2d       	mov	r18, r12
    6cf2:	37 2d       	mov	r19, r7
    6cf4:	46 2d       	mov	r20, r6
    6cf6:	55 2d       	mov	r21, r5
    6cf8:	c9 01       	movw	r24, r18
    6cfa:	da 01       	movw	r26, r20
    6cfc:	7c 01       	movw	r14, r24
    6cfe:	8d 01       	movw	r16, r26
    6d00:	be cf       	rjmp	.-132    	; 0x6c7e <uart_putdw_dec+0x24>

      num /= 10;
    }
}
    6d02:	cd b7       	in	r28, 0x3d	; 61
    6d04:	de b7       	in	r29, 0x3e	; 62
    6d06:	e0 e1       	ldi	r30, 0x10	; 16
    6d08:	0c 94 6c 3a 	jmp	0x74d8	; 0x74d8 <__epilogue_restores__+0x4>

00006d0c <dotw>:
#else
 // GPS Needs the DOTW function
 // This includes DOTW for GPS if DateLong disabled
 #ifdef GPSENABLE
 uint8_t dotw(uint8_t mon, uint8_t day, uint8_t yr)
  {
    6d0c:	cf 93       	push	r28
    6d0e:	df 93       	push	r29
   uint16_t month, year; 

    // Calculate day of the week
    
    month = mon;
    6d10:	c8 2f       	mov	r28, r24
    6d12:	d0 e0       	ldi	r29, 0x00	; 0
    year = 2000 + yr;
    6d14:	e4 2f       	mov	r30, r20
    6d16:	f0 e0       	ldi	r31, 0x00	; 0
    6d18:	e0 53       	subi	r30, 0x30	; 48
    6d1a:	f8 4f       	sbci	r31, 0xF8	; 248
    if (mon < 3)  {
    6d1c:	83 30       	cpi	r24, 0x03	; 3
    6d1e:	10 f4       	brcc	.+4      	; 0x6d24 <dotw+0x18>
      month += 12;
    6d20:	2c 96       	adiw	r28, 0x0c	; 12
      year -= 1;
    6d22:	31 97       	sbiw	r30, 0x01	; 1
    6d24:	26 2f       	mov	r18, r22
    6d26:	30 e0       	ldi	r19, 0x00	; 0
    6d28:	2f 5f       	subi	r18, 0xFF	; 255
    6d2a:	3f 4f       	sbci	r19, 0xFF	; 255
    6d2c:	2e 0f       	add	r18, r30
    6d2e:	3f 1f       	adc	r19, r31
    6d30:	ce 01       	movw	r24, r28
    6d32:	88 0f       	add	r24, r24
    6d34:	99 1f       	adc	r25, r25
    6d36:	28 0f       	add	r18, r24
    6d38:	39 1f       	adc	r19, r25
    6d3a:	cf 01       	movw	r24, r30
    6d3c:	96 95       	lsr	r25
    6d3e:	87 95       	ror	r24
    6d40:	96 95       	lsr	r25
    6d42:	87 95       	ror	r24
    6d44:	28 0f       	add	r18, r24
    6d46:	39 1f       	adc	r19, r25
    6d48:	cf 01       	movw	r24, r30
    6d4a:	60 e9       	ldi	r22, 0x90	; 144
    6d4c:	71 e0       	ldi	r23, 0x01	; 1
    6d4e:	0e 94 ea 39 	call	0x73d4	; 0x73d4 <__udivmodhi4>
    6d52:	26 0f       	add	r18, r22
    6d54:	37 1f       	adc	r19, r23
    6d56:	cf 01       	movw	r24, r30
    6d58:	64 e6       	ldi	r22, 0x64	; 100
    6d5a:	70 e0       	ldi	r23, 0x00	; 0
    6d5c:	0e 94 ea 39 	call	0x73d4	; 0x73d4 <__udivmodhi4>
    6d60:	26 1b       	sub	r18, r22
    6d62:	37 0b       	sbc	r19, r23
    6d64:	ae 01       	movw	r20, r28
    6d66:	4f 5f       	subi	r20, 0xFF	; 255
    6d68:	5f 4f       	sbci	r21, 0xFF	; 255
    6d6a:	ca 01       	movw	r24, r20
    6d6c:	88 0f       	add	r24, r24
    6d6e:	99 1f       	adc	r25, r25
    6d70:	84 0f       	add	r24, r20
    6d72:	95 1f       	adc	r25, r21
    6d74:	88 0f       	add	r24, r24
    6d76:	99 1f       	adc	r25, r25
    6d78:	6a e0       	ldi	r22, 0x0A	; 10
    6d7a:	70 e0       	ldi	r23, 0x00	; 0
    6d7c:	0e 94 ea 39 	call	0x73d4	; 0x73d4 <__udivmodhi4>
    6d80:	c9 01       	movw	r24, r18
    6d82:	86 0f       	add	r24, r22
    6d84:	97 1f       	adc	r25, r23
    6d86:	67 e0       	ldi	r22, 0x07	; 7
    6d88:	70 e0       	ldi	r23, 0x00	; 0
    6d8a:	0e 94 ea 39 	call	0x73d4	; 0x73d4 <__udivmodhi4>
    }
    return (day + (2 * month) + (6 * (month+1)/10) + year + (year/4) - (year/100) + (year/400) + 1) % 7;
 }
    6d8e:	df 91       	pop	r29
    6d90:	cf 91       	pop	r28
    6d92:	08 95       	ret

00006d94 <hours>:
 #endif
#endif


uint8_t hours(uint8_t h)
{
    6d94:	98 2f       	mov	r25, r24
	return (time_format == TIME_12H ? ((h + 23) % 12 + 1) : h);
    6d96:	80 91 64 03 	lds	r24, 0x0364
    6d9a:	88 23       	and	r24, r24
    6d9c:	49 f4       	brne	.+18     	; 0x6db0 <hours+0x1c>
    6d9e:	89 2f       	mov	r24, r25
    6da0:	90 e0       	ldi	r25, 0x00	; 0
    6da2:	47 96       	adiw	r24, 0x17	; 23
    6da4:	6c e0       	ldi	r22, 0x0C	; 12
    6da6:	70 e0       	ldi	r23, 0x00	; 0
    6da8:	0e 94 fe 39 	call	0x73fc	; 0x73fc <__divmodhi4>
    6dac:	98 2f       	mov	r25, r24
    6dae:	9f 5f       	subi	r25, 0xFF	; 255
}
    6db0:	89 2f       	mov	r24, r25
    6db2:	08 95       	ret

00006db4 <encipher>:

extern volatile uint8_t time_s, time_m, time_h;
uint32_t rval[2]={0,0};
uint32_t key[4];

void encipher(void) {  // Using 32 rounds of XTea encryption as a PRNG.
    6db4:	2f 92       	push	r2
    6db6:	3f 92       	push	r3
    6db8:	4f 92       	push	r4
    6dba:	5f 92       	push	r5
    6dbc:	6f 92       	push	r6
    6dbe:	7f 92       	push	r7
    6dc0:	8f 92       	push	r8
    6dc2:	9f 92       	push	r9
    6dc4:	af 92       	push	r10
    6dc6:	bf 92       	push	r11
    6dc8:	cf 92       	push	r12
    6dca:	df 92       	push	r13
    6dcc:	ef 92       	push	r14
    6dce:	ff 92       	push	r15
    6dd0:	0f 93       	push	r16
    6dd2:	1f 93       	push	r17
  uint32_t v0=rval[0], v1=rval[1], sum=0, delta=0x9E3779B9;
    6dd4:	20 90 05 03 	lds	r2, 0x0305
    6dd8:	30 90 06 03 	lds	r3, 0x0306
    6ddc:	40 90 07 03 	lds	r4, 0x0307
    6de0:	50 90 08 03 	lds	r5, 0x0308
    6de4:	60 90 09 03 	lds	r6, 0x0309
    6de8:	70 90 0a 03 	lds	r7, 0x030A
    6dec:	80 90 0b 03 	lds	r8, 0x030B
    6df0:	90 90 0c 03 	lds	r9, 0x030C
    6df4:	aa 24       	eor	r10, r10
    6df6:	bb 24       	eor	r11, r11
    6df8:	65 01       	movw	r12, r10
  for (unsigned int i=0; i < 32; i++) {
    v0 += (((v1 << 4) ^ (v1 >> 5)) + v1) ^ (sum + key[sum & 3]);
    6dfa:	f5 01       	movw	r30, r10
    6dfc:	e3 70       	andi	r30, 0x03	; 3
    6dfe:	f0 70       	andi	r31, 0x00	; 0
    6e00:	ee 0f       	add	r30, r30
    6e02:	ff 1f       	adc	r31, r31
    6e04:	ee 0f       	add	r30, r30
    6e06:	ff 1f       	adc	r31, r31
    6e08:	e6 58       	subi	r30, 0x86	; 134
    6e0a:	fc 4f       	sbci	r31, 0xFC	; 252
    6e0c:	e0 80       	ld	r14, Z
    6e0e:	f1 80       	ldd	r15, Z+1	; 0x01
    6e10:	02 81       	ldd	r16, Z+2	; 0x02
    6e12:	13 81       	ldd	r17, Z+3	; 0x03
    6e14:	ea 0c       	add	r14, r10
    6e16:	fb 1c       	adc	r15, r11
    6e18:	0c 1d       	adc	r16, r12
    6e1a:	1d 1d       	adc	r17, r13
    6e1c:	d4 01       	movw	r26, r8
    6e1e:	c3 01       	movw	r24, r6
    6e20:	75 e0       	ldi	r23, 0x05	; 5
    6e22:	b6 95       	lsr	r27
    6e24:	a7 95       	ror	r26
    6e26:	97 95       	ror	r25
    6e28:	87 95       	ror	r24
    6e2a:	7a 95       	dec	r23
    6e2c:	d1 f7       	brne	.-12     	; 0x6e22 <encipher+0x6e>
    6e2e:	a4 01       	movw	r20, r8
    6e30:	93 01       	movw	r18, r6
    6e32:	64 e0       	ldi	r22, 0x04	; 4
    6e34:	22 0f       	add	r18, r18
    6e36:	33 1f       	adc	r19, r19
    6e38:	44 1f       	adc	r20, r20
    6e3a:	55 1f       	adc	r21, r21
    6e3c:	6a 95       	dec	r22
    6e3e:	d1 f7       	brne	.-12     	; 0x6e34 <encipher+0x80>
    6e40:	82 27       	eor	r24, r18
    6e42:	93 27       	eor	r25, r19
    6e44:	a4 27       	eor	r26, r20
    6e46:	b5 27       	eor	r27, r21
    6e48:	86 0d       	add	r24, r6
    6e4a:	97 1d       	adc	r25, r7
    6e4c:	a8 1d       	adc	r26, r8
    6e4e:	b9 1d       	adc	r27, r9
    6e50:	e8 26       	eor	r14, r24
    6e52:	f9 26       	eor	r15, r25
    6e54:	0a 27       	eor	r16, r26
    6e56:	1b 27       	eor	r17, r27
    6e58:	2e 0c       	add	r2, r14
    6e5a:	3f 1c       	adc	r3, r15
    6e5c:	40 1e       	adc	r4, r16
    6e5e:	51 1e       	adc	r5, r17
    sum += delta;
    6e60:	89 eb       	ldi	r24, 0xB9	; 185
    6e62:	99 e7       	ldi	r25, 0x79	; 121
    6e64:	a7 e3       	ldi	r26, 0x37	; 55
    6e66:	be e9       	ldi	r27, 0x9E	; 158
    6e68:	a8 0e       	add	r10, r24
    6e6a:	b9 1e       	adc	r11, r25
    6e6c:	ca 1e       	adc	r12, r26
    6e6e:	db 1e       	adc	r13, r27
    v1 += (((v0 << 4) ^ (v0 >> 5)) + v0) ^ (sum + key[(sum>>11) & 3]);
    6e70:	a2 01       	movw	r20, r4
    6e72:	91 01       	movw	r18, r2
    6e74:	85 e0       	ldi	r24, 0x05	; 5
    6e76:	56 95       	lsr	r21
    6e78:	47 95       	ror	r20
    6e7a:	37 95       	ror	r19
    6e7c:	27 95       	ror	r18
    6e7e:	8a 95       	dec	r24
    6e80:	d1 f7       	brne	.-12     	; 0x6e76 <encipher+0xc2>
    6e82:	d2 01       	movw	r26, r4
    6e84:	c1 01       	movw	r24, r2
    6e86:	04 e0       	ldi	r16, 0x04	; 4
    6e88:	88 0f       	add	r24, r24
    6e8a:	99 1f       	adc	r25, r25
    6e8c:	aa 1f       	adc	r26, r26
    6e8e:	bb 1f       	adc	r27, r27
    6e90:	0a 95       	dec	r16
    6e92:	d1 f7       	brne	.-12     	; 0x6e88 <encipher+0xd4>
    6e94:	28 27       	eor	r18, r24
    6e96:	39 27       	eor	r19, r25
    6e98:	4a 27       	eor	r20, r26
    6e9a:	5b 27       	eor	r21, r27
    6e9c:	22 0d       	add	r18, r2
    6e9e:	33 1d       	adc	r19, r3
    6ea0:	44 1d       	adc	r20, r4
    6ea2:	55 1d       	adc	r21, r5
    6ea4:	d6 01       	movw	r26, r12
    6ea6:	c5 01       	movw	r24, r10
    6ea8:	1b e0       	ldi	r17, 0x0B	; 11
    6eaa:	b6 95       	lsr	r27
    6eac:	a7 95       	ror	r26
    6eae:	97 95       	ror	r25
    6eb0:	87 95       	ror	r24
    6eb2:	1a 95       	dec	r17
    6eb4:	d1 f7       	brne	.-12     	; 0x6eaa <encipher+0xf6>
    6eb6:	83 70       	andi	r24, 0x03	; 3
    6eb8:	90 70       	andi	r25, 0x00	; 0
    6eba:	88 0f       	add	r24, r24
    6ebc:	99 1f       	adc	r25, r25
    6ebe:	88 0f       	add	r24, r24
    6ec0:	99 1f       	adc	r25, r25
    6ec2:	86 58       	subi	r24, 0x86	; 134
    6ec4:	9c 4f       	sbci	r25, 0xFC	; 252
    6ec6:	fc 01       	movw	r30, r24
    6ec8:	80 81       	ld	r24, Z
    6eca:	91 81       	ldd	r25, Z+1	; 0x01
    6ecc:	a2 81       	ldd	r26, Z+2	; 0x02
    6ece:	b3 81       	ldd	r27, Z+3	; 0x03
    6ed0:	8a 0d       	add	r24, r10
    6ed2:	9b 1d       	adc	r25, r11
    6ed4:	ac 1d       	adc	r26, r12
    6ed6:	bd 1d       	adc	r27, r13
    6ed8:	28 27       	eor	r18, r24
    6eda:	39 27       	eor	r19, r25
    6edc:	4a 27       	eor	r20, r26
    6ede:	5b 27       	eor	r21, r27
    6ee0:	62 0e       	add	r6, r18
    6ee2:	73 1e       	adc	r7, r19
    6ee4:	84 1e       	adc	r8, r20
    6ee6:	95 1e       	adc	r9, r21
uint32_t rval[2]={0,0};
uint32_t key[4];

void encipher(void) {  // Using 32 rounds of XTea encryption as a PRNG.
  uint32_t v0=rval[0], v1=rval[1], sum=0, delta=0x9E3779B9;
  for (unsigned int i=0; i < 32; i++) {
    6ee8:	f0 e2       	ldi	r31, 0x20	; 32
    6eea:	af 16       	cp	r10, r31
    6eec:	f7 e3       	ldi	r31, 0x37	; 55
    6eee:	bf 06       	cpc	r11, r31
    6ef0:	ff ee       	ldi	r31, 0xEF	; 239
    6ef2:	cf 06       	cpc	r12, r31
    6ef4:	f6 ec       	ldi	r31, 0xC6	; 198
    6ef6:	df 06       	cpc	r13, r31
    6ef8:	09 f0       	breq	.+2      	; 0x6efc <encipher+0x148>
    6efa:	7f cf       	rjmp	.-258    	; 0x6dfa <encipher+0x46>
    v0 += (((v1 << 4) ^ (v1 >> 5)) + v1) ^ (sum + key[sum & 3]);
    sum += delta;
    v1 += (((v0 << 4) ^ (v0 >> 5)) + v0) ^ (sum + key[(sum>>11) & 3]);
  }
  rval[0]=v0; rval[1]=v1;
    6efc:	20 92 05 03 	sts	0x0305, r2
    6f00:	30 92 06 03 	sts	0x0306, r3
    6f04:	40 92 07 03 	sts	0x0307, r4
    6f08:	50 92 08 03 	sts	0x0308, r5
    6f0c:	60 92 09 03 	sts	0x0309, r6
    6f10:	70 92 0a 03 	sts	0x030A, r7
    6f14:	80 92 0b 03 	sts	0x030B, r8
    6f18:	90 92 0c 03 	sts	0x030C, r9
}
    6f1c:	1f 91       	pop	r17
    6f1e:	0f 91       	pop	r16
    6f20:	ff 90       	pop	r15
    6f22:	ef 90       	pop	r14
    6f24:	df 90       	pop	r13
    6f26:	cf 90       	pop	r12
    6f28:	bf 90       	pop	r11
    6f2a:	af 90       	pop	r10
    6f2c:	9f 90       	pop	r9
    6f2e:	8f 90       	pop	r8
    6f30:	7f 90       	pop	r7
    6f32:	6f 90       	pop	r6
    6f34:	5f 90       	pop	r5
    6f36:	4f 90       	pop	r4
    6f38:	3f 90       	pop	r3
    6f3a:	2f 90       	pop	r2
    6f3c:	08 95       	ret

00006f3e <init_crand_consistent>:

void init_crand_consistent(uint8_t h, uint8_t m, uint8_t s)
{
    6f3e:	cf 92       	push	r12
    6f40:	df 92       	push	r13
    6f42:	ef 92       	push	r14
    6f44:	ff 92       	push	r15
    6f46:	0f 93       	push	r16
    6f48:	1f 93       	push	r17
    6f4a:	c6 2e       	mov	r12, r22
  key[0]=0x2DE9716E;  //Initial XTEA key. Grabbed from the first 16 bytes
  key[1]=0x993FDDD1;  //of grc.com/password.  1 in 2^128 chance of seeing
  key[2]=0x2A77FB57;  //that key again there.
  key[3]=0xB172E6B0;
    6f4c:	00 eb       	ldi	r16, 0xB0	; 176
    6f4e:	16 ee       	ldi	r17, 0xE6	; 230
    6f50:	22 e7       	ldi	r18, 0x72	; 114
    6f52:	31 eb       	ldi	r19, 0xB1	; 177
    6f54:	00 93 86 03 	sts	0x0386, r16
    6f58:	10 93 87 03 	sts	0x0387, r17
    6f5c:	20 93 88 03 	sts	0x0388, r18
    6f60:	30 93 89 03 	sts	0x0389, r19
  key[0]^=s;
    6f64:	50 e0       	ldi	r21, 0x00	; 0
    6f66:	60 e0       	ldi	r22, 0x00	; 0
    6f68:	70 e0       	ldi	r23, 0x00	; 0
    6f6a:	0e e6       	ldi	r16, 0x6E	; 110
    6f6c:	11 e7       	ldi	r17, 0x71	; 113
    6f6e:	29 ee       	ldi	r18, 0xE9	; 233
    6f70:	3d e2       	ldi	r19, 0x2D	; 45
    6f72:	40 27       	eor	r20, r16
    6f74:	51 27       	eor	r21, r17
    6f76:	62 27       	eor	r22, r18
    6f78:	73 27       	eor	r23, r19
    6f7a:	40 93 7a 03 	sts	0x037A, r20
    6f7e:	50 93 7b 03 	sts	0x037B, r21
    6f82:	60 93 7c 03 	sts	0x037C, r22
    6f86:	70 93 7d 03 	sts	0x037D, r23
  key[1]^=m;
    6f8a:	dd 24       	eor	r13, r13
    6f8c:	ee 24       	eor	r14, r14
    6f8e:	ff 24       	eor	r15, r15
    6f90:	21 ed       	ldi	r18, 0xD1	; 209
    6f92:	3d ed       	ldi	r19, 0xDD	; 221
    6f94:	4f e3       	ldi	r20, 0x3F	; 63
    6f96:	59 e9       	ldi	r21, 0x99	; 153
    6f98:	c2 26       	eor	r12, r18
    6f9a:	d3 26       	eor	r13, r19
    6f9c:	e4 26       	eor	r14, r20
    6f9e:	f5 26       	eor	r15, r21
    6fa0:	c0 92 7e 03 	sts	0x037E, r12
    6fa4:	d0 92 7f 03 	sts	0x037F, r13
    6fa8:	e0 92 80 03 	sts	0x0380, r14
    6fac:	f0 92 81 03 	sts	0x0381, r15
  key[2]^=h;
    6fb0:	90 e0       	ldi	r25, 0x00	; 0
    6fb2:	a0 e0       	ldi	r26, 0x00	; 0
    6fb4:	b0 e0       	ldi	r27, 0x00	; 0
    6fb6:	27 e5       	ldi	r18, 0x57	; 87
    6fb8:	3b ef       	ldi	r19, 0xFB	; 251
    6fba:	47 e7       	ldi	r20, 0x77	; 119
    6fbc:	5a e2       	ldi	r21, 0x2A	; 42
    6fbe:	82 27       	eor	r24, r18
    6fc0:	93 27       	eor	r25, r19
    6fc2:	a4 27       	eor	r26, r20
    6fc4:	b5 27       	eor	r27, r21
    6fc6:	80 93 82 03 	sts	0x0382, r24
    6fca:	90 93 83 03 	sts	0x0383, r25
    6fce:	a0 93 84 03 	sts	0x0384, r26
    6fd2:	b0 93 85 03 	sts	0x0385, r27
  rval[0]=0;
    6fd6:	10 92 05 03 	sts	0x0305, r1
    6fda:	10 92 06 03 	sts	0x0306, r1
    6fde:	10 92 07 03 	sts	0x0307, r1
    6fe2:	10 92 08 03 	sts	0x0308, r1
  rval[1]=0;
    6fe6:	10 92 09 03 	sts	0x0309, r1
    6fea:	10 92 0a 03 	sts	0x030A, r1
    6fee:	10 92 0b 03 	sts	0x030B, r1
    6ff2:	10 92 0c 03 	sts	0x030C, r1
  encipher();
    6ff6:	0e 94 da 36 	call	0x6db4	; 0x6db4 <encipher>
}
    6ffa:	1f 91       	pop	r17
    6ffc:	0f 91       	pop	r16
    6ffe:	ff 90       	pop	r15
    7000:	ef 90       	pop	r14
    7002:	df 90       	pop	r13
    7004:	cf 90       	pop	r12
    7006:	08 95       	ret

00007008 <init_crand>:

void init_crand(void) {
  //uint32_t temp;
  init_crand_consistent(time_h,time_m,time_s);
    7008:	80 91 62 03 	lds	r24, 0x0362
    700c:	60 91 6c 03 	lds	r22, 0x036C
    7010:	40 91 77 03 	lds	r20, 0x0377
    7014:	0e 94 9f 37 	call	0x6f3e	; 0x6f3e <init_crand_consistent>
}
    7018:	08 95       	ret

0000701a <crand>:
//    wdt_reset();
//    encipher();
//    return (rval[0]^rval[1])&RAND_MAX;
//  } 
//   else
 if (type==1) {
    701a:	81 30       	cpi	r24, 0x01	; 1
    701c:	f9 f4       	brne	.+62     	; 0x705c <crand+0x42>
  	return ((rval[0]^rval[1])>>15)&3;
    701e:	80 91 09 03 	lds	r24, 0x0309
    7022:	90 91 0a 03 	lds	r25, 0x030A
    7026:	a0 91 0b 03 	lds	r26, 0x030B
    702a:	b0 91 0c 03 	lds	r27, 0x030C
    702e:	20 91 05 03 	lds	r18, 0x0305
    7032:	30 91 06 03 	lds	r19, 0x0306
    7036:	40 91 07 03 	lds	r20, 0x0307
    703a:	50 91 08 03 	lds	r21, 0x0308
    703e:	82 27       	eor	r24, r18
    7040:	93 27       	eor	r25, r19
    7042:	a4 27       	eor	r26, r20
    7044:	b5 27       	eor	r27, r21
    7046:	3f e0       	ldi	r19, 0x0F	; 15
    7048:	b6 95       	lsr	r27
    704a:	a7 95       	ror	r26
    704c:	97 95       	ror	r25
    704e:	87 95       	ror	r24
    7050:	3a 95       	dec	r19
    7052:	d1 f7       	brne	.-12     	; 0x7048 <crand+0x2e>
    7054:	9c 01       	movw	r18, r24
    7056:	23 70       	andi	r18, 0x03	; 3
    7058:	30 70       	andi	r19, 0x00	; 0
    705a:	2f c0       	rjmp	.+94     	; 0x70ba <crand+0xa0>
  } 
    else if (type==2) {
    705c:	82 30       	cpi	r24, 0x02	; 2
    705e:	f9 f4       	brne	.+62     	; 0x709e <crand+0x84>
   return ((rval[0]^rval[1])>>17)&1;
    7060:	80 91 09 03 	lds	r24, 0x0309
    7064:	90 91 0a 03 	lds	r25, 0x030A
    7068:	a0 91 0b 03 	lds	r26, 0x030B
    706c:	b0 91 0c 03 	lds	r27, 0x030C
    7070:	20 91 05 03 	lds	r18, 0x0305
    7074:	30 91 06 03 	lds	r19, 0x0306
    7078:	40 91 07 03 	lds	r20, 0x0307
    707c:	50 91 08 03 	lds	r21, 0x0308
    7080:	82 27       	eor	r24, r18
    7082:	93 27       	eor	r25, r19
    7084:	a4 27       	eor	r26, r20
    7086:	b5 27       	eor	r27, r21
    7088:	21 e1       	ldi	r18, 0x11	; 17
    708a:	b6 95       	lsr	r27
    708c:	a7 95       	ror	r26
    708e:	97 95       	ror	r25
    7090:	87 95       	ror	r24
    7092:	2a 95       	dec	r18
    7094:	d1 f7       	brne	.-12     	; 0x708a <crand+0x70>
    7096:	9c 01       	movw	r18, r24
    7098:	21 70       	andi	r18, 0x01	; 1
    709a:	30 70       	andi	r19, 0x00	; 0
    709c:	0e c0       	rjmp	.+28     	; 0x70ba <crand+0xa0>
  }
  wdt_reset();
    709e:	a8 95       	wdr
  encipher();
    70a0:	0e 94 da 36 	call	0x6db4	; 0x6db4 <encipher>
  return (rval[0]^rval[1])&RAND_MAX; 
    70a4:	20 91 09 03 	lds	r18, 0x0309
    70a8:	30 91 0a 03 	lds	r19, 0x030A
    70ac:	80 91 05 03 	lds	r24, 0x0305
    70b0:	90 91 06 03 	lds	r25, 0x0306
    70b4:	28 27       	eor	r18, r24
    70b6:	39 27       	eor	r19, r25
    70b8:	3f 77       	andi	r19, 0x7F	; 127
}
    70ba:	c9 01       	movw	r24, r18
    70bc:	08 95       	ret

000070be <intersectrect>:
    }
  }
}

uint8_t intersectrect(uint8_t x1, uint8_t y1, uint8_t w1, uint8_t h1,
		      uint8_t x2, uint8_t y2, uint8_t w2, uint8_t h2) {
    70be:	af 92       	push	r10
    70c0:	cf 92       	push	r12
    70c2:	ef 92       	push	r14
    70c4:	0f 93       	push	r16
  // yer everyday intersection tester
  // check x coord first
  if (x1+w1 < x2)
    70c6:	a8 2f       	mov	r26, r24
    70c8:	b0 e0       	ldi	r27, 0x00	; 0
    70ca:	e0 2f       	mov	r30, r16
    70cc:	f0 e0       	ldi	r31, 0x00	; 0
    70ce:	cd 01       	movw	r24, r26
    70d0:	84 0f       	add	r24, r20
    70d2:	91 1d       	adc	r25, r1
    70d4:	8e 17       	cp	r24, r30
    70d6:	9f 07       	cpc	r25, r31
    70d8:	b4 f0       	brlt	.+44     	; 0x7106 <intersectrect+0x48>
    return 0;
  if (x2+w2 < x1)
    70da:	ec 0d       	add	r30, r12
    70dc:	f1 1d       	adc	r31, r1
    70de:	ea 17       	cp	r30, r26
    70e0:	fb 07       	cpc	r31, r27
    70e2:	8c f0       	brlt	.+34     	; 0x7106 <intersectrect+0x48>
    return 0;

  // check the y coord second
  if (y1+h1 < y2)
    70e4:	70 e0       	ldi	r23, 0x00	; 0
    70e6:	4e 2d       	mov	r20, r14
    70e8:	50 e0       	ldi	r21, 0x00	; 0
    70ea:	cb 01       	movw	r24, r22
    70ec:	82 0f       	add	r24, r18
    70ee:	91 1d       	adc	r25, r1
    70f0:	84 17       	cp	r24, r20
    70f2:	95 07       	cpc	r25, r21
    70f4:	44 f0       	brlt	.+16     	; 0x7106 <intersectrect+0x48>
    70f6:	80 e0       	ldi	r24, 0x00	; 0
    70f8:	4a 0d       	add	r20, r10
    70fa:	51 1d       	adc	r21, r1
    70fc:	46 17       	cp	r20, r22
    70fe:	57 07       	cpc	r21, r23
    7100:	1c f0       	brlt	.+6      	; 0x7108 <intersectrect+0x4a>
    7102:	81 e0       	ldi	r24, 0x01	; 1
    7104:	01 c0       	rjmp	.+2      	; 0x7108 <intersectrect+0x4a>
    7106:	80 e0       	ldi	r24, 0x00	; 0
    return 0;
  if (y2+h2 < y1)
    return 0;

  return 1;
}
    7108:	0f 91       	pop	r16
    710a:	ef 90       	pop	r14
    710c:	cf 90       	pop	r12
    710e:	af 90       	pop	r10
    7110:	08 95       	ret

00007112 <add_month>:
    }
    return 0;
}

void add_month(volatile uint8_t *month, volatile uint8_t *day, uint16_t year)
{
    7112:	0f 93       	push	r16
    7114:	1f 93       	push	r17
    7116:	cf 93       	push	r28
    7118:	df 93       	push	r29
    711a:	fc 01       	movw	r30, r24
    711c:	eb 01       	movw	r28, r22
    711e:	8a 01       	movw	r16, r20
	if (*month >= 13)
    7120:	80 81       	ld	r24, Z
    7122:	8d 30       	cpi	r24, 0x0D	; 13
    7124:	10 f0       	brcs	.+4      	; 0x712a <add_month+0x18>
	  *month = 1;
    7126:	81 e0       	ldi	r24, 0x01	; 1
    7128:	80 83       	st	Z, r24
	if(*month == 2) {
    712a:	80 81       	ld	r24, Z
    712c:	82 30       	cpi	r24, 0x02	; 2
    712e:	a1 f4       	brne	.+40     	; 0x7158 <add_month+0x46>
	  if(leapyear(year) && (*day > 29))
    7130:	c8 01       	movw	r24, r16
    7132:	0e 94 0f 2e 	call	0x5c1e	; 0x5c1e <leapyear>
    7136:	88 23       	and	r24, r24
    7138:	29 f0       	breq	.+10     	; 0x7144 <add_month+0x32>
    713a:	88 81       	ld	r24, Y
    713c:	8e 31       	cpi	r24, 0x1E	; 30
    713e:	10 f0       	brcs	.+4      	; 0x7144 <add_month+0x32>
	  	*day = 29;
    7140:	8d e1       	ldi	r24, 0x1D	; 29
    7142:	1a c0       	rjmp	.+52     	; 0x7178 <add_month+0x66>
	  else if (!leapyear(year) && (*day > 28))
    7144:	c8 01       	movw	r24, r16
    7146:	0e 94 0f 2e 	call	0x5c1e	; 0x5c1e <leapyear>
    714a:	88 23       	and	r24, r24
    714c:	b1 f4       	brne	.+44     	; 0x717a <add_month+0x68>
    714e:	88 81       	ld	r24, Y
    7150:	8d 31       	cpi	r24, 0x1D	; 29
    7152:	98 f0       	brcs	.+38     	; 0x717a <add_month+0x68>
	    *day = 28;
    7154:	8c e1       	ldi	r24, 0x1C	; 28
    7156:	10 c0       	rjmp	.+32     	; 0x7178 <add_month+0x66>
	} else if ((*month == 4) || (*month == 6) || (*month == 9) || (*month == 11)) {
    7158:	80 81       	ld	r24, Z
    715a:	84 30       	cpi	r24, 0x04	; 4
    715c:	49 f0       	breq	.+18     	; 0x7170 <add_month+0x5e>
    715e:	80 81       	ld	r24, Z
    7160:	86 30       	cpi	r24, 0x06	; 6
    7162:	31 f0       	breq	.+12     	; 0x7170 <add_month+0x5e>
    7164:	80 81       	ld	r24, Z
    7166:	89 30       	cpi	r24, 0x09	; 9
    7168:	19 f0       	breq	.+6      	; 0x7170 <add_month+0x5e>
    716a:	80 81       	ld	r24, Z
    716c:	8b 30       	cpi	r24, 0x0B	; 11
    716e:	29 f4       	brne	.+10     	; 0x717a <add_month+0x68>
      if(*day > 30)
    7170:	88 81       	ld	r24, Y
    7172:	8f 31       	cpi	r24, 0x1F	; 31
    7174:	10 f0       	brcs	.+4      	; 0x717a <add_month+0x68>
      	*day = 30;
    7176:	8e e1       	ldi	r24, 0x1E	; 30
    7178:	88 83       	st	Y, r24
  }
}
    717a:	df 91       	pop	r29
    717c:	cf 91       	pop	r28
    717e:	1f 91       	pop	r17
    7180:	0f 91       	pop	r16
    7182:	08 95       	ret

00007184 <check_timeout>:
  glcdPutStr_rom(Action,NORMAL);
}

uint8_t check_timeout(void)
{
	if((displaymode != SET_TIME)&&(displaystyle<=STYLE_ROTATE))
    7184:	80 91 72 03 	lds	r24, 0x0372
    7188:	83 30       	cpi	r24, 0x03	; 3
    718a:	b9 f0       	breq	.+46     	; 0x71ba <check_timeout+0x36>
    718c:	80 91 69 03 	lds	r24, 0x0369
    7190:	89 3d       	cpi	r24, 0xD9	; 217
    7192:	98 f4       	brcc	.+38     	; 0x71ba <check_timeout+0x36>
	{
		screenmutex++;
    7194:	80 91 58 02 	lds	r24, 0x0258
    7198:	8f 5f       	subi	r24, 0xFF	; 255
    719a:	80 93 58 02 	sts	0x0258, r24
		print_time(time_h, time_m, time_s, SET_TIME);
    719e:	80 91 62 03 	lds	r24, 0x0362
    71a2:	60 91 6c 03 	lds	r22, 0x036C
    71a6:	40 91 77 03 	lds	r20, 0x0377
    71aa:	23 e0       	ldi	r18, 0x03	; 3
    71ac:	0e 94 87 1f 	call	0x3f0e	; 0x3f0e <print_time>
		screenmutex--;
    71b0:	80 91 58 02 	lds	r24, 0x0258
    71b4:	81 50       	subi	r24, 0x01	; 1
    71b6:	80 93 58 02 	sts	0x0258, r24
	}
	if (just_pressed & 0x1) { // mode change
    71ba:	80 91 54 02 	lds	r24, 0x0254
    71be:	80 ff       	sbrs	r24, 0
    71c0:	02 c0       	rjmp	.+4      	; 0x71c6 <check_timeout+0x42>
    71c2:	81 e0       	ldi	r24, 0x01	; 1
    71c4:	08 95       	ret
      return 1;
    }
    if (just_pressed || pressed) {
    71c6:	80 91 54 02 	lds	r24, 0x0254
    71ca:	88 23       	and	r24, r24
    71cc:	21 f4       	brne	.+8      	; 0x71d6 <check_timeout+0x52>
    71ce:	80 91 55 02 	lds	r24, 0x0255
    71d2:	88 23       	and	r24, r24
    71d4:	21 f0       	breq	.+8      	; 0x71de <check_timeout+0x5a>
      timeoutcounter = INACTIVITYTIMEOUT;  
    71d6:	8a e0       	ldi	r24, 0x0A	; 10
    71d8:	80 93 57 02 	sts	0x0257, r24
    71dc:	04 c0       	rjmp	.+8      	; 0x71e6 <check_timeout+0x62>
      // timeout w/no buttons pressed after 3 seconds?
    } else if (!timeoutcounter) {
    71de:	80 91 57 02 	lds	r24, 0x0257
    71e2:	88 23       	and	r24, r24
    71e4:	11 f0       	breq	.+4      	; 0x71ea <check_timeout+0x66>
    71e6:	80 e0       	ldi	r24, 0x00	; 0
    71e8:	08 95       	ret
      //timed out!
      displaymode = SHOW_TIME;     
    71ea:	10 92 72 03 	sts	0x0372, r1
    71ee:	82 e0       	ldi	r24, 0x02	; 2
      return 2;
    }
    return 0;
}
    71f0:	08 95       	ret

000071f2 <PRINT_MENU_LINE>:
 glcdFillRectangle(0, 48, GLCD_XPIXELS, 16, NORMAL);
 PRINT_MENU_LINE(6,Button1,Opt1);
 PRINT_MENU_LINE(7,Button2,Opt2);
}

void PRINT_MENU_LINE(uint8_t line, const char *Button, const char *Action){
    71f2:	ef 92       	push	r14
    71f4:	ff 92       	push	r15
    71f6:	0f 93       	push	r16
    71f8:	1f 93       	push	r17
    71fa:	98 2f       	mov	r25, r24
    71fc:	8b 01       	movw	r16, r22
    71fe:	7a 01       	movw	r14, r20
  glcdSetAddress(0, line);
    7200:	80 e0       	ldi	r24, 0x00	; 0
    7202:	69 2f       	mov	r22, r25
    7204:	0e 94 9c 2c 	call	0x5938	; 0x5938 <glcdSetAddress>
  glcdPutStr("Press ",NORMAL);
    7208:	87 ed       	ldi	r24, 0xD7	; 215
    720a:	99 e0       	ldi	r25, 0x09	; 9
    720c:	60 e0       	ldi	r22, 0x00	; 0
    720e:	0e 94 dd 28 	call	0x51ba	; 0x51ba <glcdPutStr_rom>
  glcdPutStr_rom(Button,NORMAL);
    7212:	c8 01       	movw	r24, r16
    7214:	60 e0       	ldi	r22, 0x00	; 0
    7216:	0e 94 dd 28 	call	0x51ba	; 0x51ba <glcdPutStr_rom>
  glcdPutStr(" to ",NORMAL);
    721a:	82 ed       	ldi	r24, 0xD2	; 210
    721c:	99 e0       	ldi	r25, 0x09	; 9
    721e:	60 e0       	ldi	r22, 0x00	; 0
    7220:	0e 94 dd 28 	call	0x51ba	; 0x51ba <glcdPutStr_rom>
  glcdPutStr_rom(Action,NORMAL);
    7224:	c7 01       	movw	r24, r14
    7226:	60 e0       	ldi	r22, 0x00	; 0
    7228:	0e 94 dd 28 	call	0x51ba	; 0x51ba <glcdPutStr_rom>
}
    722c:	1f 91       	pop	r17
    722e:	0f 91       	pop	r16
    7230:	ff 90       	pop	r15
    7232:	ef 90       	pop	r14
    7234:	08 95       	ret

00007236 <PRINT_MENU>:
 PRINT_MENU(PSTR("+"),Opt1,PSTR("SET"),Opt2);
 // Press + to X
 // Press SET to X
}

void PRINT_MENU(const char *Button1, const char *Opt1, const char *Button2, const char *Opt2){
    7236:	8f 92       	push	r8
    7238:	9f 92       	push	r9
    723a:	af 92       	push	r10
    723c:	bf 92       	push	r11
    723e:	cf 92       	push	r12
    7240:	df 92       	push	r13
    7242:	ef 92       	push	r14
    7244:	ff 92       	push	r15
    7246:	0f 93       	push	r16
    7248:	7c 01       	movw	r14, r24
    724a:	6b 01       	movw	r12, r22
    724c:	5a 01       	movw	r10, r20
    724e:	49 01       	movw	r8, r18
 glcdFillRectangle(0, 48, GLCD_XPIXELS, 16, NORMAL);
    7250:	80 e0       	ldi	r24, 0x00	; 0
    7252:	60 e3       	ldi	r22, 0x30	; 48
    7254:	40 e8       	ldi	r20, 0x80	; 128
    7256:	20 e1       	ldi	r18, 0x10	; 16
    7258:	00 e0       	ldi	r16, 0x00	; 0
    725a:	0e 94 05 29 	call	0x520a	; 0x520a <glcdFillRectangle>
 PRINT_MENU_LINE(6,Button1,Opt1);
    725e:	86 e0       	ldi	r24, 0x06	; 6
    7260:	b7 01       	movw	r22, r14
    7262:	a6 01       	movw	r20, r12
    7264:	0e 94 f9 38 	call	0x71f2	; 0x71f2 <PRINT_MENU_LINE>
 PRINT_MENU_LINE(7,Button2,Opt2);
    7268:	87 e0       	ldi	r24, 0x07	; 7
    726a:	b5 01       	movw	r22, r10
    726c:	a4 01       	movw	r20, r8
    726e:	0e 94 f9 38 	call	0x71f2	; 0x71f2 <PRINT_MENU_LINE>
}
    7272:	0f 91       	pop	r16
    7274:	ff 90       	pop	r15
    7276:	ef 90       	pop	r14
    7278:	df 90       	pop	r13
    727a:	cf 90       	pop	r12
    727c:	bf 90       	pop	r11
    727e:	af 90       	pop	r10
    7280:	9f 90       	pop	r9
    7282:	8f 90       	pop	r8
    7284:	08 95       	ret

00007286 <PRINT_MENU_OPTS>:
 print_menu_opts("change","save");
 // Press + to change
 // Press SET to save
}

void PRINT_MENU_OPTS(const char *Opt1, const char *Opt2){
    7286:	ac 01       	movw	r20, r24
    7288:	9b 01       	movw	r18, r22
 PRINT_MENU(PSTR("+"),Opt1,PSTR("SET"),Opt2);
    728a:	82 ee       	ldi	r24, 0xE2	; 226
    728c:	99 e0       	ldi	r25, 0x09	; 9
    728e:	ba 01       	movw	r22, r20
    7290:	4e ed       	ldi	r20, 0xDE	; 222
    7292:	59 e0       	ldi	r21, 0x09	; 9
    7294:	0e 94 1b 39 	call	0x7236	; 0x7236 <PRINT_MENU>
 // Press + to X
 // Press SET to X
}
    7298:	08 95       	ret

0000729a <print_menu_change>:
  //Press MENU to exit
  //Press SET to set
}

void print_menu_change(){
 print_menu_opts("change","save");
    729a:	89 ee       	ldi	r24, 0xE9	; 233
    729c:	99 e0       	ldi	r25, 0x09	; 9
    729e:	64 ee       	ldi	r22, 0xE4	; 228
    72a0:	79 e0       	ldi	r23, 0x09	; 9
    72a2:	0e 94 43 39 	call	0x7286	; 0x7286 <PRINT_MENU_OPTS>
 // Press + to change
 // Press SET to save
}
    72a6:	08 95       	ret

000072a8 <print_menu_exit>:
  // Press MENU to avance
  // Press SET to set
}

void print_menu_exit(){
  print_menu("MENU","exit","SET","save");
    72a8:	8e ef       	ldi	r24, 0xFE	; 254
    72aa:	99 e0       	ldi	r25, 0x09	; 9
    72ac:	69 ef       	ldi	r22, 0xF9	; 249
    72ae:	79 e0       	ldi	r23, 0x09	; 9
    72b0:	45 ef       	ldi	r20, 0xF5	; 245
    72b2:	59 e0       	ldi	r21, 0x09	; 9
    72b4:	20 ef       	ldi	r18, 0xF0	; 240
    72b6:	39 e0       	ldi	r19, 0x09	; 9
    72b8:	0e 94 1b 39 	call	0x7236	; 0x7236 <PRINT_MENU>
  //Press MENU to exit
  //Press SET to set
}
    72bc:	08 95       	ret

000072be <print_menu_advance>:
}
#endif

//Config menu related functions
void print_menu_advance(){
  print_menu("MENU","advance","SET","set");
    72be:	83 e1       	ldi	r24, 0x13	; 19
    72c0:	9a e0       	ldi	r25, 0x0A	; 10
    72c2:	6b e0       	ldi	r22, 0x0B	; 11
    72c4:	7a e0       	ldi	r23, 0x0A	; 10
    72c6:	47 e0       	ldi	r20, 0x07	; 7
    72c8:	5a e0       	ldi	r21, 0x0A	; 10
    72ca:	23 e0       	ldi	r18, 0x03	; 3
    72cc:	3a e0       	ldi	r19, 0x0A	; 10
    72ce:	0e 94 1b 39 	call	0x7236	; 0x7236 <PRINT_MENU>
  // Press MENU to avance
  // Press SET to set
}
    72d2:	08 95       	ret

000072d4 <drawbigdigit>:
  return (rval[0]^rval[1])&RAND_MAX; 
}

#ifdef RATTDEATH
extern unsigned char BigFont[];
void drawbigdigit(uint8_t x, uint8_t y, uint8_t n, uint8_t inverted) {
    72d4:	a0 e0       	ldi	r26, 0x00	; 0
    72d6:	b0 e0       	ldi	r27, 0x00	; 0
    72d8:	e0 e7       	ldi	r30, 0x70	; 112
    72da:	f9 e3       	ldi	r31, 0x39	; 57
    72dc:	0c 94 52 3a 	jmp	0x74a4	; 0x74a4 <__prologue_saves__+0x8>
    72e0:	a8 2e       	mov	r10, r24
    72e2:	66 2e       	mov	r6, r22
    72e4:	72 2e       	mov	r7, r18
  uint8_t i, j;
  uint8_t sizex=2, sizey=2;
  
#ifdef DEATHCHRON
  if(displaystyle == STYLE_DEATH)
    72e6:	80 91 69 03 	lds	r24, 0x0369
    72ea:	86 3d       	cpi	r24, 0xD6	; 214
    72ec:	29 f4       	brne	.+10     	; 0x72f8 <drawbigdigit+0x24>
    72ee:	f3 e0       	ldi	r31, 0x03	; 3
    72f0:	cf 2e       	mov	r12, r31
    72f2:	e5 e0       	ldi	r30, 0x05	; 5
    72f4:	de 2e       	mov	r13, r30
    72f6:	04 c0       	rjmp	.+8      	; 0x7300 <drawbigdigit+0x2c>
    72f8:	72 e0       	ldi	r23, 0x02	; 2
    72fa:	c7 2e       	mov	r12, r23
    72fc:	62 e0       	ldi	r22, 0x02	; 2
    72fe:	d6 2e       	mov	r13, r22
    7300:	c4 2f       	mov	r28, r20
    7302:	d0 e0       	ldi	r29, 0x00	; 0
    7304:	cc 0f       	add	r28, r28
    7306:	dd 1f       	adc	r29, r29
    7308:	cc 0f       	add	r28, r28
    730a:	dd 1f       	adc	r29, r29
    730c:	c6 5e       	subi	r28, 0xE6	; 230
    730e:	df 4f       	sbci	r29, 0xFF	; 255
    7310:	bb 24       	eor	r11, r11
  	  sizex = 3; sizey = 5;
  }
#endif
  
  for (i = 0; i < 4; i++) {
    uint8_t d = eeprom_read_byte(&BigFont[(n*4)+i]);
    7312:	ce 01       	movw	r24, r28
    7314:	0e 94 94 3a 	call	0x7528	; 0x7528 <__eerd_byte_m328p>
    7318:	16 2d       	mov	r17, r6
    731a:	47 e0       	ldi	r20, 0x07	; 7
    731c:	e4 2e       	mov	r14, r20
    731e:	f1 2c       	mov	r15, r1
    for (j=0; j<8; j++) {
      if (d & _BV(7-j)) {
    7320:	88 2e       	mov	r8, r24
    7322:	99 24       	eor	r9, r9
    7324:	c4 01       	movw	r24, r8
    7326:	0e 2c       	mov	r0, r14
    7328:	02 c0       	rjmp	.+4      	; 0x732e <drawbigdigit+0x5a>
    732a:	95 95       	asr	r25
    732c:	87 95       	ror	r24
    732e:	0a 94       	dec	r0
    7330:	e2 f7       	brpl	.-8      	; 0x732a <drawbigdigit+0x56>
    7332:	80 ff       	sbrs	r24, 0
    7334:	09 c0       	rjmp	.+18     	; 0x7348 <drawbigdigit+0x74>
	glcdFillRectangle(x+i*sizex, y+j*sizey, sizex, sizey, !inverted);
    7336:	00 e0       	ldi	r16, 0x00	; 0
    7338:	77 20       	and	r7, r7
    733a:	09 f4       	brne	.+2      	; 0x733e <drawbigdigit+0x6a>
    733c:	01 e0       	ldi	r16, 0x01	; 1
    733e:	8a 2d       	mov	r24, r10
    7340:	61 2f       	mov	r22, r17
    7342:	4c 2d       	mov	r20, r12
    7344:	2d 2d       	mov	r18, r13
    7346:	05 c0       	rjmp	.+10     	; 0x7352 <drawbigdigit+0x7e>
      } else {
	glcdFillRectangle(x+i*sizex, y+j*sizey, sizex, sizey, inverted);
    7348:	8a 2d       	mov	r24, r10
    734a:	61 2f       	mov	r22, r17
    734c:	4c 2d       	mov	r20, r12
    734e:	2d 2d       	mov	r18, r13
    7350:	07 2d       	mov	r16, r7
    7352:	0e 94 05 29 	call	0x520a	; 0x520a <glcdFillRectangle>
    7356:	08 94       	sec
    7358:	e1 08       	sbc	r14, r1
    735a:	f1 08       	sbc	r15, r1
    735c:	1d 0d       	add	r17, r13
  }
#endif
  
  for (i = 0; i < 4; i++) {
    uint8_t d = eeprom_read_byte(&BigFont[(n*4)+i]);
    for (j=0; j<8; j++) {
    735e:	8f ef       	ldi	r24, 0xFF	; 255
    7360:	e8 16       	cp	r14, r24
    7362:	8f ef       	ldi	r24, 0xFF	; 255
    7364:	f8 06       	cpc	r15, r24
    7366:	f1 f6       	brne	.-68     	; 0x7324 <drawbigdigit+0x50>
  {
  	  sizex = 3; sizey = 5;
  }
#endif
  
  for (i = 0; i < 4; i++) {
    7368:	b3 94       	inc	r11
    736a:	21 96       	adiw	r28, 0x01	; 1
    736c:	ac 0c       	add	r10, r12
    736e:	84 e0       	ldi	r24, 0x04	; 4
    7370:	b8 16       	cp	r11, r24
    7372:	79 f6       	brne	.-98     	; 0x7312 <drawbigdigit+0x3e>
      } else {
	glcdFillRectangle(x+i*sizex, y+j*sizey, sizex, sizey, inverted);
      }
    }
  }
}
    7374:	cd b7       	in	r28, 0x3d	; 61
    7376:	de b7       	in	r29, 0x3e	; 62
    7378:	ee e0       	ldi	r30, 0x0E	; 14
    737a:	0c 94 6e 3a 	jmp	0x74dc	; 0x74dc <__epilogue_restores__+0x8>

0000737e <__mulsi3>:
    737e:	62 9f       	mul	r22, r18
    7380:	d0 01       	movw	r26, r0
    7382:	73 9f       	mul	r23, r19
    7384:	f0 01       	movw	r30, r0
    7386:	82 9f       	mul	r24, r18
    7388:	e0 0d       	add	r30, r0
    738a:	f1 1d       	adc	r31, r1
    738c:	64 9f       	mul	r22, r20
    738e:	e0 0d       	add	r30, r0
    7390:	f1 1d       	adc	r31, r1
    7392:	92 9f       	mul	r25, r18
    7394:	f0 0d       	add	r31, r0
    7396:	83 9f       	mul	r24, r19
    7398:	f0 0d       	add	r31, r0
    739a:	74 9f       	mul	r23, r20
    739c:	f0 0d       	add	r31, r0
    739e:	65 9f       	mul	r22, r21
    73a0:	f0 0d       	add	r31, r0
    73a2:	99 27       	eor	r25, r25
    73a4:	72 9f       	mul	r23, r18
    73a6:	b0 0d       	add	r27, r0
    73a8:	e1 1d       	adc	r30, r1
    73aa:	f9 1f       	adc	r31, r25
    73ac:	63 9f       	mul	r22, r19
    73ae:	b0 0d       	add	r27, r0
    73b0:	e1 1d       	adc	r30, r1
    73b2:	f9 1f       	adc	r31, r25
    73b4:	bd 01       	movw	r22, r26
    73b6:	cf 01       	movw	r24, r30
    73b8:	11 24       	eor	r1, r1
    73ba:	08 95       	ret

000073bc <__udivmodqi4>:
    73bc:	99 1b       	sub	r25, r25
    73be:	79 e0       	ldi	r23, 0x09	; 9
    73c0:	04 c0       	rjmp	.+8      	; 0x73ca <__udivmodqi4_ep>

000073c2 <__udivmodqi4_loop>:
    73c2:	99 1f       	adc	r25, r25
    73c4:	96 17       	cp	r25, r22
    73c6:	08 f0       	brcs	.+2      	; 0x73ca <__udivmodqi4_ep>
    73c8:	96 1b       	sub	r25, r22

000073ca <__udivmodqi4_ep>:
    73ca:	88 1f       	adc	r24, r24
    73cc:	7a 95       	dec	r23
    73ce:	c9 f7       	brne	.-14     	; 0x73c2 <__udivmodqi4_loop>
    73d0:	80 95       	com	r24
    73d2:	08 95       	ret

000073d4 <__udivmodhi4>:
    73d4:	aa 1b       	sub	r26, r26
    73d6:	bb 1b       	sub	r27, r27
    73d8:	51 e1       	ldi	r21, 0x11	; 17
    73da:	07 c0       	rjmp	.+14     	; 0x73ea <__udivmodhi4_ep>

000073dc <__udivmodhi4_loop>:
    73dc:	aa 1f       	adc	r26, r26
    73de:	bb 1f       	adc	r27, r27
    73e0:	a6 17       	cp	r26, r22
    73e2:	b7 07       	cpc	r27, r23
    73e4:	10 f0       	brcs	.+4      	; 0x73ea <__udivmodhi4_ep>
    73e6:	a6 1b       	sub	r26, r22
    73e8:	b7 0b       	sbc	r27, r23

000073ea <__udivmodhi4_ep>:
    73ea:	88 1f       	adc	r24, r24
    73ec:	99 1f       	adc	r25, r25
    73ee:	5a 95       	dec	r21
    73f0:	a9 f7       	brne	.-22     	; 0x73dc <__udivmodhi4_loop>
    73f2:	80 95       	com	r24
    73f4:	90 95       	com	r25
    73f6:	bc 01       	movw	r22, r24
    73f8:	cd 01       	movw	r24, r26
    73fa:	08 95       	ret

000073fc <__divmodhi4>:
    73fc:	97 fb       	bst	r25, 7
    73fe:	09 2e       	mov	r0, r25
    7400:	07 26       	eor	r0, r23
    7402:	0a d0       	rcall	.+20     	; 0x7418 <__divmodhi4_neg1>
    7404:	77 fd       	sbrc	r23, 7
    7406:	04 d0       	rcall	.+8      	; 0x7410 <__divmodhi4_neg2>
    7408:	e5 df       	rcall	.-54     	; 0x73d4 <__udivmodhi4>
    740a:	06 d0       	rcall	.+12     	; 0x7418 <__divmodhi4_neg1>
    740c:	00 20       	and	r0, r0
    740e:	1a f4       	brpl	.+6      	; 0x7416 <__divmodhi4_exit>

00007410 <__divmodhi4_neg2>:
    7410:	70 95       	com	r23
    7412:	61 95       	neg	r22
    7414:	7f 4f       	sbci	r23, 0xFF	; 255

00007416 <__divmodhi4_exit>:
    7416:	08 95       	ret

00007418 <__divmodhi4_neg1>:
    7418:	f6 f7       	brtc	.-4      	; 0x7416 <__divmodhi4_exit>
    741a:	90 95       	com	r25
    741c:	81 95       	neg	r24
    741e:	9f 4f       	sbci	r25, 0xFF	; 255
    7420:	08 95       	ret

00007422 <__udivmodsi4>:
    7422:	a1 e2       	ldi	r26, 0x21	; 33
    7424:	1a 2e       	mov	r1, r26
    7426:	aa 1b       	sub	r26, r26
    7428:	bb 1b       	sub	r27, r27
    742a:	fd 01       	movw	r30, r26
    742c:	0d c0       	rjmp	.+26     	; 0x7448 <__udivmodsi4_ep>

0000742e <__udivmodsi4_loop>:
    742e:	aa 1f       	adc	r26, r26
    7430:	bb 1f       	adc	r27, r27
    7432:	ee 1f       	adc	r30, r30
    7434:	ff 1f       	adc	r31, r31
    7436:	a2 17       	cp	r26, r18
    7438:	b3 07       	cpc	r27, r19
    743a:	e4 07       	cpc	r30, r20
    743c:	f5 07       	cpc	r31, r21
    743e:	20 f0       	brcs	.+8      	; 0x7448 <__udivmodsi4_ep>
    7440:	a2 1b       	sub	r26, r18
    7442:	b3 0b       	sbc	r27, r19
    7444:	e4 0b       	sbc	r30, r20
    7446:	f5 0b       	sbc	r31, r21

00007448 <__udivmodsi4_ep>:
    7448:	66 1f       	adc	r22, r22
    744a:	77 1f       	adc	r23, r23
    744c:	88 1f       	adc	r24, r24
    744e:	99 1f       	adc	r25, r25
    7450:	1a 94       	dec	r1
    7452:	69 f7       	brne	.-38     	; 0x742e <__udivmodsi4_loop>
    7454:	60 95       	com	r22
    7456:	70 95       	com	r23
    7458:	80 95       	com	r24
    745a:	90 95       	com	r25
    745c:	9b 01       	movw	r18, r22
    745e:	ac 01       	movw	r20, r24
    7460:	bd 01       	movw	r22, r26
    7462:	cf 01       	movw	r24, r30
    7464:	08 95       	ret

00007466 <__divmodsi4>:
    7466:	97 fb       	bst	r25, 7
    7468:	09 2e       	mov	r0, r25
    746a:	05 26       	eor	r0, r21
    746c:	0e d0       	rcall	.+28     	; 0x748a <__divmodsi4_neg1>
    746e:	57 fd       	sbrc	r21, 7
    7470:	04 d0       	rcall	.+8      	; 0x747a <__divmodsi4_neg2>
    7472:	d7 df       	rcall	.-82     	; 0x7422 <__udivmodsi4>
    7474:	0a d0       	rcall	.+20     	; 0x748a <__divmodsi4_neg1>
    7476:	00 1c       	adc	r0, r0
    7478:	38 f4       	brcc	.+14     	; 0x7488 <__divmodsi4_exit>

0000747a <__divmodsi4_neg2>:
    747a:	50 95       	com	r21
    747c:	40 95       	com	r20
    747e:	30 95       	com	r19
    7480:	21 95       	neg	r18
    7482:	3f 4f       	sbci	r19, 0xFF	; 255
    7484:	4f 4f       	sbci	r20, 0xFF	; 255
    7486:	5f 4f       	sbci	r21, 0xFF	; 255

00007488 <__divmodsi4_exit>:
    7488:	08 95       	ret

0000748a <__divmodsi4_neg1>:
    748a:	f6 f7       	brtc	.-4      	; 0x7488 <__divmodsi4_exit>
    748c:	90 95       	com	r25
    748e:	80 95       	com	r24
    7490:	70 95       	com	r23
    7492:	61 95       	neg	r22
    7494:	7f 4f       	sbci	r23, 0xFF	; 255
    7496:	8f 4f       	sbci	r24, 0xFF	; 255
    7498:	9f 4f       	sbci	r25, 0xFF	; 255
    749a:	08 95       	ret

0000749c <__prologue_saves__>:
    749c:	2f 92       	push	r2
    749e:	3f 92       	push	r3
    74a0:	4f 92       	push	r4
    74a2:	5f 92       	push	r5
    74a4:	6f 92       	push	r6
    74a6:	7f 92       	push	r7
    74a8:	8f 92       	push	r8
    74aa:	9f 92       	push	r9
    74ac:	af 92       	push	r10
    74ae:	bf 92       	push	r11
    74b0:	cf 92       	push	r12
    74b2:	df 92       	push	r13
    74b4:	ef 92       	push	r14
    74b6:	ff 92       	push	r15
    74b8:	0f 93       	push	r16
    74ba:	1f 93       	push	r17
    74bc:	cf 93       	push	r28
    74be:	df 93       	push	r29
    74c0:	cd b7       	in	r28, 0x3d	; 61
    74c2:	de b7       	in	r29, 0x3e	; 62
    74c4:	ca 1b       	sub	r28, r26
    74c6:	db 0b       	sbc	r29, r27
    74c8:	0f b6       	in	r0, 0x3f	; 63
    74ca:	f8 94       	cli
    74cc:	de bf       	out	0x3e, r29	; 62
    74ce:	0f be       	out	0x3f, r0	; 63
    74d0:	cd bf       	out	0x3d, r28	; 61
    74d2:	09 94       	ijmp

000074d4 <__epilogue_restores__>:
    74d4:	2a 88       	ldd	r2, Y+18	; 0x12
    74d6:	39 88       	ldd	r3, Y+17	; 0x11
    74d8:	48 88       	ldd	r4, Y+16	; 0x10
    74da:	5f 84       	ldd	r5, Y+15	; 0x0f
    74dc:	6e 84       	ldd	r6, Y+14	; 0x0e
    74de:	7d 84       	ldd	r7, Y+13	; 0x0d
    74e0:	8c 84       	ldd	r8, Y+12	; 0x0c
    74e2:	9b 84       	ldd	r9, Y+11	; 0x0b
    74e4:	aa 84       	ldd	r10, Y+10	; 0x0a
    74e6:	b9 84       	ldd	r11, Y+9	; 0x09
    74e8:	c8 84       	ldd	r12, Y+8	; 0x08
    74ea:	df 80       	ldd	r13, Y+7	; 0x07
    74ec:	ee 80       	ldd	r14, Y+6	; 0x06
    74ee:	fd 80       	ldd	r15, Y+5	; 0x05
    74f0:	0c 81       	ldd	r16, Y+4	; 0x04
    74f2:	1b 81       	ldd	r17, Y+3	; 0x03
    74f4:	aa 81       	ldd	r26, Y+2	; 0x02
    74f6:	b9 81       	ldd	r27, Y+1	; 0x01
    74f8:	ce 0f       	add	r28, r30
    74fa:	d1 1d       	adc	r29, r1
    74fc:	0f b6       	in	r0, 0x3f	; 63
    74fe:	f8 94       	cli
    7500:	de bf       	out	0x3e, r29	; 62
    7502:	0f be       	out	0x3f, r0	; 63
    7504:	cd bf       	out	0x3d, r28	; 61
    7506:	ed 01       	movw	r28, r26
    7508:	08 95       	ret

0000750a <__tablejump2__>:
    750a:	ee 0f       	add	r30, r30
    750c:	ff 1f       	adc	r31, r31

0000750e <__tablejump__>:
    750e:	05 90       	lpm	r0, Z+
    7510:	f4 91       	lpm	r31, Z+
    7512:	e0 2d       	mov	r30, r0
    7514:	09 94       	ijmp

00007516 <strcmp>:
    7516:	fb 01       	movw	r30, r22
    7518:	dc 01       	movw	r26, r24
    751a:	8d 91       	ld	r24, X+
    751c:	01 90       	ld	r0, Z+
    751e:	80 19       	sub	r24, r0
    7520:	01 10       	cpse	r0, r1
    7522:	d9 f3       	breq	.-10     	; 0x751a <strcmp+0x4>
    7524:	99 0b       	sbc	r25, r25
    7526:	08 95       	ret

00007528 <__eerd_byte_m328p>:
    7528:	f9 99       	sbic	0x1f, 1	; 31
    752a:	fe cf       	rjmp	.-4      	; 0x7528 <__eerd_byte_m328p>
    752c:	92 bd       	out	0x22, r25	; 34
    752e:	81 bd       	out	0x21, r24	; 33
    7530:	f8 9a       	sbi	0x1f, 0	; 31
    7532:	99 27       	eor	r25, r25
    7534:	80 b5       	in	r24, 0x20	; 32
    7536:	08 95       	ret

00007538 <__eerd_word_m328p>:
    7538:	a8 e1       	ldi	r26, 0x18	; 24
    753a:	b0 e0       	ldi	r27, 0x00	; 0
    753c:	42 e0       	ldi	r20, 0x02	; 2
    753e:	50 e0       	ldi	r21, 0x00	; 0
    7540:	0c 94 b7 3a 	jmp	0x756e	; 0x756e <__eerd_blraw_m328p>

00007544 <__eewr_byte_m328p>:
    7544:	26 2f       	mov	r18, r22

00007546 <__eewr_r18_m328p>:
    7546:	f9 99       	sbic	0x1f, 1	; 31
    7548:	fe cf       	rjmp	.-4      	; 0x7546 <__eewr_r18_m328p>
    754a:	1f ba       	out	0x1f, r1	; 31
    754c:	92 bd       	out	0x22, r25	; 34
    754e:	81 bd       	out	0x21, r24	; 33
    7550:	20 bd       	out	0x20, r18	; 32
    7552:	0f b6       	in	r0, 0x3f	; 63
    7554:	f8 94       	cli
    7556:	fa 9a       	sbi	0x1f, 2	; 31
    7558:	f9 9a       	sbi	0x1f, 1	; 31
    755a:	0f be       	out	0x3f, r0	; 63
    755c:	01 96       	adiw	r24, 0x01	; 1
    755e:	08 95       	ret

00007560 <__eewr_word_m328p>:
    7560:	0e 94 a2 3a 	call	0x7544	; 0x7544 <__eewr_byte_m328p>
    7564:	27 2f       	mov	r18, r23
    7566:	0c 94 a3 3a 	jmp	0x7546	; 0x7546 <__eewr_r18_m328p>

0000756a <__eerd_block_m328p>:
    756a:	dc 01       	movw	r26, r24
    756c:	cb 01       	movw	r24, r22

0000756e <__eerd_blraw_m328p>:
    756e:	fc 01       	movw	r30, r24
    7570:	f9 99       	sbic	0x1f, 1	; 31
    7572:	fe cf       	rjmp	.-4      	; 0x7570 <__eerd_blraw_m328p+0x2>
    7574:	06 c0       	rjmp	.+12     	; 0x7582 <__eerd_blraw_m328p+0x14>
    7576:	f2 bd       	out	0x22, r31	; 34
    7578:	e1 bd       	out	0x21, r30	; 33
    757a:	f8 9a       	sbi	0x1f, 0	; 31
    757c:	31 96       	adiw	r30, 0x01	; 1
    757e:	00 b4       	in	r0, 0x20	; 32
    7580:	0d 92       	st	X+, r0
    7582:	41 50       	subi	r20, 0x01	; 1
    7584:	50 40       	sbci	r21, 0x00	; 0
    7586:	b8 f7       	brcc	.-18     	; 0x7576 <__eerd_blraw_m328p+0x8>
    7588:	08 95       	ret

0000758a <_exit>:
    758a:	f8 94       	cli

0000758c <__stop_program>:
    758c:	ff cf       	rjmp	.-2      	; 0x758c <__stop_program>
